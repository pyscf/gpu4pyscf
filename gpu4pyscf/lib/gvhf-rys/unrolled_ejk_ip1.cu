#include "vhf.cuh"
#include "rys_roots_unrolled.cu"
#include "create_tasks_ip1.cu"


__device__ static
void _rys_ejk_ip1_0000(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int *ao_loc = envs.ao_loc;
    int nbas = envs.nbas;
    int nao = ao_loc[nbas];
    int *bas = envs.bas;
    double *env = envs.env;
    double omega = env[PTR_RANGE_OMEGA];
    double *vj = jk.vj;
    double *vk = jk.vk;
    double *dm = jk.dm;
    extern __shared__ double dm_cache[];
    double *Rpa_cicj = dm_cache + 1 * TILE2;
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env + bas[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env + bas[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    int ij = sq_id / TILE2;
    if (ij < 1) {
        int i = ij % 1;
        int j = ij / 1;
        int sh_ij = sq_id % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        if (jk.n_dm == 1) {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i];
        } else {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i] + dm[(nao+j0+j)*nao+i0+i];
        }
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        if (ish*nbas+jsh == ksh*nbas+lsh) fac_sym *= .5;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        int k0 = ao_loc[ksh];
        int l0 = ao_loc[lsh];
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env + bas[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env + bas[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env + bas[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env + bas[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
        double vj_grad_ix = 0;
        double vj_grad_iy = 0;
        double vj_grad_iz = 0;
        double vj_grad_jx = 0;
        double vj_grad_jy = 0;
        double vj_grad_jz = 0;
        double vj_grad_kx = 0;
        double vj_grad_ky = 0;
        double vj_grad_kz = 0;
        double vj_grad_lx = 0;
        double vj_grad_ly = 0;
        double vj_grad_lz = 0;
        double vk_grad_ix = 0;
        double vk_grad_iy = 0;
        double vk_grad_iz = 0;
        double vk_grad_jx = 0;
        double vk_grad_jy = 0;
        double vk_grad_jz = 0;
        double vk_grad_kx = 0;
        double vk_grad_ky = 0;
        double vk_grad_kz = 0;
        double vk_grad_lx = 0;
        double vk_grad_ly = 0;
        double vk_grad_lz = 0;
        double dm_lk_0_0 = dm[(l0+0)*nao+(k0+0)];
        if (jk.n_dm > 1) {
            int nao2 = nao * nao;
            dm_lk_0_0 += dm[nao2+(l0+0)*nao+(k0+0)];
        }
        double dm_jk_0_0 = dm[(j0+0)*nao+(k0+0)];
        double dm_jl_0_0 = dm[(j0+0)*nao+(l0+0)];
        double dm_ik_0_0 = dm[(i0+0)*nao+(k0+0)];
        double dm_il_0_0 = dm[(i0+0)*nao+(l0+0)];
        double dd_jk, dd_jl, vj_dd, vk_dd;
        double prod_xy;
        double prod_xz;
        double prod_yz;
        double fxi;
        double fyi;
        double fzi;
        double fxj;
        double fyj;
        double fzj;
        double fxk;
        double fyk;
        double fzk;
        double fxl;
        double fyl;
        double fzl;
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double ak2 = ak * 2;
            double al2 = al * 2;
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double ai2 = ai * 2;
                double aj2 = aj * 2;
                double aij = ai + aj;
                double xjxi = rj[0] - ri[0];
                double yjyi = rj[1] - ri[1];
                double zjzi = rj[2] - ri[2];
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa; // (ai*xi+aj*xj)/aij
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(1, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(1, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 1; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                __syncthreads();
                if (task_id < ntasks) {
                    for (int irys = 0; irys < 1; ++irys) {
                        double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                        double rt = rw[sq_id +  2*irys   *nsq_per_block];
                        double rt_aa = rt / (aij + akl);
                        prod_xy = fac * 1;
                        prod_xz = fac * wt;
                        prod_yz = 1 * wt;
                        double rt_aij = rt_aa * akl;
                        double c0x = xpa - xpq*rt_aij;
                        double trr_10x = c0x * fac;
                        fxi = ai2 * prod_yz * trr_10x;
                        double c0y = ypa - ypq*rt_aij;
                        double trr_10y = c0y * 1;
                        fyi = ai2 * prod_xz * trr_10y;
                        double c0z = zpa - zpq*rt_aij;
                        double trr_10z = c0z * wt;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0100x = trr_10x - xjxi * fac;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        double hrr_0100y = trr_10y - yjyi * 1;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0100z = trr_10z - zjzi * wt;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double rt_akl = rt_aa * aij;
                        double cpx = xqc + xpq*rt_akl;
                        double trr_01x = cpx * fac;
                        fxk = ak2 * prod_yz * trr_01x;
                        double cpy = yqc + ypq*rt_akl;
                        double trr_01y = cpy * 1;
                        fyk = ak2 * prod_xz * trr_01y;
                        double cpz = zqc + zpq*rt_akl;
                        double trr_01z = cpz * wt;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_0001x = trr_01x - xlxk * fac;
                        fxl = al2 * prod_yz * hrr_0001x;
                        double hrr_0001y = trr_01y - ylyk * 1;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0001z = trr_01z - zlzk * wt;
                        fzl = al2 * prod_xy * hrr_0001z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                    }
                }
            }
        }
        int ia = bas[ish*BAS_SLOTS+ATOM_OF];
        int ja = bas[jsh*BAS_SLOTS+ATOM_OF];
        int ka = bas[ksh*BAS_SLOTS+ATOM_OF];
        int la = bas[lsh*BAS_SLOTS+ATOM_OF];
        if (vj != NULL) {
            atomicAdd(vj+ia*3+0, vj_grad_ix);
            atomicAdd(vj+ia*3+1, vj_grad_iy);
            atomicAdd(vj+ia*3+2, vj_grad_iz);
            atomicAdd(vj+ja*3+0, vj_grad_jx);
            atomicAdd(vj+ja*3+1, vj_grad_jy);
            atomicAdd(vj+ja*3+2, vj_grad_jz);
            atomicAdd(vj+ka*3+0, vj_grad_kx);
            atomicAdd(vj+ka*3+1, vj_grad_ky);
            atomicAdd(vj+ka*3+2, vj_grad_kz);
            atomicAdd(vj+la*3+0, vj_grad_lx);
            atomicAdd(vj+la*3+1, vj_grad_ly);
            atomicAdd(vj+la*3+2, vj_grad_lz);
        }
        if (vk != NULL) {
            atomicAdd(vk+ia*3+0, vk_grad_ix);
            atomicAdd(vk+ia*3+1, vk_grad_iy);
            atomicAdd(vk+ia*3+2, vk_grad_iz);
            atomicAdd(vk+ja*3+0, vk_grad_jx);
            atomicAdd(vk+ja*3+1, vk_grad_jy);
            atomicAdd(vk+ja*3+2, vk_grad_jz);
            atomicAdd(vk+ka*3+0, vk_grad_kx);
            atomicAdd(vk+ka*3+1, vk_grad_ky);
            atomicAdd(vk+ka*3+2, vk_grad_kz);
            atomicAdd(vk+la*3+0, vk_grad_lx);
            atomicAdd(vk+la*3+1, vk_grad_ly);
            atomicAdd(vk+la*3+2, vk_grad_lz);
        }
    }
}
__global__
void rys_ejk_ip1_0000(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int nbas = envs.nbas;
        int ntasks = _fill_ejk_tasks(shl_quartet_idx, envs, jk, bounds,
                                     batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas_tiles = nbas / TILE;
            int tile_i = tile_ij / nbas_tiles;
            int tile_j = tile_ij % nbas_tiles;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_ejk_ip1_0000(envs, jk, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_ejk_ip1_1000(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int *ao_loc = envs.ao_loc;
    int nbas = envs.nbas;
    int nao = ao_loc[nbas];
    int *bas = envs.bas;
    double *env = envs.env;
    double omega = env[PTR_RANGE_OMEGA];
    double *vj = jk.vj;
    double *vk = jk.vk;
    double *dm = jk.dm;
    extern __shared__ double dm_cache[];
    double *Rpa_cicj = dm_cache + 3 * TILE2;
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env + bas[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env + bas[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    int ij = sq_id / TILE2;
    if (ij < 3) {
        int i = ij % 3;
        int j = ij / 3;
        int sh_ij = sq_id % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        if (jk.n_dm == 1) {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i];
        } else {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i] + dm[(nao+j0+j)*nao+i0+i];
        }
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        if (ish*nbas+jsh == ksh*nbas+lsh) fac_sym *= .5;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        int k0 = ao_loc[ksh];
        int l0 = ao_loc[lsh];
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env + bas[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env + bas[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env + bas[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env + bas[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
        double vj_grad_ix = 0;
        double vj_grad_iy = 0;
        double vj_grad_iz = 0;
        double vj_grad_jx = 0;
        double vj_grad_jy = 0;
        double vj_grad_jz = 0;
        double vj_grad_kx = 0;
        double vj_grad_ky = 0;
        double vj_grad_kz = 0;
        double vj_grad_lx = 0;
        double vj_grad_ly = 0;
        double vj_grad_lz = 0;
        double vk_grad_ix = 0;
        double vk_grad_iy = 0;
        double vk_grad_iz = 0;
        double vk_grad_jx = 0;
        double vk_grad_jy = 0;
        double vk_grad_jz = 0;
        double vk_grad_kx = 0;
        double vk_grad_ky = 0;
        double vk_grad_kz = 0;
        double vk_grad_lx = 0;
        double vk_grad_ly = 0;
        double vk_grad_lz = 0;
        double dm_lk_0_0 = dm[(l0+0)*nao+(k0+0)];
        if (jk.n_dm > 1) {
            int nao2 = nao * nao;
            dm_lk_0_0 += dm[nao2+(l0+0)*nao+(k0+0)];
        }
        double dm_jk_0_0 = dm[(j0+0)*nao+(k0+0)];
        double dm_jl_0_0 = dm[(j0+0)*nao+(l0+0)];
        double dm_ik_0_0 = dm[(i0+0)*nao+(k0+0)];
        double dm_ik_1_0 = dm[(i0+1)*nao+(k0+0)];
        double dm_ik_2_0 = dm[(i0+2)*nao+(k0+0)];
        double dm_il_0_0 = dm[(i0+0)*nao+(l0+0)];
        double dm_il_1_0 = dm[(i0+1)*nao+(l0+0)];
        double dm_il_2_0 = dm[(i0+2)*nao+(l0+0)];
        double dd_jk, dd_jl, vj_dd, vk_dd;
        double prod_xy;
        double prod_xz;
        double prod_yz;
        double fxi;
        double fyi;
        double fzi;
        double fxj;
        double fyj;
        double fzj;
        double fxk;
        double fyk;
        double fzk;
        double fxl;
        double fyl;
        double fzl;
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double ak2 = ak * 2;
            double al2 = al * 2;
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double ai2 = ai * 2;
                double aj2 = aj * 2;
                double aij = ai + aj;
                double xjxi = rj[0] - ri[0];
                double yjyi = rj[1] - ri[1];
                double zjzi = rj[2] - ri[2];
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa; // (ai*xi+aj*xj)/aij
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(2, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(2, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 2; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                __syncthreads();
                if (task_id < ntasks) {
                    for (int irys = 0; irys < 2; ++irys) {
                        double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                        double rt = rw[sq_id +  2*irys   *nsq_per_block];
                        double rt_aa = rt / (aij + akl);
                        double rt_aij = rt_aa * akl;
                        double c0x = xpa - xpq*rt_aij;
                        double trr_10x = c0x * fac;
                        prod_xy = trr_10x * 1;
                        prod_xz = trr_10x * wt;
                        prod_yz = 1 * wt;
                        double b10 = .5/aij * (1 - rt_aij);
                        double trr_20x = c0x * trr_10x + 1*b10 * fac;
                        fxi = ai2 * prod_yz * trr_20x;
                        double c0y = ypa - ypq*rt_aij;
                        double trr_10y = c0y * 1;
                        fyi = ai2 * prod_xz * trr_10y;
                        double c0z = zpa - zpq*rt_aij;
                        double trr_10z = c0z * wt;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1100x = trr_20x - xjxi * trr_10x;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        double hrr_0100y = trr_10y - yjyi * 1;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0100z = trr_10z - zjzi * wt;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double rt_akl = rt_aa * aij;
                        double cpx = xqc + xpq*rt_akl;
                        double b00 = .5 * rt_aa;
                        double trr_11x = cpx * trr_10x + 1*b00 * fac;
                        fxk = ak2 * prod_yz * trr_11x;
                        double cpy = yqc + ypq*rt_akl;
                        double trr_01y = cpy * 1;
                        fyk = ak2 * prod_xz * trr_01y;
                        double cpz = zqc + zpq*rt_akl;
                        double trr_01z = cpz * wt;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_1001x = trr_11x - xlxk * trr_10x;
                        fxl = al2 * prod_yz * hrr_1001x;
                        double hrr_0001y = trr_01y - ylyk * 1;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0001z = trr_01z - zlzk * wt;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_10y;
                        prod_xz = fac * wt;
                        prod_yz = trr_10y * wt;
                        fxi = ai2 * prod_yz * trr_10x;
                        double trr_20y = c0y * trr_10y + 1*b10 * 1;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0100x = trr_10x - xjxi * fac;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        double hrr_1100y = trr_20y - yjyi * trr_10y;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double trr_01x = cpx * fac;
                        fxk = ak2 * prod_yz * trr_01x;
                        double trr_11y = cpy * trr_10y + 1*b00 * 1;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_0001x = trr_01x - xlxk * fac;
                        fxl = al2 * prod_yz * hrr_0001x;
                        double hrr_1001y = trr_11y - ylyk * trr_10y;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * 1;
                        prod_xz = fac * trr_10z;
                        prod_yz = 1 * trr_10z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_20z = c0z * trr_10z + 1*b10 * wt;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1100z = trr_20z - zjzi * trr_10z;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_11z = cpz * trr_10z + 1*b00 * wt;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1001z = trr_11z - zlzk * trr_10z;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fzi -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                    }
                }
            }
        }
        int ia = bas[ish*BAS_SLOTS+ATOM_OF];
        int ja = bas[jsh*BAS_SLOTS+ATOM_OF];
        int ka = bas[ksh*BAS_SLOTS+ATOM_OF];
        int la = bas[lsh*BAS_SLOTS+ATOM_OF];
        if (vj != NULL) {
            atomicAdd(vj+ia*3+0, vj_grad_ix);
            atomicAdd(vj+ia*3+1, vj_grad_iy);
            atomicAdd(vj+ia*3+2, vj_grad_iz);
            atomicAdd(vj+ja*3+0, vj_grad_jx);
            atomicAdd(vj+ja*3+1, vj_grad_jy);
            atomicAdd(vj+ja*3+2, vj_grad_jz);
            atomicAdd(vj+ka*3+0, vj_grad_kx);
            atomicAdd(vj+ka*3+1, vj_grad_ky);
            atomicAdd(vj+ka*3+2, vj_grad_kz);
            atomicAdd(vj+la*3+0, vj_grad_lx);
            atomicAdd(vj+la*3+1, vj_grad_ly);
            atomicAdd(vj+la*3+2, vj_grad_lz);
        }
        if (vk != NULL) {
            atomicAdd(vk+ia*3+0, vk_grad_ix);
            atomicAdd(vk+ia*3+1, vk_grad_iy);
            atomicAdd(vk+ia*3+2, vk_grad_iz);
            atomicAdd(vk+ja*3+0, vk_grad_jx);
            atomicAdd(vk+ja*3+1, vk_grad_jy);
            atomicAdd(vk+ja*3+2, vk_grad_jz);
            atomicAdd(vk+ka*3+0, vk_grad_kx);
            atomicAdd(vk+ka*3+1, vk_grad_ky);
            atomicAdd(vk+ka*3+2, vk_grad_kz);
            atomicAdd(vk+la*3+0, vk_grad_lx);
            atomicAdd(vk+la*3+1, vk_grad_ly);
            atomicAdd(vk+la*3+2, vk_grad_lz);
        }
    }
}
__global__
void rys_ejk_ip1_1000(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int nbas = envs.nbas;
        int ntasks = _fill_ejk_tasks(shl_quartet_idx, envs, jk, bounds,
                                     batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas_tiles = nbas / TILE;
            int tile_i = tile_ij / nbas_tiles;
            int tile_j = tile_ij % nbas_tiles;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_ejk_ip1_1000(envs, jk, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_ejk_ip1_1010(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int *ao_loc = envs.ao_loc;
    int nbas = envs.nbas;
    int nao = ao_loc[nbas];
    int *bas = envs.bas;
    double *env = envs.env;
    double omega = env[PTR_RANGE_OMEGA];
    double *vj = jk.vj;
    double *vk = jk.vk;
    double *dm = jk.dm;
    extern __shared__ double dm_cache[];
    double *Rpa_cicj = dm_cache + 3 * TILE2;
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env + bas[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env + bas[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    int ij = sq_id / TILE2;
    if (ij < 3) {
        int i = ij % 3;
        int j = ij / 3;
        int sh_ij = sq_id % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        if (jk.n_dm == 1) {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i];
        } else {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i] + dm[(nao+j0+j)*nao+i0+i];
        }
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        if (ish*nbas+jsh == ksh*nbas+lsh) fac_sym *= .5;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        int k0 = ao_loc[ksh];
        int l0 = ao_loc[lsh];
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env + bas[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env + bas[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env + bas[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env + bas[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
        double vj_grad_ix = 0;
        double vj_grad_iy = 0;
        double vj_grad_iz = 0;
        double vj_grad_jx = 0;
        double vj_grad_jy = 0;
        double vj_grad_jz = 0;
        double vj_grad_kx = 0;
        double vj_grad_ky = 0;
        double vj_grad_kz = 0;
        double vj_grad_lx = 0;
        double vj_grad_ly = 0;
        double vj_grad_lz = 0;
        double vk_grad_ix = 0;
        double vk_grad_iy = 0;
        double vk_grad_iz = 0;
        double vk_grad_jx = 0;
        double vk_grad_jy = 0;
        double vk_grad_jz = 0;
        double vk_grad_kx = 0;
        double vk_grad_ky = 0;
        double vk_grad_kz = 0;
        double vk_grad_lx = 0;
        double vk_grad_ly = 0;
        double vk_grad_lz = 0;
        double dm_lk_0_0 = dm[(l0+0)*nao+(k0+0)];
        double dm_lk_0_1 = dm[(l0+0)*nao+(k0+1)];
        double dm_lk_0_2 = dm[(l0+0)*nao+(k0+2)];
        if (jk.n_dm > 1) {
            int nao2 = nao * nao;
            dm_lk_0_0 += dm[nao2+(l0+0)*nao+(k0+0)];
            dm_lk_0_1 += dm[nao2+(l0+0)*nao+(k0+1)];
            dm_lk_0_2 += dm[nao2+(l0+0)*nao+(k0+2)];
        }
        double dm_jk_0_0 = dm[(j0+0)*nao+(k0+0)];
        double dm_jk_0_1 = dm[(j0+0)*nao+(k0+1)];
        double dm_jk_0_2 = dm[(j0+0)*nao+(k0+2)];
        double dm_jl_0_0 = dm[(j0+0)*nao+(l0+0)];
        double dm_ik_0_0 = dm[(i0+0)*nao+(k0+0)];
        double dm_ik_0_1 = dm[(i0+0)*nao+(k0+1)];
        double dm_ik_0_2 = dm[(i0+0)*nao+(k0+2)];
        double dm_ik_1_0 = dm[(i0+1)*nao+(k0+0)];
        double dm_ik_1_1 = dm[(i0+1)*nao+(k0+1)];
        double dm_ik_1_2 = dm[(i0+1)*nao+(k0+2)];
        double dm_ik_2_0 = dm[(i0+2)*nao+(k0+0)];
        double dm_ik_2_1 = dm[(i0+2)*nao+(k0+1)];
        double dm_ik_2_2 = dm[(i0+2)*nao+(k0+2)];
        double dm_il_0_0 = dm[(i0+0)*nao+(l0+0)];
        double dm_il_1_0 = dm[(i0+1)*nao+(l0+0)];
        double dm_il_2_0 = dm[(i0+2)*nao+(l0+0)];
        double dd_jk, dd_jl, vj_dd, vk_dd;
        double prod_xy;
        double prod_xz;
        double prod_yz;
        double fxi;
        double fyi;
        double fzi;
        double fxj;
        double fyj;
        double fzj;
        double fxk;
        double fyk;
        double fzk;
        double fxl;
        double fyl;
        double fzl;
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double ak2 = ak * 2;
            double al2 = al * 2;
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double ai2 = ai * 2;
                double aj2 = aj * 2;
                double aij = ai + aj;
                double xjxi = rj[0] - ri[0];
                double yjyi = rj[1] - ri[1];
                double zjzi = rj[2] - ri[2];
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa; // (ai*xi+aj*xj)/aij
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(2, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(2, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 2; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                __syncthreads();
                if (task_id < ntasks) {
                    for (int irys = 0; irys < 2; ++irys) {
                        double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                        double rt = rw[sq_id +  2*irys   *nsq_per_block];
                        double rt_aa = rt / (aij + akl);
                        double rt_akl = rt_aa * aij;
                        double cpx = xqc + xpq*rt_akl;
                        double rt_aij = rt_aa * akl;
                        double c0x = xpa - xpq*rt_aij;
                        double trr_10x = c0x * fac;
                        double b00 = .5 * rt_aa;
                        double trr_11x = cpx * trr_10x + 1*b00 * fac;
                        prod_xy = trr_11x * 1;
                        prod_xz = trr_11x * wt;
                        prod_yz = 1 * wt;
                        double b10 = .5/aij * (1 - rt_aij);
                        double trr_20x = c0x * trr_10x + 1*b10 * fac;
                        double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                        fxi = ai2 * prod_yz * trr_21x;
                        double c0y = ypa - ypq*rt_aij;
                        double trr_10y = c0y * 1;
                        fyi = ai2 * prod_xz * trr_10y;
                        double c0z = zpa - zpq*rt_aij;
                        double trr_10z = c0z * wt;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1110x = trr_21x - xjxi * trr_11x;
                        fxj = aj2 * prod_yz * hrr_1110x;
                        double hrr_0100y = trr_10y - yjyi * 1;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0100z = trr_10z - zjzi * wt;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double b01 = .5/akl * (1 - rt_akl);
                        double trr_01x = cpx * fac;
                        double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                        fxk = ak2 * prod_yz * trr_12x;
                        double cpy = yqc + ypq*rt_akl;
                        double trr_01y = cpy * 1;
                        fyk = ak2 * prod_xz * trr_01y;
                        double cpz = zqc + zpq*rt_akl;
                        double trr_01z = cpz * wt;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_1011x = trr_12x - xlxk * trr_11x;
                        fxl = al2 * prod_yz * hrr_1011x;
                        double hrr_0001y = trr_01y - ylyk * 1;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0001z = trr_01z - zlzk * wt;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * trr_01x;
                        fxk -= 1 * prod_yz * trr_10x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * trr_10y;
                        prod_xz = trr_01x * wt;
                        prod_yz = trr_10y * wt;
                        fxi = ai2 * prod_yz * trr_11x;
                        double trr_20y = c0y * trr_10y + 1*b10 * 1;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0110x = trr_11x - xjxi * trr_01x;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        double hrr_1100y = trr_20y - yjyi * trr_10y;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double trr_02x = cpx * trr_01x + 1*b01 * fac;
                        fxk = ak2 * prod_yz * trr_02x;
                        double trr_11y = cpy * trr_10y + 1*b00 * 1;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_0011x = trr_02x - xlxk * trr_01x;
                        fxl = al2 * prod_yz * hrr_0011x;
                        double hrr_1001y = trr_11y - ylyk * trr_10y;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 1 * prod_xz * 1;
                        fxk -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * 1;
                        prod_xz = trr_01x * trr_10z;
                        prod_yz = 1 * trr_10z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_20z = c0z * trr_10z + 1*b10 * wt;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1100z = trr_20z - zjzi * trr_10z;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_11z = cpz * trr_10z + 1*b00 * wt;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1001z = trr_11z - zlzk * trr_10z;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fzi -= 1 * prod_xy * wt;
                        fxk -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * trr_01y;
                        prod_xz = trr_10x * wt;
                        prod_yz = trr_01y * wt;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1100x = trr_20x - xjxi * trr_10x;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        double hrr_0110y = trr_11y - yjyi * trr_01y;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_11x;
                        double trr_02y = cpy * trr_01y + 1*b01 * 1;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_1001x = trr_11x - xlxk * trr_10x;
                        fxl = al2 * prod_yz * hrr_1001x;
                        double hrr_0011y = trr_02y - ylyk * trr_01y;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * fac;
                        fyk -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_11y;
                        prod_xz = fac * wt;
                        prod_yz = trr_11y * wt;
                        fxi = ai2 * prod_yz * trr_10x;
                        double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                        fyi = ai2 * prod_xz * trr_21y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0100x = trr_10x - xjxi * fac;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        double hrr_1110y = trr_21y - yjyi * trr_11y;
                        fyj = aj2 * prod_xz * hrr_1110y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                        fyk = ak2 * prod_xz * trr_12y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_0001x = trr_01x - xlxk * fac;
                        fxl = al2 * prod_yz * hrr_0001x;
                        double hrr_1011y = trr_12y - ylyk * trr_11y;
                        fyl = al2 * prod_xz * hrr_1011y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 1 * prod_xz * trr_01y;
                        fyk -= 1 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_01y;
                        prod_xz = fac * trr_10z;
                        prod_yz = trr_01y * trr_10z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fzi -= 1 * prod_xy * wt;
                        fyk -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * 1;
                        prod_xz = trr_10x * trr_01z;
                        prod_yz = 1 * trr_01z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0110z = trr_11z - zjzi * trr_01z;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_02z = cpz * trr_01z + 1*b01 * wt;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0011z = trr_02z - zlzk * trr_01z;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fxi -= 1 * prod_yz * fac;
                        fzk -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_10y;
                        prod_xz = fac * trr_01z;
                        prod_yz = trr_10y * trr_01z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fyi -= 1 * prod_xz * 1;
                        fzk -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * 1;
                        prod_xz = fac * trr_11z;
                        prod_yz = 1 * trr_11z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                        fzi = ai2 * prod_xy * trr_21z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1110z = trr_21z - zjzi * trr_11z;
                        fzj = aj2 * prod_xy * hrr_1110z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                        fzk = ak2 * prod_xy * trr_12z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1011z = trr_12z - zlzk * trr_11z;
                        fzl = al2 * prod_xy * hrr_1011z;
                        fzi -= 1 * prod_xy * trr_01z;
                        fzk -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                    }
                }
            }
        }
        int ia = bas[ish*BAS_SLOTS+ATOM_OF];
        int ja = bas[jsh*BAS_SLOTS+ATOM_OF];
        int ka = bas[ksh*BAS_SLOTS+ATOM_OF];
        int la = bas[lsh*BAS_SLOTS+ATOM_OF];
        if (vj != NULL) {
            atomicAdd(vj+ia*3+0, vj_grad_ix);
            atomicAdd(vj+ia*3+1, vj_grad_iy);
            atomicAdd(vj+ia*3+2, vj_grad_iz);
            atomicAdd(vj+ja*3+0, vj_grad_jx);
            atomicAdd(vj+ja*3+1, vj_grad_jy);
            atomicAdd(vj+ja*3+2, vj_grad_jz);
            atomicAdd(vj+ka*3+0, vj_grad_kx);
            atomicAdd(vj+ka*3+1, vj_grad_ky);
            atomicAdd(vj+ka*3+2, vj_grad_kz);
            atomicAdd(vj+la*3+0, vj_grad_lx);
            atomicAdd(vj+la*3+1, vj_grad_ly);
            atomicAdd(vj+la*3+2, vj_grad_lz);
        }
        if (vk != NULL) {
            atomicAdd(vk+ia*3+0, vk_grad_ix);
            atomicAdd(vk+ia*3+1, vk_grad_iy);
            atomicAdd(vk+ia*3+2, vk_grad_iz);
            atomicAdd(vk+ja*3+0, vk_grad_jx);
            atomicAdd(vk+ja*3+1, vk_grad_jy);
            atomicAdd(vk+ja*3+2, vk_grad_jz);
            atomicAdd(vk+ka*3+0, vk_grad_kx);
            atomicAdd(vk+ka*3+1, vk_grad_ky);
            atomicAdd(vk+ka*3+2, vk_grad_kz);
            atomicAdd(vk+la*3+0, vk_grad_lx);
            atomicAdd(vk+la*3+1, vk_grad_ly);
            atomicAdd(vk+la*3+2, vk_grad_lz);
        }
    }
}
__global__
void rys_ejk_ip1_1010(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int nbas = envs.nbas;
        int ntasks = _fill_ejk_tasks(shl_quartet_idx, envs, jk, bounds,
                                     batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas_tiles = nbas / TILE;
            int tile_i = tile_ij / nbas_tiles;
            int tile_j = tile_ij % nbas_tiles;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_ejk_ip1_1010(envs, jk, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_ejk_ip1_1011(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int *ao_loc = envs.ao_loc;
    int nbas = envs.nbas;
    int nao = ao_loc[nbas];
    int *bas = envs.bas;
    double *env = envs.env;
    double omega = env[PTR_RANGE_OMEGA];
    double *vj = jk.vj;
    double *vk = jk.vk;
    double *dm = jk.dm;
    extern __shared__ double dm_cache[];
    double *Rpa_cicj = dm_cache + 3 * TILE2;
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env + bas[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env + bas[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    int ij = sq_id / TILE2;
    if (ij < 3) {
        int i = ij % 3;
        int j = ij / 3;
        int sh_ij = sq_id % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        if (jk.n_dm == 1) {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i];
        } else {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i] + dm[(nao+j0+j)*nao+i0+i];
        }
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        if (ish*nbas+jsh == ksh*nbas+lsh) fac_sym *= .5;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        int k0 = ao_loc[ksh];
        int l0 = ao_loc[lsh];
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env + bas[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env + bas[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env + bas[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env + bas[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
        double vj_grad_ix = 0;
        double vj_grad_iy = 0;
        double vj_grad_iz = 0;
        double vj_grad_jx = 0;
        double vj_grad_jy = 0;
        double vj_grad_jz = 0;
        double vj_grad_kx = 0;
        double vj_grad_ky = 0;
        double vj_grad_kz = 0;
        double vj_grad_lx = 0;
        double vj_grad_ly = 0;
        double vj_grad_lz = 0;
        double vk_grad_ix = 0;
        double vk_grad_iy = 0;
        double vk_grad_iz = 0;
        double vk_grad_jx = 0;
        double vk_grad_jy = 0;
        double vk_grad_jz = 0;
        double vk_grad_kx = 0;
        double vk_grad_ky = 0;
        double vk_grad_kz = 0;
        double vk_grad_lx = 0;
        double vk_grad_ly = 0;
        double vk_grad_lz = 0;
        double dm_lk_0_0 = dm[(l0+0)*nao+(k0+0)];
        double dm_lk_0_1 = dm[(l0+0)*nao+(k0+1)];
        double dm_lk_0_2 = dm[(l0+0)*nao+(k0+2)];
        double dm_lk_1_0 = dm[(l0+1)*nao+(k0+0)];
        double dm_lk_1_1 = dm[(l0+1)*nao+(k0+1)];
        double dm_lk_1_2 = dm[(l0+1)*nao+(k0+2)];
        double dm_lk_2_0 = dm[(l0+2)*nao+(k0+0)];
        double dm_lk_2_1 = dm[(l0+2)*nao+(k0+1)];
        double dm_lk_2_2 = dm[(l0+2)*nao+(k0+2)];
        if (jk.n_dm > 1) {
            int nao2 = nao * nao;
            dm_lk_0_0 += dm[nao2+(l0+0)*nao+(k0+0)];
            dm_lk_0_1 += dm[nao2+(l0+0)*nao+(k0+1)];
            dm_lk_0_2 += dm[nao2+(l0+0)*nao+(k0+2)];
            dm_lk_1_0 += dm[nao2+(l0+1)*nao+(k0+0)];
            dm_lk_1_1 += dm[nao2+(l0+1)*nao+(k0+1)];
            dm_lk_1_2 += dm[nao2+(l0+1)*nao+(k0+2)];
            dm_lk_2_0 += dm[nao2+(l0+2)*nao+(k0+0)];
            dm_lk_2_1 += dm[nao2+(l0+2)*nao+(k0+1)];
            dm_lk_2_2 += dm[nao2+(l0+2)*nao+(k0+2)];
        }
        double dm_jk_0_0 = dm[(j0+0)*nao+(k0+0)];
        double dm_jk_0_1 = dm[(j0+0)*nao+(k0+1)];
        double dm_jk_0_2 = dm[(j0+0)*nao+(k0+2)];
        double dm_jl_0_0 = dm[(j0+0)*nao+(l0+0)];
        double dm_jl_0_1 = dm[(j0+0)*nao+(l0+1)];
        double dm_jl_0_2 = dm[(j0+0)*nao+(l0+2)];
        double dm_ik_0_0 = dm[(i0+0)*nao+(k0+0)];
        double dm_ik_0_1 = dm[(i0+0)*nao+(k0+1)];
        double dm_ik_0_2 = dm[(i0+0)*nao+(k0+2)];
        double dm_ik_1_0 = dm[(i0+1)*nao+(k0+0)];
        double dm_ik_1_1 = dm[(i0+1)*nao+(k0+1)];
        double dm_ik_1_2 = dm[(i0+1)*nao+(k0+2)];
        double dm_ik_2_0 = dm[(i0+2)*nao+(k0+0)];
        double dm_ik_2_1 = dm[(i0+2)*nao+(k0+1)];
        double dm_ik_2_2 = dm[(i0+2)*nao+(k0+2)];
        double dm_il_0_0 = dm[(i0+0)*nao+(l0+0)];
        double dm_il_0_1 = dm[(i0+0)*nao+(l0+1)];
        double dm_il_0_2 = dm[(i0+0)*nao+(l0+2)];
        double dm_il_1_0 = dm[(i0+1)*nao+(l0+0)];
        double dm_il_1_1 = dm[(i0+1)*nao+(l0+1)];
        double dm_il_1_2 = dm[(i0+1)*nao+(l0+2)];
        double dm_il_2_0 = dm[(i0+2)*nao+(l0+0)];
        double dm_il_2_1 = dm[(i0+2)*nao+(l0+1)];
        double dm_il_2_2 = dm[(i0+2)*nao+(l0+2)];
        double dd_jk, dd_jl, vj_dd, vk_dd;
        double prod_xy;
        double prod_xz;
        double prod_yz;
        double fxi;
        double fyi;
        double fzi;
        double fxj;
        double fyj;
        double fzj;
        double fxk;
        double fyk;
        double fzk;
        double fxl;
        double fyl;
        double fzl;
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double ak2 = ak * 2;
            double al2 = al * 2;
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double ai2 = ai * 2;
                double aj2 = aj * 2;
                double aij = ai + aj;
                double xjxi = rj[0] - ri[0];
                double yjyi = rj[1] - ri[1];
                double zjzi = rj[2] - ri[2];
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa; // (ai*xi+aj*xj)/aij
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(3, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(3, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 3; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                __syncthreads();
                if (task_id < ntasks) {
                    for (int irys = 0; irys < 3; ++irys) {
                        double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                        double rt = rw[sq_id +  2*irys   *nsq_per_block];
                        double rt_aa = rt / (aij + akl);
                        double rt_akl = rt_aa * aij;
                        double cpx = xqc + xpq*rt_akl;
                        double rt_aij = rt_aa * akl;
                        double c0x = xpa - xpq*rt_aij;
                        double trr_10x = c0x * fac;
                        double b00 = .5 * rt_aa;
                        double trr_11x = cpx * trr_10x + 1*b00 * fac;
                        double b01 = .5/akl * (1 - rt_akl);
                        double trr_01x = cpx * fac;
                        double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                        double hrr_1011x = trr_12x - xlxk * trr_11x;
                        prod_xy = hrr_1011x * 1;
                        prod_xz = hrr_1011x * wt;
                        prod_yz = 1 * wt;
                        double b10 = .5/aij * (1 - rt_aij);
                        double trr_20x = c0x * trr_10x + 1*b10 * fac;
                        double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                        double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                        double hrr_2011x = trr_22x - xlxk * trr_21x;
                        fxi = ai2 * prod_yz * hrr_2011x;
                        double c0y = ypa - ypq*rt_aij;
                        double trr_10y = c0y * 1;
                        fyi = ai2 * prod_xz * trr_10y;
                        double c0z = zpa - zpq*rt_aij;
                        double trr_10z = c0z * wt;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1111x = hrr_2011x - xjxi * hrr_1011x;
                        fxj = aj2 * prod_yz * hrr_1111x;
                        double hrr_0100y = trr_10y - yjyi * 1;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0100z = trr_10z - zjzi * wt;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double trr_02x = cpx * trr_01x + 1*b01 * fac;
                        double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                        double hrr_1021x = trr_13x - xlxk * trr_12x;
                        fxk = ak2 * prod_yz * hrr_1021x;
                        double cpy = yqc + ypq*rt_akl;
                        double trr_01y = cpy * 1;
                        fyk = ak2 * prod_xz * trr_01y;
                        double cpz = zqc + zpq*rt_akl;
                        double trr_01z = cpz * wt;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_1012x = hrr_1021x - xlxk * hrr_1011x;
                        fxl = al2 * prod_yz * hrr_1012x;
                        double hrr_0001y = trr_01y - ylyk * 1;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0001z = trr_01z - zlzk * wt;
                        fzl = al2 * prod_xy * hrr_0001z;
                        double hrr_0011x = trr_02x - xlxk * trr_01x;
                        fxi -= 1 * prod_yz * hrr_0011x;
                        double hrr_1001x = trr_11x - xlxk * trr_10x;
                        fxk -= 1 * prod_yz * hrr_1001x;
                        fxl -= 1 * prod_yz * trr_11x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0011x * trr_10y;
                        prod_xz = hrr_0011x * wt;
                        prod_yz = trr_10y * wt;
                        fxi = ai2 * prod_yz * hrr_1011x;
                        double trr_20y = c0y * trr_10y + 1*b10 * 1;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0111x = hrr_1011x - xjxi * hrr_0011x;
                        fxj = aj2 * prod_yz * hrr_0111x;
                        double hrr_1100y = trr_20y - yjyi * trr_10y;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                        double hrr_0021x = trr_03x - xlxk * trr_02x;
                        fxk = ak2 * prod_yz * hrr_0021x;
                        double trr_11y = cpy * trr_10y + 1*b00 * 1;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_0012x = hrr_0021x - xlxk * hrr_0011x;
                        fxl = al2 * prod_yz * hrr_0012x;
                        double hrr_1001y = trr_11y - ylyk * trr_10y;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 1 * prod_xz * 1;
                        double hrr_0001x = trr_01x - xlxk * fac;
                        fxk -= 1 * prod_yz * hrr_0001x;
                        fxl -= 1 * prod_yz * trr_01x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0011x * 1;
                        prod_xz = hrr_0011x * trr_10z;
                        prod_yz = 1 * trr_10z;
                        fxi = ai2 * prod_yz * hrr_1011x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_20z = c0z * trr_10z + 1*b10 * wt;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0111x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1100z = trr_20z - zjzi * trr_10z;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * hrr_0021x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_11z = cpz * trr_10z + 1*b00 * wt;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0012x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1001z = trr_11z - zlzk * trr_10z;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fzi -= 1 * prod_xy * wt;
                        fxk -= 1 * prod_yz * hrr_0001x;
                        fxl -= 1 * prod_yz * trr_01x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1001x * trr_01y;
                        prod_xz = hrr_1001x * wt;
                        prod_yz = trr_01y * wt;
                        double hrr_2001x = trr_21x - xlxk * trr_20x;
                        fxi = ai2 * prod_yz * hrr_2001x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1101x = hrr_2001x - xjxi * hrr_1001x;
                        fxj = aj2 * prod_yz * hrr_1101x;
                        double hrr_0110y = trr_11y - yjyi * trr_01y;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * hrr_1011x;
                        double trr_02y = cpy * trr_01y + 1*b01 * 1;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_1002x = hrr_1011x - xlxk * hrr_1001x;
                        fxl = al2 * prod_yz * hrr_1002x;
                        double hrr_0011y = trr_02y - ylyk * trr_01y;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * hrr_0001x;
                        fyk -= 1 * prod_xz * 1;
                        fxl -= 1 * prod_yz * trr_10x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0001x * trr_11y;
                        prod_xz = hrr_0001x * wt;
                        prod_yz = trr_11y * wt;
                        fxi = ai2 * prod_yz * hrr_1001x;
                        double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                        fyi = ai2 * prod_xz * trr_21y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0101x = hrr_1001x - xjxi * hrr_0001x;
                        fxj = aj2 * prod_yz * hrr_0101x;
                        double hrr_1110y = trr_21y - yjyi * trr_11y;
                        fyj = aj2 * prod_xz * hrr_1110y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * hrr_0011x;
                        double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                        fyk = ak2 * prod_xz * trr_12y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_0002x = hrr_0011x - xlxk * hrr_0001x;
                        fxl = al2 * prod_yz * hrr_0002x;
                        double hrr_1011y = trr_12y - ylyk * trr_11y;
                        fyl = al2 * prod_xz * hrr_1011y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 1 * prod_xz * trr_01y;
                        fyk -= 1 * prod_xz * trr_10y;
                        fxl -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0001x * trr_01y;
                        prod_xz = hrr_0001x * trr_10z;
                        prod_yz = trr_01y * trr_10z;
                        fxi = ai2 * prod_yz * hrr_1001x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0101x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * hrr_0011x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0002x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fzi -= 1 * prod_xy * wt;
                        fyk -= 1 * prod_xz * 1;
                        fxl -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1001x * 1;
                        prod_xz = hrr_1001x * trr_01z;
                        prod_yz = 1 * trr_01z;
                        fxi = ai2 * prod_yz * hrr_2001x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_1101x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0110z = trr_11z - zjzi * trr_01z;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * hrr_1011x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_02z = cpz * trr_01z + 1*b01 * wt;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_1002x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0011z = trr_02z - zlzk * trr_01z;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fxi -= 1 * prod_yz * hrr_0001x;
                        fzk -= 1 * prod_xy * wt;
                        fxl -= 1 * prod_yz * trr_10x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0001x * trr_10y;
                        prod_xz = hrr_0001x * trr_01z;
                        prod_yz = trr_10y * trr_01z;
                        fxi = ai2 * prod_yz * hrr_1001x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_0101x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * hrr_0011x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_0002x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fyi -= 1 * prod_xz * 1;
                        fzk -= 1 * prod_xy * wt;
                        fxl -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0001x * 1;
                        prod_xz = hrr_0001x * trr_11z;
                        prod_yz = 1 * trr_11z;
                        fxi = ai2 * prod_yz * hrr_1001x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                        fzi = ai2 * prod_xy * trr_21z;
                        fxj = aj2 * prod_yz * hrr_0101x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1110z = trr_21z - zjzi * trr_11z;
                        fzj = aj2 * prod_xy * hrr_1110z;
                        fxk = ak2 * prod_yz * hrr_0011x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                        fzk = ak2 * prod_xy * trr_12z;
                        fxl = al2 * prod_yz * hrr_0002x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1011z = trr_12z - zlzk * trr_11z;
                        fzl = al2 * prod_xy * hrr_1011z;
                        fzi -= 1 * prod_xy * trr_01z;
                        fzk -= 1 * prod_xy * trr_10z;
                        fxl -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_11x * hrr_0001y;
                        prod_xz = trr_11x * wt;
                        prod_yz = hrr_0001y * wt;
                        fxi = ai2 * prod_yz * trr_21x;
                        fyi = ai2 * prod_xz * hrr_1001y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1110x = trr_21x - xjxi * trr_11x;
                        fxj = aj2 * prod_yz * hrr_1110x;
                        double hrr_0101y = hrr_1001y - yjyi * hrr_0001y;
                        fyj = aj2 * prod_xz * hrr_0101y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_12x;
                        fyk = ak2 * prod_xz * hrr_0011y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_1011x;
                        double hrr_0002y = hrr_0011y - ylyk * hrr_0001y;
                        fyl = al2 * prod_xz * hrr_0002y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * trr_01x;
                        fxk -= 1 * prod_yz * trr_10x;
                        fyl -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_0_1;
                            dd_jl = dm_jl_0_1 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_1_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * hrr_1001y;
                        prod_xz = trr_01x * wt;
                        prod_yz = hrr_1001y * wt;
                        fxi = ai2 * prod_yz * trr_11x;
                        double hrr_2001y = trr_21y - ylyk * trr_20y;
                        fyi = ai2 * prod_xz * hrr_2001y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0110x = trr_11x - xjxi * trr_01x;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        double hrr_1101y = hrr_2001y - yjyi * hrr_1001y;
                        fyj = aj2 * prod_xz * hrr_1101y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * hrr_1011y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        double hrr_1002y = hrr_1011y - ylyk * hrr_1001y;
                        fyl = al2 * prod_xz * hrr_1002y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 1 * prod_xz * hrr_0001y;
                        fxk -= 1 * prod_yz * fac;
                        fyl -= 1 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_1_1;
                            dd_jl = dm_jl_0_1 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_1_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * hrr_0001y;
                        prod_xz = trr_01x * trr_10z;
                        prod_yz = hrr_0001y * trr_10z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * hrr_1001y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_0101y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * hrr_0011y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_0002y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fzi -= 1 * prod_xy * wt;
                        fxk -= 1 * prod_yz * fac;
                        fyl -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_2_1;
                            dd_jl = dm_jl_0_1 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_1_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * hrr_0011y;
                        prod_xz = trr_10x * wt;
                        prod_yz = hrr_0011y * wt;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * hrr_1011y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1100x = trr_20x - xjxi * trr_10x;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        double hrr_0111y = hrr_1011y - yjyi * hrr_0011y;
                        fyj = aj2 * prod_xz * hrr_0111y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_11x;
                        double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                        double hrr_0021y = trr_03y - ylyk * trr_02y;
                        fyk = ak2 * prod_xz * hrr_0021y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        double hrr_0012y = hrr_0021y - ylyk * hrr_0011y;
                        fyl = al2 * prod_xz * hrr_0012y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * fac;
                        fyk -= 1 * prod_xz * hrr_0001y;
                        fyl -= 1 * prod_xz * trr_01y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_0_1;
                            dd_jl = dm_jl_0_1 * dm_ik_0_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+0)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+0)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_1_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_1011y;
                        prod_xz = fac * wt;
                        prod_yz = hrr_1011y * wt;
                        fxi = ai2 * prod_yz * trr_10x;
                        double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                        double hrr_2011y = trr_22y - ylyk * trr_21y;
                        fyi = ai2 * prod_xz * hrr_2011y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0100x = trr_10x - xjxi * fac;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        double hrr_1111y = hrr_2011y - yjyi * hrr_1011y;
                        fyj = aj2 * prod_xz * hrr_1111y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                        double hrr_1021y = trr_13y - ylyk * trr_12y;
                        fyk = ak2 * prod_xz * hrr_1021y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        double hrr_1012y = hrr_1021y - ylyk * hrr_1011y;
                        fyl = al2 * prod_xz * hrr_1012y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 1 * prod_xz * hrr_0011y;
                        fyk -= 1 * prod_xz * hrr_1001y;
                        fyl -= 1 * prod_xz * trr_11y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_1_1;
                            dd_jl = dm_jl_0_1 * dm_ik_1_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+1)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+1)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_1_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_0011y;
                        prod_xz = fac * trr_10z;
                        prod_yz = hrr_0011y * trr_10z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_1011y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0111y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_0021y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0012y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fzi -= 1 * prod_xy * wt;
                        fyk -= 1 * prod_xz * hrr_0001y;
                        fyl -= 1 * prod_xz * trr_01y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_2_1;
                            dd_jl = dm_jl_0_1 * dm_ik_2_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+2)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+2)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_1_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * hrr_0001y;
                        prod_xz = trr_10x * trr_01z;
                        prod_yz = hrr_0001y * trr_01z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * hrr_1001y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0101y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * hrr_0011y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0002y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fxi -= 1 * prod_yz * fac;
                        fzk -= 1 * prod_xy * wt;
                        fyl -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_0_1;
                            dd_jl = dm_jl_0_1 * dm_ik_0_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+0)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+0)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_1_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_1001y;
                        prod_xz = fac * trr_01z;
                        prod_yz = hrr_1001y * trr_01z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_2001y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1101y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_1011y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1002y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fyi -= 1 * prod_xz * hrr_0001y;
                        fzk -= 1 * prod_xy * wt;
                        fyl -= 1 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_1_1;
                            dd_jl = dm_jl_0_1 * dm_ik_1_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+1)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+1)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_1_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_0001y;
                        prod_xz = fac * trr_11z;
                        prod_yz = hrr_0001y * trr_11z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_1001y;
                        fzi = ai2 * prod_xy * trr_21z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0101y;
                        fzj = aj2 * prod_xy * hrr_1110z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_0011y;
                        fzk = ak2 * prod_xy * trr_12z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0002y;
                        fzl = al2 * prod_xy * hrr_1011z;
                        fzi -= 1 * prod_xy * trr_01z;
                        fzk -= 1 * prod_xy * trr_10z;
                        fyl -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_2_1;
                            dd_jl = dm_jl_0_1 * dm_ik_2_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+2)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+2)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_1_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_11x * 1;
                        prod_xz = trr_11x * hrr_0001z;
                        prod_yz = 1 * hrr_0001z;
                        fxi = ai2 * prod_yz * trr_21x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_1001z;
                        fxj = aj2 * prod_yz * hrr_1110x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0101z = hrr_1001z - zjzi * hrr_0001z;
                        fzj = aj2 * prod_xy * hrr_0101z;
                        fxk = ak2 * prod_yz * trr_12x;
                        fyk = ak2 * prod_xz * trr_01y;
                        fzk = ak2 * prod_xy * hrr_0011z;
                        fxl = al2 * prod_yz * hrr_1011x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0002z = hrr_0011z - zlzk * hrr_0001z;
                        fzl = al2 * prod_xy * hrr_0002z;
                        fxi -= 1 * prod_yz * trr_01x;
                        fxk -= 1 * prod_yz * trr_10x;
                        fzl -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_0_2;
                            dd_jl = dm_jl_0_2 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_2_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * trr_10y;
                        prod_xz = trr_01x * hrr_0001z;
                        prod_yz = trr_10y * hrr_0001z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * hrr_1001z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0101z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * hrr_0011z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0002z;
                        fyi -= 1 * prod_xz * 1;
                        fxk -= 1 * prod_yz * fac;
                        fzl -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_1_2;
                            dd_jl = dm_jl_0_2 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_2_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * 1;
                        prod_xz = trr_01x * hrr_1001z;
                        prod_yz = 1 * hrr_1001z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double hrr_2001z = trr_21z - zlzk * trr_20z;
                        fzi = ai2 * prod_xy * hrr_2001z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1101z = hrr_2001z - zjzi * hrr_1001z;
                        fzj = aj2 * prod_xy * hrr_1101z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * trr_01y;
                        fzk = ak2 * prod_xy * hrr_1011z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1002z = hrr_1011z - zlzk * hrr_1001z;
                        fzl = al2 * prod_xy * hrr_1002z;
                        fzi -= 1 * prod_xy * hrr_0001z;
                        fxk -= 1 * prod_yz * fac;
                        fzl -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_2_2;
                            dd_jl = dm_jl_0_2 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_2_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * trr_01y;
                        prod_xz = trr_10x * hrr_0001z;
                        prod_yz = trr_01y * hrr_0001z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * hrr_1001z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_0101z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * hrr_0011z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_0002z;
                        fxi -= 1 * prod_yz * fac;
                        fyk -= 1 * prod_xz * 1;
                        fzl -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_0_2;
                            dd_jl = dm_jl_0_2 * dm_ik_0_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+0)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+0)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_2_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_11y;
                        prod_xz = fac * hrr_0001z;
                        prod_yz = trr_11y * hrr_0001z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_21y;
                        fzi = ai2 * prod_xy * hrr_1001z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1110y;
                        fzj = aj2 * prod_xy * hrr_0101z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_12y;
                        fzk = ak2 * prod_xy * hrr_0011z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1011y;
                        fzl = al2 * prod_xy * hrr_0002z;
                        fyi -= 1 * prod_xz * trr_01y;
                        fyk -= 1 * prod_xz * trr_10y;
                        fzl -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_1_2;
                            dd_jl = dm_jl_0_2 * dm_ik_1_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+1)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+1)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_2_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_01y;
                        prod_xz = fac * hrr_1001z;
                        prod_yz = trr_01y * hrr_1001z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * hrr_2001z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_1101z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * hrr_1011z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_1002z;
                        fzi -= 1 * prod_xy * hrr_0001z;
                        fyk -= 1 * prod_xz * 1;
                        fzl -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_2_2;
                            dd_jl = dm_jl_0_2 * dm_ik_2_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+2)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+2)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_2_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * 1;
                        prod_xz = trr_10x * hrr_0011z;
                        prod_yz = 1 * hrr_0011z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_1011z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0111z = hrr_1011z - zjzi * hrr_0011z;
                        fzj = aj2 * prod_xy * hrr_0111z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                        double hrr_0021z = trr_03z - zlzk * trr_02z;
                        fzk = ak2 * prod_xy * hrr_0021z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0012z = hrr_0021z - zlzk * hrr_0011z;
                        fzl = al2 * prod_xy * hrr_0012z;
                        fxi -= 1 * prod_yz * fac;
                        fzk -= 1 * prod_xy * hrr_0001z;
                        fzl -= 1 * prod_xy * trr_01z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_0_2;
                            dd_jl = dm_jl_0_2 * dm_ik_0_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+0)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+0)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_2_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_10y;
                        prod_xz = fac * hrr_0011z;
                        prod_yz = trr_10y * hrr_0011z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * hrr_1011z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0111z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * hrr_0021z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0012z;
                        fyi -= 1 * prod_xz * 1;
                        fzk -= 1 * prod_xy * hrr_0001z;
                        fzl -= 1 * prod_xy * trr_01z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_1_2;
                            dd_jl = dm_jl_0_2 * dm_ik_1_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+1)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+1)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_2_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * 1;
                        prod_xz = fac * hrr_1011z;
                        prod_yz = 1 * hrr_1011z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                        double hrr_2011z = trr_22z - zlzk * trr_21z;
                        fzi = ai2 * prod_xy * hrr_2011z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1111z = hrr_2011z - zjzi * hrr_1011z;
                        fzj = aj2 * prod_xy * hrr_1111z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                        double hrr_1021z = trr_13z - zlzk * trr_12z;
                        fzk = ak2 * prod_xy * hrr_1021z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1012z = hrr_1021z - zlzk * hrr_1011z;
                        fzl = al2 * prod_xy * hrr_1012z;
                        fzi -= 1 * prod_xy * hrr_0011z;
                        fzk -= 1 * prod_xy * hrr_1001z;
                        fzl -= 1 * prod_xy * trr_11z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_2_2;
                            dd_jl = dm_jl_0_2 * dm_ik_2_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+2)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+2)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_2_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                    }
                }
            }
        }
        int ia = bas[ish*BAS_SLOTS+ATOM_OF];
        int ja = bas[jsh*BAS_SLOTS+ATOM_OF];
        int ka = bas[ksh*BAS_SLOTS+ATOM_OF];
        int la = bas[lsh*BAS_SLOTS+ATOM_OF];
        if (vj != NULL) {
            atomicAdd(vj+ia*3+0, vj_grad_ix);
            atomicAdd(vj+ia*3+1, vj_grad_iy);
            atomicAdd(vj+ia*3+2, vj_grad_iz);
            atomicAdd(vj+ja*3+0, vj_grad_jx);
            atomicAdd(vj+ja*3+1, vj_grad_jy);
            atomicAdd(vj+ja*3+2, vj_grad_jz);
            atomicAdd(vj+ka*3+0, vj_grad_kx);
            atomicAdd(vj+ka*3+1, vj_grad_ky);
            atomicAdd(vj+ka*3+2, vj_grad_kz);
            atomicAdd(vj+la*3+0, vj_grad_lx);
            atomicAdd(vj+la*3+1, vj_grad_ly);
            atomicAdd(vj+la*3+2, vj_grad_lz);
        }
        if (vk != NULL) {
            atomicAdd(vk+ia*3+0, vk_grad_ix);
            atomicAdd(vk+ia*3+1, vk_grad_iy);
            atomicAdd(vk+ia*3+2, vk_grad_iz);
            atomicAdd(vk+ja*3+0, vk_grad_jx);
            atomicAdd(vk+ja*3+1, vk_grad_jy);
            atomicAdd(vk+ja*3+2, vk_grad_jz);
            atomicAdd(vk+ka*3+0, vk_grad_kx);
            atomicAdd(vk+ka*3+1, vk_grad_ky);
            atomicAdd(vk+ka*3+2, vk_grad_kz);
            atomicAdd(vk+la*3+0, vk_grad_lx);
            atomicAdd(vk+la*3+1, vk_grad_ly);
            atomicAdd(vk+la*3+2, vk_grad_lz);
        }
    }
}
__global__
void rys_ejk_ip1_1011(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int nbas = envs.nbas;
        int ntasks = _fill_ejk_tasks(shl_quartet_idx, envs, jk, bounds,
                                     batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas_tiles = nbas / TILE;
            int tile_i = tile_ij / nbas_tiles;
            int tile_j = tile_ij % nbas_tiles;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_ejk_ip1_1011(envs, jk, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_ejk_ip1_1100(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int *ao_loc = envs.ao_loc;
    int nbas = envs.nbas;
    int nao = ao_loc[nbas];
    int *bas = envs.bas;
    double *env = envs.env;
    double omega = env[PTR_RANGE_OMEGA];
    double *vj = jk.vj;
    double *vk = jk.vk;
    double *dm = jk.dm;
    extern __shared__ double dm_cache[];
    double *Rpa_cicj = dm_cache + 9 * TILE2;
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env + bas[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env + bas[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    int ij = sq_id / TILE2;
    if (ij < 9) {
        int i = ij % 3;
        int j = ij / 3;
        int sh_ij = sq_id % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        if (jk.n_dm == 1) {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i];
        } else {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i] + dm[(nao+j0+j)*nao+i0+i];
        }
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        if (ish*nbas+jsh == ksh*nbas+lsh) fac_sym *= .5;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        int k0 = ao_loc[ksh];
        int l0 = ao_loc[lsh];
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env + bas[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env + bas[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env + bas[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env + bas[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
        double vj_grad_ix = 0;
        double vj_grad_iy = 0;
        double vj_grad_iz = 0;
        double vj_grad_jx = 0;
        double vj_grad_jy = 0;
        double vj_grad_jz = 0;
        double vj_grad_kx = 0;
        double vj_grad_ky = 0;
        double vj_grad_kz = 0;
        double vj_grad_lx = 0;
        double vj_grad_ly = 0;
        double vj_grad_lz = 0;
        double vk_grad_ix = 0;
        double vk_grad_iy = 0;
        double vk_grad_iz = 0;
        double vk_grad_jx = 0;
        double vk_grad_jy = 0;
        double vk_grad_jz = 0;
        double vk_grad_kx = 0;
        double vk_grad_ky = 0;
        double vk_grad_kz = 0;
        double vk_grad_lx = 0;
        double vk_grad_ly = 0;
        double vk_grad_lz = 0;
        double dm_lk_0_0 = dm[(l0+0)*nao+(k0+0)];
        if (jk.n_dm > 1) {
            int nao2 = nao * nao;
            dm_lk_0_0 += dm[nao2+(l0+0)*nao+(k0+0)];
        }
        double dm_jk_0_0 = dm[(j0+0)*nao+(k0+0)];
        double dm_jk_1_0 = dm[(j0+1)*nao+(k0+0)];
        double dm_jk_2_0 = dm[(j0+2)*nao+(k0+0)];
        double dm_jl_0_0 = dm[(j0+0)*nao+(l0+0)];
        double dm_jl_1_0 = dm[(j0+1)*nao+(l0+0)];
        double dm_jl_2_0 = dm[(j0+2)*nao+(l0+0)];
        double dm_ik_0_0 = dm[(i0+0)*nao+(k0+0)];
        double dm_ik_1_0 = dm[(i0+1)*nao+(k0+0)];
        double dm_ik_2_0 = dm[(i0+2)*nao+(k0+0)];
        double dm_il_0_0 = dm[(i0+0)*nao+(l0+0)];
        double dm_il_1_0 = dm[(i0+1)*nao+(l0+0)];
        double dm_il_2_0 = dm[(i0+2)*nao+(l0+0)];
        double dd_jk, dd_jl, vj_dd, vk_dd;
        double prod_xy;
        double prod_xz;
        double prod_yz;
        double fxi;
        double fyi;
        double fzi;
        double fxj;
        double fyj;
        double fzj;
        double fxk;
        double fyk;
        double fzk;
        double fxl;
        double fyl;
        double fzl;
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double ak2 = ak * 2;
            double al2 = al * 2;
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double ai2 = ai * 2;
                double aj2 = aj * 2;
                double aij = ai + aj;
                double xjxi = rj[0] - ri[0];
                double yjyi = rj[1] - ri[1];
                double zjzi = rj[2] - ri[2];
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa; // (ai*xi+aj*xj)/aij
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(2, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(2, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 2; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                __syncthreads();
                if (task_id < ntasks) {
                    for (int irys = 0; irys < 2; ++irys) {
                        double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                        double rt = rw[sq_id +  2*irys   *nsq_per_block];
                        double rt_aa = rt / (aij + akl);
                        double rt_aij = rt_aa * akl;
                        double c0x = xpa - xpq*rt_aij;
                        double trr_10x = c0x * fac;
                        double b10 = .5/aij * (1 - rt_aij);
                        double trr_20x = c0x * trr_10x + 1*b10 * fac;
                        double hrr_1100x = trr_20x - xjxi * trr_10x;
                        prod_xy = hrr_1100x * 1;
                        prod_xz = hrr_1100x * wt;
                        prod_yz = 1 * wt;
                        double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                        double hrr_2100x = trr_30x - xjxi * trr_20x;
                        fxi = ai2 * prod_yz * hrr_2100x;
                        double c0y = ypa - ypq*rt_aij;
                        double trr_10y = c0y * 1;
                        fyi = ai2 * prod_xz * trr_10y;
                        double c0z = zpa - zpq*rt_aij;
                        double trr_10z = c0z * wt;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1200x = hrr_2100x - xjxi * hrr_1100x;
                        fxj = aj2 * prod_yz * hrr_1200x;
                        double hrr_0100y = trr_10y - yjyi * 1;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0100z = trr_10z - zjzi * wt;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double rt_akl = rt_aa * aij;
                        double cpx = xqc + xpq*rt_akl;
                        double b00 = .5 * rt_aa;
                        double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                        double trr_11x = cpx * trr_10x + 1*b00 * fac;
                        double hrr_1110x = trr_21x - xjxi * trr_11x;
                        fxk = ak2 * prod_yz * hrr_1110x;
                        double cpy = yqc + ypq*rt_akl;
                        double trr_01y = cpy * 1;
                        fyk = ak2 * prod_xz * trr_01y;
                        double cpz = zqc + zpq*rt_akl;
                        double trr_01z = cpz * wt;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_2001x = trr_21x - xlxk * trr_20x;
                        double hrr_1001x = trr_11x - xlxk * trr_10x;
                        double hrr_1101x = hrr_2001x - xjxi * hrr_1001x;
                        fxl = al2 * prod_yz * hrr_1101x;
                        double hrr_0001y = trr_01y - ylyk * 1;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0001z = trr_01z - zlzk * wt;
                        fzl = al2 * prod_xy * hrr_0001z;
                        double hrr_0100x = trr_10x - xjxi * fac;
                        fxi -= 1 * prod_yz * hrr_0100x;
                        fxj -= 1 * prod_yz * trr_10x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * trr_10y;
                        prod_xz = hrr_0100x * wt;
                        prod_yz = trr_10y * wt;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        double trr_20y = c0y * trr_10y + 1*b10 * 1;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0200x = hrr_1100x - xjxi * hrr_0100x;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        double hrr_1100y = trr_20y - yjyi * trr_10y;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double trr_01x = cpx * fac;
                        double hrr_0110x = trr_11x - xjxi * trr_01x;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        double trr_11y = cpy * trr_10y + 1*b00 * 1;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_0001x = trr_01x - xlxk * fac;
                        double hrr_0101x = hrr_1001x - xjxi * hrr_0001x;
                        fxl = al2 * prod_yz * hrr_0101x;
                        double hrr_1001y = trr_11y - ylyk * trr_10y;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 1 * prod_xz * 1;
                        fxj -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * 1;
                        prod_xz = hrr_0100x * trr_10z;
                        prod_yz = 1 * trr_10z;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_20z = c0z * trr_10z + 1*b10 * wt;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1100z = trr_20z - zjzi * trr_10z;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_11z = cpz * trr_10z + 1*b00 * wt;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0101x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1001z = trr_11z - zlzk * trr_10z;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fzi -= 1 * prod_xy * wt;
                        fxj -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * hrr_0100y;
                        prod_xz = trr_10x * wt;
                        prod_yz = hrr_0100y * wt;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        double hrr_0200y = hrr_1100y - yjyi * hrr_0100y;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_11x;
                        double hrr_0110y = trr_11y - yjyi * trr_01y;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        double hrr_0101y = hrr_1001y - yjyi * hrr_0001y;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * fac;
                        fyj -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_0_0;
                            dd_jl = dm_jl_1_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_1100y;
                        prod_xz = fac * wt;
                        prod_yz = hrr_1100y * wt;
                        fxi = ai2 * prod_yz * trr_10x;
                        double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                        double hrr_2100y = trr_30y - yjyi * trr_20y;
                        fyi = ai2 * prod_xz * hrr_2100y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        double hrr_1200y = hrr_2100y - yjyi * hrr_1100y;
                        fyj = aj2 * prod_xz * hrr_1200y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                        double hrr_1110y = trr_21y - yjyi * trr_11y;
                        fyk = ak2 * prod_xz * hrr_1110y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        double hrr_2001y = trr_21y - ylyk * trr_20y;
                        double hrr_1101y = hrr_2001y - yjyi * hrr_1001y;
                        fyl = al2 * prod_xz * hrr_1101y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 1 * prod_xz * hrr_0100y;
                        fyj -= 1 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_1_0;
                            dd_jl = dm_jl_1_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_0100y;
                        prod_xz = fac * trr_10z;
                        prod_yz = hrr_0100y * trr_10z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fzi -= 1 * prod_xy * wt;
                        fyj -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_2_0;
                            dd_jl = dm_jl_1_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * 1;
                        prod_xz = trr_10x * hrr_0100z;
                        prod_yz = 1 * hrr_0100z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0200z = hrr_1100z - zjzi * hrr_0100z;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double hrr_0110z = trr_11z - zjzi * trr_01z;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0101z = hrr_1001z - zjzi * hrr_0001z;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fxi -= 1 * prod_yz * fac;
                        fzj -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_0_0;
                            dd_jl = dm_jl_2_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[6*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_10y;
                        prod_xz = fac * hrr_0100z;
                        prod_yz = trr_10y * hrr_0100z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fyi -= 1 * prod_xz * 1;
                        fzj -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_1_0;
                            dd_jl = dm_jl_2_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[7*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * 1;
                        prod_xz = fac * hrr_1100z;
                        prod_yz = 1 * hrr_1100z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                        double hrr_2100z = trr_30z - zjzi * trr_20z;
                        fzi = ai2 * prod_xy * hrr_2100z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1200z = hrr_2100z - zjzi * hrr_1100z;
                        fzj = aj2 * prod_xy * hrr_1200z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                        double hrr_1110z = trr_21z - zjzi * trr_11z;
                        fzk = ak2 * prod_xy * hrr_1110z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_2001z = trr_21z - zlzk * trr_20z;
                        double hrr_1101z = hrr_2001z - zjzi * hrr_1001z;
                        fzl = al2 * prod_xy * hrr_1101z;
                        fzi -= 1 * prod_xy * hrr_0100z;
                        fzj -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_2_0;
                            dd_jl = dm_jl_2_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[8*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                    }
                }
            }
        }
        int ia = bas[ish*BAS_SLOTS+ATOM_OF];
        int ja = bas[jsh*BAS_SLOTS+ATOM_OF];
        int ka = bas[ksh*BAS_SLOTS+ATOM_OF];
        int la = bas[lsh*BAS_SLOTS+ATOM_OF];
        if (vj != NULL) {
            atomicAdd(vj+ia*3+0, vj_grad_ix);
            atomicAdd(vj+ia*3+1, vj_grad_iy);
            atomicAdd(vj+ia*3+2, vj_grad_iz);
            atomicAdd(vj+ja*3+0, vj_grad_jx);
            atomicAdd(vj+ja*3+1, vj_grad_jy);
            atomicAdd(vj+ja*3+2, vj_grad_jz);
            atomicAdd(vj+ka*3+0, vj_grad_kx);
            atomicAdd(vj+ka*3+1, vj_grad_ky);
            atomicAdd(vj+ka*3+2, vj_grad_kz);
            atomicAdd(vj+la*3+0, vj_grad_lx);
            atomicAdd(vj+la*3+1, vj_grad_ly);
            atomicAdd(vj+la*3+2, vj_grad_lz);
        }
        if (vk != NULL) {
            atomicAdd(vk+ia*3+0, vk_grad_ix);
            atomicAdd(vk+ia*3+1, vk_grad_iy);
            atomicAdd(vk+ia*3+2, vk_grad_iz);
            atomicAdd(vk+ja*3+0, vk_grad_jx);
            atomicAdd(vk+ja*3+1, vk_grad_jy);
            atomicAdd(vk+ja*3+2, vk_grad_jz);
            atomicAdd(vk+ka*3+0, vk_grad_kx);
            atomicAdd(vk+ka*3+1, vk_grad_ky);
            atomicAdd(vk+ka*3+2, vk_grad_kz);
            atomicAdd(vk+la*3+0, vk_grad_lx);
            atomicAdd(vk+la*3+1, vk_grad_ly);
            atomicAdd(vk+la*3+2, vk_grad_lz);
        }
    }
}
__global__
void rys_ejk_ip1_1100(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int nbas = envs.nbas;
        int ntasks = _fill_ejk_tasks(shl_quartet_idx, envs, jk, bounds,
                                     batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas_tiles = nbas / TILE;
            int tile_i = tile_ij / nbas_tiles;
            int tile_j = tile_ij % nbas_tiles;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_ejk_ip1_1100(envs, jk, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_ejk_ip1_1110(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int *ao_loc = envs.ao_loc;
    int nbas = envs.nbas;
    int nao = ao_loc[nbas];
    int *bas = envs.bas;
    double *env = envs.env;
    double omega = env[PTR_RANGE_OMEGA];
    double *vj = jk.vj;
    double *vk = jk.vk;
    double *dm = jk.dm;
    extern __shared__ double dm_cache[];
    double *Rpa_cicj = dm_cache + 9 * TILE2;
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env + bas[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env + bas[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    int ij = sq_id / TILE2;
    if (ij < 9) {
        int i = ij % 3;
        int j = ij / 3;
        int sh_ij = sq_id % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        if (jk.n_dm == 1) {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i];
        } else {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i] + dm[(nao+j0+j)*nao+i0+i];
        }
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        if (ish*nbas+jsh == ksh*nbas+lsh) fac_sym *= .5;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        int k0 = ao_loc[ksh];
        int l0 = ao_loc[lsh];
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env + bas[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env + bas[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env + bas[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env + bas[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
        double vj_grad_ix = 0;
        double vj_grad_iy = 0;
        double vj_grad_iz = 0;
        double vj_grad_jx = 0;
        double vj_grad_jy = 0;
        double vj_grad_jz = 0;
        double vj_grad_kx = 0;
        double vj_grad_ky = 0;
        double vj_grad_kz = 0;
        double vj_grad_lx = 0;
        double vj_grad_ly = 0;
        double vj_grad_lz = 0;
        double vk_grad_ix = 0;
        double vk_grad_iy = 0;
        double vk_grad_iz = 0;
        double vk_grad_jx = 0;
        double vk_grad_jy = 0;
        double vk_grad_jz = 0;
        double vk_grad_kx = 0;
        double vk_grad_ky = 0;
        double vk_grad_kz = 0;
        double vk_grad_lx = 0;
        double vk_grad_ly = 0;
        double vk_grad_lz = 0;
        double dm_lk_0_0 = dm[(l0+0)*nao+(k0+0)];
        double dm_lk_0_1 = dm[(l0+0)*nao+(k0+1)];
        double dm_lk_0_2 = dm[(l0+0)*nao+(k0+2)];
        if (jk.n_dm > 1) {
            int nao2 = nao * nao;
            dm_lk_0_0 += dm[nao2+(l0+0)*nao+(k0+0)];
            dm_lk_0_1 += dm[nao2+(l0+0)*nao+(k0+1)];
            dm_lk_0_2 += dm[nao2+(l0+0)*nao+(k0+2)];
        }
        double dm_jk_0_0 = dm[(j0+0)*nao+(k0+0)];
        double dm_jk_0_1 = dm[(j0+0)*nao+(k0+1)];
        double dm_jk_0_2 = dm[(j0+0)*nao+(k0+2)];
        double dm_jk_1_0 = dm[(j0+1)*nao+(k0+0)];
        double dm_jk_1_1 = dm[(j0+1)*nao+(k0+1)];
        double dm_jk_1_2 = dm[(j0+1)*nao+(k0+2)];
        double dm_jk_2_0 = dm[(j0+2)*nao+(k0+0)];
        double dm_jk_2_1 = dm[(j0+2)*nao+(k0+1)];
        double dm_jk_2_2 = dm[(j0+2)*nao+(k0+2)];
        double dm_jl_0_0 = dm[(j0+0)*nao+(l0+0)];
        double dm_jl_1_0 = dm[(j0+1)*nao+(l0+0)];
        double dm_jl_2_0 = dm[(j0+2)*nao+(l0+0)];
        double dm_ik_0_0 = dm[(i0+0)*nao+(k0+0)];
        double dm_ik_0_1 = dm[(i0+0)*nao+(k0+1)];
        double dm_ik_0_2 = dm[(i0+0)*nao+(k0+2)];
        double dm_ik_1_0 = dm[(i0+1)*nao+(k0+0)];
        double dm_ik_1_1 = dm[(i0+1)*nao+(k0+1)];
        double dm_ik_1_2 = dm[(i0+1)*nao+(k0+2)];
        double dm_ik_2_0 = dm[(i0+2)*nao+(k0+0)];
        double dm_ik_2_1 = dm[(i0+2)*nao+(k0+1)];
        double dm_ik_2_2 = dm[(i0+2)*nao+(k0+2)];
        double dm_il_0_0 = dm[(i0+0)*nao+(l0+0)];
        double dm_il_1_0 = dm[(i0+1)*nao+(l0+0)];
        double dm_il_2_0 = dm[(i0+2)*nao+(l0+0)];
        double dd_jk, dd_jl, vj_dd, vk_dd;
        double prod_xy;
        double prod_xz;
        double prod_yz;
        double fxi;
        double fyi;
        double fzi;
        double fxj;
        double fyj;
        double fzj;
        double fxk;
        double fyk;
        double fzk;
        double fxl;
        double fyl;
        double fzl;
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double ak2 = ak * 2;
            double al2 = al * 2;
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double ai2 = ai * 2;
                double aj2 = aj * 2;
                double aij = ai + aj;
                double xjxi = rj[0] - ri[0];
                double yjyi = rj[1] - ri[1];
                double zjzi = rj[2] - ri[2];
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa; // (ai*xi+aj*xj)/aij
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(3, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(3, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 3; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                __syncthreads();
                if (task_id < ntasks) {
                    for (int irys = 0; irys < 3; ++irys) {
                        double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                        double rt = rw[sq_id +  2*irys   *nsq_per_block];
                        double rt_aa = rt / (aij + akl);
                        double rt_akl = rt_aa * aij;
                        double cpx = xqc + xpq*rt_akl;
                        double rt_aij = rt_aa * akl;
                        double c0x = xpa - xpq*rt_aij;
                        double trr_10x = c0x * fac;
                        double b10 = .5/aij * (1 - rt_aij);
                        double trr_20x = c0x * trr_10x + 1*b10 * fac;
                        double b00 = .5 * rt_aa;
                        double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                        double trr_11x = cpx * trr_10x + 1*b00 * fac;
                        double hrr_1110x = trr_21x - xjxi * trr_11x;
                        prod_xy = hrr_1110x * 1;
                        prod_xz = hrr_1110x * wt;
                        prod_yz = 1 * wt;
                        double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                        double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                        double hrr_2110x = trr_31x - xjxi * trr_21x;
                        fxi = ai2 * prod_yz * hrr_2110x;
                        double c0y = ypa - ypq*rt_aij;
                        double trr_10y = c0y * 1;
                        fyi = ai2 * prod_xz * trr_10y;
                        double c0z = zpa - zpq*rt_aij;
                        double trr_10z = c0z * wt;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1210x = hrr_2110x - xjxi * hrr_1110x;
                        fxj = aj2 * prod_yz * hrr_1210x;
                        double hrr_0100y = trr_10y - yjyi * 1;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0100z = trr_10z - zjzi * wt;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double b01 = .5/akl * (1 - rt_akl);
                        double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                        double trr_01x = cpx * fac;
                        double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                        double hrr_1120x = trr_22x - xjxi * trr_12x;
                        fxk = ak2 * prod_yz * hrr_1120x;
                        double cpy = yqc + ypq*rt_akl;
                        double trr_01y = cpy * 1;
                        fyk = ak2 * prod_xz * trr_01y;
                        double cpz = zqc + zpq*rt_akl;
                        double trr_01z = cpz * wt;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_2011x = trr_22x - xlxk * trr_21x;
                        double hrr_1011x = trr_12x - xlxk * trr_11x;
                        double hrr_1111x = hrr_2011x - xjxi * hrr_1011x;
                        fxl = al2 * prod_yz * hrr_1111x;
                        double hrr_0001y = trr_01y - ylyk * 1;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0001z = trr_01z - zlzk * wt;
                        fzl = al2 * prod_xy * hrr_0001z;
                        double hrr_0110x = trr_11x - xjxi * trr_01x;
                        fxi -= 1 * prod_yz * hrr_0110x;
                        fxj -= 1 * prod_yz * trr_11x;
                        double hrr_1100x = trr_20x - xjxi * trr_10x;
                        fxk -= 1 * prod_yz * hrr_1100x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0110x * trr_10y;
                        prod_xz = hrr_0110x * wt;
                        prod_yz = trr_10y * wt;
                        fxi = ai2 * prod_yz * hrr_1110x;
                        double trr_20y = c0y * trr_10y + 1*b10 * 1;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0210x = hrr_1110x - xjxi * hrr_0110x;
                        fxj = aj2 * prod_yz * hrr_0210x;
                        double hrr_1100y = trr_20y - yjyi * trr_10y;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double trr_02x = cpx * trr_01x + 1*b01 * fac;
                        double hrr_0120x = trr_12x - xjxi * trr_02x;
                        fxk = ak2 * prod_yz * hrr_0120x;
                        double trr_11y = cpy * trr_10y + 1*b00 * 1;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_0011x = trr_02x - xlxk * trr_01x;
                        double hrr_0111x = hrr_1011x - xjxi * hrr_0011x;
                        fxl = al2 * prod_yz * hrr_0111x;
                        double hrr_1001y = trr_11y - ylyk * trr_10y;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 1 * prod_xz * 1;
                        fxj -= 1 * prod_yz * trr_01x;
                        double hrr_0100x = trr_10x - xjxi * fac;
                        fxk -= 1 * prod_yz * hrr_0100x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0110x * 1;
                        prod_xz = hrr_0110x * trr_10z;
                        prod_yz = 1 * trr_10z;
                        fxi = ai2 * prod_yz * hrr_1110x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_20z = c0z * trr_10z + 1*b10 * wt;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0210x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1100z = trr_20z - zjzi * trr_10z;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * hrr_0120x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_11z = cpz * trr_10z + 1*b00 * wt;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0111x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1001z = trr_11z - zlzk * trr_10z;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fzi -= 1 * prod_xy * wt;
                        fxj -= 1 * prod_yz * trr_01x;
                        fxk -= 1 * prod_yz * hrr_0100x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_11x * hrr_0100y;
                        prod_xz = trr_11x * wt;
                        prod_yz = hrr_0100y * wt;
                        fxi = ai2 * prod_yz * trr_21x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_1110x;
                        double hrr_0200y = hrr_1100y - yjyi * hrr_0100y;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_12x;
                        double hrr_0110y = trr_11y - yjyi * trr_01y;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_1011x;
                        double hrr_0101y = hrr_1001y - yjyi * hrr_0001y;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * trr_01x;
                        fyj -= 1 * prod_xz * 1;
                        fxk -= 1 * prod_yz * trr_10x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_0_0;
                            dd_jl = dm_jl_1_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * hrr_1100y;
                        prod_xz = trr_01x * wt;
                        prod_yz = hrr_1100y * wt;
                        fxi = ai2 * prod_yz * trr_11x;
                        double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                        double hrr_2100y = trr_30y - yjyi * trr_20y;
                        fyi = ai2 * prod_xz * hrr_2100y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        double hrr_1200y = hrr_2100y - yjyi * hrr_1100y;
                        fyj = aj2 * prod_xz * hrr_1200y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_02x;
                        double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                        double hrr_1110y = trr_21y - yjyi * trr_11y;
                        fyk = ak2 * prod_xz * hrr_1110y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        double hrr_2001y = trr_21y - ylyk * trr_20y;
                        double hrr_1101y = hrr_2001y - yjyi * hrr_1001y;
                        fyl = al2 * prod_xz * hrr_1101y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 1 * prod_xz * hrr_0100y;
                        fyj -= 1 * prod_xz * trr_10y;
                        fxk -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_1_0;
                            dd_jl = dm_jl_1_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * hrr_0100y;
                        prod_xz = trr_01x * trr_10z;
                        prod_yz = hrr_0100y * trr_10z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fzi -= 1 * prod_xy * wt;
                        fyj -= 1 * prod_xz * 1;
                        fxk -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_2_0;
                            dd_jl = dm_jl_1_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_11x * 1;
                        prod_xz = trr_11x * hrr_0100z;
                        prod_yz = 1 * hrr_0100z;
                        fxi = ai2 * prod_yz * trr_21x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_1110x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0200z = hrr_1100z - zjzi * hrr_0100z;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * trr_12x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double hrr_0110z = trr_11z - zjzi * trr_01z;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_1011x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0101z = hrr_1001z - zjzi * hrr_0001z;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fxi -= 1 * prod_yz * trr_01x;
                        fzj -= 1 * prod_xy * wt;
                        fxk -= 1 * prod_yz * trr_10x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_0_0;
                            dd_jl = dm_jl_2_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[6*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * trr_10y;
                        prod_xz = trr_01x * hrr_0100z;
                        prod_yz = trr_10y * hrr_0100z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fyi -= 1 * prod_xz * 1;
                        fzj -= 1 * prod_xy * wt;
                        fxk -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_1_0;
                            dd_jl = dm_jl_2_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[7*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * 1;
                        prod_xz = trr_01x * hrr_1100z;
                        prod_yz = 1 * hrr_1100z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                        double hrr_2100z = trr_30z - zjzi * trr_20z;
                        fzi = ai2 * prod_xy * hrr_2100z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1200z = hrr_2100z - zjzi * hrr_1100z;
                        fzj = aj2 * prod_xy * hrr_1200z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                        double hrr_1110z = trr_21z - zjzi * trr_11z;
                        fzk = ak2 * prod_xy * hrr_1110z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_2001z = trr_21z - zlzk * trr_20z;
                        double hrr_1101z = hrr_2001z - zjzi * hrr_1001z;
                        fzl = al2 * prod_xy * hrr_1101z;
                        fzi -= 1 * prod_xy * hrr_0100z;
                        fzj -= 1 * prod_xy * trr_10z;
                        fxk -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_2_0;
                            dd_jl = dm_jl_2_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[8*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1100x * trr_01y;
                        prod_xz = hrr_1100x * wt;
                        prod_yz = trr_01y * wt;
                        double hrr_2100x = trr_30x - xjxi * trr_20x;
                        fxi = ai2 * prod_yz * hrr_2100x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1200x = hrr_2100x - xjxi * hrr_1100x;
                        fxj = aj2 * prod_yz * hrr_1200x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * hrr_1110x;
                        double trr_02y = cpy * trr_01y + 1*b01 * 1;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_2001x = trr_21x - xlxk * trr_20x;
                        double hrr_1001x = trr_11x - xlxk * trr_10x;
                        double hrr_1101x = hrr_2001x - xjxi * hrr_1001x;
                        fxl = al2 * prod_yz * hrr_1101x;
                        double hrr_0011y = trr_02y - ylyk * trr_01y;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * hrr_0100x;
                        fxj -= 1 * prod_yz * trr_10x;
                        fyk -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * trr_11y;
                        prod_xz = hrr_0100x * wt;
                        prod_yz = trr_11y * wt;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        fyi = ai2 * prod_xz * trr_21y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0200x = hrr_1100x - xjxi * hrr_0100x;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        fyj = aj2 * prod_xz * hrr_1110y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                        fyk = ak2 * prod_xz * trr_12y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_0001x = trr_01x - xlxk * fac;
                        double hrr_0101x = hrr_1001x - xjxi * hrr_0001x;
                        fxl = al2 * prod_yz * hrr_0101x;
                        double hrr_1011y = trr_12y - ylyk * trr_11y;
                        fyl = al2 * prod_xz * hrr_1011y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 1 * prod_xz * trr_01y;
                        fxj -= 1 * prod_yz * fac;
                        fyk -= 1 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * trr_01y;
                        prod_xz = hrr_0100x * trr_10z;
                        prod_yz = trr_01y * trr_10z;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0101x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fzi -= 1 * prod_xy * wt;
                        fxj -= 1 * prod_yz * fac;
                        fyk -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * hrr_0110y;
                        prod_xz = trr_10x * wt;
                        prod_yz = hrr_0110y * wt;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * hrr_1110y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        double hrr_0210y = hrr_1110y - yjyi * hrr_0110y;
                        fyj = aj2 * prod_xz * hrr_0210y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_11x;
                        double hrr_0120y = trr_12y - yjyi * trr_02y;
                        fyk = ak2 * prod_xz * hrr_0120y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        double hrr_0111y = hrr_1011y - yjyi * hrr_0011y;
                        fyl = al2 * prod_xz * hrr_0111y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * fac;
                        fyj -= 1 * prod_xz * trr_01y;
                        fyk -= 1 * prod_xz * hrr_0100y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_1 * dm_il_0_0;
                            dd_jl = dm_jl_1_0 * dm_ik_0_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+1] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_1110y;
                        prod_xz = fac * wt;
                        prod_yz = hrr_1110y * wt;
                        fxi = ai2 * prod_yz * trr_10x;
                        double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                        double hrr_2110y = trr_31y - yjyi * trr_21y;
                        fyi = ai2 * prod_xz * hrr_2110y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        double hrr_1210y = hrr_2110y - yjyi * hrr_1110y;
                        fyj = aj2 * prod_xz * hrr_1210y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                        double hrr_1120y = trr_22y - yjyi * trr_12y;
                        fyk = ak2 * prod_xz * hrr_1120y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        double hrr_2011y = trr_22y - ylyk * trr_21y;
                        double hrr_1111y = hrr_2011y - yjyi * hrr_1011y;
                        fyl = al2 * prod_xz * hrr_1111y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 1 * prod_xz * hrr_0110y;
                        fyj -= 1 * prod_xz * trr_11y;
                        fyk -= 1 * prod_xz * hrr_1100y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_1 * dm_il_1_0;
                            dd_jl = dm_jl_1_0 * dm_ik_1_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+1] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_0110y;
                        prod_xz = fac * trr_10z;
                        prod_yz = hrr_0110y * trr_10z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_1110y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0210y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_0120y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0111y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fzi -= 1 * prod_xy * wt;
                        fyj -= 1 * prod_xz * trr_01y;
                        fyk -= 1 * prod_xz * hrr_0100y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_1 * dm_il_2_0;
                            dd_jl = dm_jl_1_0 * dm_ik_2_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+1] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * trr_01y;
                        prod_xz = trr_10x * hrr_0100z;
                        prod_yz = trr_01y * hrr_0100z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fxi -= 1 * prod_yz * fac;
                        fzj -= 1 * prod_xy * wt;
                        fyk -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_1 * dm_il_0_0;
                            dd_jl = dm_jl_2_0 * dm_ik_0_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+1] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[6*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_11y;
                        prod_xz = fac * hrr_0100z;
                        prod_yz = trr_11y * hrr_0100z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_21y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1110y;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_12y;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1011y;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fyi -= 1 * prod_xz * trr_01y;
                        fzj -= 1 * prod_xy * wt;
                        fyk -= 1 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_1 * dm_il_1_0;
                            dd_jl = dm_jl_2_0 * dm_ik_1_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+1] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[7*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_01y;
                        prod_xz = fac * hrr_1100z;
                        prod_yz = trr_01y * hrr_1100z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * hrr_2100z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_1200z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * hrr_1110z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_1101z;
                        fzi -= 1 * prod_xy * hrr_0100z;
                        fzj -= 1 * prod_xy * trr_10z;
                        fyk -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_1 * dm_il_2_0;
                            dd_jl = dm_jl_2_0 * dm_ik_2_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+1] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[8*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1100x * 1;
                        prod_xz = hrr_1100x * trr_01z;
                        prod_yz = 1 * trr_01z;
                        fxi = ai2 * prod_yz * hrr_2100x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_1200x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * hrr_1110x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_02z = cpz * trr_01z + 1*b01 * wt;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_1101x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0011z = trr_02z - zlzk * trr_01z;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fxi -= 1 * prod_yz * hrr_0100x;
                        fxj -= 1 * prod_yz * trr_10x;
                        fzk -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * trr_10y;
                        prod_xz = hrr_0100x * trr_01z;
                        prod_yz = trr_10y * trr_01z;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_0101x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fyi -= 1 * prod_xz * 1;
                        fxj -= 1 * prod_yz * fac;
                        fzk -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * 1;
                        prod_xz = hrr_0100x * trr_11z;
                        prod_yz = 1 * trr_11z;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * trr_21z;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        fzj = aj2 * prod_xy * hrr_1110z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                        fzk = ak2 * prod_xy * trr_12z;
                        fxl = al2 * prod_yz * hrr_0101x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1011z = trr_12z - zlzk * trr_11z;
                        fzl = al2 * prod_xy * hrr_1011z;
                        fzi -= 1 * prod_xy * trr_01z;
                        fxj -= 1 * prod_yz * fac;
                        fzk -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * hrr_0100y;
                        prod_xz = trr_10x * trr_01z;
                        prod_yz = hrr_0100y * trr_01z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fxi -= 1 * prod_yz * fac;
                        fyj -= 1 * prod_xz * 1;
                        fzk -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_2 * dm_il_0_0;
                            dd_jl = dm_jl_1_0 * dm_ik_0_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+2] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_1100y;
                        prod_xz = fac * trr_01z;
                        prod_yz = hrr_1100y * trr_01z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_2100y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1200y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_1110y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1101y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fyi -= 1 * prod_xz * hrr_0100y;
                        fyj -= 1 * prod_xz * trr_10y;
                        fzk -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_2 * dm_il_1_0;
                            dd_jl = dm_jl_1_0 * dm_ik_1_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+2] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_0100y;
                        prod_xz = fac * trr_11z;
                        prod_yz = hrr_0100y * trr_11z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * trr_21z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_1110z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * trr_12z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_1011z;
                        fzi -= 1 * prod_xy * trr_01z;
                        fyj -= 1 * prod_xz * 1;
                        fzk -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_2 * dm_il_2_0;
                            dd_jl = dm_jl_1_0 * dm_ik_2_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+2] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * 1;
                        prod_xz = trr_10x * hrr_0110z;
                        prod_yz = 1 * hrr_0110z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_1110z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0210z = hrr_1110z - zjzi * hrr_0110z;
                        fzj = aj2 * prod_xy * hrr_0210z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double hrr_0120z = trr_12z - zjzi * trr_02z;
                        fzk = ak2 * prod_xy * hrr_0120z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0111z = hrr_1011z - zjzi * hrr_0011z;
                        fzl = al2 * prod_xy * hrr_0111z;
                        fxi -= 1 * prod_yz * fac;
                        fzj -= 1 * prod_xy * trr_01z;
                        fzk -= 1 * prod_xy * hrr_0100z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_2 * dm_il_0_0;
                            dd_jl = dm_jl_2_0 * dm_ik_0_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+2] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[6*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_10y;
                        prod_xz = fac * hrr_0110z;
                        prod_yz = trr_10y * hrr_0110z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * hrr_1110z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0210z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * hrr_0120z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0111z;
                        fyi -= 1 * prod_xz * 1;
                        fzj -= 1 * prod_xy * trr_01z;
                        fzk -= 1 * prod_xy * hrr_0100z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_2 * dm_il_1_0;
                            dd_jl = dm_jl_2_0 * dm_ik_1_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+2] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[7*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * 1;
                        prod_xz = fac * hrr_1110z;
                        prod_yz = 1 * hrr_1110z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                        double hrr_2110z = trr_31z - zjzi * trr_21z;
                        fzi = ai2 * prod_xy * hrr_2110z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1210z = hrr_2110z - zjzi * hrr_1110z;
                        fzj = aj2 * prod_xy * hrr_1210z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                        double hrr_1120z = trr_22z - zjzi * trr_12z;
                        fzk = ak2 * prod_xy * hrr_1120z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_2011z = trr_22z - zlzk * trr_21z;
                        double hrr_1111z = hrr_2011z - zjzi * hrr_1011z;
                        fzl = al2 * prod_xy * hrr_1111z;
                        fzi -= 1 * prod_xy * hrr_0110z;
                        fzj -= 1 * prod_xy * trr_11z;
                        fzk -= 1 * prod_xy * hrr_1100z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_2 * dm_il_2_0;
                            dd_jl = dm_jl_2_0 * dm_ik_2_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+2] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[8*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                    }
                }
            }
        }
        int ia = bas[ish*BAS_SLOTS+ATOM_OF];
        int ja = bas[jsh*BAS_SLOTS+ATOM_OF];
        int ka = bas[ksh*BAS_SLOTS+ATOM_OF];
        int la = bas[lsh*BAS_SLOTS+ATOM_OF];
        if (vj != NULL) {
            atomicAdd(vj+ia*3+0, vj_grad_ix);
            atomicAdd(vj+ia*3+1, vj_grad_iy);
            atomicAdd(vj+ia*3+2, vj_grad_iz);
            atomicAdd(vj+ja*3+0, vj_grad_jx);
            atomicAdd(vj+ja*3+1, vj_grad_jy);
            atomicAdd(vj+ja*3+2, vj_grad_jz);
            atomicAdd(vj+ka*3+0, vj_grad_kx);
            atomicAdd(vj+ka*3+1, vj_grad_ky);
            atomicAdd(vj+ka*3+2, vj_grad_kz);
            atomicAdd(vj+la*3+0, vj_grad_lx);
            atomicAdd(vj+la*3+1, vj_grad_ly);
            atomicAdd(vj+la*3+2, vj_grad_lz);
        }
        if (vk != NULL) {
            atomicAdd(vk+ia*3+0, vk_grad_ix);
            atomicAdd(vk+ia*3+1, vk_grad_iy);
            atomicAdd(vk+ia*3+2, vk_grad_iz);
            atomicAdd(vk+ja*3+0, vk_grad_jx);
            atomicAdd(vk+ja*3+1, vk_grad_jy);
            atomicAdd(vk+ja*3+2, vk_grad_jz);
            atomicAdd(vk+ka*3+0, vk_grad_kx);
            atomicAdd(vk+ka*3+1, vk_grad_ky);
            atomicAdd(vk+ka*3+2, vk_grad_kz);
            atomicAdd(vk+la*3+0, vk_grad_lx);
            atomicAdd(vk+la*3+1, vk_grad_ly);
            atomicAdd(vk+la*3+2, vk_grad_lz);
        }
    }
}
__global__
void rys_ejk_ip1_1110(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int nbas = envs.nbas;
        int ntasks = _fill_ejk_tasks(shl_quartet_idx, envs, jk, bounds,
                                     batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas_tiles = nbas / TILE;
            int tile_i = tile_ij / nbas_tiles;
            int tile_j = tile_ij % nbas_tiles;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_ejk_ip1_1110(envs, jk, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_ejk_ip1_1111(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int *ao_loc = envs.ao_loc;
    int nbas = envs.nbas;
    int nao = ao_loc[nbas];
    int *bas = envs.bas;
    double *env = envs.env;
    double omega = env[PTR_RANGE_OMEGA];
    double *vj = jk.vj;
    double *vk = jk.vk;
    double *dm = jk.dm;
    extern __shared__ double dm_cache[];
    double *Rpa_cicj = dm_cache + 9 * TILE2;
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env + bas[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env + bas[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    int ij = sq_id / TILE2;
    if (ij < 9) {
        int i = ij % 3;
        int j = ij / 3;
        int sh_ij = sq_id % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        if (jk.n_dm == 1) {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i];
        } else {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i] + dm[(nao+j0+j)*nao+i0+i];
        }
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        if (ish*nbas+jsh == ksh*nbas+lsh) fac_sym *= .5;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        int k0 = ao_loc[ksh];
        int l0 = ao_loc[lsh];
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env + bas[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env + bas[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env + bas[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env + bas[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
        double vj_grad_ix = 0;
        double vj_grad_iy = 0;
        double vj_grad_iz = 0;
        double vj_grad_jx = 0;
        double vj_grad_jy = 0;
        double vj_grad_jz = 0;
        double vj_grad_kx = 0;
        double vj_grad_ky = 0;
        double vj_grad_kz = 0;
        double vj_grad_lx = 0;
        double vj_grad_ly = 0;
        double vj_grad_lz = 0;
        double vk_grad_ix = 0;
        double vk_grad_iy = 0;
        double vk_grad_iz = 0;
        double vk_grad_jx = 0;
        double vk_grad_jy = 0;
        double vk_grad_jz = 0;
        double vk_grad_kx = 0;
        double vk_grad_ky = 0;
        double vk_grad_kz = 0;
        double vk_grad_lx = 0;
        double vk_grad_ly = 0;
        double vk_grad_lz = 0;
        double dm_lk_0_0 = dm[(l0+0)*nao+(k0+0)];
        double dm_lk_0_1 = dm[(l0+0)*nao+(k0+1)];
        double dm_lk_0_2 = dm[(l0+0)*nao+(k0+2)];
        double dm_lk_1_0 = dm[(l0+1)*nao+(k0+0)];
        double dm_lk_1_1 = dm[(l0+1)*nao+(k0+1)];
        double dm_lk_1_2 = dm[(l0+1)*nao+(k0+2)];
        double dm_lk_2_0 = dm[(l0+2)*nao+(k0+0)];
        double dm_lk_2_1 = dm[(l0+2)*nao+(k0+1)];
        double dm_lk_2_2 = dm[(l0+2)*nao+(k0+2)];
        if (jk.n_dm > 1) {
            int nao2 = nao * nao;
            dm_lk_0_0 += dm[nao2+(l0+0)*nao+(k0+0)];
            dm_lk_0_1 += dm[nao2+(l0+0)*nao+(k0+1)];
            dm_lk_0_2 += dm[nao2+(l0+0)*nao+(k0+2)];
            dm_lk_1_0 += dm[nao2+(l0+1)*nao+(k0+0)];
            dm_lk_1_1 += dm[nao2+(l0+1)*nao+(k0+1)];
            dm_lk_1_2 += dm[nao2+(l0+1)*nao+(k0+2)];
            dm_lk_2_0 += dm[nao2+(l0+2)*nao+(k0+0)];
            dm_lk_2_1 += dm[nao2+(l0+2)*nao+(k0+1)];
            dm_lk_2_2 += dm[nao2+(l0+2)*nao+(k0+2)];
        }
        double dm_jk_0_0 = dm[(j0+0)*nao+(k0+0)];
        double dm_jk_0_1 = dm[(j0+0)*nao+(k0+1)];
        double dm_jk_0_2 = dm[(j0+0)*nao+(k0+2)];
        double dm_jk_1_0 = dm[(j0+1)*nao+(k0+0)];
        double dm_jk_1_1 = dm[(j0+1)*nao+(k0+1)];
        double dm_jk_1_2 = dm[(j0+1)*nao+(k0+2)];
        double dm_jk_2_0 = dm[(j0+2)*nao+(k0+0)];
        double dm_jk_2_1 = dm[(j0+2)*nao+(k0+1)];
        double dm_jk_2_2 = dm[(j0+2)*nao+(k0+2)];
        double dm_jl_0_0 = dm[(j0+0)*nao+(l0+0)];
        double dm_jl_0_1 = dm[(j0+0)*nao+(l0+1)];
        double dm_jl_0_2 = dm[(j0+0)*nao+(l0+2)];
        double dm_jl_1_0 = dm[(j0+1)*nao+(l0+0)];
        double dm_jl_1_1 = dm[(j0+1)*nao+(l0+1)];
        double dm_jl_1_2 = dm[(j0+1)*nao+(l0+2)];
        double dm_jl_2_0 = dm[(j0+2)*nao+(l0+0)];
        double dm_jl_2_1 = dm[(j0+2)*nao+(l0+1)];
        double dm_jl_2_2 = dm[(j0+2)*nao+(l0+2)];
        double dm_ik_0_0 = dm[(i0+0)*nao+(k0+0)];
        double dm_ik_0_1 = dm[(i0+0)*nao+(k0+1)];
        double dm_ik_0_2 = dm[(i0+0)*nao+(k0+2)];
        double dm_ik_1_0 = dm[(i0+1)*nao+(k0+0)];
        double dm_ik_1_1 = dm[(i0+1)*nao+(k0+1)];
        double dm_ik_1_2 = dm[(i0+1)*nao+(k0+2)];
        double dm_ik_2_0 = dm[(i0+2)*nao+(k0+0)];
        double dm_ik_2_1 = dm[(i0+2)*nao+(k0+1)];
        double dm_ik_2_2 = dm[(i0+2)*nao+(k0+2)];
        double dm_il_0_0 = dm[(i0+0)*nao+(l0+0)];
        double dm_il_0_1 = dm[(i0+0)*nao+(l0+1)];
        double dm_il_0_2 = dm[(i0+0)*nao+(l0+2)];
        double dm_il_1_0 = dm[(i0+1)*nao+(l0+0)];
        double dm_il_1_1 = dm[(i0+1)*nao+(l0+1)];
        double dm_il_1_2 = dm[(i0+1)*nao+(l0+2)];
        double dm_il_2_0 = dm[(i0+2)*nao+(l0+0)];
        double dm_il_2_1 = dm[(i0+2)*nao+(l0+1)];
        double dm_il_2_2 = dm[(i0+2)*nao+(l0+2)];
        double dd_jk, dd_jl, vj_dd, vk_dd;
        double prod_xy;
        double prod_xz;
        double prod_yz;
        double fxi;
        double fyi;
        double fzi;
        double fxj;
        double fyj;
        double fzj;
        double fxk;
        double fyk;
        double fzk;
        double fxl;
        double fyl;
        double fzl;
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double ak2 = ak * 2;
            double al2 = al * 2;
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double ai2 = ai * 2;
                double aj2 = aj * 2;
                double aij = ai + aj;
                double xjxi = rj[0] - ri[0];
                double yjyi = rj[1] - ri[1];
                double zjzi = rj[2] - ri[2];
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa; // (ai*xi+aj*xj)/aij
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(3, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(3, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 3; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                __syncthreads();
                if (task_id < ntasks) {
                    for (int irys = 0; irys < 3; ++irys) {
                        double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                        double rt = rw[sq_id +  2*irys   *nsq_per_block];
                        double rt_aa = rt / (aij + akl);
                        double rt_akl = rt_aa * aij;
                        double cpx = xqc + xpq*rt_akl;
                        double rt_aij = rt_aa * akl;
                        double c0x = xpa - xpq*rt_aij;
                        double trr_10x = c0x * fac;
                        double b10 = .5/aij * (1 - rt_aij);
                        double trr_20x = c0x * trr_10x + 1*b10 * fac;
                        double b00 = .5 * rt_aa;
                        double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                        double b01 = .5/akl * (1 - rt_akl);
                        double trr_11x = cpx * trr_10x + 1*b00 * fac;
                        double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                        double hrr_2011x = trr_22x - xlxk * trr_21x;
                        double trr_01x = cpx * fac;
                        double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                        double hrr_1011x = trr_12x - xlxk * trr_11x;
                        double hrr_1111x = hrr_2011x - xjxi * hrr_1011x;
                        prod_xy = hrr_1111x * 1;
                        prod_xz = hrr_1111x * wt;
                        prod_yz = 1 * wt;
                        double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                        double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                        double trr_32x = cpx * trr_31x + 1*b01 * trr_30x + 3*b00 * trr_21x;
                        double hrr_3011x = trr_32x - xlxk * trr_31x;
                        double hrr_2111x = hrr_3011x - xjxi * hrr_2011x;
                        fxi = ai2 * prod_yz * hrr_2111x;
                        double c0y = ypa - ypq*rt_aij;
                        double trr_10y = c0y * 1;
                        fyi = ai2 * prod_xz * trr_10y;
                        double c0z = zpa - zpq*rt_aij;
                        double trr_10z = c0z * wt;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1211x = hrr_2111x - xjxi * hrr_1111x;
                        fxj = aj2 * prod_yz * hrr_1211x;
                        double hrr_0100y = trr_10y - yjyi * 1;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0100z = trr_10z - zjzi * wt;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double trr_23x = cpx * trr_22x + 2*b01 * trr_21x + 2*b00 * trr_12x;
                        double hrr_2021x = trr_23x - xlxk * trr_22x;
                        double trr_02x = cpx * trr_01x + 1*b01 * fac;
                        double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                        double hrr_1021x = trr_13x - xlxk * trr_12x;
                        double hrr_1121x = hrr_2021x - xjxi * hrr_1021x;
                        fxk = ak2 * prod_yz * hrr_1121x;
                        double cpy = yqc + ypq*rt_akl;
                        double trr_01y = cpy * 1;
                        fyk = ak2 * prod_xz * trr_01y;
                        double cpz = zqc + zpq*rt_akl;
                        double trr_01z = cpz * wt;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_2012x = hrr_2021x - xlxk * hrr_2011x;
                        double hrr_1012x = hrr_1021x - xlxk * hrr_1011x;
                        double hrr_1112x = hrr_2012x - xjxi * hrr_1012x;
                        fxl = al2 * prod_yz * hrr_1112x;
                        double hrr_0001y = trr_01y - ylyk * 1;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0001z = trr_01z - zlzk * wt;
                        fzl = al2 * prod_xy * hrr_0001z;
                        double hrr_0011x = trr_02x - xlxk * trr_01x;
                        double hrr_0111x = hrr_1011x - xjxi * hrr_0011x;
                        fxi -= 1 * prod_yz * hrr_0111x;
                        fxj -= 1 * prod_yz * hrr_1011x;
                        double hrr_2001x = trr_21x - xlxk * trr_20x;
                        double hrr_1001x = trr_11x - xlxk * trr_10x;
                        double hrr_1101x = hrr_2001x - xjxi * hrr_1001x;
                        fxk -= 1 * prod_yz * hrr_1101x;
                        double hrr_1110x = trr_21x - xjxi * trr_11x;
                        fxl -= 1 * prod_yz * hrr_1110x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0111x * trr_10y;
                        prod_xz = hrr_0111x * wt;
                        prod_yz = trr_10y * wt;
                        fxi = ai2 * prod_yz * hrr_1111x;
                        double trr_20y = c0y * trr_10y + 1*b10 * 1;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0211x = hrr_1111x - xjxi * hrr_0111x;
                        fxj = aj2 * prod_yz * hrr_0211x;
                        double hrr_1100y = trr_20y - yjyi * trr_10y;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                        double hrr_0021x = trr_03x - xlxk * trr_02x;
                        double hrr_0121x = hrr_1021x - xjxi * hrr_0021x;
                        fxk = ak2 * prod_yz * hrr_0121x;
                        double trr_11y = cpy * trr_10y + 1*b00 * 1;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_0012x = hrr_0021x - xlxk * hrr_0011x;
                        double hrr_0112x = hrr_1012x - xjxi * hrr_0012x;
                        fxl = al2 * prod_yz * hrr_0112x;
                        double hrr_1001y = trr_11y - ylyk * trr_10y;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 1 * prod_xz * 1;
                        fxj -= 1 * prod_yz * hrr_0011x;
                        double hrr_0001x = trr_01x - xlxk * fac;
                        double hrr_0101x = hrr_1001x - xjxi * hrr_0001x;
                        fxk -= 1 * prod_yz * hrr_0101x;
                        double hrr_0110x = trr_11x - xjxi * trr_01x;
                        fxl -= 1 * prod_yz * hrr_0110x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0111x * 1;
                        prod_xz = hrr_0111x * trr_10z;
                        prod_yz = 1 * trr_10z;
                        fxi = ai2 * prod_yz * hrr_1111x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_20z = c0z * trr_10z + 1*b10 * wt;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0211x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1100z = trr_20z - zjzi * trr_10z;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * hrr_0121x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_11z = cpz * trr_10z + 1*b00 * wt;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0112x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1001z = trr_11z - zlzk * trr_10z;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fzi -= 1 * prod_xy * wt;
                        fxj -= 1 * prod_yz * hrr_0011x;
                        fxk -= 1 * prod_yz * hrr_0101x;
                        fxl -= 1 * prod_yz * hrr_0110x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1011x * hrr_0100y;
                        prod_xz = hrr_1011x * wt;
                        prod_yz = hrr_0100y * wt;
                        fxi = ai2 * prod_yz * hrr_2011x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_1111x;
                        double hrr_0200y = hrr_1100y - yjyi * hrr_0100y;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * hrr_1021x;
                        double hrr_0110y = trr_11y - yjyi * trr_01y;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_1012x;
                        double hrr_0101y = hrr_1001y - yjyi * hrr_0001y;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * hrr_0011x;
                        fyj -= 1 * prod_xz * 1;
                        fxk -= 1 * prod_yz * hrr_1001x;
                        fxl -= 1 * prod_yz * trr_11x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_0_0;
                            dd_jl = dm_jl_1_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0011x * hrr_1100y;
                        prod_xz = hrr_0011x * wt;
                        prod_yz = hrr_1100y * wt;
                        fxi = ai2 * prod_yz * hrr_1011x;
                        double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                        double hrr_2100y = trr_30y - yjyi * trr_20y;
                        fyi = ai2 * prod_xz * hrr_2100y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_0111x;
                        double hrr_1200y = hrr_2100y - yjyi * hrr_1100y;
                        fyj = aj2 * prod_xz * hrr_1200y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * hrr_0021x;
                        double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                        double hrr_1110y = trr_21y - yjyi * trr_11y;
                        fyk = ak2 * prod_xz * hrr_1110y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_0012x;
                        double hrr_2001y = trr_21y - ylyk * trr_20y;
                        double hrr_1101y = hrr_2001y - yjyi * hrr_1001y;
                        fyl = al2 * prod_xz * hrr_1101y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 1 * prod_xz * hrr_0100y;
                        fyj -= 1 * prod_xz * trr_10y;
                        fxk -= 1 * prod_yz * hrr_0001x;
                        fxl -= 1 * prod_yz * trr_01x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_1_0;
                            dd_jl = dm_jl_1_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0011x * hrr_0100y;
                        prod_xz = hrr_0011x * trr_10z;
                        prod_yz = hrr_0100y * trr_10z;
                        fxi = ai2 * prod_yz * hrr_1011x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0111x;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * hrr_0021x;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0012x;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fzi -= 1 * prod_xy * wt;
                        fyj -= 1 * prod_xz * 1;
                        fxk -= 1 * prod_yz * hrr_0001x;
                        fxl -= 1 * prod_yz * trr_01x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_2_0;
                            dd_jl = dm_jl_1_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1011x * 1;
                        prod_xz = hrr_1011x * hrr_0100z;
                        prod_yz = 1 * hrr_0100z;
                        fxi = ai2 * prod_yz * hrr_2011x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_1111x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0200z = hrr_1100z - zjzi * hrr_0100z;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * hrr_1021x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double hrr_0110z = trr_11z - zjzi * trr_01z;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_1012x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0101z = hrr_1001z - zjzi * hrr_0001z;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fxi -= 1 * prod_yz * hrr_0011x;
                        fzj -= 1 * prod_xy * wt;
                        fxk -= 1 * prod_yz * hrr_1001x;
                        fxl -= 1 * prod_yz * trr_11x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_0_0;
                            dd_jl = dm_jl_2_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[6*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0011x * trr_10y;
                        prod_xz = hrr_0011x * hrr_0100z;
                        prod_yz = trr_10y * hrr_0100z;
                        fxi = ai2 * prod_yz * hrr_1011x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_0111x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * hrr_0021x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_0012x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fyi -= 1 * prod_xz * 1;
                        fzj -= 1 * prod_xy * wt;
                        fxk -= 1 * prod_yz * hrr_0001x;
                        fxl -= 1 * prod_yz * trr_01x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_1_0;
                            dd_jl = dm_jl_2_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[7*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0011x * 1;
                        prod_xz = hrr_0011x * hrr_1100z;
                        prod_yz = 1 * hrr_1100z;
                        fxi = ai2 * prod_yz * hrr_1011x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                        double hrr_2100z = trr_30z - zjzi * trr_20z;
                        fzi = ai2 * prod_xy * hrr_2100z;
                        fxj = aj2 * prod_yz * hrr_0111x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1200z = hrr_2100z - zjzi * hrr_1100z;
                        fzj = aj2 * prod_xy * hrr_1200z;
                        fxk = ak2 * prod_yz * hrr_0021x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                        double hrr_1110z = trr_21z - zjzi * trr_11z;
                        fzk = ak2 * prod_xy * hrr_1110z;
                        fxl = al2 * prod_yz * hrr_0012x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_2001z = trr_21z - zlzk * trr_20z;
                        double hrr_1101z = hrr_2001z - zjzi * hrr_1001z;
                        fzl = al2 * prod_xy * hrr_1101z;
                        fzi -= 1 * prod_xy * hrr_0100z;
                        fzj -= 1 * prod_xy * trr_10z;
                        fxk -= 1 * prod_yz * hrr_0001x;
                        fxl -= 1 * prod_yz * trr_01x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_2_0;
                            dd_jl = dm_jl_2_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[8*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1101x * trr_01y;
                        prod_xz = hrr_1101x * wt;
                        prod_yz = trr_01y * wt;
                        double hrr_3001x = trr_31x - xlxk * trr_30x;
                        double hrr_2101x = hrr_3001x - xjxi * hrr_2001x;
                        fxi = ai2 * prod_yz * hrr_2101x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1201x = hrr_2101x - xjxi * hrr_1101x;
                        fxj = aj2 * prod_yz * hrr_1201x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * hrr_1111x;
                        double trr_02y = cpy * trr_01y + 1*b01 * 1;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_2002x = hrr_2011x - xlxk * hrr_2001x;
                        double hrr_1002x = hrr_1011x - xlxk * hrr_1001x;
                        double hrr_1102x = hrr_2002x - xjxi * hrr_1002x;
                        fxl = al2 * prod_yz * hrr_1102x;
                        double hrr_0011y = trr_02y - ylyk * trr_01y;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * hrr_0101x;
                        fxj -= 1 * prod_yz * hrr_1001x;
                        fyk -= 1 * prod_xz * 1;
                        double hrr_1100x = trr_20x - xjxi * trr_10x;
                        fxl -= 1 * prod_yz * hrr_1100x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0101x * trr_11y;
                        prod_xz = hrr_0101x * wt;
                        prod_yz = trr_11y * wt;
                        fxi = ai2 * prod_yz * hrr_1101x;
                        fyi = ai2 * prod_xz * trr_21y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0201x = hrr_1101x - xjxi * hrr_0101x;
                        fxj = aj2 * prod_yz * hrr_0201x;
                        fyj = aj2 * prod_xz * hrr_1110y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * hrr_0111x;
                        double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                        fyk = ak2 * prod_xz * trr_12y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_0002x = hrr_0011x - xlxk * hrr_0001x;
                        double hrr_0102x = hrr_1002x - xjxi * hrr_0002x;
                        fxl = al2 * prod_yz * hrr_0102x;
                        double hrr_1011y = trr_12y - ylyk * trr_11y;
                        fyl = al2 * prod_xz * hrr_1011y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 1 * prod_xz * trr_01y;
                        fxj -= 1 * prod_yz * hrr_0001x;
                        fyk -= 1 * prod_xz * trr_10y;
                        double hrr_0100x = trr_10x - xjxi * fac;
                        fxl -= 1 * prod_yz * hrr_0100x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0101x * trr_01y;
                        prod_xz = hrr_0101x * trr_10z;
                        prod_yz = trr_01y * trr_10z;
                        fxi = ai2 * prod_yz * hrr_1101x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0201x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * hrr_0111x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0102x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fzi -= 1 * prod_xy * wt;
                        fxj -= 1 * prod_yz * hrr_0001x;
                        fyk -= 1 * prod_xz * 1;
                        fxl -= 1 * prod_yz * hrr_0100x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1001x * hrr_0110y;
                        prod_xz = hrr_1001x * wt;
                        prod_yz = hrr_0110y * wt;
                        fxi = ai2 * prod_yz * hrr_2001x;
                        fyi = ai2 * prod_xz * hrr_1110y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_1101x;
                        double hrr_0210y = hrr_1110y - yjyi * hrr_0110y;
                        fyj = aj2 * prod_xz * hrr_0210y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * hrr_1011x;
                        double hrr_0120y = trr_12y - yjyi * trr_02y;
                        fyk = ak2 * prod_xz * hrr_0120y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_1002x;
                        double hrr_0111y = hrr_1011y - yjyi * hrr_0011y;
                        fyl = al2 * prod_xz * hrr_0111y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * hrr_0001x;
                        fyj -= 1 * prod_xz * trr_01y;
                        fyk -= 1 * prod_xz * hrr_0100y;
                        fxl -= 1 * prod_yz * trr_10x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_1 * dm_il_0_0;
                            dd_jl = dm_jl_1_0 * dm_ik_0_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+1] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0001x * hrr_1110y;
                        prod_xz = hrr_0001x * wt;
                        prod_yz = hrr_1110y * wt;
                        fxi = ai2 * prod_yz * hrr_1001x;
                        double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                        double hrr_2110y = trr_31y - yjyi * trr_21y;
                        fyi = ai2 * prod_xz * hrr_2110y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_0101x;
                        double hrr_1210y = hrr_2110y - yjyi * hrr_1110y;
                        fyj = aj2 * prod_xz * hrr_1210y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * hrr_0011x;
                        double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                        double hrr_1120y = trr_22y - yjyi * trr_12y;
                        fyk = ak2 * prod_xz * hrr_1120y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_0002x;
                        double hrr_2011y = trr_22y - ylyk * trr_21y;
                        double hrr_1111y = hrr_2011y - yjyi * hrr_1011y;
                        fyl = al2 * prod_xz * hrr_1111y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 1 * prod_xz * hrr_0110y;
                        fyj -= 1 * prod_xz * trr_11y;
                        fyk -= 1 * prod_xz * hrr_1100y;
                        fxl -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_1 * dm_il_1_0;
                            dd_jl = dm_jl_1_0 * dm_ik_1_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+1] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0001x * hrr_0110y;
                        prod_xz = hrr_0001x * trr_10z;
                        prod_yz = hrr_0110y * trr_10z;
                        fxi = ai2 * prod_yz * hrr_1001x;
                        fyi = ai2 * prod_xz * hrr_1110y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0101x;
                        fyj = aj2 * prod_xz * hrr_0210y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * hrr_0011x;
                        fyk = ak2 * prod_xz * hrr_0120y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0002x;
                        fyl = al2 * prod_xz * hrr_0111y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fzi -= 1 * prod_xy * wt;
                        fyj -= 1 * prod_xz * trr_01y;
                        fyk -= 1 * prod_xz * hrr_0100y;
                        fxl -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_1 * dm_il_2_0;
                            dd_jl = dm_jl_1_0 * dm_ik_2_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+1] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1001x * trr_01y;
                        prod_xz = hrr_1001x * hrr_0100z;
                        prod_yz = trr_01y * hrr_0100z;
                        fxi = ai2 * prod_yz * hrr_2001x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_1101x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * hrr_1011x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_1002x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fxi -= 1 * prod_yz * hrr_0001x;
                        fzj -= 1 * prod_xy * wt;
                        fyk -= 1 * prod_xz * 1;
                        fxl -= 1 * prod_yz * trr_10x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_1 * dm_il_0_0;
                            dd_jl = dm_jl_2_0 * dm_ik_0_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+1] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[6*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0001x * trr_11y;
                        prod_xz = hrr_0001x * hrr_0100z;
                        prod_yz = trr_11y * hrr_0100z;
                        fxi = ai2 * prod_yz * hrr_1001x;
                        fyi = ai2 * prod_xz * trr_21y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_0101x;
                        fyj = aj2 * prod_xz * hrr_1110y;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * hrr_0011x;
                        fyk = ak2 * prod_xz * trr_12y;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_0002x;
                        fyl = al2 * prod_xz * hrr_1011y;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fyi -= 1 * prod_xz * trr_01y;
                        fzj -= 1 * prod_xy * wt;
                        fyk -= 1 * prod_xz * trr_10y;
                        fxl -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_1 * dm_il_1_0;
                            dd_jl = dm_jl_2_0 * dm_ik_1_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+1] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[7*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0001x * trr_01y;
                        prod_xz = hrr_0001x * hrr_1100z;
                        prod_yz = trr_01y * hrr_1100z;
                        fxi = ai2 * prod_yz * hrr_1001x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * hrr_2100z;
                        fxj = aj2 * prod_yz * hrr_0101x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_1200z;
                        fxk = ak2 * prod_yz * hrr_0011x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * hrr_1110z;
                        fxl = al2 * prod_yz * hrr_0002x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_1101z;
                        fzi -= 1 * prod_xy * hrr_0100z;
                        fzj -= 1 * prod_xy * trr_10z;
                        fyk -= 1 * prod_xz * 1;
                        fxl -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_1 * dm_il_2_0;
                            dd_jl = dm_jl_2_0 * dm_ik_2_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+1] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[8*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1101x * 1;
                        prod_xz = hrr_1101x * trr_01z;
                        prod_yz = 1 * trr_01z;
                        fxi = ai2 * prod_yz * hrr_2101x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_1201x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * hrr_1111x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_02z = cpz * trr_01z + 1*b01 * wt;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_1102x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0011z = trr_02z - zlzk * trr_01z;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fxi -= 1 * prod_yz * hrr_0101x;
                        fxj -= 1 * prod_yz * hrr_1001x;
                        fzk -= 1 * prod_xy * wt;
                        fxl -= 1 * prod_yz * hrr_1100x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0101x * trr_10y;
                        prod_xz = hrr_0101x * trr_01z;
                        prod_yz = trr_10y * trr_01z;
                        fxi = ai2 * prod_yz * hrr_1101x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_0201x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * hrr_0111x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_0102x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fyi -= 1 * prod_xz * 1;
                        fxj -= 1 * prod_yz * hrr_0001x;
                        fzk -= 1 * prod_xy * wt;
                        fxl -= 1 * prod_yz * hrr_0100x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0101x * 1;
                        prod_xz = hrr_0101x * trr_11z;
                        prod_yz = 1 * trr_11z;
                        fxi = ai2 * prod_yz * hrr_1101x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * trr_21z;
                        fxj = aj2 * prod_yz * hrr_0201x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        fzj = aj2 * prod_xy * hrr_1110z;
                        fxk = ak2 * prod_yz * hrr_0111x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                        fzk = ak2 * prod_xy * trr_12z;
                        fxl = al2 * prod_yz * hrr_0102x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1011z = trr_12z - zlzk * trr_11z;
                        fzl = al2 * prod_xy * hrr_1011z;
                        fzi -= 1 * prod_xy * trr_01z;
                        fxj -= 1 * prod_yz * hrr_0001x;
                        fzk -= 1 * prod_xy * trr_10z;
                        fxl -= 1 * prod_yz * hrr_0100x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1001x * hrr_0100y;
                        prod_xz = hrr_1001x * trr_01z;
                        prod_yz = hrr_0100y * trr_01z;
                        fxi = ai2 * prod_yz * hrr_2001x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_1101x;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * hrr_1011x;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_1002x;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fxi -= 1 * prod_yz * hrr_0001x;
                        fyj -= 1 * prod_xz * 1;
                        fzk -= 1 * prod_xy * wt;
                        fxl -= 1 * prod_yz * trr_10x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_2 * dm_il_0_0;
                            dd_jl = dm_jl_1_0 * dm_ik_0_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+2] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0001x * hrr_1100y;
                        prod_xz = hrr_0001x * trr_01z;
                        prod_yz = hrr_1100y * trr_01z;
                        fxi = ai2 * prod_yz * hrr_1001x;
                        fyi = ai2 * prod_xz * hrr_2100y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_0101x;
                        fyj = aj2 * prod_xz * hrr_1200y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * hrr_0011x;
                        fyk = ak2 * prod_xz * hrr_1110y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_0002x;
                        fyl = al2 * prod_xz * hrr_1101y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fyi -= 1 * prod_xz * hrr_0100y;
                        fyj -= 1 * prod_xz * trr_10y;
                        fzk -= 1 * prod_xy * wt;
                        fxl -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_2 * dm_il_1_0;
                            dd_jl = dm_jl_1_0 * dm_ik_1_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+2] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0001x * hrr_0100y;
                        prod_xz = hrr_0001x * trr_11z;
                        prod_yz = hrr_0100y * trr_11z;
                        fxi = ai2 * prod_yz * hrr_1001x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * trr_21z;
                        fxj = aj2 * prod_yz * hrr_0101x;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_1110z;
                        fxk = ak2 * prod_yz * hrr_0011x;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * trr_12z;
                        fxl = al2 * prod_yz * hrr_0002x;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_1011z;
                        fzi -= 1 * prod_xy * trr_01z;
                        fyj -= 1 * prod_xz * 1;
                        fzk -= 1 * prod_xy * trr_10z;
                        fxl -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_2 * dm_il_2_0;
                            dd_jl = dm_jl_1_0 * dm_ik_2_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+2] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1001x * 1;
                        prod_xz = hrr_1001x * hrr_0110z;
                        prod_yz = 1 * hrr_0110z;
                        fxi = ai2 * prod_yz * hrr_2001x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_1110z;
                        fxj = aj2 * prod_yz * hrr_1101x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0210z = hrr_1110z - zjzi * hrr_0110z;
                        fzj = aj2 * prod_xy * hrr_0210z;
                        fxk = ak2 * prod_yz * hrr_1011x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double hrr_0120z = trr_12z - zjzi * trr_02z;
                        fzk = ak2 * prod_xy * hrr_0120z;
                        fxl = al2 * prod_yz * hrr_1002x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0111z = hrr_1011z - zjzi * hrr_0011z;
                        fzl = al2 * prod_xy * hrr_0111z;
                        fxi -= 1 * prod_yz * hrr_0001x;
                        fzj -= 1 * prod_xy * trr_01z;
                        fzk -= 1 * prod_xy * hrr_0100z;
                        fxl -= 1 * prod_yz * trr_10x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_2 * dm_il_0_0;
                            dd_jl = dm_jl_2_0 * dm_ik_0_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+2] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[6*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0001x * trr_10y;
                        prod_xz = hrr_0001x * hrr_0110z;
                        prod_yz = trr_10y * hrr_0110z;
                        fxi = ai2 * prod_yz * hrr_1001x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * hrr_1110z;
                        fxj = aj2 * prod_yz * hrr_0101x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0210z;
                        fxk = ak2 * prod_yz * hrr_0011x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * hrr_0120z;
                        fxl = al2 * prod_yz * hrr_0002x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0111z;
                        fyi -= 1 * prod_xz * 1;
                        fzj -= 1 * prod_xy * trr_01z;
                        fzk -= 1 * prod_xy * hrr_0100z;
                        fxl -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_2 * dm_il_1_0;
                            dd_jl = dm_jl_2_0 * dm_ik_1_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+2] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[7*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0001x * 1;
                        prod_xz = hrr_0001x * hrr_1110z;
                        prod_yz = 1 * hrr_1110z;
                        fxi = ai2 * prod_yz * hrr_1001x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                        double hrr_2110z = trr_31z - zjzi * trr_21z;
                        fzi = ai2 * prod_xy * hrr_2110z;
                        fxj = aj2 * prod_yz * hrr_0101x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1210z = hrr_2110z - zjzi * hrr_1110z;
                        fzj = aj2 * prod_xy * hrr_1210z;
                        fxk = ak2 * prod_yz * hrr_0011x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                        double hrr_1120z = trr_22z - zjzi * trr_12z;
                        fzk = ak2 * prod_xy * hrr_1120z;
                        fxl = al2 * prod_yz * hrr_0002x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_2011z = trr_22z - zlzk * trr_21z;
                        double hrr_1111z = hrr_2011z - zjzi * hrr_1011z;
                        fzl = al2 * prod_xy * hrr_1111z;
                        fzi -= 1 * prod_xy * hrr_0110z;
                        fzj -= 1 * prod_xy * trr_11z;
                        fzk -= 1 * prod_xy * hrr_1100z;
                        fxl -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_2 * dm_il_2_0;
                            dd_jl = dm_jl_2_0 * dm_ik_2_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+2] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[8*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1110x * hrr_0001y;
                        prod_xz = hrr_1110x * wt;
                        prod_yz = hrr_0001y * wt;
                        double hrr_2110x = trr_31x - xjxi * trr_21x;
                        fxi = ai2 * prod_yz * hrr_2110x;
                        fyi = ai2 * prod_xz * hrr_1001y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1210x = hrr_2110x - xjxi * hrr_1110x;
                        fxj = aj2 * prod_yz * hrr_1210x;
                        fyj = aj2 * prod_xz * hrr_0101y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double hrr_1120x = trr_22x - xjxi * trr_12x;
                        fxk = ak2 * prod_yz * hrr_1120x;
                        fyk = ak2 * prod_xz * hrr_0011y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_1111x;
                        double hrr_0002y = hrr_0011y - ylyk * hrr_0001y;
                        fyl = al2 * prod_xz * hrr_0002y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * hrr_0110x;
                        fxj -= 1 * prod_yz * trr_11x;
                        fxk -= 1 * prod_yz * hrr_1100x;
                        fyl -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_0_1;
                            dd_jl = dm_jl_0_1 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_1_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0110x * hrr_1001y;
                        prod_xz = hrr_0110x * wt;
                        prod_yz = hrr_1001y * wt;
                        fxi = ai2 * prod_yz * hrr_1110x;
                        fyi = ai2 * prod_xz * hrr_2001y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0210x = hrr_1110x - xjxi * hrr_0110x;
                        fxj = aj2 * prod_yz * hrr_0210x;
                        fyj = aj2 * prod_xz * hrr_1101y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double hrr_0120x = trr_12x - xjxi * trr_02x;
                        fxk = ak2 * prod_yz * hrr_0120x;
                        fyk = ak2 * prod_xz * hrr_1011y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_0111x;
                        double hrr_1002y = hrr_1011y - ylyk * hrr_1001y;
                        fyl = al2 * prod_xz * hrr_1002y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 1 * prod_xz * hrr_0001y;
                        fxj -= 1 * prod_yz * trr_01x;
                        fxk -= 1 * prod_yz * hrr_0100x;
                        fyl -= 1 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_1_1;
                            dd_jl = dm_jl_0_1 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_1_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0110x * hrr_0001y;
                        prod_xz = hrr_0110x * trr_10z;
                        prod_yz = hrr_0001y * trr_10z;
                        fxi = ai2 * prod_yz * hrr_1110x;
                        fyi = ai2 * prod_xz * hrr_1001y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0210x;
                        fyj = aj2 * prod_xz * hrr_0101y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * hrr_0120x;
                        fyk = ak2 * prod_xz * hrr_0011y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0111x;
                        fyl = al2 * prod_xz * hrr_0002y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fzi -= 1 * prod_xy * wt;
                        fxj -= 1 * prod_yz * trr_01x;
                        fxk -= 1 * prod_yz * hrr_0100x;
                        fyl -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_2_1;
                            dd_jl = dm_jl_0_1 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_1_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_11x * hrr_0101y;
                        prod_xz = trr_11x * wt;
                        prod_yz = hrr_0101y * wt;
                        fxi = ai2 * prod_yz * trr_21x;
                        fyi = ai2 * prod_xz * hrr_1101y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_1110x;
                        double hrr_0201y = hrr_1101y - yjyi * hrr_0101y;
                        fyj = aj2 * prod_xz * hrr_0201y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_12x;
                        fyk = ak2 * prod_xz * hrr_0111y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_1011x;
                        double hrr_0102y = hrr_1002y - yjyi * hrr_0002y;
                        fyl = al2 * prod_xz * hrr_0102y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * trr_01x;
                        fyj -= 1 * prod_xz * hrr_0001y;
                        fxk -= 1 * prod_yz * trr_10x;
                        fyl -= 1 * prod_xz * hrr_0100y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_0_1;
                            dd_jl = dm_jl_1_1 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+1];
                                dd_jl = dm[(nao+j0+1)*nao+l0+1] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_1_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * hrr_1101y;
                        prod_xz = trr_01x * wt;
                        prod_yz = hrr_1101y * wt;
                        fxi = ai2 * prod_yz * trr_11x;
                        double hrr_3001y = trr_31y - ylyk * trr_30y;
                        double hrr_2101y = hrr_3001y - yjyi * hrr_2001y;
                        fyi = ai2 * prod_xz * hrr_2101y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        double hrr_1201y = hrr_2101y - yjyi * hrr_1101y;
                        fyj = aj2 * prod_xz * hrr_1201y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * hrr_1111y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        double hrr_2002y = hrr_2011y - ylyk * hrr_2001y;
                        double hrr_1102y = hrr_2002y - yjyi * hrr_1002y;
                        fyl = al2 * prod_xz * hrr_1102y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 1 * prod_xz * hrr_0101y;
                        fyj -= 1 * prod_xz * hrr_1001y;
                        fxk -= 1 * prod_yz * fac;
                        fyl -= 1 * prod_xz * hrr_1100y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_1_1;
                            dd_jl = dm_jl_1_1 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+1];
                                dd_jl = dm[(nao+j0+1)*nao+l0+1] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_1_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * hrr_0101y;
                        prod_xz = trr_01x * trr_10z;
                        prod_yz = hrr_0101y * trr_10z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * hrr_1101y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_0201y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * hrr_0111y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_0102y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fzi -= 1 * prod_xy * wt;
                        fyj -= 1 * prod_xz * hrr_0001y;
                        fxk -= 1 * prod_yz * fac;
                        fyl -= 1 * prod_xz * hrr_0100y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_2_1;
                            dd_jl = dm_jl_1_1 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+1];
                                dd_jl = dm[(nao+j0+1)*nao+l0+1] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_1_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_11x * hrr_0001y;
                        prod_xz = trr_11x * hrr_0100z;
                        prod_yz = hrr_0001y * hrr_0100z;
                        fxi = ai2 * prod_yz * trr_21x;
                        fyi = ai2 * prod_xz * hrr_1001y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_1110x;
                        fyj = aj2 * prod_xz * hrr_0101y;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * trr_12x;
                        fyk = ak2 * prod_xz * hrr_0011y;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_1011x;
                        fyl = al2 * prod_xz * hrr_0002y;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fxi -= 1 * prod_yz * trr_01x;
                        fzj -= 1 * prod_xy * wt;
                        fxk -= 1 * prod_yz * trr_10x;
                        fyl -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_0_1;
                            dd_jl = dm_jl_2_1 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+1];
                                dd_jl = dm[(nao+j0+2)*nao+l0+1] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[6*TILE2+sh_ij] * dm_lk_1_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * hrr_1001y;
                        prod_xz = trr_01x * hrr_0100z;
                        prod_yz = hrr_1001y * hrr_0100z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * hrr_2001y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_1101y;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * hrr_1011y;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_1002y;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fyi -= 1 * prod_xz * hrr_0001y;
                        fzj -= 1 * prod_xy * wt;
                        fxk -= 1 * prod_yz * fac;
                        fyl -= 1 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_1_1;
                            dd_jl = dm_jl_2_1 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+1];
                                dd_jl = dm[(nao+j0+2)*nao+l0+1] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[7*TILE2+sh_ij] * dm_lk_1_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * hrr_0001y;
                        prod_xz = trr_01x * hrr_1100z;
                        prod_yz = hrr_0001y * hrr_1100z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * hrr_1001y;
                        fzi = ai2 * prod_xy * hrr_2100z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_0101y;
                        fzj = aj2 * prod_xy * hrr_1200z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * hrr_0011y;
                        fzk = ak2 * prod_xy * hrr_1110z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_0002y;
                        fzl = al2 * prod_xy * hrr_1101z;
                        fzi -= 1 * prod_xy * hrr_0100z;
                        fzj -= 1 * prod_xy * trr_10z;
                        fxk -= 1 * prod_yz * fac;
                        fyl -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_2_1;
                            dd_jl = dm_jl_2_1 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+1];
                                dd_jl = dm[(nao+j0+2)*nao+l0+1] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[8*TILE2+sh_ij] * dm_lk_1_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1100x * hrr_0011y;
                        prod_xz = hrr_1100x * wt;
                        prod_yz = hrr_0011y * wt;
                        double hrr_2100x = trr_30x - xjxi * trr_20x;
                        fxi = ai2 * prod_yz * hrr_2100x;
                        fyi = ai2 * prod_xz * hrr_1011y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1200x = hrr_2100x - xjxi * hrr_1100x;
                        fxj = aj2 * prod_yz * hrr_1200x;
                        fyj = aj2 * prod_xz * hrr_0111y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * hrr_1110x;
                        double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                        double hrr_0021y = trr_03y - ylyk * trr_02y;
                        fyk = ak2 * prod_xz * hrr_0021y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_1101x;
                        double hrr_0012y = hrr_0021y - ylyk * hrr_0011y;
                        fyl = al2 * prod_xz * hrr_0012y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * hrr_0100x;
                        fxj -= 1 * prod_yz * trr_10x;
                        fyk -= 1 * prod_xz * hrr_0001y;
                        fyl -= 1 * prod_xz * trr_01y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_0_1;
                            dd_jl = dm_jl_0_1 * dm_ik_0_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+0)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+0)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_1_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * hrr_1011y;
                        prod_xz = hrr_0100x * wt;
                        prod_yz = hrr_1011y * wt;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        fyi = ai2 * prod_xz * hrr_2011y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0200x = hrr_1100x - xjxi * hrr_0100x;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        fyj = aj2 * prod_xz * hrr_1111y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                        double hrr_1021y = trr_13y - ylyk * trr_12y;
                        fyk = ak2 * prod_xz * hrr_1021y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_0101x;
                        double hrr_1012y = hrr_1021y - ylyk * hrr_1011y;
                        fyl = al2 * prod_xz * hrr_1012y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 1 * prod_xz * hrr_0011y;
                        fxj -= 1 * prod_yz * fac;
                        fyk -= 1 * prod_xz * hrr_1001y;
                        fyl -= 1 * prod_xz * trr_11y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_1_1;
                            dd_jl = dm_jl_0_1 * dm_ik_1_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+1)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+1)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_1_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * hrr_0011y;
                        prod_xz = hrr_0100x * trr_10z;
                        prod_yz = hrr_0011y * trr_10z;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        fyi = ai2 * prod_xz * hrr_1011y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        fyj = aj2 * prod_xz * hrr_0111y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        fyk = ak2 * prod_xz * hrr_0021y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0101x;
                        fyl = al2 * prod_xz * hrr_0012y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fzi -= 1 * prod_xy * wt;
                        fxj -= 1 * prod_yz * fac;
                        fyk -= 1 * prod_xz * hrr_0001y;
                        fyl -= 1 * prod_xz * trr_01y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_2_1;
                            dd_jl = dm_jl_0_1 * dm_ik_2_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+2)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+2)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_1_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * hrr_0111y;
                        prod_xz = trr_10x * wt;
                        prod_yz = hrr_0111y * wt;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * hrr_1111y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        double hrr_0211y = hrr_1111y - yjyi * hrr_0111y;
                        fyj = aj2 * prod_xz * hrr_0211y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_11x;
                        double hrr_0121y = hrr_1021y - yjyi * hrr_0021y;
                        fyk = ak2 * prod_xz * hrr_0121y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        double hrr_0112y = hrr_1012y - yjyi * hrr_0012y;
                        fyl = al2 * prod_xz * hrr_0112y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * fac;
                        fyj -= 1 * prod_xz * hrr_0011y;
                        fyk -= 1 * prod_xz * hrr_0101y;
                        fyl -= 1 * prod_xz * hrr_0110y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_1 * dm_il_0_1;
                            dd_jl = dm_jl_1_1 * dm_ik_0_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+1] * dm[(nao+i0+0)*nao+l0+1];
                                dd_jl = dm[(nao+j0+1)*nao+l0+1] * dm[(nao+i0+0)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_1_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_1111y;
                        prod_xz = fac * wt;
                        prod_yz = hrr_1111y * wt;
                        fxi = ai2 * prod_yz * trr_10x;
                        double trr_32y = cpy * trr_31y + 1*b01 * trr_30y + 3*b00 * trr_21y;
                        double hrr_3011y = trr_32y - ylyk * trr_31y;
                        double hrr_2111y = hrr_3011y - yjyi * hrr_2011y;
                        fyi = ai2 * prod_xz * hrr_2111y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        double hrr_1211y = hrr_2111y - yjyi * hrr_1111y;
                        fyj = aj2 * prod_xz * hrr_1211y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        double trr_23y = cpy * trr_22y + 2*b01 * trr_21y + 2*b00 * trr_12y;
                        double hrr_2021y = trr_23y - ylyk * trr_22y;
                        double hrr_1121y = hrr_2021y - yjyi * hrr_1021y;
                        fyk = ak2 * prod_xz * hrr_1121y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        double hrr_2012y = hrr_2021y - ylyk * hrr_2011y;
                        double hrr_1112y = hrr_2012y - yjyi * hrr_1012y;
                        fyl = al2 * prod_xz * hrr_1112y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 1 * prod_xz * hrr_0111y;
                        fyj -= 1 * prod_xz * hrr_1011y;
                        fyk -= 1 * prod_xz * hrr_1101y;
                        fyl -= 1 * prod_xz * hrr_1110y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_1 * dm_il_1_1;
                            dd_jl = dm_jl_1_1 * dm_ik_1_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+1] * dm[(nao+i0+1)*nao+l0+1];
                                dd_jl = dm[(nao+j0+1)*nao+l0+1] * dm[(nao+i0+1)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_1_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_0111y;
                        prod_xz = fac * trr_10z;
                        prod_yz = hrr_0111y * trr_10z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_1111y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0211y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_0121y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0112y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fzi -= 1 * prod_xy * wt;
                        fyj -= 1 * prod_xz * hrr_0011y;
                        fyk -= 1 * prod_xz * hrr_0101y;
                        fyl -= 1 * prod_xz * hrr_0110y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_1 * dm_il_2_1;
                            dd_jl = dm_jl_1_1 * dm_ik_2_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+1] * dm[(nao+i0+2)*nao+l0+1];
                                dd_jl = dm[(nao+j0+1)*nao+l0+1] * dm[(nao+i0+2)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_1_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * hrr_0011y;
                        prod_xz = trr_10x * hrr_0100z;
                        prod_yz = hrr_0011y * hrr_0100z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * hrr_1011y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0111y;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * hrr_0021y;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0012y;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fxi -= 1 * prod_yz * fac;
                        fzj -= 1 * prod_xy * wt;
                        fyk -= 1 * prod_xz * hrr_0001y;
                        fyl -= 1 * prod_xz * trr_01y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_1 * dm_il_0_1;
                            dd_jl = dm_jl_2_1 * dm_ik_0_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+1] * dm[(nao+i0+0)*nao+l0+1];
                                dd_jl = dm[(nao+j0+2)*nao+l0+1] * dm[(nao+i0+0)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[6*TILE2+sh_ij] * dm_lk_1_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_1011y;
                        prod_xz = fac * hrr_0100z;
                        prod_yz = hrr_1011y * hrr_0100z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_2011y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1111y;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_1021y;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1012y;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fyi -= 1 * prod_xz * hrr_0011y;
                        fzj -= 1 * prod_xy * wt;
                        fyk -= 1 * prod_xz * hrr_1001y;
                        fyl -= 1 * prod_xz * trr_11y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_1 * dm_il_1_1;
                            dd_jl = dm_jl_2_1 * dm_ik_1_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+1] * dm[(nao+i0+1)*nao+l0+1];
                                dd_jl = dm[(nao+j0+2)*nao+l0+1] * dm[(nao+i0+1)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[7*TILE2+sh_ij] * dm_lk_1_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_0011y;
                        prod_xz = fac * hrr_1100z;
                        prod_yz = hrr_0011y * hrr_1100z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_1011y;
                        fzi = ai2 * prod_xy * hrr_2100z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0111y;
                        fzj = aj2 * prod_xy * hrr_1200z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_0021y;
                        fzk = ak2 * prod_xy * hrr_1110z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0012y;
                        fzl = al2 * prod_xy * hrr_1101z;
                        fzi -= 1 * prod_xy * hrr_0100z;
                        fzj -= 1 * prod_xy * trr_10z;
                        fyk -= 1 * prod_xz * hrr_0001y;
                        fyl -= 1 * prod_xz * trr_01y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_1 * dm_il_2_1;
                            dd_jl = dm_jl_2_1 * dm_ik_2_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+1] * dm[(nao+i0+2)*nao+l0+1];
                                dd_jl = dm[(nao+j0+2)*nao+l0+1] * dm[(nao+i0+2)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[8*TILE2+sh_ij] * dm_lk_1_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1100x * hrr_0001y;
                        prod_xz = hrr_1100x * trr_01z;
                        prod_yz = hrr_0001y * trr_01z;
                        fxi = ai2 * prod_yz * hrr_2100x;
                        fyi = ai2 * prod_xz * hrr_1001y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_1200x;
                        fyj = aj2 * prod_xz * hrr_0101y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * hrr_1110x;
                        fyk = ak2 * prod_xz * hrr_0011y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_1101x;
                        fyl = al2 * prod_xz * hrr_0002y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fxi -= 1 * prod_yz * hrr_0100x;
                        fxj -= 1 * prod_yz * trr_10x;
                        fzk -= 1 * prod_xy * wt;
                        fyl -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_0_1;
                            dd_jl = dm_jl_0_1 * dm_ik_0_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+0)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+0)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_1_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * hrr_1001y;
                        prod_xz = hrr_0100x * trr_01z;
                        prod_yz = hrr_1001y * trr_01z;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        fyi = ai2 * prod_xz * hrr_2001y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        fyj = aj2 * prod_xz * hrr_1101y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        fyk = ak2 * prod_xz * hrr_1011y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_0101x;
                        fyl = al2 * prod_xz * hrr_1002y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fyi -= 1 * prod_xz * hrr_0001y;
                        fxj -= 1 * prod_yz * fac;
                        fzk -= 1 * prod_xy * wt;
                        fyl -= 1 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_1_1;
                            dd_jl = dm_jl_0_1 * dm_ik_1_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+1)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+1)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_1_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * hrr_0001y;
                        prod_xz = hrr_0100x * trr_11z;
                        prod_yz = hrr_0001y * trr_11z;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        fyi = ai2 * prod_xz * hrr_1001y;
                        fzi = ai2 * prod_xy * trr_21z;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        fyj = aj2 * prod_xz * hrr_0101y;
                        fzj = aj2 * prod_xy * hrr_1110z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        fyk = ak2 * prod_xz * hrr_0011y;
                        fzk = ak2 * prod_xy * trr_12z;
                        fxl = al2 * prod_yz * hrr_0101x;
                        fyl = al2 * prod_xz * hrr_0002y;
                        fzl = al2 * prod_xy * hrr_1011z;
                        fzi -= 1 * prod_xy * trr_01z;
                        fxj -= 1 * prod_yz * fac;
                        fzk -= 1 * prod_xy * trr_10z;
                        fyl -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_2_1;
                            dd_jl = dm_jl_0_1 * dm_ik_2_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+2)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+2)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_1_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * hrr_0101y;
                        prod_xz = trr_10x * trr_01z;
                        prod_yz = hrr_0101y * trr_01z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * hrr_1101y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0201y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * hrr_0111y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0102y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fxi -= 1 * prod_yz * fac;
                        fyj -= 1 * prod_xz * hrr_0001y;
                        fzk -= 1 * prod_xy * wt;
                        fyl -= 1 * prod_xz * hrr_0100y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_2 * dm_il_0_1;
                            dd_jl = dm_jl_1_1 * dm_ik_0_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+2] * dm[(nao+i0+0)*nao+l0+1];
                                dd_jl = dm[(nao+j0+1)*nao+l0+1] * dm[(nao+i0+0)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_1_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_1101y;
                        prod_xz = fac * trr_01z;
                        prod_yz = hrr_1101y * trr_01z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_2101y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1201y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_1111y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1102y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fyi -= 1 * prod_xz * hrr_0101y;
                        fyj -= 1 * prod_xz * hrr_1001y;
                        fzk -= 1 * prod_xy * wt;
                        fyl -= 1 * prod_xz * hrr_1100y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_2 * dm_il_1_1;
                            dd_jl = dm_jl_1_1 * dm_ik_1_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+2] * dm[(nao+i0+1)*nao+l0+1];
                                dd_jl = dm[(nao+j0+1)*nao+l0+1] * dm[(nao+i0+1)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_1_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_0101y;
                        prod_xz = fac * trr_11z;
                        prod_yz = hrr_0101y * trr_11z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_1101y;
                        fzi = ai2 * prod_xy * trr_21z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0201y;
                        fzj = aj2 * prod_xy * hrr_1110z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_0111y;
                        fzk = ak2 * prod_xy * trr_12z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0102y;
                        fzl = al2 * prod_xy * hrr_1011z;
                        fzi -= 1 * prod_xy * trr_01z;
                        fyj -= 1 * prod_xz * hrr_0001y;
                        fzk -= 1 * prod_xy * trr_10z;
                        fyl -= 1 * prod_xz * hrr_0100y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_2 * dm_il_2_1;
                            dd_jl = dm_jl_1_1 * dm_ik_2_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+2] * dm[(nao+i0+2)*nao+l0+1];
                                dd_jl = dm[(nao+j0+1)*nao+l0+1] * dm[(nao+i0+2)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_1_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * hrr_0001y;
                        prod_xz = trr_10x * hrr_0110z;
                        prod_yz = hrr_0001y * hrr_0110z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * hrr_1001y;
                        fzi = ai2 * prod_xy * hrr_1110z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0101y;
                        fzj = aj2 * prod_xy * hrr_0210z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * hrr_0011y;
                        fzk = ak2 * prod_xy * hrr_0120z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0002y;
                        fzl = al2 * prod_xy * hrr_0111z;
                        fxi -= 1 * prod_yz * fac;
                        fzj -= 1 * prod_xy * trr_01z;
                        fzk -= 1 * prod_xy * hrr_0100z;
                        fyl -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_2 * dm_il_0_1;
                            dd_jl = dm_jl_2_1 * dm_ik_0_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+2] * dm[(nao+i0+0)*nao+l0+1];
                                dd_jl = dm[(nao+j0+2)*nao+l0+1] * dm[(nao+i0+0)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[6*TILE2+sh_ij] * dm_lk_1_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_1001y;
                        prod_xz = fac * hrr_0110z;
                        prod_yz = hrr_1001y * hrr_0110z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_2001y;
                        fzi = ai2 * prod_xy * hrr_1110z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1101y;
                        fzj = aj2 * prod_xy * hrr_0210z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_1011y;
                        fzk = ak2 * prod_xy * hrr_0120z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1002y;
                        fzl = al2 * prod_xy * hrr_0111z;
                        fyi -= 1 * prod_xz * hrr_0001y;
                        fzj -= 1 * prod_xy * trr_01z;
                        fzk -= 1 * prod_xy * hrr_0100z;
                        fyl -= 1 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_2 * dm_il_1_1;
                            dd_jl = dm_jl_2_1 * dm_ik_1_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+2] * dm[(nao+i0+1)*nao+l0+1];
                                dd_jl = dm[(nao+j0+2)*nao+l0+1] * dm[(nao+i0+1)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[7*TILE2+sh_ij] * dm_lk_1_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_0001y;
                        prod_xz = fac * hrr_1110z;
                        prod_yz = hrr_0001y * hrr_1110z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_1001y;
                        fzi = ai2 * prod_xy * hrr_2110z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0101y;
                        fzj = aj2 * prod_xy * hrr_1210z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_0011y;
                        fzk = ak2 * prod_xy * hrr_1120z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0002y;
                        fzl = al2 * prod_xy * hrr_1111z;
                        fzi -= 1 * prod_xy * hrr_0110z;
                        fzj -= 1 * prod_xy * trr_11z;
                        fzk -= 1 * prod_xy * hrr_1100z;
                        fyl -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_2 * dm_il_2_1;
                            dd_jl = dm_jl_2_1 * dm_ik_2_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+2] * dm[(nao+i0+2)*nao+l0+1];
                                dd_jl = dm[(nao+j0+2)*nao+l0+1] * dm[(nao+i0+2)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[8*TILE2+sh_ij] * dm_lk_1_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1110x * 1;
                        prod_xz = hrr_1110x * hrr_0001z;
                        prod_yz = 1 * hrr_0001z;
                        fxi = ai2 * prod_yz * hrr_2110x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_1001z;
                        fxj = aj2 * prod_yz * hrr_1210x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        fzj = aj2 * prod_xy * hrr_0101z;
                        fxk = ak2 * prod_yz * hrr_1120x;
                        fyk = ak2 * prod_xz * trr_01y;
                        fzk = ak2 * prod_xy * hrr_0011z;
                        fxl = al2 * prod_yz * hrr_1111x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0002z = hrr_0011z - zlzk * hrr_0001z;
                        fzl = al2 * prod_xy * hrr_0002z;
                        fxi -= 1 * prod_yz * hrr_0110x;
                        fxj -= 1 * prod_yz * trr_11x;
                        fxk -= 1 * prod_yz * hrr_1100x;
                        fzl -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_0_2;
                            dd_jl = dm_jl_0_2 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_2_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0110x * trr_10y;
                        prod_xz = hrr_0110x * hrr_0001z;
                        prod_yz = trr_10y * hrr_0001z;
                        fxi = ai2 * prod_yz * hrr_1110x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * hrr_1001z;
                        fxj = aj2 * prod_yz * hrr_0210x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0101z;
                        fxk = ak2 * prod_yz * hrr_0120x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * hrr_0011z;
                        fxl = al2 * prod_yz * hrr_0111x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0002z;
                        fyi -= 1 * prod_xz * 1;
                        fxj -= 1 * prod_yz * trr_01x;
                        fxk -= 1 * prod_yz * hrr_0100x;
                        fzl -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_1_2;
                            dd_jl = dm_jl_0_2 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_2_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0110x * 1;
                        prod_xz = hrr_0110x * hrr_1001z;
                        prod_yz = 1 * hrr_1001z;
                        fxi = ai2 * prod_yz * hrr_1110x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_2001z;
                        fxj = aj2 * prod_yz * hrr_0210x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        fzj = aj2 * prod_xy * hrr_1101z;
                        fxk = ak2 * prod_yz * hrr_0120x;
                        fyk = ak2 * prod_xz * trr_01y;
                        fzk = ak2 * prod_xy * hrr_1011z;
                        fxl = al2 * prod_yz * hrr_0111x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1002z = hrr_1011z - zlzk * hrr_1001z;
                        fzl = al2 * prod_xy * hrr_1002z;
                        fzi -= 1 * prod_xy * hrr_0001z;
                        fxj -= 1 * prod_yz * trr_01x;
                        fxk -= 1 * prod_yz * hrr_0100x;
                        fzl -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_2_2;
                            dd_jl = dm_jl_0_2 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_2_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_11x * hrr_0100y;
                        prod_xz = trr_11x * hrr_0001z;
                        prod_yz = hrr_0100y * hrr_0001z;
                        fxi = ai2 * prod_yz * trr_21x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * hrr_1001z;
                        fxj = aj2 * prod_yz * hrr_1110x;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_0101z;
                        fxk = ak2 * prod_yz * trr_12x;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * hrr_0011z;
                        fxl = al2 * prod_yz * hrr_1011x;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_0002z;
                        fxi -= 1 * prod_yz * trr_01x;
                        fyj -= 1 * prod_xz * 1;
                        fxk -= 1 * prod_yz * trr_10x;
                        fzl -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_0_2;
                            dd_jl = dm_jl_1_2 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+2];
                                dd_jl = dm[(nao+j0+1)*nao+l0+2] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_2_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * hrr_1100y;
                        prod_xz = trr_01x * hrr_0001z;
                        prod_yz = hrr_1100y * hrr_0001z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * hrr_2100y;
                        fzi = ai2 * prod_xy * hrr_1001z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_1200y;
                        fzj = aj2 * prod_xy * hrr_0101z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * hrr_1110y;
                        fzk = ak2 * prod_xy * hrr_0011z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_1101y;
                        fzl = al2 * prod_xy * hrr_0002z;
                        fyi -= 1 * prod_xz * hrr_0100y;
                        fyj -= 1 * prod_xz * trr_10y;
                        fxk -= 1 * prod_yz * fac;
                        fzl -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_1_2;
                            dd_jl = dm_jl_1_2 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+2];
                                dd_jl = dm[(nao+j0+1)*nao+l0+2] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_2_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * hrr_0100y;
                        prod_xz = trr_01x * hrr_1001z;
                        prod_yz = hrr_0100y * hrr_1001z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * hrr_2001z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_1101z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * hrr_1011z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_1002z;
                        fzi -= 1 * prod_xy * hrr_0001z;
                        fyj -= 1 * prod_xz * 1;
                        fxk -= 1 * prod_yz * fac;
                        fzl -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_2_2;
                            dd_jl = dm_jl_1_2 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+2];
                                dd_jl = dm[(nao+j0+1)*nao+l0+2] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_2_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_11x * 1;
                        prod_xz = trr_11x * hrr_0101z;
                        prod_yz = 1 * hrr_0101z;
                        fxi = ai2 * prod_yz * trr_21x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_1101z;
                        fxj = aj2 * prod_yz * hrr_1110x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0201z = hrr_1101z - zjzi * hrr_0101z;
                        fzj = aj2 * prod_xy * hrr_0201z;
                        fxk = ak2 * prod_yz * trr_12x;
                        fyk = ak2 * prod_xz * trr_01y;
                        fzk = ak2 * prod_xy * hrr_0111z;
                        fxl = al2 * prod_yz * hrr_1011x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0102z = hrr_1002z - zjzi * hrr_0002z;
                        fzl = al2 * prod_xy * hrr_0102z;
                        fxi -= 1 * prod_yz * trr_01x;
                        fzj -= 1 * prod_xy * hrr_0001z;
                        fxk -= 1 * prod_yz * trr_10x;
                        fzl -= 1 * prod_xy * hrr_0100z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_0_2;
                            dd_jl = dm_jl_2_2 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+2];
                                dd_jl = dm[(nao+j0+2)*nao+l0+2] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[6*TILE2+sh_ij] * dm_lk_2_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * trr_10y;
                        prod_xz = trr_01x * hrr_0101z;
                        prod_yz = trr_10y * hrr_0101z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * hrr_1101z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0201z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * hrr_0111z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0102z;
                        fyi -= 1 * prod_xz * 1;
                        fzj -= 1 * prod_xy * hrr_0001z;
                        fxk -= 1 * prod_yz * fac;
                        fzl -= 1 * prod_xy * hrr_0100z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_1_2;
                            dd_jl = dm_jl_2_2 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+2];
                                dd_jl = dm[(nao+j0+2)*nao+l0+2] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[7*TILE2+sh_ij] * dm_lk_2_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * 1;
                        prod_xz = trr_01x * hrr_1101z;
                        prod_yz = 1 * hrr_1101z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double hrr_3001z = trr_31z - zlzk * trr_30z;
                        double hrr_2101z = hrr_3001z - zjzi * hrr_2001z;
                        fzi = ai2 * prod_xy * hrr_2101z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1201z = hrr_2101z - zjzi * hrr_1101z;
                        fzj = aj2 * prod_xy * hrr_1201z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * trr_01y;
                        fzk = ak2 * prod_xy * hrr_1111z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_2002z = hrr_2011z - zlzk * hrr_2001z;
                        double hrr_1102z = hrr_2002z - zjzi * hrr_1002z;
                        fzl = al2 * prod_xy * hrr_1102z;
                        fzi -= 1 * prod_xy * hrr_0101z;
                        fzj -= 1 * prod_xy * hrr_1001z;
                        fxk -= 1 * prod_yz * fac;
                        fzl -= 1 * prod_xy * hrr_1100z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_2_2;
                            dd_jl = dm_jl_2_2 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+2];
                                dd_jl = dm[(nao+j0+2)*nao+l0+2] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[8*TILE2+sh_ij] * dm_lk_2_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1100x * trr_01y;
                        prod_xz = hrr_1100x * hrr_0001z;
                        prod_yz = trr_01y * hrr_0001z;
                        fxi = ai2 * prod_yz * hrr_2100x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * hrr_1001z;
                        fxj = aj2 * prod_yz * hrr_1200x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_0101z;
                        fxk = ak2 * prod_yz * hrr_1110x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * hrr_0011z;
                        fxl = al2 * prod_yz * hrr_1101x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_0002z;
                        fxi -= 1 * prod_yz * hrr_0100x;
                        fxj -= 1 * prod_yz * trr_10x;
                        fyk -= 1 * prod_xz * 1;
                        fzl -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_0_2;
                            dd_jl = dm_jl_0_2 * dm_ik_0_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+0)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+0)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_2_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * trr_11y;
                        prod_xz = hrr_0100x * hrr_0001z;
                        prod_yz = trr_11y * hrr_0001z;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        fyi = ai2 * prod_xz * trr_21y;
                        fzi = ai2 * prod_xy * hrr_1001z;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        fyj = aj2 * prod_xz * hrr_1110y;
                        fzj = aj2 * prod_xy * hrr_0101z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        fyk = ak2 * prod_xz * trr_12y;
                        fzk = ak2 * prod_xy * hrr_0011z;
                        fxl = al2 * prod_yz * hrr_0101x;
                        fyl = al2 * prod_xz * hrr_1011y;
                        fzl = al2 * prod_xy * hrr_0002z;
                        fyi -= 1 * prod_xz * trr_01y;
                        fxj -= 1 * prod_yz * fac;
                        fyk -= 1 * prod_xz * trr_10y;
                        fzl -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_1_2;
                            dd_jl = dm_jl_0_2 * dm_ik_1_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+1)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+1)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_2_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * trr_01y;
                        prod_xz = hrr_0100x * hrr_1001z;
                        prod_yz = trr_01y * hrr_1001z;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * hrr_2001z;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_1101z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * hrr_1011z;
                        fxl = al2 * prod_yz * hrr_0101x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_1002z;
                        fzi -= 1 * prod_xy * hrr_0001z;
                        fxj -= 1 * prod_yz * fac;
                        fyk -= 1 * prod_xz * 1;
                        fzl -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_2_2;
                            dd_jl = dm_jl_0_2 * dm_ik_2_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+2)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+2)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_2_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * hrr_0110y;
                        prod_xz = trr_10x * hrr_0001z;
                        prod_yz = hrr_0110y * hrr_0001z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * hrr_1110y;
                        fzi = ai2 * prod_xy * hrr_1001z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0210y;
                        fzj = aj2 * prod_xy * hrr_0101z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * hrr_0120y;
                        fzk = ak2 * prod_xy * hrr_0011z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0111y;
                        fzl = al2 * prod_xy * hrr_0002z;
                        fxi -= 1 * prod_yz * fac;
                        fyj -= 1 * prod_xz * trr_01y;
                        fyk -= 1 * prod_xz * hrr_0100y;
                        fzl -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_1 * dm_il_0_2;
                            dd_jl = dm_jl_1_2 * dm_ik_0_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+1] * dm[(nao+i0+0)*nao+l0+2];
                                dd_jl = dm[(nao+j0+1)*nao+l0+2] * dm[(nao+i0+0)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_2_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_1110y;
                        prod_xz = fac * hrr_0001z;
                        prod_yz = hrr_1110y * hrr_0001z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_2110y;
                        fzi = ai2 * prod_xy * hrr_1001z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1210y;
                        fzj = aj2 * prod_xy * hrr_0101z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_1120y;
                        fzk = ak2 * prod_xy * hrr_0011z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1111y;
                        fzl = al2 * prod_xy * hrr_0002z;
                        fyi -= 1 * prod_xz * hrr_0110y;
                        fyj -= 1 * prod_xz * trr_11y;
                        fyk -= 1 * prod_xz * hrr_1100y;
                        fzl -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_1 * dm_il_1_2;
                            dd_jl = dm_jl_1_2 * dm_ik_1_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+1] * dm[(nao+i0+1)*nao+l0+2];
                                dd_jl = dm[(nao+j0+1)*nao+l0+2] * dm[(nao+i0+1)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_2_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_0110y;
                        prod_xz = fac * hrr_1001z;
                        prod_yz = hrr_0110y * hrr_1001z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_1110y;
                        fzi = ai2 * prod_xy * hrr_2001z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0210y;
                        fzj = aj2 * prod_xy * hrr_1101z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_0120y;
                        fzk = ak2 * prod_xy * hrr_1011z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0111y;
                        fzl = al2 * prod_xy * hrr_1002z;
                        fzi -= 1 * prod_xy * hrr_0001z;
                        fyj -= 1 * prod_xz * trr_01y;
                        fyk -= 1 * prod_xz * hrr_0100y;
                        fzl -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_1 * dm_il_2_2;
                            dd_jl = dm_jl_1_2 * dm_ik_2_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+1] * dm[(nao+i0+2)*nao+l0+2];
                                dd_jl = dm[(nao+j0+1)*nao+l0+2] * dm[(nao+i0+2)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_2_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * trr_01y;
                        prod_xz = trr_10x * hrr_0101z;
                        prod_yz = trr_01y * hrr_0101z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * hrr_1101z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_0201z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * hrr_0111z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_0102z;
                        fxi -= 1 * prod_yz * fac;
                        fzj -= 1 * prod_xy * hrr_0001z;
                        fyk -= 1 * prod_xz * 1;
                        fzl -= 1 * prod_xy * hrr_0100z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_1 * dm_il_0_2;
                            dd_jl = dm_jl_2_2 * dm_ik_0_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+1] * dm[(nao+i0+0)*nao+l0+2];
                                dd_jl = dm[(nao+j0+2)*nao+l0+2] * dm[(nao+i0+0)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[6*TILE2+sh_ij] * dm_lk_2_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_11y;
                        prod_xz = fac * hrr_0101z;
                        prod_yz = trr_11y * hrr_0101z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_21y;
                        fzi = ai2 * prod_xy * hrr_1101z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1110y;
                        fzj = aj2 * prod_xy * hrr_0201z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_12y;
                        fzk = ak2 * prod_xy * hrr_0111z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1011y;
                        fzl = al2 * prod_xy * hrr_0102z;
                        fyi -= 1 * prod_xz * trr_01y;
                        fzj -= 1 * prod_xy * hrr_0001z;
                        fyk -= 1 * prod_xz * trr_10y;
                        fzl -= 1 * prod_xy * hrr_0100z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_1 * dm_il_1_2;
                            dd_jl = dm_jl_2_2 * dm_ik_1_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+1] * dm[(nao+i0+1)*nao+l0+2];
                                dd_jl = dm[(nao+j0+2)*nao+l0+2] * dm[(nao+i0+1)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[7*TILE2+sh_ij] * dm_lk_2_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_01y;
                        prod_xz = fac * hrr_1101z;
                        prod_yz = trr_01y * hrr_1101z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * hrr_2101z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_1201z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * hrr_1111z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_1102z;
                        fzi -= 1 * prod_xy * hrr_0101z;
                        fzj -= 1 * prod_xy * hrr_1001z;
                        fyk -= 1 * prod_xz * 1;
                        fzl -= 1 * prod_xy * hrr_1100z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_1 * dm_il_2_2;
                            dd_jl = dm_jl_2_2 * dm_ik_2_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+1] * dm[(nao+i0+2)*nao+l0+2];
                                dd_jl = dm[(nao+j0+2)*nao+l0+2] * dm[(nao+i0+2)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[8*TILE2+sh_ij] * dm_lk_2_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1100x * 1;
                        prod_xz = hrr_1100x * hrr_0011z;
                        prod_yz = 1 * hrr_0011z;
                        fxi = ai2 * prod_yz * hrr_2100x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_1011z;
                        fxj = aj2 * prod_yz * hrr_1200x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        fzj = aj2 * prod_xy * hrr_0111z;
                        fxk = ak2 * prod_yz * hrr_1110x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                        double hrr_0021z = trr_03z - zlzk * trr_02z;
                        fzk = ak2 * prod_xy * hrr_0021z;
                        fxl = al2 * prod_yz * hrr_1101x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0012z = hrr_0021z - zlzk * hrr_0011z;
                        fzl = al2 * prod_xy * hrr_0012z;
                        fxi -= 1 * prod_yz * hrr_0100x;
                        fxj -= 1 * prod_yz * trr_10x;
                        fzk -= 1 * prod_xy * hrr_0001z;
                        fzl -= 1 * prod_xy * trr_01z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_0_2;
                            dd_jl = dm_jl_0_2 * dm_ik_0_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+0)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+0)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_2_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * trr_10y;
                        prod_xz = hrr_0100x * hrr_0011z;
                        prod_yz = trr_10y * hrr_0011z;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * hrr_1011z;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0111z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * hrr_0021z;
                        fxl = al2 * prod_yz * hrr_0101x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0012z;
                        fyi -= 1 * prod_xz * 1;
                        fxj -= 1 * prod_yz * fac;
                        fzk -= 1 * prod_xy * hrr_0001z;
                        fzl -= 1 * prod_xy * trr_01z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_1_2;
                            dd_jl = dm_jl_0_2 * dm_ik_1_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+1)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+1)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_2_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * 1;
                        prod_xz = hrr_0100x * hrr_1011z;
                        prod_yz = 1 * hrr_1011z;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_2011z;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        fzj = aj2 * prod_xy * hrr_1111z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                        double hrr_1021z = trr_13z - zlzk * trr_12z;
                        fzk = ak2 * prod_xy * hrr_1021z;
                        fxl = al2 * prod_yz * hrr_0101x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1012z = hrr_1021z - zlzk * hrr_1011z;
                        fzl = al2 * prod_xy * hrr_1012z;
                        fzi -= 1 * prod_xy * hrr_0011z;
                        fxj -= 1 * prod_yz * fac;
                        fzk -= 1 * prod_xy * hrr_1001z;
                        fzl -= 1 * prod_xy * trr_11z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_2_2;
                            dd_jl = dm_jl_0_2 * dm_ik_2_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+2)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+2)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_2_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * hrr_0100y;
                        prod_xz = trr_10x * hrr_0011z;
                        prod_yz = hrr_0100y * hrr_0011z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * hrr_1011z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_0111z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * hrr_0021z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_0012z;
                        fxi -= 1 * prod_yz * fac;
                        fyj -= 1 * prod_xz * 1;
                        fzk -= 1 * prod_xy * hrr_0001z;
                        fzl -= 1 * prod_xy * trr_01z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_2 * dm_il_0_2;
                            dd_jl = dm_jl_1_2 * dm_ik_0_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+2] * dm[(nao+i0+0)*nao+l0+2];
                                dd_jl = dm[(nao+j0+1)*nao+l0+2] * dm[(nao+i0+0)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_2_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_1100y;
                        prod_xz = fac * hrr_0011z;
                        prod_yz = hrr_1100y * hrr_0011z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_2100y;
                        fzi = ai2 * prod_xy * hrr_1011z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1200y;
                        fzj = aj2 * prod_xy * hrr_0111z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_1110y;
                        fzk = ak2 * prod_xy * hrr_0021z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1101y;
                        fzl = al2 * prod_xy * hrr_0012z;
                        fyi -= 1 * prod_xz * hrr_0100y;
                        fyj -= 1 * prod_xz * trr_10y;
                        fzk -= 1 * prod_xy * hrr_0001z;
                        fzl -= 1 * prod_xy * trr_01z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_2 * dm_il_1_2;
                            dd_jl = dm_jl_1_2 * dm_ik_1_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+2] * dm[(nao+i0+1)*nao+l0+2];
                                dd_jl = dm[(nao+j0+1)*nao+l0+2] * dm[(nao+i0+1)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_2_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_0100y;
                        prod_xz = fac * hrr_1011z;
                        prod_yz = hrr_0100y * hrr_1011z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * hrr_2011z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_1111z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * hrr_1021z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_1012z;
                        fzi -= 1 * prod_xy * hrr_0011z;
                        fyj -= 1 * prod_xz * 1;
                        fzk -= 1 * prod_xy * hrr_1001z;
                        fzl -= 1 * prod_xy * trr_11z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_2 * dm_il_2_2;
                            dd_jl = dm_jl_1_2 * dm_ik_2_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+2] * dm[(nao+i0+2)*nao+l0+2];
                                dd_jl = dm[(nao+j0+1)*nao+l0+2] * dm[(nao+i0+2)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_2_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * 1;
                        prod_xz = trr_10x * hrr_0111z;
                        prod_yz = 1 * hrr_0111z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_1111z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0211z = hrr_1111z - zjzi * hrr_0111z;
                        fzj = aj2 * prod_xy * hrr_0211z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double hrr_0121z = hrr_1021z - zjzi * hrr_0021z;
                        fzk = ak2 * prod_xy * hrr_0121z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0112z = hrr_1012z - zjzi * hrr_0012z;
                        fzl = al2 * prod_xy * hrr_0112z;
                        fxi -= 1 * prod_yz * fac;
                        fzj -= 1 * prod_xy * hrr_0011z;
                        fzk -= 1 * prod_xy * hrr_0101z;
                        fzl -= 1 * prod_xy * hrr_0110z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_2 * dm_il_0_2;
                            dd_jl = dm_jl_2_2 * dm_ik_0_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+2] * dm[(nao+i0+0)*nao+l0+2];
                                dd_jl = dm[(nao+j0+2)*nao+l0+2] * dm[(nao+i0+0)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[6*TILE2+sh_ij] * dm_lk_2_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_10y;
                        prod_xz = fac * hrr_0111z;
                        prod_yz = trr_10y * hrr_0111z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * hrr_1111z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0211z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * hrr_0121z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0112z;
                        fyi -= 1 * prod_xz * 1;
                        fzj -= 1 * prod_xy * hrr_0011z;
                        fzk -= 1 * prod_xy * hrr_0101z;
                        fzl -= 1 * prod_xy * hrr_0110z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_2 * dm_il_1_2;
                            dd_jl = dm_jl_2_2 * dm_ik_1_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+2] * dm[(nao+i0+1)*nao+l0+2];
                                dd_jl = dm[(nao+j0+2)*nao+l0+2] * dm[(nao+i0+1)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[7*TILE2+sh_ij] * dm_lk_2_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * 1;
                        prod_xz = fac * hrr_1111z;
                        prod_yz = 1 * hrr_1111z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_32z = cpz * trr_31z + 1*b01 * trr_30z + 3*b00 * trr_21z;
                        double hrr_3011z = trr_32z - zlzk * trr_31z;
                        double hrr_2111z = hrr_3011z - zjzi * hrr_2011z;
                        fzi = ai2 * prod_xy * hrr_2111z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1211z = hrr_2111z - zjzi * hrr_1111z;
                        fzj = aj2 * prod_xy * hrr_1211z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_23z = cpz * trr_22z + 2*b01 * trr_21z + 2*b00 * trr_12z;
                        double hrr_2021z = trr_23z - zlzk * trr_22z;
                        double hrr_1121z = hrr_2021z - zjzi * hrr_1021z;
                        fzk = ak2 * prod_xy * hrr_1121z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_2012z = hrr_2021z - zlzk * hrr_2011z;
                        double hrr_1112z = hrr_2012z - zjzi * hrr_1012z;
                        fzl = al2 * prod_xy * hrr_1112z;
                        fzi -= 1 * prod_xy * hrr_0111z;
                        fzj -= 1 * prod_xy * hrr_1011z;
                        fzk -= 1 * prod_xy * hrr_1101z;
                        fzl -= 1 * prod_xy * hrr_1110z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_2 * dm_il_2_2;
                            dd_jl = dm_jl_2_2 * dm_ik_2_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+2] * dm[(nao+i0+2)*nao+l0+2];
                                dd_jl = dm[(nao+j0+2)*nao+l0+2] * dm[(nao+i0+2)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[8*TILE2+sh_ij] * dm_lk_2_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                    }
                }
            }
        }
        int ia = bas[ish*BAS_SLOTS+ATOM_OF];
        int ja = bas[jsh*BAS_SLOTS+ATOM_OF];
        int ka = bas[ksh*BAS_SLOTS+ATOM_OF];
        int la = bas[lsh*BAS_SLOTS+ATOM_OF];
        if (vj != NULL) {
            atomicAdd(vj+ia*3+0, vj_grad_ix);
            atomicAdd(vj+ia*3+1, vj_grad_iy);
            atomicAdd(vj+ia*3+2, vj_grad_iz);
            atomicAdd(vj+ja*3+0, vj_grad_jx);
            atomicAdd(vj+ja*3+1, vj_grad_jy);
            atomicAdd(vj+ja*3+2, vj_grad_jz);
            atomicAdd(vj+ka*3+0, vj_grad_kx);
            atomicAdd(vj+ka*3+1, vj_grad_ky);
            atomicAdd(vj+ka*3+2, vj_grad_kz);
            atomicAdd(vj+la*3+0, vj_grad_lx);
            atomicAdd(vj+la*3+1, vj_grad_ly);
            atomicAdd(vj+la*3+2, vj_grad_lz);
        }
        if (vk != NULL) {
            atomicAdd(vk+ia*3+0, vk_grad_ix);
            atomicAdd(vk+ia*3+1, vk_grad_iy);
            atomicAdd(vk+ia*3+2, vk_grad_iz);
            atomicAdd(vk+ja*3+0, vk_grad_jx);
            atomicAdd(vk+ja*3+1, vk_grad_jy);
            atomicAdd(vk+ja*3+2, vk_grad_jz);
            atomicAdd(vk+ka*3+0, vk_grad_kx);
            atomicAdd(vk+ka*3+1, vk_grad_ky);
            atomicAdd(vk+ka*3+2, vk_grad_kz);
            atomicAdd(vk+la*3+0, vk_grad_lx);
            atomicAdd(vk+la*3+1, vk_grad_ly);
            atomicAdd(vk+la*3+2, vk_grad_lz);
        }
    }
}
__global__
void rys_ejk_ip1_1111(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int nbas = envs.nbas;
        int ntasks = _fill_ejk_tasks(shl_quartet_idx, envs, jk, bounds,
                                     batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas_tiles = nbas / TILE;
            int tile_i = tile_ij / nbas_tiles;
            int tile_j = tile_ij % nbas_tiles;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_ejk_ip1_1111(envs, jk, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_ejk_ip1_2000(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int *ao_loc = envs.ao_loc;
    int nbas = envs.nbas;
    int nao = ao_loc[nbas];
    int *bas = envs.bas;
    double *env = envs.env;
    double omega = env[PTR_RANGE_OMEGA];
    double *vj = jk.vj;
    double *vk = jk.vk;
    double *dm = jk.dm;
    extern __shared__ double dm_cache[];
    double *Rpa_cicj = dm_cache + 6 * TILE2;
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env + bas[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env + bas[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    int ij = sq_id / TILE2;
    if (ij < 6) {
        int i = ij % 6;
        int j = ij / 6;
        int sh_ij = sq_id % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        if (jk.n_dm == 1) {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i];
        } else {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i] + dm[(nao+j0+j)*nao+i0+i];
        }
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        if (ish*nbas+jsh == ksh*nbas+lsh) fac_sym *= .5;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        int k0 = ao_loc[ksh];
        int l0 = ao_loc[lsh];
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env + bas[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env + bas[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env + bas[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env + bas[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
        double vj_grad_ix = 0;
        double vj_grad_iy = 0;
        double vj_grad_iz = 0;
        double vj_grad_jx = 0;
        double vj_grad_jy = 0;
        double vj_grad_jz = 0;
        double vj_grad_kx = 0;
        double vj_grad_ky = 0;
        double vj_grad_kz = 0;
        double vj_grad_lx = 0;
        double vj_grad_ly = 0;
        double vj_grad_lz = 0;
        double vk_grad_ix = 0;
        double vk_grad_iy = 0;
        double vk_grad_iz = 0;
        double vk_grad_jx = 0;
        double vk_grad_jy = 0;
        double vk_grad_jz = 0;
        double vk_grad_kx = 0;
        double vk_grad_ky = 0;
        double vk_grad_kz = 0;
        double vk_grad_lx = 0;
        double vk_grad_ly = 0;
        double vk_grad_lz = 0;
        double dm_lk_0_0 = dm[(l0+0)*nao+(k0+0)];
        if (jk.n_dm > 1) {
            int nao2 = nao * nao;
            dm_lk_0_0 += dm[nao2+(l0+0)*nao+(k0+0)];
        }
        double dm_jk_0_0 = dm[(j0+0)*nao+(k0+0)];
        double dm_jl_0_0 = dm[(j0+0)*nao+(l0+0)];
        double dm_ik_0_0 = dm[(i0+0)*nao+(k0+0)];
        double dm_ik_1_0 = dm[(i0+1)*nao+(k0+0)];
        double dm_ik_2_0 = dm[(i0+2)*nao+(k0+0)];
        double dm_ik_3_0 = dm[(i0+3)*nao+(k0+0)];
        double dm_ik_4_0 = dm[(i0+4)*nao+(k0+0)];
        double dm_ik_5_0 = dm[(i0+5)*nao+(k0+0)];
        double dm_il_0_0 = dm[(i0+0)*nao+(l0+0)];
        double dm_il_1_0 = dm[(i0+1)*nao+(l0+0)];
        double dm_il_2_0 = dm[(i0+2)*nao+(l0+0)];
        double dm_il_3_0 = dm[(i0+3)*nao+(l0+0)];
        double dm_il_4_0 = dm[(i0+4)*nao+(l0+0)];
        double dm_il_5_0 = dm[(i0+5)*nao+(l0+0)];
        double dd_jk, dd_jl, vj_dd, vk_dd;
        double prod_xy;
        double prod_xz;
        double prod_yz;
        double fxi;
        double fyi;
        double fzi;
        double fxj;
        double fyj;
        double fzj;
        double fxk;
        double fyk;
        double fzk;
        double fxl;
        double fyl;
        double fzl;
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double ak2 = ak * 2;
            double al2 = al * 2;
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double ai2 = ai * 2;
                double aj2 = aj * 2;
                double aij = ai + aj;
                double xjxi = rj[0] - ri[0];
                double yjyi = rj[1] - ri[1];
                double zjzi = rj[2] - ri[2];
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa; // (ai*xi+aj*xj)/aij
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(2, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(2, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 2; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                __syncthreads();
                if (task_id < ntasks) {
                    for (int irys = 0; irys < 2; ++irys) {
                        double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                        double rt = rw[sq_id +  2*irys   *nsq_per_block];
                        double rt_aa = rt / (aij + akl);
                        double rt_aij = rt_aa * akl;
                        double c0x = xpa - xpq*rt_aij;
                        double trr_10x = c0x * fac;
                        double b10 = .5/aij * (1 - rt_aij);
                        double trr_20x = c0x * trr_10x + 1*b10 * fac;
                        prod_xy = trr_20x * 1;
                        prod_xz = trr_20x * wt;
                        prod_yz = 1 * wt;
                        double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                        fxi = ai2 * prod_yz * trr_30x;
                        double c0y = ypa - ypq*rt_aij;
                        double trr_10y = c0y * 1;
                        fyi = ai2 * prod_xz * trr_10y;
                        double c0z = zpa - zpq*rt_aij;
                        double trr_10z = c0z * wt;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_2100x = trr_30x - xjxi * trr_20x;
                        fxj = aj2 * prod_yz * hrr_2100x;
                        double hrr_0100y = trr_10y - yjyi * 1;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0100z = trr_10z - zjzi * wt;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double rt_akl = rt_aa * aij;
                        double cpx = xqc + xpq*rt_akl;
                        double b00 = .5 * rt_aa;
                        double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                        fxk = ak2 * prod_yz * trr_21x;
                        double cpy = yqc + ypq*rt_akl;
                        double trr_01y = cpy * 1;
                        fyk = ak2 * prod_xz * trr_01y;
                        double cpz = zqc + zpq*rt_akl;
                        double trr_01z = cpz * wt;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_2001x = trr_21x - xlxk * trr_20x;
                        fxl = al2 * prod_yz * hrr_2001x;
                        double hrr_0001y = trr_01y - ylyk * 1;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0001z = trr_01z - zlzk * wt;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 2 * prod_yz * trr_10x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * trr_10y;
                        prod_xz = trr_10x * wt;
                        prod_yz = trr_10y * wt;
                        fxi = ai2 * prod_yz * trr_20x;
                        double trr_20y = c0y * trr_10y + 1*b10 * 1;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1100x = trr_20x - xjxi * trr_10x;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        double hrr_1100y = trr_20y - yjyi * trr_10y;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double trr_11x = cpx * trr_10x + 1*b00 * fac;
                        fxk = ak2 * prod_yz * trr_11x;
                        double trr_11y = cpy * trr_10y + 1*b00 * 1;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_1001x = trr_11x - xlxk * trr_10x;
                        fxl = al2 * prod_yz * hrr_1001x;
                        double hrr_1001y = trr_11y - ylyk * trr_10y;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * fac;
                        fyi -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * 1;
                        prod_xz = trr_10x * trr_10z;
                        prod_yz = 1 * trr_10z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_20z = c0z * trr_10z + 1*b10 * wt;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1100z = trr_20z - zjzi * trr_10z;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_11z = cpz * trr_10z + 1*b00 * wt;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1001z = trr_11z - zlzk * trr_10z;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fxi -= 1 * prod_yz * fac;
                        fzi -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_20y;
                        prod_xz = fac * wt;
                        prod_yz = trr_20y * wt;
                        fxi = ai2 * prod_yz * trr_10x;
                        double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                        fyi = ai2 * prod_xz * trr_30y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0100x = trr_10x - xjxi * fac;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        double hrr_2100y = trr_30y - yjyi * trr_20y;
                        fyj = aj2 * prod_xz * hrr_2100y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double trr_01x = cpx * fac;
                        fxk = ak2 * prod_yz * trr_01x;
                        double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                        fyk = ak2 * prod_xz * trr_21y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_0001x = trr_01x - xlxk * fac;
                        fxl = al2 * prod_yz * hrr_0001x;
                        double hrr_2001y = trr_21y - ylyk * trr_20y;
                        fyl = al2 * prod_xz * hrr_2001y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 2 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_3_0;
                            dd_jl = dm_jl_0_0 * dm_ik_3_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_10y;
                        prod_xz = fac * trr_10z;
                        prod_yz = trr_10y * trr_10z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fyi -= 1 * prod_xz * 1;
                        fzi -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_4_0;
                            dd_jl = dm_jl_0_0 * dm_ik_4_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * 1;
                        prod_xz = fac * trr_20z;
                        prod_yz = 1 * trr_20z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                        fzi = ai2 * prod_xy * trr_30z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_2100z = trr_30z - zjzi * trr_20z;
                        fzj = aj2 * prod_xy * hrr_2100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                        fzk = ak2 * prod_xy * trr_21z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_2001z = trr_21z - zlzk * trr_20z;
                        fzl = al2 * prod_xy * hrr_2001z;
                        fzi -= 2 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_5_0;
                            dd_jl = dm_jl_0_0 * dm_ik_5_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                    }
                }
            }
        }
        int ia = bas[ish*BAS_SLOTS+ATOM_OF];
        int ja = bas[jsh*BAS_SLOTS+ATOM_OF];
        int ka = bas[ksh*BAS_SLOTS+ATOM_OF];
        int la = bas[lsh*BAS_SLOTS+ATOM_OF];
        if (vj != NULL) {
            atomicAdd(vj+ia*3+0, vj_grad_ix);
            atomicAdd(vj+ia*3+1, vj_grad_iy);
            atomicAdd(vj+ia*3+2, vj_grad_iz);
            atomicAdd(vj+ja*3+0, vj_grad_jx);
            atomicAdd(vj+ja*3+1, vj_grad_jy);
            atomicAdd(vj+ja*3+2, vj_grad_jz);
            atomicAdd(vj+ka*3+0, vj_grad_kx);
            atomicAdd(vj+ka*3+1, vj_grad_ky);
            atomicAdd(vj+ka*3+2, vj_grad_kz);
            atomicAdd(vj+la*3+0, vj_grad_lx);
            atomicAdd(vj+la*3+1, vj_grad_ly);
            atomicAdd(vj+la*3+2, vj_grad_lz);
        }
        if (vk != NULL) {
            atomicAdd(vk+ia*3+0, vk_grad_ix);
            atomicAdd(vk+ia*3+1, vk_grad_iy);
            atomicAdd(vk+ia*3+2, vk_grad_iz);
            atomicAdd(vk+ja*3+0, vk_grad_jx);
            atomicAdd(vk+ja*3+1, vk_grad_jy);
            atomicAdd(vk+ja*3+2, vk_grad_jz);
            atomicAdd(vk+ka*3+0, vk_grad_kx);
            atomicAdd(vk+ka*3+1, vk_grad_ky);
            atomicAdd(vk+ka*3+2, vk_grad_kz);
            atomicAdd(vk+la*3+0, vk_grad_lx);
            atomicAdd(vk+la*3+1, vk_grad_ly);
            atomicAdd(vk+la*3+2, vk_grad_lz);
        }
    }
}
__global__
void rys_ejk_ip1_2000(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int nbas = envs.nbas;
        int ntasks = _fill_ejk_tasks(shl_quartet_idx, envs, jk, bounds,
                                     batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas_tiles = nbas / TILE;
            int tile_i = tile_ij / nbas_tiles;
            int tile_j = tile_ij % nbas_tiles;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_ejk_ip1_2000(envs, jk, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_ejk_ip1_2010(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int *ao_loc = envs.ao_loc;
    int nbas = envs.nbas;
    int nao = ao_loc[nbas];
    int *bas = envs.bas;
    double *env = envs.env;
    double omega = env[PTR_RANGE_OMEGA];
    double *vj = jk.vj;
    double *vk = jk.vk;
    double *dm = jk.dm;
    extern __shared__ double dm_cache[];
    double *Rpa_cicj = dm_cache + 6 * TILE2;
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env + bas[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env + bas[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    int ij = sq_id / TILE2;
    if (ij < 6) {
        int i = ij % 6;
        int j = ij / 6;
        int sh_ij = sq_id % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        if (jk.n_dm == 1) {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i];
        } else {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i] + dm[(nao+j0+j)*nao+i0+i];
        }
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        if (ish*nbas+jsh == ksh*nbas+lsh) fac_sym *= .5;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        int k0 = ao_loc[ksh];
        int l0 = ao_loc[lsh];
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env + bas[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env + bas[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env + bas[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env + bas[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
        double vj_grad_ix = 0;
        double vj_grad_iy = 0;
        double vj_grad_iz = 0;
        double vj_grad_jx = 0;
        double vj_grad_jy = 0;
        double vj_grad_jz = 0;
        double vj_grad_kx = 0;
        double vj_grad_ky = 0;
        double vj_grad_kz = 0;
        double vj_grad_lx = 0;
        double vj_grad_ly = 0;
        double vj_grad_lz = 0;
        double vk_grad_ix = 0;
        double vk_grad_iy = 0;
        double vk_grad_iz = 0;
        double vk_grad_jx = 0;
        double vk_grad_jy = 0;
        double vk_grad_jz = 0;
        double vk_grad_kx = 0;
        double vk_grad_ky = 0;
        double vk_grad_kz = 0;
        double vk_grad_lx = 0;
        double vk_grad_ly = 0;
        double vk_grad_lz = 0;
        double dm_lk_0_0 = dm[(l0+0)*nao+(k0+0)];
        double dm_lk_0_1 = dm[(l0+0)*nao+(k0+1)];
        double dm_lk_0_2 = dm[(l0+0)*nao+(k0+2)];
        if (jk.n_dm > 1) {
            int nao2 = nao * nao;
            dm_lk_0_0 += dm[nao2+(l0+0)*nao+(k0+0)];
            dm_lk_0_1 += dm[nao2+(l0+0)*nao+(k0+1)];
            dm_lk_0_2 += dm[nao2+(l0+0)*nao+(k0+2)];
        }
        double dm_jk_0_0 = dm[(j0+0)*nao+(k0+0)];
        double dm_jk_0_1 = dm[(j0+0)*nao+(k0+1)];
        double dm_jk_0_2 = dm[(j0+0)*nao+(k0+2)];
        double dm_jl_0_0 = dm[(j0+0)*nao+(l0+0)];
        double dm_ik_0_0 = dm[(i0+0)*nao+(k0+0)];
        double dm_ik_0_1 = dm[(i0+0)*nao+(k0+1)];
        double dm_ik_0_2 = dm[(i0+0)*nao+(k0+2)];
        double dm_ik_1_0 = dm[(i0+1)*nao+(k0+0)];
        double dm_ik_1_1 = dm[(i0+1)*nao+(k0+1)];
        double dm_ik_1_2 = dm[(i0+1)*nao+(k0+2)];
        double dm_ik_2_0 = dm[(i0+2)*nao+(k0+0)];
        double dm_ik_2_1 = dm[(i0+2)*nao+(k0+1)];
        double dm_ik_2_2 = dm[(i0+2)*nao+(k0+2)];
        double dm_ik_3_0 = dm[(i0+3)*nao+(k0+0)];
        double dm_ik_3_1 = dm[(i0+3)*nao+(k0+1)];
        double dm_ik_3_2 = dm[(i0+3)*nao+(k0+2)];
        double dm_ik_4_0 = dm[(i0+4)*nao+(k0+0)];
        double dm_ik_4_1 = dm[(i0+4)*nao+(k0+1)];
        double dm_ik_4_2 = dm[(i0+4)*nao+(k0+2)];
        double dm_ik_5_0 = dm[(i0+5)*nao+(k0+0)];
        double dm_ik_5_1 = dm[(i0+5)*nao+(k0+1)];
        double dm_ik_5_2 = dm[(i0+5)*nao+(k0+2)];
        double dm_il_0_0 = dm[(i0+0)*nao+(l0+0)];
        double dm_il_1_0 = dm[(i0+1)*nao+(l0+0)];
        double dm_il_2_0 = dm[(i0+2)*nao+(l0+0)];
        double dm_il_3_0 = dm[(i0+3)*nao+(l0+0)];
        double dm_il_4_0 = dm[(i0+4)*nao+(l0+0)];
        double dm_il_5_0 = dm[(i0+5)*nao+(l0+0)];
        double dd_jk, dd_jl, vj_dd, vk_dd;
        double prod_xy;
        double prod_xz;
        double prod_yz;
        double fxi;
        double fyi;
        double fzi;
        double fxj;
        double fyj;
        double fzj;
        double fxk;
        double fyk;
        double fzk;
        double fxl;
        double fyl;
        double fzl;
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double ak2 = ak * 2;
            double al2 = al * 2;
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double ai2 = ai * 2;
                double aj2 = aj * 2;
                double aij = ai + aj;
                double xjxi = rj[0] - ri[0];
                double yjyi = rj[1] - ri[1];
                double zjzi = rj[2] - ri[2];
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa; // (ai*xi+aj*xj)/aij
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(3, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(3, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 3; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                __syncthreads();
                if (task_id < ntasks) {
                    for (int irys = 0; irys < 3; ++irys) {
                        double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                        double rt = rw[sq_id +  2*irys   *nsq_per_block];
                        double rt_aa = rt / (aij + akl);
                        double rt_akl = rt_aa * aij;
                        double cpx = xqc + xpq*rt_akl;
                        double rt_aij = rt_aa * akl;
                        double c0x = xpa - xpq*rt_aij;
                        double trr_10x = c0x * fac;
                        double b10 = .5/aij * (1 - rt_aij);
                        double trr_20x = c0x * trr_10x + 1*b10 * fac;
                        double b00 = .5 * rt_aa;
                        double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                        prod_xy = trr_21x * 1;
                        prod_xz = trr_21x * wt;
                        prod_yz = 1 * wt;
                        double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                        double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                        fxi = ai2 * prod_yz * trr_31x;
                        double c0y = ypa - ypq*rt_aij;
                        double trr_10y = c0y * 1;
                        fyi = ai2 * prod_xz * trr_10y;
                        double c0z = zpa - zpq*rt_aij;
                        double trr_10z = c0z * wt;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_2110x = trr_31x - xjxi * trr_21x;
                        fxj = aj2 * prod_yz * hrr_2110x;
                        double hrr_0100y = trr_10y - yjyi * 1;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0100z = trr_10z - zjzi * wt;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double b01 = .5/akl * (1 - rt_akl);
                        double trr_11x = cpx * trr_10x + 1*b00 * fac;
                        double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                        fxk = ak2 * prod_yz * trr_22x;
                        double cpy = yqc + ypq*rt_akl;
                        double trr_01y = cpy * 1;
                        fyk = ak2 * prod_xz * trr_01y;
                        double cpz = zqc + zpq*rt_akl;
                        double trr_01z = cpz * wt;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_2011x = trr_22x - xlxk * trr_21x;
                        fxl = al2 * prod_yz * hrr_2011x;
                        double hrr_0001y = trr_01y - ylyk * 1;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0001z = trr_01z - zlzk * wt;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 2 * prod_yz * trr_11x;
                        fxk -= 1 * prod_yz * trr_20x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_11x * trr_10y;
                        prod_xz = trr_11x * wt;
                        prod_yz = trr_10y * wt;
                        fxi = ai2 * prod_yz * trr_21x;
                        double trr_20y = c0y * trr_10y + 1*b10 * 1;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1110x = trr_21x - xjxi * trr_11x;
                        fxj = aj2 * prod_yz * hrr_1110x;
                        double hrr_1100y = trr_20y - yjyi * trr_10y;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double trr_01x = cpx * fac;
                        double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                        fxk = ak2 * prod_yz * trr_12x;
                        double trr_11y = cpy * trr_10y + 1*b00 * 1;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_1011x = trr_12x - xlxk * trr_11x;
                        fxl = al2 * prod_yz * hrr_1011x;
                        double hrr_1001y = trr_11y - ylyk * trr_10y;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * trr_01x;
                        fyi -= 1 * prod_xz * 1;
                        fxk -= 1 * prod_yz * trr_10x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_11x * 1;
                        prod_xz = trr_11x * trr_10z;
                        prod_yz = 1 * trr_10z;
                        fxi = ai2 * prod_yz * trr_21x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_20z = c0z * trr_10z + 1*b10 * wt;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_1110x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1100z = trr_20z - zjzi * trr_10z;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_12x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_11z = cpz * trr_10z + 1*b00 * wt;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_1011x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1001z = trr_11z - zlzk * trr_10z;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fxi -= 1 * prod_yz * trr_01x;
                        fzi -= 1 * prod_xy * wt;
                        fxk -= 1 * prod_yz * trr_10x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * trr_20y;
                        prod_xz = trr_01x * wt;
                        prod_yz = trr_20y * wt;
                        fxi = ai2 * prod_yz * trr_11x;
                        double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                        fyi = ai2 * prod_xz * trr_30y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0110x = trr_11x - xjxi * trr_01x;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        double hrr_2100y = trr_30y - yjyi * trr_20y;
                        fyj = aj2 * prod_xz * hrr_2100y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double trr_02x = cpx * trr_01x + 1*b01 * fac;
                        fxk = ak2 * prod_yz * trr_02x;
                        double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                        fyk = ak2 * prod_xz * trr_21y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_0011x = trr_02x - xlxk * trr_01x;
                        fxl = al2 * prod_yz * hrr_0011x;
                        double hrr_2001y = trr_21y - ylyk * trr_20y;
                        fyl = al2 * prod_xz * hrr_2001y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 2 * prod_xz * trr_10y;
                        fxk -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_3_0;
                            dd_jl = dm_jl_0_0 * dm_ik_3_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * trr_10y;
                        prod_xz = trr_01x * trr_10z;
                        prod_yz = trr_10y * trr_10z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fyi -= 1 * prod_xz * 1;
                        fzi -= 1 * prod_xy * wt;
                        fxk -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_4_0;
                            dd_jl = dm_jl_0_0 * dm_ik_4_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * 1;
                        prod_xz = trr_01x * trr_20z;
                        prod_yz = 1 * trr_20z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                        fzi = ai2 * prod_xy * trr_30z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_2100z = trr_30z - zjzi * trr_20z;
                        fzj = aj2 * prod_xy * hrr_2100z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                        fzk = ak2 * prod_xy * trr_21z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_2001z = trr_21z - zlzk * trr_20z;
                        fzl = al2 * prod_xy * hrr_2001z;
                        fzi -= 2 * prod_xy * trr_10z;
                        fxk -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_5_0;
                            dd_jl = dm_jl_0_0 * dm_ik_5_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_20x * trr_01y;
                        prod_xz = trr_20x * wt;
                        prod_yz = trr_01y * wt;
                        fxi = ai2 * prod_yz * trr_30x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_2100x = trr_30x - xjxi * trr_20x;
                        fxj = aj2 * prod_yz * hrr_2100x;
                        double hrr_0110y = trr_11y - yjyi * trr_01y;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_21x;
                        double trr_02y = cpy * trr_01y + 1*b01 * 1;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_2001x = trr_21x - xlxk * trr_20x;
                        fxl = al2 * prod_yz * hrr_2001x;
                        double hrr_0011y = trr_02y - ylyk * trr_01y;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 2 * prod_yz * trr_10x;
                        fyk -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * trr_11y;
                        prod_xz = trr_10x * wt;
                        prod_yz = trr_11y * wt;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_21y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1100x = trr_20x - xjxi * trr_10x;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        double hrr_1110y = trr_21y - yjyi * trr_11y;
                        fyj = aj2 * prod_xz * hrr_1110y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_11x;
                        double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                        fyk = ak2 * prod_xz * trr_12y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_1001x = trr_11x - xlxk * trr_10x;
                        fxl = al2 * prod_yz * hrr_1001x;
                        double hrr_1011y = trr_12y - ylyk * trr_11y;
                        fyl = al2 * prod_xz * hrr_1011y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * fac;
                        fyi -= 1 * prod_xz * trr_01y;
                        fyk -= 1 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * trr_01y;
                        prod_xz = trr_10x * trr_10z;
                        prod_yz = trr_01y * trr_10z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fxi -= 1 * prod_yz * fac;
                        fzi -= 1 * prod_xy * wt;
                        fyk -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_21y;
                        prod_xz = fac * wt;
                        prod_yz = trr_21y * wt;
                        fxi = ai2 * prod_yz * trr_10x;
                        double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                        fyi = ai2 * prod_xz * trr_31y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0100x = trr_10x - xjxi * fac;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        double hrr_2110y = trr_31y - yjyi * trr_21y;
                        fyj = aj2 * prod_xz * hrr_2110y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                        fyk = ak2 * prod_xz * trr_22y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_0001x = trr_01x - xlxk * fac;
                        fxl = al2 * prod_yz * hrr_0001x;
                        double hrr_2011y = trr_22y - ylyk * trr_21y;
                        fyl = al2 * prod_xz * hrr_2011y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 2 * prod_xz * trr_11y;
                        fyk -= 1 * prod_xz * trr_20y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_3_0;
                            dd_jl = dm_jl_0_0 * dm_ik_3_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_11y;
                        prod_xz = fac * trr_10z;
                        prod_yz = trr_11y * trr_10z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_21y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1110y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_12y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1011y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fyi -= 1 * prod_xz * trr_01y;
                        fzi -= 1 * prod_xy * wt;
                        fyk -= 1 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_4_0;
                            dd_jl = dm_jl_0_0 * dm_ik_4_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_01y;
                        prod_xz = fac * trr_20z;
                        prod_yz = trr_01y * trr_20z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * trr_30z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_2100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * trr_21z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_2001z;
                        fzi -= 2 * prod_xy * trr_10z;
                        fyk -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_5_0;
                            dd_jl = dm_jl_0_0 * dm_ik_5_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_20x * 1;
                        prod_xz = trr_20x * trr_01z;
                        prod_yz = 1 * trr_01z;
                        fxi = ai2 * prod_yz * trr_30x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_2100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0110z = trr_11z - zjzi * trr_01z;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * trr_21x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_02z = cpz * trr_01z + 1*b01 * wt;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_2001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0011z = trr_02z - zlzk * trr_01z;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fxi -= 2 * prod_yz * trr_10x;
                        fzk -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * trr_10y;
                        prod_xz = trr_10x * trr_01z;
                        prod_yz = trr_10y * trr_01z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fxi -= 1 * prod_yz * fac;
                        fyi -= 1 * prod_xz * 1;
                        fzk -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * 1;
                        prod_xz = trr_10x * trr_11z;
                        prod_yz = 1 * trr_11z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * trr_21z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1110z = trr_21z - zjzi * trr_11z;
                        fzj = aj2 * prod_xy * hrr_1110z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                        fzk = ak2 * prod_xy * trr_12z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1011z = trr_12z - zlzk * trr_11z;
                        fzl = al2 * prod_xy * hrr_1011z;
                        fxi -= 1 * prod_yz * fac;
                        fzi -= 1 * prod_xy * trr_01z;
                        fzk -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_20y;
                        prod_xz = fac * trr_01z;
                        prod_yz = trr_20y * trr_01z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_30y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_2100y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_21y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_2001y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fyi -= 2 * prod_xz * trr_10y;
                        fzk -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_3_0;
                            dd_jl = dm_jl_0_0 * dm_ik_3_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_10y;
                        prod_xz = fac * trr_11z;
                        prod_yz = trr_10y * trr_11z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_21z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_1110z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_12z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_1011z;
                        fyi -= 1 * prod_xz * 1;
                        fzi -= 1 * prod_xy * trr_01z;
                        fzk -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_4_0;
                            dd_jl = dm_jl_0_0 * dm_ik_4_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * 1;
                        prod_xz = fac * trr_21z;
                        prod_yz = 1 * trr_21z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                        fzi = ai2 * prod_xy * trr_31z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_2110z = trr_31z - zjzi * trr_21z;
                        fzj = aj2 * prod_xy * hrr_2110z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                        fzk = ak2 * prod_xy * trr_22z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_2011z = trr_22z - zlzk * trr_21z;
                        fzl = al2 * prod_xy * hrr_2011z;
                        fzi -= 2 * prod_xy * trr_11z;
                        fzk -= 1 * prod_xy * trr_20z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_5_0;
                            dd_jl = dm_jl_0_0 * dm_ik_5_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                    }
                }
            }
        }
        int ia = bas[ish*BAS_SLOTS+ATOM_OF];
        int ja = bas[jsh*BAS_SLOTS+ATOM_OF];
        int ka = bas[ksh*BAS_SLOTS+ATOM_OF];
        int la = bas[lsh*BAS_SLOTS+ATOM_OF];
        if (vj != NULL) {
            atomicAdd(vj+ia*3+0, vj_grad_ix);
            atomicAdd(vj+ia*3+1, vj_grad_iy);
            atomicAdd(vj+ia*3+2, vj_grad_iz);
            atomicAdd(vj+ja*3+0, vj_grad_jx);
            atomicAdd(vj+ja*3+1, vj_grad_jy);
            atomicAdd(vj+ja*3+2, vj_grad_jz);
            atomicAdd(vj+ka*3+0, vj_grad_kx);
            atomicAdd(vj+ka*3+1, vj_grad_ky);
            atomicAdd(vj+ka*3+2, vj_grad_kz);
            atomicAdd(vj+la*3+0, vj_grad_lx);
            atomicAdd(vj+la*3+1, vj_grad_ly);
            atomicAdd(vj+la*3+2, vj_grad_lz);
        }
        if (vk != NULL) {
            atomicAdd(vk+ia*3+0, vk_grad_ix);
            atomicAdd(vk+ia*3+1, vk_grad_iy);
            atomicAdd(vk+ia*3+2, vk_grad_iz);
            atomicAdd(vk+ja*3+0, vk_grad_jx);
            atomicAdd(vk+ja*3+1, vk_grad_jy);
            atomicAdd(vk+ja*3+2, vk_grad_jz);
            atomicAdd(vk+ka*3+0, vk_grad_kx);
            atomicAdd(vk+ka*3+1, vk_grad_ky);
            atomicAdd(vk+ka*3+2, vk_grad_kz);
            atomicAdd(vk+la*3+0, vk_grad_lx);
            atomicAdd(vk+la*3+1, vk_grad_ly);
            atomicAdd(vk+la*3+2, vk_grad_lz);
        }
    }
}
__global__
void rys_ejk_ip1_2010(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int nbas = envs.nbas;
        int ntasks = _fill_ejk_tasks(shl_quartet_idx, envs, jk, bounds,
                                     batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas_tiles = nbas / TILE;
            int tile_i = tile_ij / nbas_tiles;
            int tile_j = tile_ij % nbas_tiles;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_ejk_ip1_2010(envs, jk, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_ejk_ip1_2011(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int *ao_loc = envs.ao_loc;
    int nbas = envs.nbas;
    int nao = ao_loc[nbas];
    int *bas = envs.bas;
    double *env = envs.env;
    double omega = env[PTR_RANGE_OMEGA];
    double *vj = jk.vj;
    double *vk = jk.vk;
    double *dm = jk.dm;
    extern __shared__ double dm_cache[];
    double *Rpa_cicj = dm_cache + 6 * TILE2;
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env + bas[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env + bas[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    int ij = sq_id / TILE2;
    if (ij < 6) {
        int i = ij % 6;
        int j = ij / 6;
        int sh_ij = sq_id % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        if (jk.n_dm == 1) {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i];
        } else {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i] + dm[(nao+j0+j)*nao+i0+i];
        }
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        if (ish*nbas+jsh == ksh*nbas+lsh) fac_sym *= .5;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        int k0 = ao_loc[ksh];
        int l0 = ao_loc[lsh];
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env + bas[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env + bas[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env + bas[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env + bas[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
        double vj_grad_ix = 0;
        double vj_grad_iy = 0;
        double vj_grad_iz = 0;
        double vj_grad_jx = 0;
        double vj_grad_jy = 0;
        double vj_grad_jz = 0;
        double vj_grad_kx = 0;
        double vj_grad_ky = 0;
        double vj_grad_kz = 0;
        double vj_grad_lx = 0;
        double vj_grad_ly = 0;
        double vj_grad_lz = 0;
        double vk_grad_ix = 0;
        double vk_grad_iy = 0;
        double vk_grad_iz = 0;
        double vk_grad_jx = 0;
        double vk_grad_jy = 0;
        double vk_grad_jz = 0;
        double vk_grad_kx = 0;
        double vk_grad_ky = 0;
        double vk_grad_kz = 0;
        double vk_grad_lx = 0;
        double vk_grad_ly = 0;
        double vk_grad_lz = 0;
        double dm_lk_0_0 = dm[(l0+0)*nao+(k0+0)];
        double dm_lk_0_1 = dm[(l0+0)*nao+(k0+1)];
        double dm_lk_0_2 = dm[(l0+0)*nao+(k0+2)];
        double dm_lk_1_0 = dm[(l0+1)*nao+(k0+0)];
        double dm_lk_1_1 = dm[(l0+1)*nao+(k0+1)];
        double dm_lk_1_2 = dm[(l0+1)*nao+(k0+2)];
        double dm_lk_2_0 = dm[(l0+2)*nao+(k0+0)];
        double dm_lk_2_1 = dm[(l0+2)*nao+(k0+1)];
        double dm_lk_2_2 = dm[(l0+2)*nao+(k0+2)];
        if (jk.n_dm > 1) {
            int nao2 = nao * nao;
            dm_lk_0_0 += dm[nao2+(l0+0)*nao+(k0+0)];
            dm_lk_0_1 += dm[nao2+(l0+0)*nao+(k0+1)];
            dm_lk_0_2 += dm[nao2+(l0+0)*nao+(k0+2)];
            dm_lk_1_0 += dm[nao2+(l0+1)*nao+(k0+0)];
            dm_lk_1_1 += dm[nao2+(l0+1)*nao+(k0+1)];
            dm_lk_1_2 += dm[nao2+(l0+1)*nao+(k0+2)];
            dm_lk_2_0 += dm[nao2+(l0+2)*nao+(k0+0)];
            dm_lk_2_1 += dm[nao2+(l0+2)*nao+(k0+1)];
            dm_lk_2_2 += dm[nao2+(l0+2)*nao+(k0+2)];
        }
        double dm_jk_0_0 = dm[(j0+0)*nao+(k0+0)];
        double dm_jk_0_1 = dm[(j0+0)*nao+(k0+1)];
        double dm_jk_0_2 = dm[(j0+0)*nao+(k0+2)];
        double dm_jl_0_0 = dm[(j0+0)*nao+(l0+0)];
        double dm_jl_0_1 = dm[(j0+0)*nao+(l0+1)];
        double dm_jl_0_2 = dm[(j0+0)*nao+(l0+2)];
        double dm_ik_0_0 = dm[(i0+0)*nao+(k0+0)];
        double dm_ik_0_1 = dm[(i0+0)*nao+(k0+1)];
        double dm_ik_0_2 = dm[(i0+0)*nao+(k0+2)];
        double dm_ik_1_0 = dm[(i0+1)*nao+(k0+0)];
        double dm_ik_1_1 = dm[(i0+1)*nao+(k0+1)];
        double dm_ik_1_2 = dm[(i0+1)*nao+(k0+2)];
        double dm_ik_2_0 = dm[(i0+2)*nao+(k0+0)];
        double dm_ik_2_1 = dm[(i0+2)*nao+(k0+1)];
        double dm_ik_2_2 = dm[(i0+2)*nao+(k0+2)];
        double dm_ik_3_0 = dm[(i0+3)*nao+(k0+0)];
        double dm_ik_3_1 = dm[(i0+3)*nao+(k0+1)];
        double dm_ik_3_2 = dm[(i0+3)*nao+(k0+2)];
        double dm_ik_4_0 = dm[(i0+4)*nao+(k0+0)];
        double dm_ik_4_1 = dm[(i0+4)*nao+(k0+1)];
        double dm_ik_4_2 = dm[(i0+4)*nao+(k0+2)];
        double dm_ik_5_0 = dm[(i0+5)*nao+(k0+0)];
        double dm_ik_5_1 = dm[(i0+5)*nao+(k0+1)];
        double dm_ik_5_2 = dm[(i0+5)*nao+(k0+2)];
        double dm_il_0_0 = dm[(i0+0)*nao+(l0+0)];
        double dm_il_0_1 = dm[(i0+0)*nao+(l0+1)];
        double dm_il_0_2 = dm[(i0+0)*nao+(l0+2)];
        double dm_il_1_0 = dm[(i0+1)*nao+(l0+0)];
        double dm_il_1_1 = dm[(i0+1)*nao+(l0+1)];
        double dm_il_1_2 = dm[(i0+1)*nao+(l0+2)];
        double dm_il_2_0 = dm[(i0+2)*nao+(l0+0)];
        double dm_il_2_1 = dm[(i0+2)*nao+(l0+1)];
        double dm_il_2_2 = dm[(i0+2)*nao+(l0+2)];
        double dm_il_3_0 = dm[(i0+3)*nao+(l0+0)];
        double dm_il_3_1 = dm[(i0+3)*nao+(l0+1)];
        double dm_il_3_2 = dm[(i0+3)*nao+(l0+2)];
        double dm_il_4_0 = dm[(i0+4)*nao+(l0+0)];
        double dm_il_4_1 = dm[(i0+4)*nao+(l0+1)];
        double dm_il_4_2 = dm[(i0+4)*nao+(l0+2)];
        double dm_il_5_0 = dm[(i0+5)*nao+(l0+0)];
        double dm_il_5_1 = dm[(i0+5)*nao+(l0+1)];
        double dm_il_5_2 = dm[(i0+5)*nao+(l0+2)];
        double dd_jk, dd_jl, vj_dd, vk_dd;
        double prod_xy;
        double prod_xz;
        double prod_yz;
        double fxi;
        double fyi;
        double fzi;
        double fxj;
        double fyj;
        double fzj;
        double fxk;
        double fyk;
        double fzk;
        double fxl;
        double fyl;
        double fzl;
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double ak2 = ak * 2;
            double al2 = al * 2;
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double ai2 = ai * 2;
                double aj2 = aj * 2;
                double aij = ai + aj;
                double xjxi = rj[0] - ri[0];
                double yjyi = rj[1] - ri[1];
                double zjzi = rj[2] - ri[2];
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa; // (ai*xi+aj*xj)/aij
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(3, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(3, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 3; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                __syncthreads();
                if (task_id < ntasks) {
                    for (int irys = 0; irys < 3; ++irys) {
                        double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                        double rt = rw[sq_id +  2*irys   *nsq_per_block];
                        double rt_aa = rt / (aij + akl);
                        double rt_akl = rt_aa * aij;
                        double cpx = xqc + xpq*rt_akl;
                        double rt_aij = rt_aa * akl;
                        double c0x = xpa - xpq*rt_aij;
                        double trr_10x = c0x * fac;
                        double b10 = .5/aij * (1 - rt_aij);
                        double trr_20x = c0x * trr_10x + 1*b10 * fac;
                        double b00 = .5 * rt_aa;
                        double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                        double b01 = .5/akl * (1 - rt_akl);
                        double trr_11x = cpx * trr_10x + 1*b00 * fac;
                        double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                        double hrr_2011x = trr_22x - xlxk * trr_21x;
                        prod_xy = hrr_2011x * 1;
                        prod_xz = hrr_2011x * wt;
                        prod_yz = 1 * wt;
                        double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                        double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                        double trr_32x = cpx * trr_31x + 1*b01 * trr_30x + 3*b00 * trr_21x;
                        double hrr_3011x = trr_32x - xlxk * trr_31x;
                        fxi = ai2 * prod_yz * hrr_3011x;
                        double c0y = ypa - ypq*rt_aij;
                        double trr_10y = c0y * 1;
                        fyi = ai2 * prod_xz * trr_10y;
                        double c0z = zpa - zpq*rt_aij;
                        double trr_10z = c0z * wt;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_2111x = hrr_3011x - xjxi * hrr_2011x;
                        fxj = aj2 * prod_yz * hrr_2111x;
                        double hrr_0100y = trr_10y - yjyi * 1;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0100z = trr_10z - zjzi * wt;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double trr_01x = cpx * fac;
                        double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                        double trr_23x = cpx * trr_22x + 2*b01 * trr_21x + 2*b00 * trr_12x;
                        double hrr_2021x = trr_23x - xlxk * trr_22x;
                        fxk = ak2 * prod_yz * hrr_2021x;
                        double cpy = yqc + ypq*rt_akl;
                        double trr_01y = cpy * 1;
                        fyk = ak2 * prod_xz * trr_01y;
                        double cpz = zqc + zpq*rt_akl;
                        double trr_01z = cpz * wt;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_2012x = hrr_2021x - xlxk * hrr_2011x;
                        fxl = al2 * prod_yz * hrr_2012x;
                        double hrr_0001y = trr_01y - ylyk * 1;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0001z = trr_01z - zlzk * wt;
                        fzl = al2 * prod_xy * hrr_0001z;
                        double hrr_1011x = trr_12x - xlxk * trr_11x;
                        fxi -= 2 * prod_yz * hrr_1011x;
                        double hrr_2001x = trr_21x - xlxk * trr_20x;
                        fxk -= 1 * prod_yz * hrr_2001x;
                        fxl -= 1 * prod_yz * trr_21x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1011x * trr_10y;
                        prod_xz = hrr_1011x * wt;
                        prod_yz = trr_10y * wt;
                        fxi = ai2 * prod_yz * hrr_2011x;
                        double trr_20y = c0y * trr_10y + 1*b10 * 1;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1111x = hrr_2011x - xjxi * hrr_1011x;
                        fxj = aj2 * prod_yz * hrr_1111x;
                        double hrr_1100y = trr_20y - yjyi * trr_10y;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double trr_02x = cpx * trr_01x + 1*b01 * fac;
                        double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                        double hrr_1021x = trr_13x - xlxk * trr_12x;
                        fxk = ak2 * prod_yz * hrr_1021x;
                        double trr_11y = cpy * trr_10y + 1*b00 * 1;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_1012x = hrr_1021x - xlxk * hrr_1011x;
                        fxl = al2 * prod_yz * hrr_1012x;
                        double hrr_1001y = trr_11y - ylyk * trr_10y;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        double hrr_0011x = trr_02x - xlxk * trr_01x;
                        fxi -= 1 * prod_yz * hrr_0011x;
                        fyi -= 1 * prod_xz * 1;
                        double hrr_1001x = trr_11x - xlxk * trr_10x;
                        fxk -= 1 * prod_yz * hrr_1001x;
                        fxl -= 1 * prod_yz * trr_11x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1011x * 1;
                        prod_xz = hrr_1011x * trr_10z;
                        prod_yz = 1 * trr_10z;
                        fxi = ai2 * prod_yz * hrr_2011x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_20z = c0z * trr_10z + 1*b10 * wt;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_1111x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1100z = trr_20z - zjzi * trr_10z;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * hrr_1021x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_11z = cpz * trr_10z + 1*b00 * wt;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_1012x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1001z = trr_11z - zlzk * trr_10z;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fxi -= 1 * prod_yz * hrr_0011x;
                        fzi -= 1 * prod_xy * wt;
                        fxk -= 1 * prod_yz * hrr_1001x;
                        fxl -= 1 * prod_yz * trr_11x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0011x * trr_20y;
                        prod_xz = hrr_0011x * wt;
                        prod_yz = trr_20y * wt;
                        fxi = ai2 * prod_yz * hrr_1011x;
                        double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                        fyi = ai2 * prod_xz * trr_30y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0111x = hrr_1011x - xjxi * hrr_0011x;
                        fxj = aj2 * prod_yz * hrr_0111x;
                        double hrr_2100y = trr_30y - yjyi * trr_20y;
                        fyj = aj2 * prod_xz * hrr_2100y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                        double hrr_0021x = trr_03x - xlxk * trr_02x;
                        fxk = ak2 * prod_yz * hrr_0021x;
                        double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                        fyk = ak2 * prod_xz * trr_21y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_0012x = hrr_0021x - xlxk * hrr_0011x;
                        fxl = al2 * prod_yz * hrr_0012x;
                        double hrr_2001y = trr_21y - ylyk * trr_20y;
                        fyl = al2 * prod_xz * hrr_2001y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 2 * prod_xz * trr_10y;
                        double hrr_0001x = trr_01x - xlxk * fac;
                        fxk -= 1 * prod_yz * hrr_0001x;
                        fxl -= 1 * prod_yz * trr_01x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_3_0;
                            dd_jl = dm_jl_0_0 * dm_ik_3_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0011x * trr_10y;
                        prod_xz = hrr_0011x * trr_10z;
                        prod_yz = trr_10y * trr_10z;
                        fxi = ai2 * prod_yz * hrr_1011x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0111x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * hrr_0021x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0012x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fyi -= 1 * prod_xz * 1;
                        fzi -= 1 * prod_xy * wt;
                        fxk -= 1 * prod_yz * hrr_0001x;
                        fxl -= 1 * prod_yz * trr_01x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_4_0;
                            dd_jl = dm_jl_0_0 * dm_ik_4_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0011x * 1;
                        prod_xz = hrr_0011x * trr_20z;
                        prod_yz = 1 * trr_20z;
                        fxi = ai2 * prod_yz * hrr_1011x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                        fzi = ai2 * prod_xy * trr_30z;
                        fxj = aj2 * prod_yz * hrr_0111x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_2100z = trr_30z - zjzi * trr_20z;
                        fzj = aj2 * prod_xy * hrr_2100z;
                        fxk = ak2 * prod_yz * hrr_0021x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                        fzk = ak2 * prod_xy * trr_21z;
                        fxl = al2 * prod_yz * hrr_0012x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_2001z = trr_21z - zlzk * trr_20z;
                        fzl = al2 * prod_xy * hrr_2001z;
                        fzi -= 2 * prod_xy * trr_10z;
                        fxk -= 1 * prod_yz * hrr_0001x;
                        fxl -= 1 * prod_yz * trr_01x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_5_0;
                            dd_jl = dm_jl_0_0 * dm_ik_5_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_2001x * trr_01y;
                        prod_xz = hrr_2001x * wt;
                        prod_yz = trr_01y * wt;
                        double hrr_3001x = trr_31x - xlxk * trr_30x;
                        fxi = ai2 * prod_yz * hrr_3001x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_2101x = hrr_3001x - xjxi * hrr_2001x;
                        fxj = aj2 * prod_yz * hrr_2101x;
                        double hrr_0110y = trr_11y - yjyi * trr_01y;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * hrr_2011x;
                        double trr_02y = cpy * trr_01y + 1*b01 * 1;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_2002x = hrr_2011x - xlxk * hrr_2001x;
                        fxl = al2 * prod_yz * hrr_2002x;
                        double hrr_0011y = trr_02y - ylyk * trr_01y;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 2 * prod_yz * hrr_1001x;
                        fyk -= 1 * prod_xz * 1;
                        fxl -= 1 * prod_yz * trr_20x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1001x * trr_11y;
                        prod_xz = hrr_1001x * wt;
                        prod_yz = trr_11y * wt;
                        fxi = ai2 * prod_yz * hrr_2001x;
                        fyi = ai2 * prod_xz * trr_21y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1101x = hrr_2001x - xjxi * hrr_1001x;
                        fxj = aj2 * prod_yz * hrr_1101x;
                        double hrr_1110y = trr_21y - yjyi * trr_11y;
                        fyj = aj2 * prod_xz * hrr_1110y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * hrr_1011x;
                        double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                        fyk = ak2 * prod_xz * trr_12y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_1002x = hrr_1011x - xlxk * hrr_1001x;
                        fxl = al2 * prod_yz * hrr_1002x;
                        double hrr_1011y = trr_12y - ylyk * trr_11y;
                        fyl = al2 * prod_xz * hrr_1011y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * hrr_0001x;
                        fyi -= 1 * prod_xz * trr_01y;
                        fyk -= 1 * prod_xz * trr_10y;
                        fxl -= 1 * prod_yz * trr_10x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1001x * trr_01y;
                        prod_xz = hrr_1001x * trr_10z;
                        prod_yz = trr_01y * trr_10z;
                        fxi = ai2 * prod_yz * hrr_2001x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_1101x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * hrr_1011x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_1002x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fxi -= 1 * prod_yz * hrr_0001x;
                        fzi -= 1 * prod_xy * wt;
                        fyk -= 1 * prod_xz * 1;
                        fxl -= 1 * prod_yz * trr_10x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0001x * trr_21y;
                        prod_xz = hrr_0001x * wt;
                        prod_yz = trr_21y * wt;
                        fxi = ai2 * prod_yz * hrr_1001x;
                        double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                        fyi = ai2 * prod_xz * trr_31y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0101x = hrr_1001x - xjxi * hrr_0001x;
                        fxj = aj2 * prod_yz * hrr_0101x;
                        double hrr_2110y = trr_31y - yjyi * trr_21y;
                        fyj = aj2 * prod_xz * hrr_2110y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * hrr_0011x;
                        double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                        fyk = ak2 * prod_xz * trr_22y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_0002x = hrr_0011x - xlxk * hrr_0001x;
                        fxl = al2 * prod_yz * hrr_0002x;
                        double hrr_2011y = trr_22y - ylyk * trr_21y;
                        fyl = al2 * prod_xz * hrr_2011y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 2 * prod_xz * trr_11y;
                        fyk -= 1 * prod_xz * trr_20y;
                        fxl -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_3_0;
                            dd_jl = dm_jl_0_0 * dm_ik_3_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0001x * trr_11y;
                        prod_xz = hrr_0001x * trr_10z;
                        prod_yz = trr_11y * trr_10z;
                        fxi = ai2 * prod_yz * hrr_1001x;
                        fyi = ai2 * prod_xz * trr_21y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0101x;
                        fyj = aj2 * prod_xz * hrr_1110y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * hrr_0011x;
                        fyk = ak2 * prod_xz * trr_12y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0002x;
                        fyl = al2 * prod_xz * hrr_1011y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fyi -= 1 * prod_xz * trr_01y;
                        fzi -= 1 * prod_xy * wt;
                        fyk -= 1 * prod_xz * trr_10y;
                        fxl -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_4_0;
                            dd_jl = dm_jl_0_0 * dm_ik_4_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0001x * trr_01y;
                        prod_xz = hrr_0001x * trr_20z;
                        prod_yz = trr_01y * trr_20z;
                        fxi = ai2 * prod_yz * hrr_1001x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * trr_30z;
                        fxj = aj2 * prod_yz * hrr_0101x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_2100z;
                        fxk = ak2 * prod_yz * hrr_0011x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * trr_21z;
                        fxl = al2 * prod_yz * hrr_0002x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_2001z;
                        fzi -= 2 * prod_xy * trr_10z;
                        fyk -= 1 * prod_xz * 1;
                        fxl -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_5_0;
                            dd_jl = dm_jl_0_0 * dm_ik_5_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_2001x * 1;
                        prod_xz = hrr_2001x * trr_01z;
                        prod_yz = 1 * trr_01z;
                        fxi = ai2 * prod_yz * hrr_3001x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_2101x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0110z = trr_11z - zjzi * trr_01z;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * hrr_2011x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_02z = cpz * trr_01z + 1*b01 * wt;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_2002x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0011z = trr_02z - zlzk * trr_01z;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fxi -= 2 * prod_yz * hrr_1001x;
                        fzk -= 1 * prod_xy * wt;
                        fxl -= 1 * prod_yz * trr_20x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1001x * trr_10y;
                        prod_xz = hrr_1001x * trr_01z;
                        prod_yz = trr_10y * trr_01z;
                        fxi = ai2 * prod_yz * hrr_2001x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_1101x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * hrr_1011x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_1002x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fxi -= 1 * prod_yz * hrr_0001x;
                        fyi -= 1 * prod_xz * 1;
                        fzk -= 1 * prod_xy * wt;
                        fxl -= 1 * prod_yz * trr_10x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1001x * 1;
                        prod_xz = hrr_1001x * trr_11z;
                        prod_yz = 1 * trr_11z;
                        fxi = ai2 * prod_yz * hrr_2001x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * trr_21z;
                        fxj = aj2 * prod_yz * hrr_1101x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1110z = trr_21z - zjzi * trr_11z;
                        fzj = aj2 * prod_xy * hrr_1110z;
                        fxk = ak2 * prod_yz * hrr_1011x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                        fzk = ak2 * prod_xy * trr_12z;
                        fxl = al2 * prod_yz * hrr_1002x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1011z = trr_12z - zlzk * trr_11z;
                        fzl = al2 * prod_xy * hrr_1011z;
                        fxi -= 1 * prod_yz * hrr_0001x;
                        fzi -= 1 * prod_xy * trr_01z;
                        fzk -= 1 * prod_xy * trr_10z;
                        fxl -= 1 * prod_yz * trr_10x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0001x * trr_20y;
                        prod_xz = hrr_0001x * trr_01z;
                        prod_yz = trr_20y * trr_01z;
                        fxi = ai2 * prod_yz * hrr_1001x;
                        fyi = ai2 * prod_xz * trr_30y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_0101x;
                        fyj = aj2 * prod_xz * hrr_2100y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * hrr_0011x;
                        fyk = ak2 * prod_xz * trr_21y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_0002x;
                        fyl = al2 * prod_xz * hrr_2001y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fyi -= 2 * prod_xz * trr_10y;
                        fzk -= 1 * prod_xy * wt;
                        fxl -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_3_0;
                            dd_jl = dm_jl_0_0 * dm_ik_3_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0001x * trr_10y;
                        prod_xz = hrr_0001x * trr_11z;
                        prod_yz = trr_10y * trr_11z;
                        fxi = ai2 * prod_yz * hrr_1001x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_21z;
                        fxj = aj2 * prod_yz * hrr_0101x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_1110z;
                        fxk = ak2 * prod_yz * hrr_0011x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_12z;
                        fxl = al2 * prod_yz * hrr_0002x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_1011z;
                        fyi -= 1 * prod_xz * 1;
                        fzi -= 1 * prod_xy * trr_01z;
                        fzk -= 1 * prod_xy * trr_10z;
                        fxl -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_4_0;
                            dd_jl = dm_jl_0_0 * dm_ik_4_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0001x * 1;
                        prod_xz = hrr_0001x * trr_21z;
                        prod_yz = 1 * trr_21z;
                        fxi = ai2 * prod_yz * hrr_1001x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                        fzi = ai2 * prod_xy * trr_31z;
                        fxj = aj2 * prod_yz * hrr_0101x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_2110z = trr_31z - zjzi * trr_21z;
                        fzj = aj2 * prod_xy * hrr_2110z;
                        fxk = ak2 * prod_yz * hrr_0011x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                        fzk = ak2 * prod_xy * trr_22z;
                        fxl = al2 * prod_yz * hrr_0002x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_2011z = trr_22z - zlzk * trr_21z;
                        fzl = al2 * prod_xy * hrr_2011z;
                        fzi -= 2 * prod_xy * trr_11z;
                        fzk -= 1 * prod_xy * trr_20z;
                        fxl -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_5_0;
                            dd_jl = dm_jl_0_0 * dm_ik_5_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_21x * hrr_0001y;
                        prod_xz = trr_21x * wt;
                        prod_yz = hrr_0001y * wt;
                        fxi = ai2 * prod_yz * trr_31x;
                        fyi = ai2 * prod_xz * hrr_1001y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_2110x = trr_31x - xjxi * trr_21x;
                        fxj = aj2 * prod_yz * hrr_2110x;
                        double hrr_0101y = hrr_1001y - yjyi * hrr_0001y;
                        fyj = aj2 * prod_xz * hrr_0101y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_22x;
                        fyk = ak2 * prod_xz * hrr_0011y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_2011x;
                        double hrr_0002y = hrr_0011y - ylyk * hrr_0001y;
                        fyl = al2 * prod_xz * hrr_0002y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 2 * prod_yz * trr_11x;
                        fxk -= 1 * prod_yz * trr_20x;
                        fyl -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_0_1;
                            dd_jl = dm_jl_0_1 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_1_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_11x * hrr_1001y;
                        prod_xz = trr_11x * wt;
                        prod_yz = hrr_1001y * wt;
                        fxi = ai2 * prod_yz * trr_21x;
                        fyi = ai2 * prod_xz * hrr_2001y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1110x = trr_21x - xjxi * trr_11x;
                        fxj = aj2 * prod_yz * hrr_1110x;
                        double hrr_1101y = hrr_2001y - yjyi * hrr_1001y;
                        fyj = aj2 * prod_xz * hrr_1101y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_12x;
                        fyk = ak2 * prod_xz * hrr_1011y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_1011x;
                        double hrr_1002y = hrr_1011y - ylyk * hrr_1001y;
                        fyl = al2 * prod_xz * hrr_1002y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * trr_01x;
                        fyi -= 1 * prod_xz * hrr_0001y;
                        fxk -= 1 * prod_yz * trr_10x;
                        fyl -= 1 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_1_1;
                            dd_jl = dm_jl_0_1 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_1_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_11x * hrr_0001y;
                        prod_xz = trr_11x * trr_10z;
                        prod_yz = hrr_0001y * trr_10z;
                        fxi = ai2 * prod_yz * trr_21x;
                        fyi = ai2 * prod_xz * hrr_1001y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_1110x;
                        fyj = aj2 * prod_xz * hrr_0101y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_12x;
                        fyk = ak2 * prod_xz * hrr_0011y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_1011x;
                        fyl = al2 * prod_xz * hrr_0002y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fxi -= 1 * prod_yz * trr_01x;
                        fzi -= 1 * prod_xy * wt;
                        fxk -= 1 * prod_yz * trr_10x;
                        fyl -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_2_1;
                            dd_jl = dm_jl_0_1 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_1_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * hrr_2001y;
                        prod_xz = trr_01x * wt;
                        prod_yz = hrr_2001y * wt;
                        fxi = ai2 * prod_yz * trr_11x;
                        double hrr_3001y = trr_31y - ylyk * trr_30y;
                        fyi = ai2 * prod_xz * hrr_3001y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0110x = trr_11x - xjxi * trr_01x;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        double hrr_2101y = hrr_3001y - yjyi * hrr_2001y;
                        fyj = aj2 * prod_xz * hrr_2101y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * hrr_2011y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        double hrr_2002y = hrr_2011y - ylyk * hrr_2001y;
                        fyl = al2 * prod_xz * hrr_2002y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 2 * prod_xz * hrr_1001y;
                        fxk -= 1 * prod_yz * fac;
                        fyl -= 1 * prod_xz * trr_20y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_3_1;
                            dd_jl = dm_jl_0_1 * dm_ik_3_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+3)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+3)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_1_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * hrr_1001y;
                        prod_xz = trr_01x * trr_10z;
                        prod_yz = hrr_1001y * trr_10z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * hrr_2001y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_1101y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * hrr_1011y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_1002y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fyi -= 1 * prod_xz * hrr_0001y;
                        fzi -= 1 * prod_xy * wt;
                        fxk -= 1 * prod_yz * fac;
                        fyl -= 1 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_4_1;
                            dd_jl = dm_jl_0_1 * dm_ik_4_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+4)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+4)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_1_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * hrr_0001y;
                        prod_xz = trr_01x * trr_20z;
                        prod_yz = hrr_0001y * trr_20z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * hrr_1001y;
                        fzi = ai2 * prod_xy * trr_30z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_0101y;
                        fzj = aj2 * prod_xy * hrr_2100z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * hrr_0011y;
                        fzk = ak2 * prod_xy * trr_21z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_0002y;
                        fzl = al2 * prod_xy * hrr_2001z;
                        fzi -= 2 * prod_xy * trr_10z;
                        fxk -= 1 * prod_yz * fac;
                        fyl -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_5_1;
                            dd_jl = dm_jl_0_1 * dm_ik_5_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+5)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+5)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_1_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_20x * hrr_0011y;
                        prod_xz = trr_20x * wt;
                        prod_yz = hrr_0011y * wt;
                        fxi = ai2 * prod_yz * trr_30x;
                        fyi = ai2 * prod_xz * hrr_1011y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_2100x = trr_30x - xjxi * trr_20x;
                        fxj = aj2 * prod_yz * hrr_2100x;
                        double hrr_0111y = hrr_1011y - yjyi * hrr_0011y;
                        fyj = aj2 * prod_xz * hrr_0111y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_21x;
                        double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                        double hrr_0021y = trr_03y - ylyk * trr_02y;
                        fyk = ak2 * prod_xz * hrr_0021y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_2001x;
                        double hrr_0012y = hrr_0021y - ylyk * hrr_0011y;
                        fyl = al2 * prod_xz * hrr_0012y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 2 * prod_yz * trr_10x;
                        fyk -= 1 * prod_xz * hrr_0001y;
                        fyl -= 1 * prod_xz * trr_01y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_0_1;
                            dd_jl = dm_jl_0_1 * dm_ik_0_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+0)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+0)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_1_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * hrr_1011y;
                        prod_xz = trr_10x * wt;
                        prod_yz = hrr_1011y * wt;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * hrr_2011y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1100x = trr_20x - xjxi * trr_10x;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        double hrr_1111y = hrr_2011y - yjyi * hrr_1011y;
                        fyj = aj2 * prod_xz * hrr_1111y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_11x;
                        double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                        double hrr_1021y = trr_13y - ylyk * trr_12y;
                        fyk = ak2 * prod_xz * hrr_1021y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        double hrr_1012y = hrr_1021y - ylyk * hrr_1011y;
                        fyl = al2 * prod_xz * hrr_1012y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * fac;
                        fyi -= 1 * prod_xz * hrr_0011y;
                        fyk -= 1 * prod_xz * hrr_1001y;
                        fyl -= 1 * prod_xz * trr_11y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_1_1;
                            dd_jl = dm_jl_0_1 * dm_ik_1_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+1)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+1)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_1_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * hrr_0011y;
                        prod_xz = trr_10x * trr_10z;
                        prod_yz = hrr_0011y * trr_10z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * hrr_1011y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0111y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * hrr_0021y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0012y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fxi -= 1 * prod_yz * fac;
                        fzi -= 1 * prod_xy * wt;
                        fyk -= 1 * prod_xz * hrr_0001y;
                        fyl -= 1 * prod_xz * trr_01y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_2_1;
                            dd_jl = dm_jl_0_1 * dm_ik_2_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+2)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+2)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_1_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_2011y;
                        prod_xz = fac * wt;
                        prod_yz = hrr_2011y * wt;
                        fxi = ai2 * prod_yz * trr_10x;
                        double trr_32y = cpy * trr_31y + 1*b01 * trr_30y + 3*b00 * trr_21y;
                        double hrr_3011y = trr_32y - ylyk * trr_31y;
                        fyi = ai2 * prod_xz * hrr_3011y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0100x = trr_10x - xjxi * fac;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        double hrr_2111y = hrr_3011y - yjyi * hrr_2011y;
                        fyj = aj2 * prod_xz * hrr_2111y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        double trr_23y = cpy * trr_22y + 2*b01 * trr_21y + 2*b00 * trr_12y;
                        double hrr_2021y = trr_23y - ylyk * trr_22y;
                        fyk = ak2 * prod_xz * hrr_2021y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        double hrr_2012y = hrr_2021y - ylyk * hrr_2011y;
                        fyl = al2 * prod_xz * hrr_2012y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 2 * prod_xz * hrr_1011y;
                        fyk -= 1 * prod_xz * hrr_2001y;
                        fyl -= 1 * prod_xz * trr_21y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_3_1;
                            dd_jl = dm_jl_0_1 * dm_ik_3_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+3)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+3)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_1_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_1011y;
                        prod_xz = fac * trr_10z;
                        prod_yz = hrr_1011y * trr_10z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_2011y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1111y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_1021y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1012y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fyi -= 1 * prod_xz * hrr_0011y;
                        fzi -= 1 * prod_xy * wt;
                        fyk -= 1 * prod_xz * hrr_1001y;
                        fyl -= 1 * prod_xz * trr_11y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_4_1;
                            dd_jl = dm_jl_0_1 * dm_ik_4_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+4)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+4)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_1_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_0011y;
                        prod_xz = fac * trr_20z;
                        prod_yz = hrr_0011y * trr_20z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_1011y;
                        fzi = ai2 * prod_xy * trr_30z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0111y;
                        fzj = aj2 * prod_xy * hrr_2100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_0021y;
                        fzk = ak2 * prod_xy * trr_21z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0012y;
                        fzl = al2 * prod_xy * hrr_2001z;
                        fzi -= 2 * prod_xy * trr_10z;
                        fyk -= 1 * prod_xz * hrr_0001y;
                        fyl -= 1 * prod_xz * trr_01y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_5_1;
                            dd_jl = dm_jl_0_1 * dm_ik_5_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+5)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+5)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_1_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_20x * hrr_0001y;
                        prod_xz = trr_20x * trr_01z;
                        prod_yz = hrr_0001y * trr_01z;
                        fxi = ai2 * prod_yz * trr_30x;
                        fyi = ai2 * prod_xz * hrr_1001y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_2100x;
                        fyj = aj2 * prod_xz * hrr_0101y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * trr_21x;
                        fyk = ak2 * prod_xz * hrr_0011y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_2001x;
                        fyl = al2 * prod_xz * hrr_0002y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fxi -= 2 * prod_yz * trr_10x;
                        fzk -= 1 * prod_xy * wt;
                        fyl -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_0_1;
                            dd_jl = dm_jl_0_1 * dm_ik_0_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+0)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+0)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_1_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * hrr_1001y;
                        prod_xz = trr_10x * trr_01z;
                        prod_yz = hrr_1001y * trr_01z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * hrr_2001y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_1101y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * hrr_1011y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_1002y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fxi -= 1 * prod_yz * fac;
                        fyi -= 1 * prod_xz * hrr_0001y;
                        fzk -= 1 * prod_xy * wt;
                        fyl -= 1 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_1_1;
                            dd_jl = dm_jl_0_1 * dm_ik_1_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+1)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+1)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_1_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * hrr_0001y;
                        prod_xz = trr_10x * trr_11z;
                        prod_yz = hrr_0001y * trr_11z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * hrr_1001y;
                        fzi = ai2 * prod_xy * trr_21z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0101y;
                        fzj = aj2 * prod_xy * hrr_1110z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * hrr_0011y;
                        fzk = ak2 * prod_xy * trr_12z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0002y;
                        fzl = al2 * prod_xy * hrr_1011z;
                        fxi -= 1 * prod_yz * fac;
                        fzi -= 1 * prod_xy * trr_01z;
                        fzk -= 1 * prod_xy * trr_10z;
                        fyl -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_2_1;
                            dd_jl = dm_jl_0_1 * dm_ik_2_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+2)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+2)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_1_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_2001y;
                        prod_xz = fac * trr_01z;
                        prod_yz = hrr_2001y * trr_01z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_3001y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_2101y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_2011y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_2002y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fyi -= 2 * prod_xz * hrr_1001y;
                        fzk -= 1 * prod_xy * wt;
                        fyl -= 1 * prod_xz * trr_20y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_3_1;
                            dd_jl = dm_jl_0_1 * dm_ik_3_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+3)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+3)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_1_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_1001y;
                        prod_xz = fac * trr_11z;
                        prod_yz = hrr_1001y * trr_11z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_2001y;
                        fzi = ai2 * prod_xy * trr_21z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1101y;
                        fzj = aj2 * prod_xy * hrr_1110z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_1011y;
                        fzk = ak2 * prod_xy * trr_12z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1002y;
                        fzl = al2 * prod_xy * hrr_1011z;
                        fyi -= 1 * prod_xz * hrr_0001y;
                        fzi -= 1 * prod_xy * trr_01z;
                        fzk -= 1 * prod_xy * trr_10z;
                        fyl -= 1 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_4_1;
                            dd_jl = dm_jl_0_1 * dm_ik_4_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+4)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+4)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_1_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_0001y;
                        prod_xz = fac * trr_21z;
                        prod_yz = hrr_0001y * trr_21z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_1001y;
                        fzi = ai2 * prod_xy * trr_31z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0101y;
                        fzj = aj2 * prod_xy * hrr_2110z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_0011y;
                        fzk = ak2 * prod_xy * trr_22z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0002y;
                        fzl = al2 * prod_xy * hrr_2011z;
                        fzi -= 2 * prod_xy * trr_11z;
                        fzk -= 1 * prod_xy * trr_20z;
                        fyl -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_5_1;
                            dd_jl = dm_jl_0_1 * dm_ik_5_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+5)*nao+l0+1];
                                dd_jl = dm[(nao+j0+0)*nao+l0+1] * dm[(nao+i0+5)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_1_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_21x * 1;
                        prod_xz = trr_21x * hrr_0001z;
                        prod_yz = 1 * hrr_0001z;
                        fxi = ai2 * prod_yz * trr_31x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_1001z;
                        fxj = aj2 * prod_yz * hrr_2110x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0101z = hrr_1001z - zjzi * hrr_0001z;
                        fzj = aj2 * prod_xy * hrr_0101z;
                        fxk = ak2 * prod_yz * trr_22x;
                        fyk = ak2 * prod_xz * trr_01y;
                        fzk = ak2 * prod_xy * hrr_0011z;
                        fxl = al2 * prod_yz * hrr_2011x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0002z = hrr_0011z - zlzk * hrr_0001z;
                        fzl = al2 * prod_xy * hrr_0002z;
                        fxi -= 2 * prod_yz * trr_11x;
                        fxk -= 1 * prod_yz * trr_20x;
                        fzl -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_0_2;
                            dd_jl = dm_jl_0_2 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_2_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_11x * trr_10y;
                        prod_xz = trr_11x * hrr_0001z;
                        prod_yz = trr_10y * hrr_0001z;
                        fxi = ai2 * prod_yz * trr_21x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * hrr_1001z;
                        fxj = aj2 * prod_yz * hrr_1110x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0101z;
                        fxk = ak2 * prod_yz * trr_12x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * hrr_0011z;
                        fxl = al2 * prod_yz * hrr_1011x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0002z;
                        fxi -= 1 * prod_yz * trr_01x;
                        fyi -= 1 * prod_xz * 1;
                        fxk -= 1 * prod_yz * trr_10x;
                        fzl -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_1_2;
                            dd_jl = dm_jl_0_2 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_2_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_11x * 1;
                        prod_xz = trr_11x * hrr_1001z;
                        prod_yz = 1 * hrr_1001z;
                        fxi = ai2 * prod_yz * trr_21x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_2001z;
                        fxj = aj2 * prod_yz * hrr_1110x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1101z = hrr_2001z - zjzi * hrr_1001z;
                        fzj = aj2 * prod_xy * hrr_1101z;
                        fxk = ak2 * prod_yz * trr_12x;
                        fyk = ak2 * prod_xz * trr_01y;
                        fzk = ak2 * prod_xy * hrr_1011z;
                        fxl = al2 * prod_yz * hrr_1011x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1002z = hrr_1011z - zlzk * hrr_1001z;
                        fzl = al2 * prod_xy * hrr_1002z;
                        fxi -= 1 * prod_yz * trr_01x;
                        fzi -= 1 * prod_xy * hrr_0001z;
                        fxk -= 1 * prod_yz * trr_10x;
                        fzl -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_2_2;
                            dd_jl = dm_jl_0_2 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_2_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * trr_20y;
                        prod_xz = trr_01x * hrr_0001z;
                        prod_yz = trr_20y * hrr_0001z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * trr_30y;
                        fzi = ai2 * prod_xy * hrr_1001z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_2100y;
                        fzj = aj2 * prod_xy * hrr_0101z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * trr_21y;
                        fzk = ak2 * prod_xy * hrr_0011z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_2001y;
                        fzl = al2 * prod_xy * hrr_0002z;
                        fyi -= 2 * prod_xz * trr_10y;
                        fxk -= 1 * prod_yz * fac;
                        fzl -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_3_2;
                            dd_jl = dm_jl_0_2 * dm_ik_3_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+3)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+3)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_2_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * trr_10y;
                        prod_xz = trr_01x * hrr_1001z;
                        prod_yz = trr_10y * hrr_1001z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * hrr_2001z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_1101z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * hrr_1011z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_1002z;
                        fyi -= 1 * prod_xz * 1;
                        fzi -= 1 * prod_xy * hrr_0001z;
                        fxk -= 1 * prod_yz * fac;
                        fzl -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_4_2;
                            dd_jl = dm_jl_0_2 * dm_ik_4_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+4)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+4)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_2_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * 1;
                        prod_xz = trr_01x * hrr_2001z;
                        prod_yz = 1 * hrr_2001z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double hrr_3001z = trr_31z - zlzk * trr_30z;
                        fzi = ai2 * prod_xy * hrr_3001z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_2101z = hrr_3001z - zjzi * hrr_2001z;
                        fzj = aj2 * prod_xy * hrr_2101z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * trr_01y;
                        fzk = ak2 * prod_xy * hrr_2011z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_2002z = hrr_2011z - zlzk * hrr_2001z;
                        fzl = al2 * prod_xy * hrr_2002z;
                        fzi -= 2 * prod_xy * hrr_1001z;
                        fxk -= 1 * prod_yz * fac;
                        fzl -= 1 * prod_xy * trr_20z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_5_2;
                            dd_jl = dm_jl_0_2 * dm_ik_5_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+5)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+5)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_2_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_20x * trr_01y;
                        prod_xz = trr_20x * hrr_0001z;
                        prod_yz = trr_01y * hrr_0001z;
                        fxi = ai2 * prod_yz * trr_30x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * hrr_1001z;
                        fxj = aj2 * prod_yz * hrr_2100x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_0101z;
                        fxk = ak2 * prod_yz * trr_21x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * hrr_0011z;
                        fxl = al2 * prod_yz * hrr_2001x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_0002z;
                        fxi -= 2 * prod_yz * trr_10x;
                        fyk -= 1 * prod_xz * 1;
                        fzl -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_0_2;
                            dd_jl = dm_jl_0_2 * dm_ik_0_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+0)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+0)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_2_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * trr_11y;
                        prod_xz = trr_10x * hrr_0001z;
                        prod_yz = trr_11y * hrr_0001z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_21y;
                        fzi = ai2 * prod_xy * hrr_1001z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_1110y;
                        fzj = aj2 * prod_xy * hrr_0101z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_12y;
                        fzk = ak2 * prod_xy * hrr_0011z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_1011y;
                        fzl = al2 * prod_xy * hrr_0002z;
                        fxi -= 1 * prod_yz * fac;
                        fyi -= 1 * prod_xz * trr_01y;
                        fyk -= 1 * prod_xz * trr_10y;
                        fzl -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_1_2;
                            dd_jl = dm_jl_0_2 * dm_ik_1_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+1)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+1)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_2_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * trr_01y;
                        prod_xz = trr_10x * hrr_1001z;
                        prod_yz = trr_01y * hrr_1001z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * hrr_2001z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_1101z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * hrr_1011z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_1002z;
                        fxi -= 1 * prod_yz * fac;
                        fzi -= 1 * prod_xy * hrr_0001z;
                        fyk -= 1 * prod_xz * 1;
                        fzl -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_2_2;
                            dd_jl = dm_jl_0_2 * dm_ik_2_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+2)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+2)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_2_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_21y;
                        prod_xz = fac * hrr_0001z;
                        prod_yz = trr_21y * hrr_0001z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_31y;
                        fzi = ai2 * prod_xy * hrr_1001z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_2110y;
                        fzj = aj2 * prod_xy * hrr_0101z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_22y;
                        fzk = ak2 * prod_xy * hrr_0011z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_2011y;
                        fzl = al2 * prod_xy * hrr_0002z;
                        fyi -= 2 * prod_xz * trr_11y;
                        fyk -= 1 * prod_xz * trr_20y;
                        fzl -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_3_2;
                            dd_jl = dm_jl_0_2 * dm_ik_3_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+3)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+3)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_2_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_11y;
                        prod_xz = fac * hrr_1001z;
                        prod_yz = trr_11y * hrr_1001z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_21y;
                        fzi = ai2 * prod_xy * hrr_2001z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1110y;
                        fzj = aj2 * prod_xy * hrr_1101z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_12y;
                        fzk = ak2 * prod_xy * hrr_1011z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1011y;
                        fzl = al2 * prod_xy * hrr_1002z;
                        fyi -= 1 * prod_xz * trr_01y;
                        fzi -= 1 * prod_xy * hrr_0001z;
                        fyk -= 1 * prod_xz * trr_10y;
                        fzl -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_4_2;
                            dd_jl = dm_jl_0_2 * dm_ik_4_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+4)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+4)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_2_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_01y;
                        prod_xz = fac * hrr_2001z;
                        prod_yz = trr_01y * hrr_2001z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * hrr_3001z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_2101z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * hrr_2011z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_2002z;
                        fzi -= 2 * prod_xy * hrr_1001z;
                        fyk -= 1 * prod_xz * 1;
                        fzl -= 1 * prod_xy * trr_20z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_5_2;
                            dd_jl = dm_jl_0_2 * dm_ik_5_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+5)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+5)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_2_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_20x * 1;
                        prod_xz = trr_20x * hrr_0011z;
                        prod_yz = 1 * hrr_0011z;
                        fxi = ai2 * prod_yz * trr_30x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_1011z;
                        fxj = aj2 * prod_yz * hrr_2100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0111z = hrr_1011z - zjzi * hrr_0011z;
                        fzj = aj2 * prod_xy * hrr_0111z;
                        fxk = ak2 * prod_yz * trr_21x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                        double hrr_0021z = trr_03z - zlzk * trr_02z;
                        fzk = ak2 * prod_xy * hrr_0021z;
                        fxl = al2 * prod_yz * hrr_2001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0012z = hrr_0021z - zlzk * hrr_0011z;
                        fzl = al2 * prod_xy * hrr_0012z;
                        fxi -= 2 * prod_yz * trr_10x;
                        fzk -= 1 * prod_xy * hrr_0001z;
                        fzl -= 1 * prod_xy * trr_01z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_0_2;
                            dd_jl = dm_jl_0_2 * dm_ik_0_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+0)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+0)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_2_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * trr_10y;
                        prod_xz = trr_10x * hrr_0011z;
                        prod_yz = trr_10y * hrr_0011z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * hrr_1011z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0111z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * hrr_0021z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0012z;
                        fxi -= 1 * prod_yz * fac;
                        fyi -= 1 * prod_xz * 1;
                        fzk -= 1 * prod_xy * hrr_0001z;
                        fzl -= 1 * prod_xy * trr_01z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_1_2;
                            dd_jl = dm_jl_0_2 * dm_ik_1_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+1)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+1)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_2_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * 1;
                        prod_xz = trr_10x * hrr_1011z;
                        prod_yz = 1 * hrr_1011z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_2011z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1111z = hrr_2011z - zjzi * hrr_1011z;
                        fzj = aj2 * prod_xy * hrr_1111z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                        double hrr_1021z = trr_13z - zlzk * trr_12z;
                        fzk = ak2 * prod_xy * hrr_1021z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1012z = hrr_1021z - zlzk * hrr_1011z;
                        fzl = al2 * prod_xy * hrr_1012z;
                        fxi -= 1 * prod_yz * fac;
                        fzi -= 1 * prod_xy * hrr_0011z;
                        fzk -= 1 * prod_xy * hrr_1001z;
                        fzl -= 1 * prod_xy * trr_11z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_2_2;
                            dd_jl = dm_jl_0_2 * dm_ik_2_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+2)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+2)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_2_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_20y;
                        prod_xz = fac * hrr_0011z;
                        prod_yz = trr_20y * hrr_0011z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_30y;
                        fzi = ai2 * prod_xy * hrr_1011z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_2100y;
                        fzj = aj2 * prod_xy * hrr_0111z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_21y;
                        fzk = ak2 * prod_xy * hrr_0021z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_2001y;
                        fzl = al2 * prod_xy * hrr_0012z;
                        fyi -= 2 * prod_xz * trr_10y;
                        fzk -= 1 * prod_xy * hrr_0001z;
                        fzl -= 1 * prod_xy * trr_01z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_3_2;
                            dd_jl = dm_jl_0_2 * dm_ik_3_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+3)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+3)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_2_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_10y;
                        prod_xz = fac * hrr_1011z;
                        prod_yz = trr_10y * hrr_1011z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * hrr_2011z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_1111z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * hrr_1021z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_1012z;
                        fyi -= 1 * prod_xz * 1;
                        fzi -= 1 * prod_xy * hrr_0011z;
                        fzk -= 1 * prod_xy * hrr_1001z;
                        fzl -= 1 * prod_xy * trr_11z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_4_2;
                            dd_jl = dm_jl_0_2 * dm_ik_4_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+4)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+4)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_2_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * 1;
                        prod_xz = fac * hrr_2011z;
                        prod_yz = 1 * hrr_2011z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_32z = cpz * trr_31z + 1*b01 * trr_30z + 3*b00 * trr_21z;
                        double hrr_3011z = trr_32z - zlzk * trr_31z;
                        fzi = ai2 * prod_xy * hrr_3011z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_2111z = hrr_3011z - zjzi * hrr_2011z;
                        fzj = aj2 * prod_xy * hrr_2111z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_23z = cpz * trr_22z + 2*b01 * trr_21z + 2*b00 * trr_12z;
                        double hrr_2021z = trr_23z - zlzk * trr_22z;
                        fzk = ak2 * prod_xy * hrr_2021z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_2012z = hrr_2021z - zlzk * hrr_2011z;
                        fzl = al2 * prod_xy * hrr_2012z;
                        fzi -= 2 * prod_xy * hrr_1011z;
                        fzk -= 1 * prod_xy * hrr_2001z;
                        fzl -= 1 * prod_xy * trr_21z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_5_2;
                            dd_jl = dm_jl_0_2 * dm_ik_5_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+5)*nao+l0+2];
                                dd_jl = dm[(nao+j0+0)*nao+l0+2] * dm[(nao+i0+5)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_2_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                    }
                }
            }
        }
        int ia = bas[ish*BAS_SLOTS+ATOM_OF];
        int ja = bas[jsh*BAS_SLOTS+ATOM_OF];
        int ka = bas[ksh*BAS_SLOTS+ATOM_OF];
        int la = bas[lsh*BAS_SLOTS+ATOM_OF];
        if (vj != NULL) {
            atomicAdd(vj+ia*3+0, vj_grad_ix);
            atomicAdd(vj+ia*3+1, vj_grad_iy);
            atomicAdd(vj+ia*3+2, vj_grad_iz);
            atomicAdd(vj+ja*3+0, vj_grad_jx);
            atomicAdd(vj+ja*3+1, vj_grad_jy);
            atomicAdd(vj+ja*3+2, vj_grad_jz);
            atomicAdd(vj+ka*3+0, vj_grad_kx);
            atomicAdd(vj+ka*3+1, vj_grad_ky);
            atomicAdd(vj+ka*3+2, vj_grad_kz);
            atomicAdd(vj+la*3+0, vj_grad_lx);
            atomicAdd(vj+la*3+1, vj_grad_ly);
            atomicAdd(vj+la*3+2, vj_grad_lz);
        }
        if (vk != NULL) {
            atomicAdd(vk+ia*3+0, vk_grad_ix);
            atomicAdd(vk+ia*3+1, vk_grad_iy);
            atomicAdd(vk+ia*3+2, vk_grad_iz);
            atomicAdd(vk+ja*3+0, vk_grad_jx);
            atomicAdd(vk+ja*3+1, vk_grad_jy);
            atomicAdd(vk+ja*3+2, vk_grad_jz);
            atomicAdd(vk+ka*3+0, vk_grad_kx);
            atomicAdd(vk+ka*3+1, vk_grad_ky);
            atomicAdd(vk+ka*3+2, vk_grad_kz);
            atomicAdd(vk+la*3+0, vk_grad_lx);
            atomicAdd(vk+la*3+1, vk_grad_ly);
            atomicAdd(vk+la*3+2, vk_grad_lz);
        }
    }
}
__global__
void rys_ejk_ip1_2011(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int nbas = envs.nbas;
        int ntasks = _fill_ejk_tasks(shl_quartet_idx, envs, jk, bounds,
                                     batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas_tiles = nbas / TILE;
            int tile_i = tile_ij / nbas_tiles;
            int tile_j = tile_ij % nbas_tiles;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_ejk_ip1_2011(envs, jk, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_ejk_ip1_2020(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int *ao_loc = envs.ao_loc;
    int nbas = envs.nbas;
    int nao = ao_loc[nbas];
    int *bas = envs.bas;
    double *env = envs.env;
    double omega = env[PTR_RANGE_OMEGA];
    double *vj = jk.vj;
    double *vk = jk.vk;
    double *dm = jk.dm;
    extern __shared__ double dm_cache[];
    double *Rpa_cicj = dm_cache + 6 * TILE2;
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env + bas[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env + bas[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    int ij = sq_id / TILE2;
    if (ij < 6) {
        int i = ij % 6;
        int j = ij / 6;
        int sh_ij = sq_id % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        if (jk.n_dm == 1) {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i];
        } else {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i] + dm[(nao+j0+j)*nao+i0+i];
        }
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        if (ish*nbas+jsh == ksh*nbas+lsh) fac_sym *= .5;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        int k0 = ao_loc[ksh];
        int l0 = ao_loc[lsh];
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env + bas[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env + bas[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env + bas[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env + bas[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
        double vj_grad_ix = 0;
        double vj_grad_iy = 0;
        double vj_grad_iz = 0;
        double vj_grad_jx = 0;
        double vj_grad_jy = 0;
        double vj_grad_jz = 0;
        double vj_grad_kx = 0;
        double vj_grad_ky = 0;
        double vj_grad_kz = 0;
        double vj_grad_lx = 0;
        double vj_grad_ly = 0;
        double vj_grad_lz = 0;
        double vk_grad_ix = 0;
        double vk_grad_iy = 0;
        double vk_grad_iz = 0;
        double vk_grad_jx = 0;
        double vk_grad_jy = 0;
        double vk_grad_jz = 0;
        double vk_grad_kx = 0;
        double vk_grad_ky = 0;
        double vk_grad_kz = 0;
        double vk_grad_lx = 0;
        double vk_grad_ly = 0;
        double vk_grad_lz = 0;
        double dm_lk_0_0 = dm[(l0+0)*nao+(k0+0)];
        double dm_lk_0_1 = dm[(l0+0)*nao+(k0+1)];
        double dm_lk_0_2 = dm[(l0+0)*nao+(k0+2)];
        double dm_lk_0_3 = dm[(l0+0)*nao+(k0+3)];
        double dm_lk_0_4 = dm[(l0+0)*nao+(k0+4)];
        double dm_lk_0_5 = dm[(l0+0)*nao+(k0+5)];
        if (jk.n_dm > 1) {
            int nao2 = nao * nao;
            dm_lk_0_0 += dm[nao2+(l0+0)*nao+(k0+0)];
            dm_lk_0_1 += dm[nao2+(l0+0)*nao+(k0+1)];
            dm_lk_0_2 += dm[nao2+(l0+0)*nao+(k0+2)];
            dm_lk_0_3 += dm[nao2+(l0+0)*nao+(k0+3)];
            dm_lk_0_4 += dm[nao2+(l0+0)*nao+(k0+4)];
            dm_lk_0_5 += dm[nao2+(l0+0)*nao+(k0+5)];
        }
        double dm_jk_0_0 = dm[(j0+0)*nao+(k0+0)];
        double dm_jk_0_1 = dm[(j0+0)*nao+(k0+1)];
        double dm_jk_0_2 = dm[(j0+0)*nao+(k0+2)];
        double dm_jk_0_3 = dm[(j0+0)*nao+(k0+3)];
        double dm_jk_0_4 = dm[(j0+0)*nao+(k0+4)];
        double dm_jk_0_5 = dm[(j0+0)*nao+(k0+5)];
        double dm_jl_0_0 = dm[(j0+0)*nao+(l0+0)];
        double dm_ik_0_0 = dm[(i0+0)*nao+(k0+0)];
        double dm_ik_0_1 = dm[(i0+0)*nao+(k0+1)];
        double dm_ik_0_2 = dm[(i0+0)*nao+(k0+2)];
        double dm_ik_0_3 = dm[(i0+0)*nao+(k0+3)];
        double dm_ik_0_4 = dm[(i0+0)*nao+(k0+4)];
        double dm_ik_0_5 = dm[(i0+0)*nao+(k0+5)];
        double dm_ik_1_0 = dm[(i0+1)*nao+(k0+0)];
        double dm_ik_1_1 = dm[(i0+1)*nao+(k0+1)];
        double dm_ik_1_2 = dm[(i0+1)*nao+(k0+2)];
        double dm_ik_1_3 = dm[(i0+1)*nao+(k0+3)];
        double dm_ik_1_4 = dm[(i0+1)*nao+(k0+4)];
        double dm_ik_1_5 = dm[(i0+1)*nao+(k0+5)];
        double dm_ik_2_0 = dm[(i0+2)*nao+(k0+0)];
        double dm_ik_2_1 = dm[(i0+2)*nao+(k0+1)];
        double dm_ik_2_2 = dm[(i0+2)*nao+(k0+2)];
        double dm_ik_2_3 = dm[(i0+2)*nao+(k0+3)];
        double dm_ik_2_4 = dm[(i0+2)*nao+(k0+4)];
        double dm_ik_2_5 = dm[(i0+2)*nao+(k0+5)];
        double dm_ik_3_0 = dm[(i0+3)*nao+(k0+0)];
        double dm_ik_3_1 = dm[(i0+3)*nao+(k0+1)];
        double dm_ik_3_2 = dm[(i0+3)*nao+(k0+2)];
        double dm_ik_3_3 = dm[(i0+3)*nao+(k0+3)];
        double dm_ik_3_4 = dm[(i0+3)*nao+(k0+4)];
        double dm_ik_3_5 = dm[(i0+3)*nao+(k0+5)];
        double dm_ik_4_0 = dm[(i0+4)*nao+(k0+0)];
        double dm_ik_4_1 = dm[(i0+4)*nao+(k0+1)];
        double dm_ik_4_2 = dm[(i0+4)*nao+(k0+2)];
        double dm_ik_4_3 = dm[(i0+4)*nao+(k0+3)];
        double dm_ik_4_4 = dm[(i0+4)*nao+(k0+4)];
        double dm_ik_4_5 = dm[(i0+4)*nao+(k0+5)];
        double dm_ik_5_0 = dm[(i0+5)*nao+(k0+0)];
        double dm_ik_5_1 = dm[(i0+5)*nao+(k0+1)];
        double dm_ik_5_2 = dm[(i0+5)*nao+(k0+2)];
        double dm_ik_5_3 = dm[(i0+5)*nao+(k0+3)];
        double dm_ik_5_4 = dm[(i0+5)*nao+(k0+4)];
        double dm_ik_5_5 = dm[(i0+5)*nao+(k0+5)];
        double dm_il_0_0 = dm[(i0+0)*nao+(l0+0)];
        double dm_il_1_0 = dm[(i0+1)*nao+(l0+0)];
        double dm_il_2_0 = dm[(i0+2)*nao+(l0+0)];
        double dm_il_3_0 = dm[(i0+3)*nao+(l0+0)];
        double dm_il_4_0 = dm[(i0+4)*nao+(l0+0)];
        double dm_il_5_0 = dm[(i0+5)*nao+(l0+0)];
        double dd_jk, dd_jl, vj_dd, vk_dd;
        double prod_xy;
        double prod_xz;
        double prod_yz;
        double fxi;
        double fyi;
        double fzi;
        double fxj;
        double fyj;
        double fzj;
        double fxk;
        double fyk;
        double fzk;
        double fxl;
        double fyl;
        double fzl;
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double ak2 = ak * 2;
            double al2 = al * 2;
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double ai2 = ai * 2;
                double aj2 = aj * 2;
                double aij = ai + aj;
                double xjxi = rj[0] - ri[0];
                double yjyi = rj[1] - ri[1];
                double zjzi = rj[2] - ri[2];
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa; // (ai*xi+aj*xj)/aij
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(3, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(3, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 3; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                __syncthreads();
                if (task_id < ntasks) {
                    for (int irys = 0; irys < 3; ++irys) {
                        double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                        double rt = rw[sq_id +  2*irys   *nsq_per_block];
                        double rt_aa = rt / (aij + akl);
                        double rt_akl = rt_aa * aij;
                        double cpx = xqc + xpq*rt_akl;
                        double rt_aij = rt_aa * akl;
                        double c0x = xpa - xpq*rt_aij;
                        double trr_10x = c0x * fac;
                        double b10 = .5/aij * (1 - rt_aij);
                        double trr_20x = c0x * trr_10x + 1*b10 * fac;
                        double b00 = .5 * rt_aa;
                        double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                        double b01 = .5/akl * (1 - rt_akl);
                        double trr_11x = cpx * trr_10x + 1*b00 * fac;
                        double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                        prod_xy = trr_22x * 1;
                        prod_xz = trr_22x * wt;
                        prod_yz = 1 * wt;
                        double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                        double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                        double trr_32x = cpx * trr_31x + 1*b01 * trr_30x + 3*b00 * trr_21x;
                        fxi = ai2 * prod_yz * trr_32x;
                        double c0y = ypa - ypq*rt_aij;
                        double trr_10y = c0y * 1;
                        fyi = ai2 * prod_xz * trr_10y;
                        double c0z = zpa - zpq*rt_aij;
                        double trr_10z = c0z * wt;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_2120x = trr_32x - xjxi * trr_22x;
                        fxj = aj2 * prod_yz * hrr_2120x;
                        double hrr_0100y = trr_10y - yjyi * 1;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0100z = trr_10z - zjzi * wt;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double trr_01x = cpx * fac;
                        double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                        double trr_23x = cpx * trr_22x + 2*b01 * trr_21x + 2*b00 * trr_12x;
                        fxk = ak2 * prod_yz * trr_23x;
                        double cpy = yqc + ypq*rt_akl;
                        double trr_01y = cpy * 1;
                        fyk = ak2 * prod_xz * trr_01y;
                        double cpz = zqc + zpq*rt_akl;
                        double trr_01z = cpz * wt;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_2021x = trr_23x - xlxk * trr_22x;
                        fxl = al2 * prod_yz * hrr_2021x;
                        double hrr_0001y = trr_01y - ylyk * 1;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0001z = trr_01z - zlzk * wt;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 2 * prod_yz * trr_12x;
                        fxk -= 2 * prod_yz * trr_21x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_12x * trr_10y;
                        prod_xz = trr_12x * wt;
                        prod_yz = trr_10y * wt;
                        fxi = ai2 * prod_yz * trr_22x;
                        double trr_20y = c0y * trr_10y + 1*b10 * 1;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1120x = trr_22x - xjxi * trr_12x;
                        fxj = aj2 * prod_yz * hrr_1120x;
                        double hrr_1100y = trr_20y - yjyi * trr_10y;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double trr_02x = cpx * trr_01x + 1*b01 * fac;
                        double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                        fxk = ak2 * prod_yz * trr_13x;
                        double trr_11y = cpy * trr_10y + 1*b00 * 1;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_1021x = trr_13x - xlxk * trr_12x;
                        fxl = al2 * prod_yz * hrr_1021x;
                        double hrr_1001y = trr_11y - ylyk * trr_10y;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * trr_02x;
                        fyi -= 1 * prod_xz * 1;
                        fxk -= 2 * prod_yz * trr_11x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_12x * 1;
                        prod_xz = trr_12x * trr_10z;
                        prod_yz = 1 * trr_10z;
                        fxi = ai2 * prod_yz * trr_22x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_20z = c0z * trr_10z + 1*b10 * wt;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_1120x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1100z = trr_20z - zjzi * trr_10z;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_13x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_11z = cpz * trr_10z + 1*b00 * wt;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_1021x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1001z = trr_11z - zlzk * trr_10z;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fxi -= 1 * prod_yz * trr_02x;
                        fzi -= 1 * prod_xy * wt;
                        fxk -= 2 * prod_yz * trr_11x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_02x * trr_20y;
                        prod_xz = trr_02x * wt;
                        prod_yz = trr_20y * wt;
                        fxi = ai2 * prod_yz * trr_12x;
                        double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                        fyi = ai2 * prod_xz * trr_30y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0120x = trr_12x - xjxi * trr_02x;
                        fxj = aj2 * prod_yz * hrr_0120x;
                        double hrr_2100y = trr_30y - yjyi * trr_20y;
                        fyj = aj2 * prod_xz * hrr_2100y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                        fxk = ak2 * prod_yz * trr_03x;
                        double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                        fyk = ak2 * prod_xz * trr_21y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_0021x = trr_03x - xlxk * trr_02x;
                        fxl = al2 * prod_yz * hrr_0021x;
                        double hrr_2001y = trr_21y - ylyk * trr_20y;
                        fyl = al2 * prod_xz * hrr_2001y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 2 * prod_xz * trr_10y;
                        fxk -= 2 * prod_yz * trr_01x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_3_0;
                            dd_jl = dm_jl_0_0 * dm_ik_3_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_02x * trr_10y;
                        prod_xz = trr_02x * trr_10z;
                        prod_yz = trr_10y * trr_10z;
                        fxi = ai2 * prod_yz * trr_12x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0120x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_03x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0021x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fyi -= 1 * prod_xz * 1;
                        fzi -= 1 * prod_xy * wt;
                        fxk -= 2 * prod_yz * trr_01x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_4_0;
                            dd_jl = dm_jl_0_0 * dm_ik_4_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_02x * 1;
                        prod_xz = trr_02x * trr_20z;
                        prod_yz = 1 * trr_20z;
                        fxi = ai2 * prod_yz * trr_12x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                        fzi = ai2 * prod_xy * trr_30z;
                        fxj = aj2 * prod_yz * hrr_0120x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_2100z = trr_30z - zjzi * trr_20z;
                        fzj = aj2 * prod_xy * hrr_2100z;
                        fxk = ak2 * prod_yz * trr_03x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                        fzk = ak2 * prod_xy * trr_21z;
                        fxl = al2 * prod_yz * hrr_0021x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_2001z = trr_21z - zlzk * trr_20z;
                        fzl = al2 * prod_xy * hrr_2001z;
                        fzi -= 2 * prod_xy * trr_10z;
                        fxk -= 2 * prod_yz * trr_01x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_5_0;
                            dd_jl = dm_jl_0_0 * dm_ik_5_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_21x * trr_01y;
                        prod_xz = trr_21x * wt;
                        prod_yz = trr_01y * wt;
                        fxi = ai2 * prod_yz * trr_31x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_2110x = trr_31x - xjxi * trr_21x;
                        fxj = aj2 * prod_yz * hrr_2110x;
                        double hrr_0110y = trr_11y - yjyi * trr_01y;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_22x;
                        double trr_02y = cpy * trr_01y + 1*b01 * 1;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_2011x = trr_22x - xlxk * trr_21x;
                        fxl = al2 * prod_yz * hrr_2011x;
                        double hrr_0011y = trr_02y - ylyk * trr_01y;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 2 * prod_yz * trr_11x;
                        fxk -= 1 * prod_yz * trr_20x;
                        fyk -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_11x * trr_11y;
                        prod_xz = trr_11x * wt;
                        prod_yz = trr_11y * wt;
                        fxi = ai2 * prod_yz * trr_21x;
                        fyi = ai2 * prod_xz * trr_21y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1110x = trr_21x - xjxi * trr_11x;
                        fxj = aj2 * prod_yz * hrr_1110x;
                        double hrr_1110y = trr_21y - yjyi * trr_11y;
                        fyj = aj2 * prod_xz * hrr_1110y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_12x;
                        double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                        fyk = ak2 * prod_xz * trr_12y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_1011x = trr_12x - xlxk * trr_11x;
                        fxl = al2 * prod_yz * hrr_1011x;
                        double hrr_1011y = trr_12y - ylyk * trr_11y;
                        fyl = al2 * prod_xz * hrr_1011y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * trr_01x;
                        fyi -= 1 * prod_xz * trr_01y;
                        fxk -= 1 * prod_yz * trr_10x;
                        fyk -= 1 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_11x * trr_01y;
                        prod_xz = trr_11x * trr_10z;
                        prod_yz = trr_01y * trr_10z;
                        fxi = ai2 * prod_yz * trr_21x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_1110x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_12x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_1011x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fxi -= 1 * prod_yz * trr_01x;
                        fzi -= 1 * prod_xy * wt;
                        fxk -= 1 * prod_yz * trr_10x;
                        fyk -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * trr_21y;
                        prod_xz = trr_01x * wt;
                        prod_yz = trr_21y * wt;
                        fxi = ai2 * prod_yz * trr_11x;
                        double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                        fyi = ai2 * prod_xz * trr_31y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0110x = trr_11x - xjxi * trr_01x;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        double hrr_2110y = trr_31y - yjyi * trr_21y;
                        fyj = aj2 * prod_xz * hrr_2110y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_02x;
                        double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                        fyk = ak2 * prod_xz * trr_22y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_0011x = trr_02x - xlxk * trr_01x;
                        fxl = al2 * prod_yz * hrr_0011x;
                        double hrr_2011y = trr_22y - ylyk * trr_21y;
                        fyl = al2 * prod_xz * hrr_2011y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 2 * prod_xz * trr_11y;
                        fxk -= 1 * prod_yz * fac;
                        fyk -= 1 * prod_xz * trr_20y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_3_0;
                            dd_jl = dm_jl_0_0 * dm_ik_3_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * trr_11y;
                        prod_xz = trr_01x * trr_10z;
                        prod_yz = trr_11y * trr_10z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * trr_21y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_1110y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * trr_12y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_1011y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fyi -= 1 * prod_xz * trr_01y;
                        fzi -= 1 * prod_xy * wt;
                        fxk -= 1 * prod_yz * fac;
                        fyk -= 1 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_4_0;
                            dd_jl = dm_jl_0_0 * dm_ik_4_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * trr_01y;
                        prod_xz = trr_01x * trr_20z;
                        prod_yz = trr_01y * trr_20z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * trr_30z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_2100z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * trr_21z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_2001z;
                        fzi -= 2 * prod_xy * trr_10z;
                        fxk -= 1 * prod_yz * fac;
                        fyk -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_5_0;
                            dd_jl = dm_jl_0_0 * dm_ik_5_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_21x * 1;
                        prod_xz = trr_21x * trr_01z;
                        prod_yz = 1 * trr_01z;
                        fxi = ai2 * prod_yz * trr_31x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_2110x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0110z = trr_11z - zjzi * trr_01z;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * trr_22x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_02z = cpz * trr_01z + 1*b01 * wt;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_2011x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0011z = trr_02z - zlzk * trr_01z;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fxi -= 2 * prod_yz * trr_11x;
                        fxk -= 1 * prod_yz * trr_20x;
                        fzk -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_11x * trr_10y;
                        prod_xz = trr_11x * trr_01z;
                        prod_yz = trr_10y * trr_01z;
                        fxi = ai2 * prod_yz * trr_21x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_1110x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * trr_12x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_1011x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fxi -= 1 * prod_yz * trr_01x;
                        fyi -= 1 * prod_xz * 1;
                        fxk -= 1 * prod_yz * trr_10x;
                        fzk -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_11x * 1;
                        prod_xz = trr_11x * trr_11z;
                        prod_yz = 1 * trr_11z;
                        fxi = ai2 * prod_yz * trr_21x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * trr_21z;
                        fxj = aj2 * prod_yz * hrr_1110x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1110z = trr_21z - zjzi * trr_11z;
                        fzj = aj2 * prod_xy * hrr_1110z;
                        fxk = ak2 * prod_yz * trr_12x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                        fzk = ak2 * prod_xy * trr_12z;
                        fxl = al2 * prod_yz * hrr_1011x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1011z = trr_12z - zlzk * trr_11z;
                        fzl = al2 * prod_xy * hrr_1011z;
                        fxi -= 1 * prod_yz * trr_01x;
                        fzi -= 1 * prod_xy * trr_01z;
                        fxk -= 1 * prod_yz * trr_10x;
                        fzk -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * trr_20y;
                        prod_xz = trr_01x * trr_01z;
                        prod_yz = trr_20y * trr_01z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * trr_30y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_2100y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * trr_21y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_2001y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fyi -= 2 * prod_xz * trr_10y;
                        fxk -= 1 * prod_yz * fac;
                        fzk -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_3_0;
                            dd_jl = dm_jl_0_0 * dm_ik_3_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * trr_10y;
                        prod_xz = trr_01x * trr_11z;
                        prod_yz = trr_10y * trr_11z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_21z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_1110z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_12z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_1011z;
                        fyi -= 1 * prod_xz * 1;
                        fzi -= 1 * prod_xy * trr_01z;
                        fxk -= 1 * prod_yz * fac;
                        fzk -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_4_0;
                            dd_jl = dm_jl_0_0 * dm_ik_4_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * 1;
                        prod_xz = trr_01x * trr_21z;
                        prod_yz = 1 * trr_21z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                        fzi = ai2 * prod_xy * trr_31z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_2110z = trr_31z - zjzi * trr_21z;
                        fzj = aj2 * prod_xy * hrr_2110z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                        fzk = ak2 * prod_xy * trr_22z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_2011z = trr_22z - zlzk * trr_21z;
                        fzl = al2 * prod_xy * hrr_2011z;
                        fzi -= 2 * prod_xy * trr_11z;
                        fxk -= 1 * prod_yz * fac;
                        fzk -= 1 * prod_xy * trr_20z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_5_0;
                            dd_jl = dm_jl_0_0 * dm_ik_5_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_20x * trr_02y;
                        prod_xz = trr_20x * wt;
                        prod_yz = trr_02y * wt;
                        fxi = ai2 * prod_yz * trr_30x;
                        fyi = ai2 * prod_xz * trr_12y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_2100x = trr_30x - xjxi * trr_20x;
                        fxj = aj2 * prod_yz * hrr_2100x;
                        double hrr_0120y = trr_12y - yjyi * trr_02y;
                        fyj = aj2 * prod_xz * hrr_0120y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_21x;
                        double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                        fyk = ak2 * prod_xz * trr_03y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_2001x = trr_21x - xlxk * trr_20x;
                        fxl = al2 * prod_yz * hrr_2001x;
                        double hrr_0021y = trr_03y - ylyk * trr_02y;
                        fyl = al2 * prod_xz * hrr_0021y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 2 * prod_yz * trr_10x;
                        fyk -= 2 * prod_xz * trr_01y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_3 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_3;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+3] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+3];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_3;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * trr_12y;
                        prod_xz = trr_10x * wt;
                        prod_yz = trr_12y * wt;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_22y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1100x = trr_20x - xjxi * trr_10x;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        double hrr_1120y = trr_22y - yjyi * trr_12y;
                        fyj = aj2 * prod_xz * hrr_1120y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_11x;
                        double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                        fyk = ak2 * prod_xz * trr_13y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_1001x = trr_11x - xlxk * trr_10x;
                        fxl = al2 * prod_yz * hrr_1001x;
                        double hrr_1021y = trr_13y - ylyk * trr_12y;
                        fyl = al2 * prod_xz * hrr_1021y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * fac;
                        fyi -= 1 * prod_xz * trr_02y;
                        fyk -= 2 * prod_xz * trr_11y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_3 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_3;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+3] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+3];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_3;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * trr_02y;
                        prod_xz = trr_10x * trr_10z;
                        prod_yz = trr_02y * trr_10z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_12y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0120y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_03y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0021y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fxi -= 1 * prod_yz * fac;
                        fzi -= 1 * prod_xy * wt;
                        fyk -= 2 * prod_xz * trr_01y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_3 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_3;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+3] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+3];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_3;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_22y;
                        prod_xz = fac * wt;
                        prod_yz = trr_22y * wt;
                        fxi = ai2 * prod_yz * trr_10x;
                        double trr_32y = cpy * trr_31y + 1*b01 * trr_30y + 3*b00 * trr_21y;
                        fyi = ai2 * prod_xz * trr_32y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0100x = trr_10x - xjxi * fac;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        double hrr_2120y = trr_32y - yjyi * trr_22y;
                        fyj = aj2 * prod_xz * hrr_2120y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        double trr_23y = cpy * trr_22y + 2*b01 * trr_21y + 2*b00 * trr_12y;
                        fyk = ak2 * prod_xz * trr_23y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_0001x = trr_01x - xlxk * fac;
                        fxl = al2 * prod_yz * hrr_0001x;
                        double hrr_2021y = trr_23y - ylyk * trr_22y;
                        fyl = al2 * prod_xz * hrr_2021y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 2 * prod_xz * trr_12y;
                        fyk -= 2 * prod_xz * trr_21y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_3 * dm_il_3_0;
                            dd_jl = dm_jl_0_0 * dm_ik_3_3;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+3] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+3];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_0_3;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_12y;
                        prod_xz = fac * trr_10z;
                        prod_yz = trr_12y * trr_10z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_22y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1120y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_13y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1021y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fyi -= 1 * prod_xz * trr_02y;
                        fzi -= 1 * prod_xy * wt;
                        fyk -= 2 * prod_xz * trr_11y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_3 * dm_il_4_0;
                            dd_jl = dm_jl_0_0 * dm_ik_4_3;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+3] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+3];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_0_3;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_02y;
                        prod_xz = fac * trr_20z;
                        prod_yz = trr_02y * trr_20z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_12y;
                        fzi = ai2 * prod_xy * trr_30z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0120y;
                        fzj = aj2 * prod_xy * hrr_2100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_03y;
                        fzk = ak2 * prod_xy * trr_21z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0021y;
                        fzl = al2 * prod_xy * hrr_2001z;
                        fzi -= 2 * prod_xy * trr_10z;
                        fyk -= 2 * prod_xz * trr_01y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_3 * dm_il_5_0;
                            dd_jl = dm_jl_0_0 * dm_ik_5_3;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+3] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+3];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_0_3;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_20x * trr_01y;
                        prod_xz = trr_20x * trr_01z;
                        prod_yz = trr_01y * trr_01z;
                        fxi = ai2 * prod_yz * trr_30x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_2100x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * trr_21x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_2001x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fxi -= 2 * prod_yz * trr_10x;
                        fyk -= 1 * prod_xz * 1;
                        fzk -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_4 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_4;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+4] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+4];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_4;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * trr_11y;
                        prod_xz = trr_10x * trr_01z;
                        prod_yz = trr_11y * trr_01z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_21y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_1110y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_12y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_1011y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fxi -= 1 * prod_yz * fac;
                        fyi -= 1 * prod_xz * trr_01y;
                        fyk -= 1 * prod_xz * trr_10y;
                        fzk -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_4 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_4;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+4] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+4];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_4;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * trr_01y;
                        prod_xz = trr_10x * trr_11z;
                        prod_yz = trr_01y * trr_11z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * trr_21z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_1110z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * trr_12z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_1011z;
                        fxi -= 1 * prod_yz * fac;
                        fzi -= 1 * prod_xy * trr_01z;
                        fyk -= 1 * prod_xz * 1;
                        fzk -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_4 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_4;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+4] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+4];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_4;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_21y;
                        prod_xz = fac * trr_01z;
                        prod_yz = trr_21y * trr_01z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_31y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_2110y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_22y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_2011y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fyi -= 2 * prod_xz * trr_11y;
                        fyk -= 1 * prod_xz * trr_20y;
                        fzk -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_4 * dm_il_3_0;
                            dd_jl = dm_jl_0_0 * dm_ik_3_4;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+4] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+4];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_0_4;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_11y;
                        prod_xz = fac * trr_11z;
                        prod_yz = trr_11y * trr_11z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_21y;
                        fzi = ai2 * prod_xy * trr_21z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1110y;
                        fzj = aj2 * prod_xy * hrr_1110z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_12y;
                        fzk = ak2 * prod_xy * trr_12z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1011y;
                        fzl = al2 * prod_xy * hrr_1011z;
                        fyi -= 1 * prod_xz * trr_01y;
                        fzi -= 1 * prod_xy * trr_01z;
                        fyk -= 1 * prod_xz * trr_10y;
                        fzk -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_4 * dm_il_4_0;
                            dd_jl = dm_jl_0_0 * dm_ik_4_4;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+4] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+4];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_0_4;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_01y;
                        prod_xz = fac * trr_21z;
                        prod_yz = trr_01y * trr_21z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * trr_31z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_2110z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * trr_22z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_2011z;
                        fzi -= 2 * prod_xy * trr_11z;
                        fyk -= 1 * prod_xz * 1;
                        fzk -= 1 * prod_xy * trr_20z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_4 * dm_il_5_0;
                            dd_jl = dm_jl_0_0 * dm_ik_5_4;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+4] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+4];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_0_4;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_20x * 1;
                        prod_xz = trr_20x * trr_02z;
                        prod_yz = 1 * trr_02z;
                        fxi = ai2 * prod_yz * trr_30x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * trr_12z;
                        fxj = aj2 * prod_yz * hrr_2100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0120z = trr_12z - zjzi * trr_02z;
                        fzj = aj2 * prod_xy * hrr_0120z;
                        fxk = ak2 * prod_yz * trr_21x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                        fzk = ak2 * prod_xy * trr_03z;
                        fxl = al2 * prod_yz * hrr_2001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0021z = trr_03z - zlzk * trr_02z;
                        fzl = al2 * prod_xy * hrr_0021z;
                        fxi -= 2 * prod_yz * trr_10x;
                        fzk -= 2 * prod_xy * trr_01z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_5 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_5;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+5] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+5];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_5;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * trr_10y;
                        prod_xz = trr_10x * trr_02z;
                        prod_yz = trr_10y * trr_02z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_12z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0120z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_03z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0021z;
                        fxi -= 1 * prod_yz * fac;
                        fyi -= 1 * prod_xz * 1;
                        fzk -= 2 * prod_xy * trr_01z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_5 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_5;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+5] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+5];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_5;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * 1;
                        prod_xz = trr_10x * trr_12z;
                        prod_yz = 1 * trr_12z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * trr_22z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1120z = trr_22z - zjzi * trr_12z;
                        fzj = aj2 * prod_xy * hrr_1120z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                        fzk = ak2 * prod_xy * trr_13z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1021z = trr_13z - zlzk * trr_12z;
                        fzl = al2 * prod_xy * hrr_1021z;
                        fxi -= 1 * prod_yz * fac;
                        fzi -= 1 * prod_xy * trr_02z;
                        fzk -= 2 * prod_xy * trr_11z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_5 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_5;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+5] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+5];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_5;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_20y;
                        prod_xz = fac * trr_02z;
                        prod_yz = trr_20y * trr_02z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_30y;
                        fzi = ai2 * prod_xy * trr_12z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_2100y;
                        fzj = aj2 * prod_xy * hrr_0120z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_21y;
                        fzk = ak2 * prod_xy * trr_03z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_2001y;
                        fzl = al2 * prod_xy * hrr_0021z;
                        fyi -= 2 * prod_xz * trr_10y;
                        fzk -= 2 * prod_xy * trr_01z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_5 * dm_il_3_0;
                            dd_jl = dm_jl_0_0 * dm_ik_3_5;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+5] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+5];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_0_5;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_10y;
                        prod_xz = fac * trr_12z;
                        prod_yz = trr_10y * trr_12z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_22z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_1120z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_13z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_1021z;
                        fyi -= 1 * prod_xz * 1;
                        fzi -= 1 * prod_xy * trr_02z;
                        fzk -= 2 * prod_xy * trr_11z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_5 * dm_il_4_0;
                            dd_jl = dm_jl_0_0 * dm_ik_4_5;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+5] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+5];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_0_5;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * 1;
                        prod_xz = fac * trr_22z;
                        prod_yz = 1 * trr_22z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_32z = cpz * trr_31z + 1*b01 * trr_30z + 3*b00 * trr_21z;
                        fzi = ai2 * prod_xy * trr_32z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_2120z = trr_32z - zjzi * trr_22z;
                        fzj = aj2 * prod_xy * hrr_2120z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_23z = cpz * trr_22z + 2*b01 * trr_21z + 2*b00 * trr_12z;
                        fzk = ak2 * prod_xy * trr_23z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_2021z = trr_23z - zlzk * trr_22z;
                        fzl = al2 * prod_xy * hrr_2021z;
                        fzi -= 2 * prod_xy * trr_12z;
                        fzk -= 2 * prod_xy * trr_21z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_5 * dm_il_5_0;
                            dd_jl = dm_jl_0_0 * dm_ik_5_5;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+5] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+5];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_0_5;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                    }
                }
            }
        }
        int ia = bas[ish*BAS_SLOTS+ATOM_OF];
        int ja = bas[jsh*BAS_SLOTS+ATOM_OF];
        int ka = bas[ksh*BAS_SLOTS+ATOM_OF];
        int la = bas[lsh*BAS_SLOTS+ATOM_OF];
        if (vj != NULL) {
            atomicAdd(vj+ia*3+0, vj_grad_ix);
            atomicAdd(vj+ia*3+1, vj_grad_iy);
            atomicAdd(vj+ia*3+2, vj_grad_iz);
            atomicAdd(vj+ja*3+0, vj_grad_jx);
            atomicAdd(vj+ja*3+1, vj_grad_jy);
            atomicAdd(vj+ja*3+2, vj_grad_jz);
            atomicAdd(vj+ka*3+0, vj_grad_kx);
            atomicAdd(vj+ka*3+1, vj_grad_ky);
            atomicAdd(vj+ka*3+2, vj_grad_kz);
            atomicAdd(vj+la*3+0, vj_grad_lx);
            atomicAdd(vj+la*3+1, vj_grad_ly);
            atomicAdd(vj+la*3+2, vj_grad_lz);
        }
        if (vk != NULL) {
            atomicAdd(vk+ia*3+0, vk_grad_ix);
            atomicAdd(vk+ia*3+1, vk_grad_iy);
            atomicAdd(vk+ia*3+2, vk_grad_iz);
            atomicAdd(vk+ja*3+0, vk_grad_jx);
            atomicAdd(vk+ja*3+1, vk_grad_jy);
            atomicAdd(vk+ja*3+2, vk_grad_jz);
            atomicAdd(vk+ka*3+0, vk_grad_kx);
            atomicAdd(vk+ka*3+1, vk_grad_ky);
            atomicAdd(vk+ka*3+2, vk_grad_kz);
            atomicAdd(vk+la*3+0, vk_grad_lx);
            atomicAdd(vk+la*3+1, vk_grad_ly);
            atomicAdd(vk+la*3+2, vk_grad_lz);
        }
    }
}
__global__
void rys_ejk_ip1_2020(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int nbas = envs.nbas;
        int ntasks = _fill_ejk_tasks(shl_quartet_idx, envs, jk, bounds,
                                     batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas_tiles = nbas / TILE;
            int tile_i = tile_ij / nbas_tiles;
            int tile_j = tile_ij % nbas_tiles;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_ejk_ip1_2020(envs, jk, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_ejk_ip1_2100(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int *ao_loc = envs.ao_loc;
    int nbas = envs.nbas;
    int nao = ao_loc[nbas];
    int *bas = envs.bas;
    double *env = envs.env;
    double omega = env[PTR_RANGE_OMEGA];
    double *vj = jk.vj;
    double *vk = jk.vk;
    double *dm = jk.dm;
    extern __shared__ double dm_cache[];
    double *Rpa_cicj = dm_cache + 18 * TILE2;
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env + bas[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env + bas[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    int ij = sq_id / TILE2;
    if (ij < 18) {
        int i = ij % 6;
        int j = ij / 6;
        int sh_ij = sq_id % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        if (jk.n_dm == 1) {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i];
        } else {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i] + dm[(nao+j0+j)*nao+i0+i];
        }
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        if (ish*nbas+jsh == ksh*nbas+lsh) fac_sym *= .5;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        int k0 = ao_loc[ksh];
        int l0 = ao_loc[lsh];
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env + bas[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env + bas[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env + bas[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env + bas[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
        double vj_grad_ix = 0;
        double vj_grad_iy = 0;
        double vj_grad_iz = 0;
        double vj_grad_jx = 0;
        double vj_grad_jy = 0;
        double vj_grad_jz = 0;
        double vj_grad_kx = 0;
        double vj_grad_ky = 0;
        double vj_grad_kz = 0;
        double vj_grad_lx = 0;
        double vj_grad_ly = 0;
        double vj_grad_lz = 0;
        double vk_grad_ix = 0;
        double vk_grad_iy = 0;
        double vk_grad_iz = 0;
        double vk_grad_jx = 0;
        double vk_grad_jy = 0;
        double vk_grad_jz = 0;
        double vk_grad_kx = 0;
        double vk_grad_ky = 0;
        double vk_grad_kz = 0;
        double vk_grad_lx = 0;
        double vk_grad_ly = 0;
        double vk_grad_lz = 0;
        double dm_lk_0_0 = dm[(l0+0)*nao+(k0+0)];
        if (jk.n_dm > 1) {
            int nao2 = nao * nao;
            dm_lk_0_0 += dm[nao2+(l0+0)*nao+(k0+0)];
        }
        double dm_jk_0_0 = dm[(j0+0)*nao+(k0+0)];
        double dm_jk_1_0 = dm[(j0+1)*nao+(k0+0)];
        double dm_jk_2_0 = dm[(j0+2)*nao+(k0+0)];
        double dm_jl_0_0 = dm[(j0+0)*nao+(l0+0)];
        double dm_jl_1_0 = dm[(j0+1)*nao+(l0+0)];
        double dm_jl_2_0 = dm[(j0+2)*nao+(l0+0)];
        double dm_ik_0_0 = dm[(i0+0)*nao+(k0+0)];
        double dm_ik_1_0 = dm[(i0+1)*nao+(k0+0)];
        double dm_ik_2_0 = dm[(i0+2)*nao+(k0+0)];
        double dm_ik_3_0 = dm[(i0+3)*nao+(k0+0)];
        double dm_ik_4_0 = dm[(i0+4)*nao+(k0+0)];
        double dm_ik_5_0 = dm[(i0+5)*nao+(k0+0)];
        double dm_il_0_0 = dm[(i0+0)*nao+(l0+0)];
        double dm_il_1_0 = dm[(i0+1)*nao+(l0+0)];
        double dm_il_2_0 = dm[(i0+2)*nao+(l0+0)];
        double dm_il_3_0 = dm[(i0+3)*nao+(l0+0)];
        double dm_il_4_0 = dm[(i0+4)*nao+(l0+0)];
        double dm_il_5_0 = dm[(i0+5)*nao+(l0+0)];
        double dd_jk, dd_jl, vj_dd, vk_dd;
        double prod_xy;
        double prod_xz;
        double prod_yz;
        double fxi;
        double fyi;
        double fzi;
        double fxj;
        double fyj;
        double fzj;
        double fxk;
        double fyk;
        double fzk;
        double fxl;
        double fyl;
        double fzl;
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double ak2 = ak * 2;
            double al2 = al * 2;
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double ai2 = ai * 2;
                double aj2 = aj * 2;
                double aij = ai + aj;
                double xjxi = rj[0] - ri[0];
                double yjyi = rj[1] - ri[1];
                double zjzi = rj[2] - ri[2];
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa; // (ai*xi+aj*xj)/aij
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(3, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(3, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 3; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                __syncthreads();
                if (task_id < ntasks) {
                    for (int irys = 0; irys < 3; ++irys) {
                        double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                        double rt = rw[sq_id +  2*irys   *nsq_per_block];
                        double rt_aa = rt / (aij + akl);
                        double rt_aij = rt_aa * akl;
                        double c0x = xpa - xpq*rt_aij;
                        double trr_10x = c0x * fac;
                        double b10 = .5/aij * (1 - rt_aij);
                        double trr_20x = c0x * trr_10x + 1*b10 * fac;
                        double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                        double hrr_2100x = trr_30x - xjxi * trr_20x;
                        prod_xy = hrr_2100x * 1;
                        prod_xz = hrr_2100x * wt;
                        prod_yz = 1 * wt;
                        double trr_40x = c0x * trr_30x + 3*b10 * trr_20x;
                        double hrr_3100x = trr_40x - xjxi * trr_30x;
                        fxi = ai2 * prod_yz * hrr_3100x;
                        double c0y = ypa - ypq*rt_aij;
                        double trr_10y = c0y * 1;
                        fyi = ai2 * prod_xz * trr_10y;
                        double c0z = zpa - zpq*rt_aij;
                        double trr_10z = c0z * wt;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_2200x = hrr_3100x - xjxi * hrr_2100x;
                        fxj = aj2 * prod_yz * hrr_2200x;
                        double hrr_0100y = trr_10y - yjyi * 1;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0100z = trr_10z - zjzi * wt;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double rt_akl = rt_aa * aij;
                        double cpx = xqc + xpq*rt_akl;
                        double b00 = .5 * rt_aa;
                        double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                        double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                        double hrr_2110x = trr_31x - xjxi * trr_21x;
                        fxk = ak2 * prod_yz * hrr_2110x;
                        double cpy = yqc + ypq*rt_akl;
                        double trr_01y = cpy * 1;
                        fyk = ak2 * prod_xz * trr_01y;
                        double cpz = zqc + zpq*rt_akl;
                        double trr_01z = cpz * wt;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_3001x = trr_31x - xlxk * trr_30x;
                        double hrr_2001x = trr_21x - xlxk * trr_20x;
                        double hrr_2101x = hrr_3001x - xjxi * hrr_2001x;
                        fxl = al2 * prod_yz * hrr_2101x;
                        double hrr_0001y = trr_01y - ylyk * 1;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0001z = trr_01z - zlzk * wt;
                        fzl = al2 * prod_xy * hrr_0001z;
                        double hrr_1100x = trr_20x - xjxi * trr_10x;
                        fxi -= 2 * prod_yz * hrr_1100x;
                        fxj -= 1 * prod_yz * trr_20x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1100x * trr_10y;
                        prod_xz = hrr_1100x * wt;
                        prod_yz = trr_10y * wt;
                        fxi = ai2 * prod_yz * hrr_2100x;
                        double trr_20y = c0y * trr_10y + 1*b10 * 1;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1200x = hrr_2100x - xjxi * hrr_1100x;
                        fxj = aj2 * prod_yz * hrr_1200x;
                        double hrr_1100y = trr_20y - yjyi * trr_10y;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double trr_11x = cpx * trr_10x + 1*b00 * fac;
                        double hrr_1110x = trr_21x - xjxi * trr_11x;
                        fxk = ak2 * prod_yz * hrr_1110x;
                        double trr_11y = cpy * trr_10y + 1*b00 * 1;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_1001x = trr_11x - xlxk * trr_10x;
                        double hrr_1101x = hrr_2001x - xjxi * hrr_1001x;
                        fxl = al2 * prod_yz * hrr_1101x;
                        double hrr_1001y = trr_11y - ylyk * trr_10y;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        double hrr_0100x = trr_10x - xjxi * fac;
                        fxi -= 1 * prod_yz * hrr_0100x;
                        fyi -= 1 * prod_xz * 1;
                        fxj -= 1 * prod_yz * trr_10x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1100x * 1;
                        prod_xz = hrr_1100x * trr_10z;
                        prod_yz = 1 * trr_10z;
                        fxi = ai2 * prod_yz * hrr_2100x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_20z = c0z * trr_10z + 1*b10 * wt;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_1200x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1100z = trr_20z - zjzi * trr_10z;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * hrr_1110x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_11z = cpz * trr_10z + 1*b00 * wt;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_1101x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1001z = trr_11z - zlzk * trr_10z;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fxi -= 1 * prod_yz * hrr_0100x;
                        fzi -= 1 * prod_xy * wt;
                        fxj -= 1 * prod_yz * trr_10x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * trr_20y;
                        prod_xz = hrr_0100x * wt;
                        prod_yz = trr_20y * wt;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                        fyi = ai2 * prod_xz * trr_30y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0200x = hrr_1100x - xjxi * hrr_0100x;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        double hrr_2100y = trr_30y - yjyi * trr_20y;
                        fyj = aj2 * prod_xz * hrr_2100y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double trr_01x = cpx * fac;
                        double hrr_0110x = trr_11x - xjxi * trr_01x;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                        fyk = ak2 * prod_xz * trr_21y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_0001x = trr_01x - xlxk * fac;
                        double hrr_0101x = hrr_1001x - xjxi * hrr_0001x;
                        fxl = al2 * prod_yz * hrr_0101x;
                        double hrr_2001y = trr_21y - ylyk * trr_20y;
                        fyl = al2 * prod_xz * hrr_2001y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 2 * prod_xz * trr_10y;
                        fxj -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_3_0;
                            dd_jl = dm_jl_0_0 * dm_ik_3_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * trr_10y;
                        prod_xz = hrr_0100x * trr_10z;
                        prod_yz = trr_10y * trr_10z;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0101x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fyi -= 1 * prod_xz * 1;
                        fzi -= 1 * prod_xy * wt;
                        fxj -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_4_0;
                            dd_jl = dm_jl_0_0 * dm_ik_4_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * 1;
                        prod_xz = hrr_0100x * trr_20z;
                        prod_yz = 1 * trr_20z;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                        fzi = ai2 * prod_xy * trr_30z;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_2100z = trr_30z - zjzi * trr_20z;
                        fzj = aj2 * prod_xy * hrr_2100z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                        fzk = ak2 * prod_xy * trr_21z;
                        fxl = al2 * prod_yz * hrr_0101x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_2001z = trr_21z - zlzk * trr_20z;
                        fzl = al2 * prod_xy * hrr_2001z;
                        fzi -= 2 * prod_xy * trr_10z;
                        fxj -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_5_0;
                            dd_jl = dm_jl_0_0 * dm_ik_5_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_20x * hrr_0100y;
                        prod_xz = trr_20x * wt;
                        prod_yz = hrr_0100y * wt;
                        fxi = ai2 * prod_yz * trr_30x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_2100x;
                        double hrr_0200y = hrr_1100y - yjyi * hrr_0100y;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_21x;
                        double hrr_0110y = trr_11y - yjyi * trr_01y;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_2001x;
                        double hrr_0101y = hrr_1001y - yjyi * hrr_0001y;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 2 * prod_yz * trr_10x;
                        fyj -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_0_0;
                            dd_jl = dm_jl_1_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[6*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * hrr_1100y;
                        prod_xz = trr_10x * wt;
                        prod_yz = hrr_1100y * wt;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * hrr_2100y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        double hrr_1200y = hrr_2100y - yjyi * hrr_1100y;
                        fyj = aj2 * prod_xz * hrr_1200y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_11x;
                        double hrr_1110y = trr_21y - yjyi * trr_11y;
                        fyk = ak2 * prod_xz * hrr_1110y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        double hrr_1101y = hrr_2001y - yjyi * hrr_1001y;
                        fyl = al2 * prod_xz * hrr_1101y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * fac;
                        fyi -= 1 * prod_xz * hrr_0100y;
                        fyj -= 1 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_1_0;
                            dd_jl = dm_jl_1_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[7*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * hrr_0100y;
                        prod_xz = trr_10x * trr_10z;
                        prod_yz = hrr_0100y * trr_10z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fxi -= 1 * prod_yz * fac;
                        fzi -= 1 * prod_xy * wt;
                        fyj -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_2_0;
                            dd_jl = dm_jl_1_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[8*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_2100y;
                        prod_xz = fac * wt;
                        prod_yz = hrr_2100y * wt;
                        fxi = ai2 * prod_yz * trr_10x;
                        double trr_40y = c0y * trr_30y + 3*b10 * trr_20y;
                        double hrr_3100y = trr_40y - yjyi * trr_30y;
                        fyi = ai2 * prod_xz * hrr_3100y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        double hrr_2200y = hrr_3100y - yjyi * hrr_2100y;
                        fyj = aj2 * prod_xz * hrr_2200y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                        double hrr_2110y = trr_31y - yjyi * trr_21y;
                        fyk = ak2 * prod_xz * hrr_2110y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        double hrr_3001y = trr_31y - ylyk * trr_30y;
                        double hrr_2101y = hrr_3001y - yjyi * hrr_2001y;
                        fyl = al2 * prod_xz * hrr_2101y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 2 * prod_xz * hrr_1100y;
                        fyj -= 1 * prod_xz * trr_20y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_3_0;
                            dd_jl = dm_jl_1_0 * dm_ik_3_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[9*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_1100y;
                        prod_xz = fac * trr_10z;
                        prod_yz = hrr_1100y * trr_10z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_2100y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1200y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_1110y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1101y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fyi -= 1 * prod_xz * hrr_0100y;
                        fzi -= 1 * prod_xy * wt;
                        fyj -= 1 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_4_0;
                            dd_jl = dm_jl_1_0 * dm_ik_4_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[10*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_0100y;
                        prod_xz = fac * trr_20z;
                        prod_yz = hrr_0100y * trr_20z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * trr_30z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_2100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * trr_21z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_2001z;
                        fzi -= 2 * prod_xy * trr_10z;
                        fyj -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_5_0;
                            dd_jl = dm_jl_1_0 * dm_ik_5_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[11*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_20x * 1;
                        prod_xz = trr_20x * hrr_0100z;
                        prod_yz = 1 * hrr_0100z;
                        fxi = ai2 * prod_yz * trr_30x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_2100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0200z = hrr_1100z - zjzi * hrr_0100z;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * trr_21x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double hrr_0110z = trr_11z - zjzi * trr_01z;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_2001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0101z = hrr_1001z - zjzi * hrr_0001z;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fxi -= 2 * prod_yz * trr_10x;
                        fzj -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_0_0;
                            dd_jl = dm_jl_2_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[12*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * trr_10y;
                        prod_xz = trr_10x * hrr_0100z;
                        prod_yz = trr_10y * hrr_0100z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fxi -= 1 * prod_yz * fac;
                        fyi -= 1 * prod_xz * 1;
                        fzj -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_1_0;
                            dd_jl = dm_jl_2_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[13*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * 1;
                        prod_xz = trr_10x * hrr_1100z;
                        prod_yz = 1 * hrr_1100z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_2100z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1200z = hrr_2100z - zjzi * hrr_1100z;
                        fzj = aj2 * prod_xy * hrr_1200z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double hrr_1110z = trr_21z - zjzi * trr_11z;
                        fzk = ak2 * prod_xy * hrr_1110z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1101z = hrr_2001z - zjzi * hrr_1001z;
                        fzl = al2 * prod_xy * hrr_1101z;
                        fxi -= 1 * prod_yz * fac;
                        fzi -= 1 * prod_xy * hrr_0100z;
                        fzj -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_2_0;
                            dd_jl = dm_jl_2_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[14*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_20y;
                        prod_xz = fac * hrr_0100z;
                        prod_yz = trr_20y * hrr_0100z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_30y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_2100y;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_21y;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_2001y;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fyi -= 2 * prod_xz * trr_10y;
                        fzj -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_3_0;
                            dd_jl = dm_jl_2_0 * dm_ik_3_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[15*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_10y;
                        prod_xz = fac * hrr_1100z;
                        prod_yz = trr_10y * hrr_1100z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * hrr_2100z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_1200z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * hrr_1110z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_1101z;
                        fyi -= 1 * prod_xz * 1;
                        fzi -= 1 * prod_xy * hrr_0100z;
                        fzj -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_4_0;
                            dd_jl = dm_jl_2_0 * dm_ik_4_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[16*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * 1;
                        prod_xz = fac * hrr_2100z;
                        prod_yz = 1 * hrr_2100z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_40z = c0z * trr_30z + 3*b10 * trr_20z;
                        double hrr_3100z = trr_40z - zjzi * trr_30z;
                        fzi = ai2 * prod_xy * hrr_3100z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_2200z = hrr_3100z - zjzi * hrr_2100z;
                        fzj = aj2 * prod_xy * hrr_2200z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                        double hrr_2110z = trr_31z - zjzi * trr_21z;
                        fzk = ak2 * prod_xy * hrr_2110z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_3001z = trr_31z - zlzk * trr_30z;
                        double hrr_2101z = hrr_3001z - zjzi * hrr_2001z;
                        fzl = al2 * prod_xy * hrr_2101z;
                        fzi -= 2 * prod_xy * hrr_1100z;
                        fzj -= 1 * prod_xy * trr_20z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_5_0;
                            dd_jl = dm_jl_2_0 * dm_ik_5_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[17*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                    }
                }
            }
        }
        int ia = bas[ish*BAS_SLOTS+ATOM_OF];
        int ja = bas[jsh*BAS_SLOTS+ATOM_OF];
        int ka = bas[ksh*BAS_SLOTS+ATOM_OF];
        int la = bas[lsh*BAS_SLOTS+ATOM_OF];
        if (vj != NULL) {
            atomicAdd(vj+ia*3+0, vj_grad_ix);
            atomicAdd(vj+ia*3+1, vj_grad_iy);
            atomicAdd(vj+ia*3+2, vj_grad_iz);
            atomicAdd(vj+ja*3+0, vj_grad_jx);
            atomicAdd(vj+ja*3+1, vj_grad_jy);
            atomicAdd(vj+ja*3+2, vj_grad_jz);
            atomicAdd(vj+ka*3+0, vj_grad_kx);
            atomicAdd(vj+ka*3+1, vj_grad_ky);
            atomicAdd(vj+ka*3+2, vj_grad_kz);
            atomicAdd(vj+la*3+0, vj_grad_lx);
            atomicAdd(vj+la*3+1, vj_grad_ly);
            atomicAdd(vj+la*3+2, vj_grad_lz);
        }
        if (vk != NULL) {
            atomicAdd(vk+ia*3+0, vk_grad_ix);
            atomicAdd(vk+ia*3+1, vk_grad_iy);
            atomicAdd(vk+ia*3+2, vk_grad_iz);
            atomicAdd(vk+ja*3+0, vk_grad_jx);
            atomicAdd(vk+ja*3+1, vk_grad_jy);
            atomicAdd(vk+ja*3+2, vk_grad_jz);
            atomicAdd(vk+ka*3+0, vk_grad_kx);
            atomicAdd(vk+ka*3+1, vk_grad_ky);
            atomicAdd(vk+ka*3+2, vk_grad_kz);
            atomicAdd(vk+la*3+0, vk_grad_lx);
            atomicAdd(vk+la*3+1, vk_grad_ly);
            atomicAdd(vk+la*3+2, vk_grad_lz);
        }
    }
}
__global__
void rys_ejk_ip1_2100(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int nbas = envs.nbas;
        int ntasks = _fill_ejk_tasks(shl_quartet_idx, envs, jk, bounds,
                                     batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas_tiles = nbas / TILE;
            int tile_i = tile_ij / nbas_tiles;
            int tile_j = tile_ij % nbas_tiles;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_ejk_ip1_2100(envs, jk, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_ejk_ip1_2110(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int *ao_loc = envs.ao_loc;
    int nbas = envs.nbas;
    int nao = ao_loc[nbas];
    int *bas = envs.bas;
    double *env = envs.env;
    double omega = env[PTR_RANGE_OMEGA];
    double *vj = jk.vj;
    double *vk = jk.vk;
    double *dm = jk.dm;
    extern __shared__ double dm_cache[];
    double *Rpa_cicj = dm_cache + 18 * TILE2;
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env + bas[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env + bas[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    int ij = sq_id / TILE2;
    if (ij < 18) {
        int i = ij % 6;
        int j = ij / 6;
        int sh_ij = sq_id % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        if (jk.n_dm == 1) {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i];
        } else {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i] + dm[(nao+j0+j)*nao+i0+i];
        }
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        if (ish*nbas+jsh == ksh*nbas+lsh) fac_sym *= .5;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        int k0 = ao_loc[ksh];
        int l0 = ao_loc[lsh];
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env + bas[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env + bas[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env + bas[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env + bas[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
        double vj_grad_ix = 0;
        double vj_grad_iy = 0;
        double vj_grad_iz = 0;
        double vj_grad_jx = 0;
        double vj_grad_jy = 0;
        double vj_grad_jz = 0;
        double vj_grad_kx = 0;
        double vj_grad_ky = 0;
        double vj_grad_kz = 0;
        double vj_grad_lx = 0;
        double vj_grad_ly = 0;
        double vj_grad_lz = 0;
        double vk_grad_ix = 0;
        double vk_grad_iy = 0;
        double vk_grad_iz = 0;
        double vk_grad_jx = 0;
        double vk_grad_jy = 0;
        double vk_grad_jz = 0;
        double vk_grad_kx = 0;
        double vk_grad_ky = 0;
        double vk_grad_kz = 0;
        double vk_grad_lx = 0;
        double vk_grad_ly = 0;
        double vk_grad_lz = 0;
        double dm_lk_0_0 = dm[(l0+0)*nao+(k0+0)];
        double dm_lk_0_1 = dm[(l0+0)*nao+(k0+1)];
        double dm_lk_0_2 = dm[(l0+0)*nao+(k0+2)];
        if (jk.n_dm > 1) {
            int nao2 = nao * nao;
            dm_lk_0_0 += dm[nao2+(l0+0)*nao+(k0+0)];
            dm_lk_0_1 += dm[nao2+(l0+0)*nao+(k0+1)];
            dm_lk_0_2 += dm[nao2+(l0+0)*nao+(k0+2)];
        }
        double dm_jk_0_0 = dm[(j0+0)*nao+(k0+0)];
        double dm_jk_0_1 = dm[(j0+0)*nao+(k0+1)];
        double dm_jk_0_2 = dm[(j0+0)*nao+(k0+2)];
        double dm_jk_1_0 = dm[(j0+1)*nao+(k0+0)];
        double dm_jk_1_1 = dm[(j0+1)*nao+(k0+1)];
        double dm_jk_1_2 = dm[(j0+1)*nao+(k0+2)];
        double dm_jk_2_0 = dm[(j0+2)*nao+(k0+0)];
        double dm_jk_2_1 = dm[(j0+2)*nao+(k0+1)];
        double dm_jk_2_2 = dm[(j0+2)*nao+(k0+2)];
        double dm_jl_0_0 = dm[(j0+0)*nao+(l0+0)];
        double dm_jl_1_0 = dm[(j0+1)*nao+(l0+0)];
        double dm_jl_2_0 = dm[(j0+2)*nao+(l0+0)];
        double dm_ik_0_0 = dm[(i0+0)*nao+(k0+0)];
        double dm_ik_0_1 = dm[(i0+0)*nao+(k0+1)];
        double dm_ik_0_2 = dm[(i0+0)*nao+(k0+2)];
        double dm_ik_1_0 = dm[(i0+1)*nao+(k0+0)];
        double dm_ik_1_1 = dm[(i0+1)*nao+(k0+1)];
        double dm_ik_1_2 = dm[(i0+1)*nao+(k0+2)];
        double dm_ik_2_0 = dm[(i0+2)*nao+(k0+0)];
        double dm_ik_2_1 = dm[(i0+2)*nao+(k0+1)];
        double dm_ik_2_2 = dm[(i0+2)*nao+(k0+2)];
        double dm_ik_3_0 = dm[(i0+3)*nao+(k0+0)];
        double dm_ik_3_1 = dm[(i0+3)*nao+(k0+1)];
        double dm_ik_3_2 = dm[(i0+3)*nao+(k0+2)];
        double dm_ik_4_0 = dm[(i0+4)*nao+(k0+0)];
        double dm_ik_4_1 = dm[(i0+4)*nao+(k0+1)];
        double dm_ik_4_2 = dm[(i0+4)*nao+(k0+2)];
        double dm_ik_5_0 = dm[(i0+5)*nao+(k0+0)];
        double dm_ik_5_1 = dm[(i0+5)*nao+(k0+1)];
        double dm_ik_5_2 = dm[(i0+5)*nao+(k0+2)];
        double dm_il_0_0 = dm[(i0+0)*nao+(l0+0)];
        double dm_il_1_0 = dm[(i0+1)*nao+(l0+0)];
        double dm_il_2_0 = dm[(i0+2)*nao+(l0+0)];
        double dm_il_3_0 = dm[(i0+3)*nao+(l0+0)];
        double dm_il_4_0 = dm[(i0+4)*nao+(l0+0)];
        double dm_il_5_0 = dm[(i0+5)*nao+(l0+0)];
        double dd_jk, dd_jl, vj_dd, vk_dd;
        double prod_xy;
        double prod_xz;
        double prod_yz;
        double fxi;
        double fyi;
        double fzi;
        double fxj;
        double fyj;
        double fzj;
        double fxk;
        double fyk;
        double fzk;
        double fxl;
        double fyl;
        double fzl;
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double ak2 = ak * 2;
            double al2 = al * 2;
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double ai2 = ai * 2;
                double aj2 = aj * 2;
                double aij = ai + aj;
                double xjxi = rj[0] - ri[0];
                double yjyi = rj[1] - ri[1];
                double zjzi = rj[2] - ri[2];
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa; // (ai*xi+aj*xj)/aij
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(3, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(3, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 3; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                __syncthreads();
                if (task_id < ntasks) {
                    for (int irys = 0; irys < 3; ++irys) {
                        double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                        double rt = rw[sq_id +  2*irys   *nsq_per_block];
                        double rt_aa = rt / (aij + akl);
                        double rt_akl = rt_aa * aij;
                        double cpx = xqc + xpq*rt_akl;
                        double rt_aij = rt_aa * akl;
                        double c0x = xpa - xpq*rt_aij;
                        double trr_10x = c0x * fac;
                        double b10 = .5/aij * (1 - rt_aij);
                        double trr_20x = c0x * trr_10x + 1*b10 * fac;
                        double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                        double b00 = .5 * rt_aa;
                        double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                        double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                        double hrr_2110x = trr_31x - xjxi * trr_21x;
                        prod_xy = hrr_2110x * 1;
                        prod_xz = hrr_2110x * wt;
                        prod_yz = 1 * wt;
                        double trr_40x = c0x * trr_30x + 3*b10 * trr_20x;
                        double trr_41x = cpx * trr_40x + 4*b00 * trr_30x;
                        double hrr_3110x = trr_41x - xjxi * trr_31x;
                        fxi = ai2 * prod_yz * hrr_3110x;
                        double c0y = ypa - ypq*rt_aij;
                        double trr_10y = c0y * 1;
                        fyi = ai2 * prod_xz * trr_10y;
                        double c0z = zpa - zpq*rt_aij;
                        double trr_10z = c0z * wt;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_2210x = hrr_3110x - xjxi * hrr_2110x;
                        fxj = aj2 * prod_yz * hrr_2210x;
                        double hrr_0100y = trr_10y - yjyi * 1;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0100z = trr_10z - zjzi * wt;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double b01 = .5/akl * (1 - rt_akl);
                        double trr_32x = cpx * trr_31x + 1*b01 * trr_30x + 3*b00 * trr_21x;
                        double trr_11x = cpx * trr_10x + 1*b00 * fac;
                        double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                        double hrr_2120x = trr_32x - xjxi * trr_22x;
                        fxk = ak2 * prod_yz * hrr_2120x;
                        double cpy = yqc + ypq*rt_akl;
                        double trr_01y = cpy * 1;
                        fyk = ak2 * prod_xz * trr_01y;
                        double cpz = zqc + zpq*rt_akl;
                        double trr_01z = cpz * wt;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_3011x = trr_32x - xlxk * trr_31x;
                        double hrr_2011x = trr_22x - xlxk * trr_21x;
                        double hrr_2111x = hrr_3011x - xjxi * hrr_2011x;
                        fxl = al2 * prod_yz * hrr_2111x;
                        double hrr_0001y = trr_01y - ylyk * 1;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0001z = trr_01z - zlzk * wt;
                        fzl = al2 * prod_xy * hrr_0001z;
                        double hrr_1110x = trr_21x - xjxi * trr_11x;
                        fxi -= 2 * prod_yz * hrr_1110x;
                        fxj -= 1 * prod_yz * trr_21x;
                        double hrr_2100x = trr_30x - xjxi * trr_20x;
                        fxk -= 1 * prod_yz * hrr_2100x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1110x * trr_10y;
                        prod_xz = hrr_1110x * wt;
                        prod_yz = trr_10y * wt;
                        fxi = ai2 * prod_yz * hrr_2110x;
                        double trr_20y = c0y * trr_10y + 1*b10 * 1;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1210x = hrr_2110x - xjxi * hrr_1110x;
                        fxj = aj2 * prod_yz * hrr_1210x;
                        double hrr_1100y = trr_20y - yjyi * trr_10y;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double trr_01x = cpx * fac;
                        double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                        double hrr_1120x = trr_22x - xjxi * trr_12x;
                        fxk = ak2 * prod_yz * hrr_1120x;
                        double trr_11y = cpy * trr_10y + 1*b00 * 1;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_1011x = trr_12x - xlxk * trr_11x;
                        double hrr_1111x = hrr_2011x - xjxi * hrr_1011x;
                        fxl = al2 * prod_yz * hrr_1111x;
                        double hrr_1001y = trr_11y - ylyk * trr_10y;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        double hrr_0110x = trr_11x - xjxi * trr_01x;
                        fxi -= 1 * prod_yz * hrr_0110x;
                        fyi -= 1 * prod_xz * 1;
                        fxj -= 1 * prod_yz * trr_11x;
                        double hrr_1100x = trr_20x - xjxi * trr_10x;
                        fxk -= 1 * prod_yz * hrr_1100x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1110x * 1;
                        prod_xz = hrr_1110x * trr_10z;
                        prod_yz = 1 * trr_10z;
                        fxi = ai2 * prod_yz * hrr_2110x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_20z = c0z * trr_10z + 1*b10 * wt;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_1210x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1100z = trr_20z - zjzi * trr_10z;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * hrr_1120x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_11z = cpz * trr_10z + 1*b00 * wt;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_1111x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1001z = trr_11z - zlzk * trr_10z;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fxi -= 1 * prod_yz * hrr_0110x;
                        fzi -= 1 * prod_xy * wt;
                        fxj -= 1 * prod_yz * trr_11x;
                        fxk -= 1 * prod_yz * hrr_1100x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0110x * trr_20y;
                        prod_xz = hrr_0110x * wt;
                        prod_yz = trr_20y * wt;
                        fxi = ai2 * prod_yz * hrr_1110x;
                        double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                        fyi = ai2 * prod_xz * trr_30y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0210x = hrr_1110x - xjxi * hrr_0110x;
                        fxj = aj2 * prod_yz * hrr_0210x;
                        double hrr_2100y = trr_30y - yjyi * trr_20y;
                        fyj = aj2 * prod_xz * hrr_2100y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double trr_02x = cpx * trr_01x + 1*b01 * fac;
                        double hrr_0120x = trr_12x - xjxi * trr_02x;
                        fxk = ak2 * prod_yz * hrr_0120x;
                        double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                        fyk = ak2 * prod_xz * trr_21y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_0011x = trr_02x - xlxk * trr_01x;
                        double hrr_0111x = hrr_1011x - xjxi * hrr_0011x;
                        fxl = al2 * prod_yz * hrr_0111x;
                        double hrr_2001y = trr_21y - ylyk * trr_20y;
                        fyl = al2 * prod_xz * hrr_2001y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 2 * prod_xz * trr_10y;
                        fxj -= 1 * prod_yz * trr_01x;
                        double hrr_0100x = trr_10x - xjxi * fac;
                        fxk -= 1 * prod_yz * hrr_0100x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_3_0;
                            dd_jl = dm_jl_0_0 * dm_ik_3_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0110x * trr_10y;
                        prod_xz = hrr_0110x * trr_10z;
                        prod_yz = trr_10y * trr_10z;
                        fxi = ai2 * prod_yz * hrr_1110x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0210x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * hrr_0120x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0111x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fyi -= 1 * prod_xz * 1;
                        fzi -= 1 * prod_xy * wt;
                        fxj -= 1 * prod_yz * trr_01x;
                        fxk -= 1 * prod_yz * hrr_0100x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_4_0;
                            dd_jl = dm_jl_0_0 * dm_ik_4_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0110x * 1;
                        prod_xz = hrr_0110x * trr_20z;
                        prod_yz = 1 * trr_20z;
                        fxi = ai2 * prod_yz * hrr_1110x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                        fzi = ai2 * prod_xy * trr_30z;
                        fxj = aj2 * prod_yz * hrr_0210x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_2100z = trr_30z - zjzi * trr_20z;
                        fzj = aj2 * prod_xy * hrr_2100z;
                        fxk = ak2 * prod_yz * hrr_0120x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                        fzk = ak2 * prod_xy * trr_21z;
                        fxl = al2 * prod_yz * hrr_0111x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_2001z = trr_21z - zlzk * trr_20z;
                        fzl = al2 * prod_xy * hrr_2001z;
                        fzi -= 2 * prod_xy * trr_10z;
                        fxj -= 1 * prod_yz * trr_01x;
                        fxk -= 1 * prod_yz * hrr_0100x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_5_0;
                            dd_jl = dm_jl_0_0 * dm_ik_5_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_21x * hrr_0100y;
                        prod_xz = trr_21x * wt;
                        prod_yz = hrr_0100y * wt;
                        fxi = ai2 * prod_yz * trr_31x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_2110x;
                        double hrr_0200y = hrr_1100y - yjyi * hrr_0100y;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_22x;
                        double hrr_0110y = trr_11y - yjyi * trr_01y;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_2011x;
                        double hrr_0101y = hrr_1001y - yjyi * hrr_0001y;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 2 * prod_yz * trr_11x;
                        fyj -= 1 * prod_xz * 1;
                        fxk -= 1 * prod_yz * trr_20x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_0_0;
                            dd_jl = dm_jl_1_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[6*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_11x * hrr_1100y;
                        prod_xz = trr_11x * wt;
                        prod_yz = hrr_1100y * wt;
                        fxi = ai2 * prod_yz * trr_21x;
                        fyi = ai2 * prod_xz * hrr_2100y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_1110x;
                        double hrr_1200y = hrr_2100y - yjyi * hrr_1100y;
                        fyj = aj2 * prod_xz * hrr_1200y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_12x;
                        double hrr_1110y = trr_21y - yjyi * trr_11y;
                        fyk = ak2 * prod_xz * hrr_1110y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_1011x;
                        double hrr_1101y = hrr_2001y - yjyi * hrr_1001y;
                        fyl = al2 * prod_xz * hrr_1101y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * trr_01x;
                        fyi -= 1 * prod_xz * hrr_0100y;
                        fyj -= 1 * prod_xz * trr_10y;
                        fxk -= 1 * prod_yz * trr_10x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_1_0;
                            dd_jl = dm_jl_1_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[7*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_11x * hrr_0100y;
                        prod_xz = trr_11x * trr_10z;
                        prod_yz = hrr_0100y * trr_10z;
                        fxi = ai2 * prod_yz * trr_21x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_1110x;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_12x;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_1011x;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fxi -= 1 * prod_yz * trr_01x;
                        fzi -= 1 * prod_xy * wt;
                        fyj -= 1 * prod_xz * 1;
                        fxk -= 1 * prod_yz * trr_10x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_2_0;
                            dd_jl = dm_jl_1_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[8*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * hrr_2100y;
                        prod_xz = trr_01x * wt;
                        prod_yz = hrr_2100y * wt;
                        fxi = ai2 * prod_yz * trr_11x;
                        double trr_40y = c0y * trr_30y + 3*b10 * trr_20y;
                        double hrr_3100y = trr_40y - yjyi * trr_30y;
                        fyi = ai2 * prod_xz * hrr_3100y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        double hrr_2200y = hrr_3100y - yjyi * hrr_2100y;
                        fyj = aj2 * prod_xz * hrr_2200y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_02x;
                        double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                        double hrr_2110y = trr_31y - yjyi * trr_21y;
                        fyk = ak2 * prod_xz * hrr_2110y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        double hrr_3001y = trr_31y - ylyk * trr_30y;
                        double hrr_2101y = hrr_3001y - yjyi * hrr_2001y;
                        fyl = al2 * prod_xz * hrr_2101y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 2 * prod_xz * hrr_1100y;
                        fyj -= 1 * prod_xz * trr_20y;
                        fxk -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_3_0;
                            dd_jl = dm_jl_1_0 * dm_ik_3_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[9*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * hrr_1100y;
                        prod_xz = trr_01x * trr_10z;
                        prod_yz = hrr_1100y * trr_10z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * hrr_2100y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_1200y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * hrr_1110y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_1101y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fyi -= 1 * prod_xz * hrr_0100y;
                        fzi -= 1 * prod_xy * wt;
                        fyj -= 1 * prod_xz * trr_10y;
                        fxk -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_4_0;
                            dd_jl = dm_jl_1_0 * dm_ik_4_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[10*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * hrr_0100y;
                        prod_xz = trr_01x * trr_20z;
                        prod_yz = hrr_0100y * trr_20z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * trr_30z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_2100z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * trr_21z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_2001z;
                        fzi -= 2 * prod_xy * trr_10z;
                        fyj -= 1 * prod_xz * 1;
                        fxk -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_5_0;
                            dd_jl = dm_jl_1_0 * dm_ik_5_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[11*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_21x * 1;
                        prod_xz = trr_21x * hrr_0100z;
                        prod_yz = 1 * hrr_0100z;
                        fxi = ai2 * prod_yz * trr_31x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_2110x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0200z = hrr_1100z - zjzi * hrr_0100z;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * trr_22x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double hrr_0110z = trr_11z - zjzi * trr_01z;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_2011x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0101z = hrr_1001z - zjzi * hrr_0001z;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fxi -= 2 * prod_yz * trr_11x;
                        fzj -= 1 * prod_xy * wt;
                        fxk -= 1 * prod_yz * trr_20x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_0_0;
                            dd_jl = dm_jl_2_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[12*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_11x * trr_10y;
                        prod_xz = trr_11x * hrr_0100z;
                        prod_yz = trr_10y * hrr_0100z;
                        fxi = ai2 * prod_yz * trr_21x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_1110x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * trr_12x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_1011x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fxi -= 1 * prod_yz * trr_01x;
                        fyi -= 1 * prod_xz * 1;
                        fzj -= 1 * prod_xy * wt;
                        fxk -= 1 * prod_yz * trr_10x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_1_0;
                            dd_jl = dm_jl_2_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[13*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_11x * 1;
                        prod_xz = trr_11x * hrr_1100z;
                        prod_yz = 1 * hrr_1100z;
                        fxi = ai2 * prod_yz * trr_21x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_2100z;
                        fxj = aj2 * prod_yz * hrr_1110x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1200z = hrr_2100z - zjzi * hrr_1100z;
                        fzj = aj2 * prod_xy * hrr_1200z;
                        fxk = ak2 * prod_yz * trr_12x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double hrr_1110z = trr_21z - zjzi * trr_11z;
                        fzk = ak2 * prod_xy * hrr_1110z;
                        fxl = al2 * prod_yz * hrr_1011x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1101z = hrr_2001z - zjzi * hrr_1001z;
                        fzl = al2 * prod_xy * hrr_1101z;
                        fxi -= 1 * prod_yz * trr_01x;
                        fzi -= 1 * prod_xy * hrr_0100z;
                        fzj -= 1 * prod_xy * trr_10z;
                        fxk -= 1 * prod_yz * trr_10x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_2_0;
                            dd_jl = dm_jl_2_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[14*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * trr_20y;
                        prod_xz = trr_01x * hrr_0100z;
                        prod_yz = trr_20y * hrr_0100z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * trr_30y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_2100y;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * trr_21y;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_2001y;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fyi -= 2 * prod_xz * trr_10y;
                        fzj -= 1 * prod_xy * wt;
                        fxk -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_3_0;
                            dd_jl = dm_jl_2_0 * dm_ik_3_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[15*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * trr_10y;
                        prod_xz = trr_01x * hrr_1100z;
                        prod_yz = trr_10y * hrr_1100z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * hrr_2100z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_1200z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * hrr_1110z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_1101z;
                        fyi -= 1 * prod_xz * 1;
                        fzi -= 1 * prod_xy * hrr_0100z;
                        fzj -= 1 * prod_xy * trr_10z;
                        fxk -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_4_0;
                            dd_jl = dm_jl_2_0 * dm_ik_4_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[16*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_01x * 1;
                        prod_xz = trr_01x * hrr_2100z;
                        prod_yz = 1 * hrr_2100z;
                        fxi = ai2 * prod_yz * trr_11x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_40z = c0z * trr_30z + 3*b10 * trr_20z;
                        double hrr_3100z = trr_40z - zjzi * trr_30z;
                        fzi = ai2 * prod_xy * hrr_3100z;
                        fxj = aj2 * prod_yz * hrr_0110x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_2200z = hrr_3100z - zjzi * hrr_2100z;
                        fzj = aj2 * prod_xy * hrr_2200z;
                        fxk = ak2 * prod_yz * trr_02x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                        double hrr_2110z = trr_31z - zjzi * trr_21z;
                        fzk = ak2 * prod_xy * hrr_2110z;
                        fxl = al2 * prod_yz * hrr_0011x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_3001z = trr_31z - zlzk * trr_30z;
                        double hrr_2101z = hrr_3001z - zjzi * hrr_2001z;
                        fzl = al2 * prod_xy * hrr_2101z;
                        fzi -= 2 * prod_xy * hrr_1100z;
                        fzj -= 1 * prod_xy * trr_20z;
                        fxk -= 1 * prod_yz * fac;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_5_0;
                            dd_jl = dm_jl_2_0 * dm_ik_5_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[17*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_2100x * trr_01y;
                        prod_xz = hrr_2100x * wt;
                        prod_yz = trr_01y * wt;
                        double hrr_3100x = trr_40x - xjxi * trr_30x;
                        fxi = ai2 * prod_yz * hrr_3100x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_2200x = hrr_3100x - xjxi * hrr_2100x;
                        fxj = aj2 * prod_yz * hrr_2200x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * hrr_2110x;
                        double trr_02y = cpy * trr_01y + 1*b01 * 1;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_3001x = trr_31x - xlxk * trr_30x;
                        double hrr_2001x = trr_21x - xlxk * trr_20x;
                        double hrr_2101x = hrr_3001x - xjxi * hrr_2001x;
                        fxl = al2 * prod_yz * hrr_2101x;
                        double hrr_0011y = trr_02y - ylyk * trr_01y;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 2 * prod_yz * hrr_1100x;
                        fxj -= 1 * prod_yz * trr_20x;
                        fyk -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1100x * trr_11y;
                        prod_xz = hrr_1100x * wt;
                        prod_yz = trr_11y * wt;
                        fxi = ai2 * prod_yz * hrr_2100x;
                        fyi = ai2 * prod_xz * trr_21y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1200x = hrr_2100x - xjxi * hrr_1100x;
                        fxj = aj2 * prod_yz * hrr_1200x;
                        fyj = aj2 * prod_xz * hrr_1110y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * hrr_1110x;
                        double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                        fyk = ak2 * prod_xz * trr_12y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_1001x = trr_11x - xlxk * trr_10x;
                        double hrr_1101x = hrr_2001x - xjxi * hrr_1001x;
                        fxl = al2 * prod_yz * hrr_1101x;
                        double hrr_1011y = trr_12y - ylyk * trr_11y;
                        fyl = al2 * prod_xz * hrr_1011y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * hrr_0100x;
                        fyi -= 1 * prod_xz * trr_01y;
                        fxj -= 1 * prod_yz * trr_10x;
                        fyk -= 1 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1100x * trr_01y;
                        prod_xz = hrr_1100x * trr_10z;
                        prod_yz = trr_01y * trr_10z;
                        fxi = ai2 * prod_yz * hrr_2100x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_1200x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * hrr_1110x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_1101x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fxi -= 1 * prod_yz * hrr_0100x;
                        fzi -= 1 * prod_xy * wt;
                        fxj -= 1 * prod_yz * trr_10x;
                        fyk -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * trr_21y;
                        prod_xz = hrr_0100x * wt;
                        prod_yz = trr_21y * wt;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        fyi = ai2 * prod_xz * trr_31y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0200x = hrr_1100x - xjxi * hrr_0100x;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        fyj = aj2 * prod_xz * hrr_2110y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                        fyk = ak2 * prod_xz * trr_22y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_0001x = trr_01x - xlxk * fac;
                        double hrr_0101x = hrr_1001x - xjxi * hrr_0001x;
                        fxl = al2 * prod_yz * hrr_0101x;
                        double hrr_2011y = trr_22y - ylyk * trr_21y;
                        fyl = al2 * prod_xz * hrr_2011y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 2 * prod_xz * trr_11y;
                        fxj -= 1 * prod_yz * fac;
                        fyk -= 1 * prod_xz * trr_20y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_3_0;
                            dd_jl = dm_jl_0_0 * dm_ik_3_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * trr_11y;
                        prod_xz = hrr_0100x * trr_10z;
                        prod_yz = trr_11y * trr_10z;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        fyi = ai2 * prod_xz * trr_21y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        fyj = aj2 * prod_xz * hrr_1110y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        fyk = ak2 * prod_xz * trr_12y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0101x;
                        fyl = al2 * prod_xz * hrr_1011y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fyi -= 1 * prod_xz * trr_01y;
                        fzi -= 1 * prod_xy * wt;
                        fxj -= 1 * prod_yz * fac;
                        fyk -= 1 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_4_0;
                            dd_jl = dm_jl_0_0 * dm_ik_4_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * trr_01y;
                        prod_xz = hrr_0100x * trr_20z;
                        prod_yz = trr_01y * trr_20z;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * trr_30z;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_2100z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * trr_21z;
                        fxl = al2 * prod_yz * hrr_0101x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_2001z;
                        fzi -= 2 * prod_xy * trr_10z;
                        fxj -= 1 * prod_yz * fac;
                        fyk -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_1 * dm_il_5_0;
                            dd_jl = dm_jl_0_0 * dm_ik_5_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+1] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_20x * hrr_0110y;
                        prod_xz = trr_20x * wt;
                        prod_yz = hrr_0110y * wt;
                        fxi = ai2 * prod_yz * trr_30x;
                        fyi = ai2 * prod_xz * hrr_1110y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_2100x;
                        double hrr_0210y = hrr_1110y - yjyi * hrr_0110y;
                        fyj = aj2 * prod_xz * hrr_0210y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_21x;
                        double hrr_0120y = trr_12y - yjyi * trr_02y;
                        fyk = ak2 * prod_xz * hrr_0120y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_2001x;
                        double hrr_0111y = hrr_1011y - yjyi * hrr_0011y;
                        fyl = al2 * prod_xz * hrr_0111y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 2 * prod_yz * trr_10x;
                        fyj -= 1 * prod_xz * trr_01y;
                        fyk -= 1 * prod_xz * hrr_0100y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_1 * dm_il_0_0;
                            dd_jl = dm_jl_1_0 * dm_ik_0_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+1] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[6*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * hrr_1110y;
                        prod_xz = trr_10x * wt;
                        prod_yz = hrr_1110y * wt;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * hrr_2110y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        double hrr_1210y = hrr_2110y - yjyi * hrr_1110y;
                        fyj = aj2 * prod_xz * hrr_1210y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_11x;
                        double hrr_1120y = trr_22y - yjyi * trr_12y;
                        fyk = ak2 * prod_xz * hrr_1120y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        double hrr_1111y = hrr_2011y - yjyi * hrr_1011y;
                        fyl = al2 * prod_xz * hrr_1111y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * fac;
                        fyi -= 1 * prod_xz * hrr_0110y;
                        fyj -= 1 * prod_xz * trr_11y;
                        fyk -= 1 * prod_xz * hrr_1100y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_1 * dm_il_1_0;
                            dd_jl = dm_jl_1_0 * dm_ik_1_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+1] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[7*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * hrr_0110y;
                        prod_xz = trr_10x * trr_10z;
                        prod_yz = hrr_0110y * trr_10z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * hrr_1110y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0210y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * hrr_0120y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0111y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fxi -= 1 * prod_yz * fac;
                        fzi -= 1 * prod_xy * wt;
                        fyj -= 1 * prod_xz * trr_01y;
                        fyk -= 1 * prod_xz * hrr_0100y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_1 * dm_il_2_0;
                            dd_jl = dm_jl_1_0 * dm_ik_2_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+1] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[8*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_2110y;
                        prod_xz = fac * wt;
                        prod_yz = hrr_2110y * wt;
                        fxi = ai2 * prod_yz * trr_10x;
                        double trr_41y = cpy * trr_40y + 4*b00 * trr_30y;
                        double hrr_3110y = trr_41y - yjyi * trr_31y;
                        fyi = ai2 * prod_xz * hrr_3110y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        double hrr_2210y = hrr_3110y - yjyi * hrr_2110y;
                        fyj = aj2 * prod_xz * hrr_2210y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        double trr_32y = cpy * trr_31y + 1*b01 * trr_30y + 3*b00 * trr_21y;
                        double hrr_2120y = trr_32y - yjyi * trr_22y;
                        fyk = ak2 * prod_xz * hrr_2120y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        double hrr_3011y = trr_32y - ylyk * trr_31y;
                        double hrr_2111y = hrr_3011y - yjyi * hrr_2011y;
                        fyl = al2 * prod_xz * hrr_2111y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 2 * prod_xz * hrr_1110y;
                        fyj -= 1 * prod_xz * trr_21y;
                        fyk -= 1 * prod_xz * hrr_2100y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_1 * dm_il_3_0;
                            dd_jl = dm_jl_1_0 * dm_ik_3_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+1] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[9*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_1110y;
                        prod_xz = fac * trr_10z;
                        prod_yz = hrr_1110y * trr_10z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_2110y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1210y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_1120y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1111y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fyi -= 1 * prod_xz * hrr_0110y;
                        fzi -= 1 * prod_xy * wt;
                        fyj -= 1 * prod_xz * trr_11y;
                        fyk -= 1 * prod_xz * hrr_1100y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_1 * dm_il_4_0;
                            dd_jl = dm_jl_1_0 * dm_ik_4_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+1] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[10*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_0110y;
                        prod_xz = fac * trr_20z;
                        prod_yz = hrr_0110y * trr_20z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_1110y;
                        fzi = ai2 * prod_xy * trr_30z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0210y;
                        fzj = aj2 * prod_xy * hrr_2100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_0120y;
                        fzk = ak2 * prod_xy * trr_21z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0111y;
                        fzl = al2 * prod_xy * hrr_2001z;
                        fzi -= 2 * prod_xy * trr_10z;
                        fyj -= 1 * prod_xz * trr_01y;
                        fyk -= 1 * prod_xz * hrr_0100y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_1 * dm_il_5_0;
                            dd_jl = dm_jl_1_0 * dm_ik_5_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+1] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[11*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_20x * trr_01y;
                        prod_xz = trr_20x * hrr_0100z;
                        prod_yz = trr_01y * hrr_0100z;
                        fxi = ai2 * prod_yz * trr_30x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_2100x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * trr_21x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_2001x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fxi -= 2 * prod_yz * trr_10x;
                        fzj -= 1 * prod_xy * wt;
                        fyk -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_1 * dm_il_0_0;
                            dd_jl = dm_jl_2_0 * dm_ik_0_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+1] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[12*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * trr_11y;
                        prod_xz = trr_10x * hrr_0100z;
                        prod_yz = trr_11y * hrr_0100z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_21y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_1110y;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_12y;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_1011y;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fxi -= 1 * prod_yz * fac;
                        fyi -= 1 * prod_xz * trr_01y;
                        fzj -= 1 * prod_xy * wt;
                        fyk -= 1 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_1 * dm_il_1_0;
                            dd_jl = dm_jl_2_0 * dm_ik_1_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+1] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[13*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * trr_01y;
                        prod_xz = trr_10x * hrr_1100z;
                        prod_yz = trr_01y * hrr_1100z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * hrr_2100z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_1200z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * hrr_1110z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_1101z;
                        fxi -= 1 * prod_yz * fac;
                        fzi -= 1 * prod_xy * hrr_0100z;
                        fzj -= 1 * prod_xy * trr_10z;
                        fyk -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_1 * dm_il_2_0;
                            dd_jl = dm_jl_2_0 * dm_ik_2_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+1] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[14*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_21y;
                        prod_xz = fac * hrr_0100z;
                        prod_yz = trr_21y * hrr_0100z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_31y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_2110y;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_22y;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_2011y;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fyi -= 2 * prod_xz * trr_11y;
                        fzj -= 1 * prod_xy * wt;
                        fyk -= 1 * prod_xz * trr_20y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_1 * dm_il_3_0;
                            dd_jl = dm_jl_2_0 * dm_ik_3_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+1] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[15*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_11y;
                        prod_xz = fac * hrr_1100z;
                        prod_yz = trr_11y * hrr_1100z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_21y;
                        fzi = ai2 * prod_xy * hrr_2100z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1110y;
                        fzj = aj2 * prod_xy * hrr_1200z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_12y;
                        fzk = ak2 * prod_xy * hrr_1110z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1011y;
                        fzl = al2 * prod_xy * hrr_1101z;
                        fyi -= 1 * prod_xz * trr_01y;
                        fzi -= 1 * prod_xy * hrr_0100z;
                        fzj -= 1 * prod_xy * trr_10z;
                        fyk -= 1 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_1 * dm_il_4_0;
                            dd_jl = dm_jl_2_0 * dm_ik_4_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+1] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[16*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_01y;
                        prod_xz = fac * hrr_2100z;
                        prod_yz = trr_01y * hrr_2100z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_11y;
                        fzi = ai2 * prod_xy * hrr_3100z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0110y;
                        fzj = aj2 * prod_xy * hrr_2200z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_02y;
                        fzk = ak2 * prod_xy * hrr_2110z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0011y;
                        fzl = al2 * prod_xy * hrr_2101z;
                        fzi -= 2 * prod_xy * hrr_1100z;
                        fzj -= 1 * prod_xy * trr_20z;
                        fyk -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_1 * dm_il_5_0;
                            dd_jl = dm_jl_2_0 * dm_ik_5_1;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+1] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+1];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[17*TILE2+sh_ij] * dm_lk_0_1;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_2100x * 1;
                        prod_xz = hrr_2100x * trr_01z;
                        prod_yz = 1 * trr_01z;
                        fxi = ai2 * prod_yz * hrr_3100x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_2200x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * hrr_2110x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_02z = cpz * trr_01z + 1*b01 * wt;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_2101x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0011z = trr_02z - zlzk * trr_01z;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fxi -= 2 * prod_yz * hrr_1100x;
                        fxj -= 1 * prod_yz * trr_20x;
                        fzk -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1100x * trr_10y;
                        prod_xz = hrr_1100x * trr_01z;
                        prod_yz = trr_10y * trr_01z;
                        fxi = ai2 * prod_yz * hrr_2100x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_1200x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * hrr_1110x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_1101x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fxi -= 1 * prod_yz * hrr_0100x;
                        fyi -= 1 * prod_xz * 1;
                        fxj -= 1 * prod_yz * trr_10x;
                        fzk -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1100x * 1;
                        prod_xz = hrr_1100x * trr_11z;
                        prod_yz = 1 * trr_11z;
                        fxi = ai2 * prod_yz * hrr_2100x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * trr_21z;
                        fxj = aj2 * prod_yz * hrr_1200x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        fzj = aj2 * prod_xy * hrr_1110z;
                        fxk = ak2 * prod_yz * hrr_1110x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                        fzk = ak2 * prod_xy * trr_12z;
                        fxl = al2 * prod_yz * hrr_1101x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1011z = trr_12z - zlzk * trr_11z;
                        fzl = al2 * prod_xy * hrr_1011z;
                        fxi -= 1 * prod_yz * hrr_0100x;
                        fzi -= 1 * prod_xy * trr_01z;
                        fxj -= 1 * prod_yz * trr_10x;
                        fzk -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * trr_20y;
                        prod_xz = hrr_0100x * trr_01z;
                        prod_yz = trr_20y * trr_01z;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        fyi = ai2 * prod_xz * trr_30y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        fyj = aj2 * prod_xz * hrr_2100y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        fyk = ak2 * prod_xz * trr_21y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_0101x;
                        fyl = al2 * prod_xz * hrr_2001y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fyi -= 2 * prod_xz * trr_10y;
                        fxj -= 1 * prod_yz * fac;
                        fzk -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_3_0;
                            dd_jl = dm_jl_0_0 * dm_ik_3_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * trr_10y;
                        prod_xz = hrr_0100x * trr_11z;
                        prod_yz = trr_10y * trr_11z;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_21z;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_1110z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_12z;
                        fxl = al2 * prod_yz * hrr_0101x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_1011z;
                        fyi -= 1 * prod_xz * 1;
                        fzi -= 1 * prod_xy * trr_01z;
                        fxj -= 1 * prod_yz * fac;
                        fzk -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_4_0;
                            dd_jl = dm_jl_0_0 * dm_ik_4_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * 1;
                        prod_xz = hrr_0100x * trr_21z;
                        prod_yz = 1 * trr_21z;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * trr_31z;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        fzj = aj2 * prod_xy * hrr_2110z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                        fzk = ak2 * prod_xy * trr_22z;
                        fxl = al2 * prod_yz * hrr_0101x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_2011z = trr_22z - zlzk * trr_21z;
                        fzl = al2 * prod_xy * hrr_2011z;
                        fzi -= 2 * prod_xy * trr_11z;
                        fxj -= 1 * prod_yz * fac;
                        fzk -= 1 * prod_xy * trr_20z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_2 * dm_il_5_0;
                            dd_jl = dm_jl_0_0 * dm_ik_5_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+2] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_20x * hrr_0100y;
                        prod_xz = trr_20x * trr_01z;
                        prod_yz = hrr_0100y * trr_01z;
                        fxi = ai2 * prod_yz * trr_30x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_2100x;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * trr_21x;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_2001x;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fxi -= 2 * prod_yz * trr_10x;
                        fyj -= 1 * prod_xz * 1;
                        fzk -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_2 * dm_il_0_0;
                            dd_jl = dm_jl_1_0 * dm_ik_0_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+2] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[6*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * hrr_1100y;
                        prod_xz = trr_10x * trr_01z;
                        prod_yz = hrr_1100y * trr_01z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * hrr_2100y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_1200y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * hrr_1110y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_1101y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fxi -= 1 * prod_yz * fac;
                        fyi -= 1 * prod_xz * hrr_0100y;
                        fyj -= 1 * prod_xz * trr_10y;
                        fzk -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_2 * dm_il_1_0;
                            dd_jl = dm_jl_1_0 * dm_ik_1_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+2] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[7*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * hrr_0100y;
                        prod_xz = trr_10x * trr_11z;
                        prod_yz = hrr_0100y * trr_11z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * trr_21z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_1110z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * trr_12z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_1011z;
                        fxi -= 1 * prod_yz * fac;
                        fzi -= 1 * prod_xy * trr_01z;
                        fyj -= 1 * prod_xz * 1;
                        fzk -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_2 * dm_il_2_0;
                            dd_jl = dm_jl_1_0 * dm_ik_2_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+2] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[8*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_2100y;
                        prod_xz = fac * trr_01z;
                        prod_yz = hrr_2100y * trr_01z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_3100y;
                        fzi = ai2 * prod_xy * trr_11z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_2200y;
                        fzj = aj2 * prod_xy * hrr_0110z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_2110y;
                        fzk = ak2 * prod_xy * trr_02z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_2101y;
                        fzl = al2 * prod_xy * hrr_0011z;
                        fyi -= 2 * prod_xz * hrr_1100y;
                        fyj -= 1 * prod_xz * trr_20y;
                        fzk -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_2 * dm_il_3_0;
                            dd_jl = dm_jl_1_0 * dm_ik_3_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+2] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[9*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_1100y;
                        prod_xz = fac * trr_11z;
                        prod_yz = hrr_1100y * trr_11z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_2100y;
                        fzi = ai2 * prod_xy * trr_21z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1200y;
                        fzj = aj2 * prod_xy * hrr_1110z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_1110y;
                        fzk = ak2 * prod_xy * trr_12z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1101y;
                        fzl = al2 * prod_xy * hrr_1011z;
                        fyi -= 1 * prod_xz * hrr_0100y;
                        fzi -= 1 * prod_xy * trr_01z;
                        fyj -= 1 * prod_xz * trr_10y;
                        fzk -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_2 * dm_il_4_0;
                            dd_jl = dm_jl_1_0 * dm_ik_4_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+2] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[10*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_0100y;
                        prod_xz = fac * trr_21z;
                        prod_yz = hrr_0100y * trr_21z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * trr_31z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_2110z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * trr_22z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_2011z;
                        fzi -= 2 * prod_xy * trr_11z;
                        fyj -= 1 * prod_xz * 1;
                        fzk -= 1 * prod_xy * trr_20z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_2 * dm_il_5_0;
                            dd_jl = dm_jl_1_0 * dm_ik_5_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+2] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[11*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_20x * 1;
                        prod_xz = trr_20x * hrr_0110z;
                        prod_yz = 1 * hrr_0110z;
                        fxi = ai2 * prod_yz * trr_30x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_1110z;
                        fxj = aj2 * prod_yz * hrr_2100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0210z = hrr_1110z - zjzi * hrr_0110z;
                        fzj = aj2 * prod_xy * hrr_0210z;
                        fxk = ak2 * prod_yz * trr_21x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double hrr_0120z = trr_12z - zjzi * trr_02z;
                        fzk = ak2 * prod_xy * hrr_0120z;
                        fxl = al2 * prod_yz * hrr_2001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0111z = hrr_1011z - zjzi * hrr_0011z;
                        fzl = al2 * prod_xy * hrr_0111z;
                        fxi -= 2 * prod_yz * trr_10x;
                        fzj -= 1 * prod_xy * trr_01z;
                        fzk -= 1 * prod_xy * hrr_0100z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_2 * dm_il_0_0;
                            dd_jl = dm_jl_2_0 * dm_ik_0_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+2] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[12*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * trr_10y;
                        prod_xz = trr_10x * hrr_0110z;
                        prod_yz = trr_10y * hrr_0110z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * hrr_1110z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0210z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * hrr_0120z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0111z;
                        fxi -= 1 * prod_yz * fac;
                        fyi -= 1 * prod_xz * 1;
                        fzj -= 1 * prod_xy * trr_01z;
                        fzk -= 1 * prod_xy * hrr_0100z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_2 * dm_il_1_0;
                            dd_jl = dm_jl_2_0 * dm_ik_1_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+2] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[13*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * 1;
                        prod_xz = trr_10x * hrr_1110z;
                        prod_yz = 1 * hrr_1110z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_2110z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1210z = hrr_2110z - zjzi * hrr_1110z;
                        fzj = aj2 * prod_xy * hrr_1210z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double hrr_1120z = trr_22z - zjzi * trr_12z;
                        fzk = ak2 * prod_xy * hrr_1120z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1111z = hrr_2011z - zjzi * hrr_1011z;
                        fzl = al2 * prod_xy * hrr_1111z;
                        fxi -= 1 * prod_yz * fac;
                        fzi -= 1 * prod_xy * hrr_0110z;
                        fzj -= 1 * prod_xy * trr_11z;
                        fzk -= 1 * prod_xy * hrr_1100z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_2 * dm_il_2_0;
                            dd_jl = dm_jl_2_0 * dm_ik_2_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+2] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[14*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_20y;
                        prod_xz = fac * hrr_0110z;
                        prod_yz = trr_20y * hrr_0110z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_30y;
                        fzi = ai2 * prod_xy * hrr_1110z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_2100y;
                        fzj = aj2 * prod_xy * hrr_0210z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_21y;
                        fzk = ak2 * prod_xy * hrr_0120z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_2001y;
                        fzl = al2 * prod_xy * hrr_0111z;
                        fyi -= 2 * prod_xz * trr_10y;
                        fzj -= 1 * prod_xy * trr_01z;
                        fzk -= 1 * prod_xy * hrr_0100z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_2 * dm_il_3_0;
                            dd_jl = dm_jl_2_0 * dm_ik_3_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+2] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[15*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_10y;
                        prod_xz = fac * hrr_1110z;
                        prod_yz = trr_10y * hrr_1110z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * hrr_2110z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_1210z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * hrr_1120z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_1111z;
                        fyi -= 1 * prod_xz * 1;
                        fzi -= 1 * prod_xy * hrr_0110z;
                        fzj -= 1 * prod_xy * trr_11z;
                        fzk -= 1 * prod_xy * hrr_1100z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_2 * dm_il_4_0;
                            dd_jl = dm_jl_2_0 * dm_ik_4_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+2] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[16*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * 1;
                        prod_xz = fac * hrr_2110z;
                        prod_yz = 1 * hrr_2110z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_41z = cpz * trr_40z + 4*b00 * trr_30z;
                        double hrr_3110z = trr_41z - zjzi * trr_31z;
                        fzi = ai2 * prod_xy * hrr_3110z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_2210z = hrr_3110z - zjzi * hrr_2110z;
                        fzj = aj2 * prod_xy * hrr_2210z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_32z = cpz * trr_31z + 1*b01 * trr_30z + 3*b00 * trr_21z;
                        double hrr_2120z = trr_32z - zjzi * trr_22z;
                        fzk = ak2 * prod_xy * hrr_2120z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_3011z = trr_32z - zlzk * trr_31z;
                        double hrr_2111z = hrr_3011z - zjzi * hrr_2011z;
                        fzl = al2 * prod_xy * hrr_2111z;
                        fzi -= 2 * prod_xy * hrr_1110z;
                        fzj -= 1 * prod_xy * trr_21z;
                        fzk -= 1 * prod_xy * hrr_2100z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_2 * dm_il_5_0;
                            dd_jl = dm_jl_2_0 * dm_ik_5_2;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+2] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+2];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[17*TILE2+sh_ij] * dm_lk_0_2;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                    }
                }
            }
        }
        int ia = bas[ish*BAS_SLOTS+ATOM_OF];
        int ja = bas[jsh*BAS_SLOTS+ATOM_OF];
        int ka = bas[ksh*BAS_SLOTS+ATOM_OF];
        int la = bas[lsh*BAS_SLOTS+ATOM_OF];
        if (vj != NULL) {
            atomicAdd(vj+ia*3+0, vj_grad_ix);
            atomicAdd(vj+ia*3+1, vj_grad_iy);
            atomicAdd(vj+ia*3+2, vj_grad_iz);
            atomicAdd(vj+ja*3+0, vj_grad_jx);
            atomicAdd(vj+ja*3+1, vj_grad_jy);
            atomicAdd(vj+ja*3+2, vj_grad_jz);
            atomicAdd(vj+ka*3+0, vj_grad_kx);
            atomicAdd(vj+ka*3+1, vj_grad_ky);
            atomicAdd(vj+ka*3+2, vj_grad_kz);
            atomicAdd(vj+la*3+0, vj_grad_lx);
            atomicAdd(vj+la*3+1, vj_grad_ly);
            atomicAdd(vj+la*3+2, vj_grad_lz);
        }
        if (vk != NULL) {
            atomicAdd(vk+ia*3+0, vk_grad_ix);
            atomicAdd(vk+ia*3+1, vk_grad_iy);
            atomicAdd(vk+ia*3+2, vk_grad_iz);
            atomicAdd(vk+ja*3+0, vk_grad_jx);
            atomicAdd(vk+ja*3+1, vk_grad_jy);
            atomicAdd(vk+ja*3+2, vk_grad_jz);
            atomicAdd(vk+ka*3+0, vk_grad_kx);
            atomicAdd(vk+ka*3+1, vk_grad_ky);
            atomicAdd(vk+ka*3+2, vk_grad_kz);
            atomicAdd(vk+la*3+0, vk_grad_lx);
            atomicAdd(vk+la*3+1, vk_grad_ly);
            atomicAdd(vk+la*3+2, vk_grad_lz);
        }
    }
}
__global__
void rys_ejk_ip1_2110(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int nbas = envs.nbas;
        int ntasks = _fill_ejk_tasks(shl_quartet_idx, envs, jk, bounds,
                                     batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas_tiles = nbas / TILE;
            int tile_i = tile_ij / nbas_tiles;
            int tile_j = tile_ij % nbas_tiles;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_ejk_ip1_2110(envs, jk, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_ejk_ip1_2200(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int *ao_loc = envs.ao_loc;
    int nbas = envs.nbas;
    int nao = ao_loc[nbas];
    int *bas = envs.bas;
    double *env = envs.env;
    double omega = env[PTR_RANGE_OMEGA];
    double *vj = jk.vj;
    double *vk = jk.vk;
    double *dm = jk.dm;
    extern __shared__ double dm_cache[];
    double *Rpa_cicj = dm_cache + 36 * TILE2;
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env + bas[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env + bas[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    int ij = sq_id / TILE2;
    if (ij < 36) {
        int i = ij % 6;
        int j = ij / 6;
        int sh_ij = sq_id % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        if (jk.n_dm == 1) {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i];
        } else {
            dm_cache[sh_ij+ij*TILE2] = dm[(j0+j)*nao+i0+i] + dm[(nao+j0+j)*nao+i0+i];
        }
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        if (ish*nbas+jsh == ksh*nbas+lsh) fac_sym *= .5;
        int i0 = ao_loc[ish];
        int j0 = ao_loc[jsh];
        int k0 = ao_loc[ksh];
        int l0 = ao_loc[lsh];
        double *expi = env + bas[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env + bas[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env + bas[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env + bas[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env + bas[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env + bas[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
        double vj_grad_ix = 0;
        double vj_grad_iy = 0;
        double vj_grad_iz = 0;
        double vj_grad_jx = 0;
        double vj_grad_jy = 0;
        double vj_grad_jz = 0;
        double vj_grad_kx = 0;
        double vj_grad_ky = 0;
        double vj_grad_kz = 0;
        double vj_grad_lx = 0;
        double vj_grad_ly = 0;
        double vj_grad_lz = 0;
        double vk_grad_ix = 0;
        double vk_grad_iy = 0;
        double vk_grad_iz = 0;
        double vk_grad_jx = 0;
        double vk_grad_jy = 0;
        double vk_grad_jz = 0;
        double vk_grad_kx = 0;
        double vk_grad_ky = 0;
        double vk_grad_kz = 0;
        double vk_grad_lx = 0;
        double vk_grad_ly = 0;
        double vk_grad_lz = 0;
        double dm_lk_0_0 = dm[(l0+0)*nao+(k0+0)];
        if (jk.n_dm > 1) {
            int nao2 = nao * nao;
            dm_lk_0_0 += dm[nao2+(l0+0)*nao+(k0+0)];
        }
        double dm_jk_0_0 = dm[(j0+0)*nao+(k0+0)];
        double dm_jk_1_0 = dm[(j0+1)*nao+(k0+0)];
        double dm_jk_2_0 = dm[(j0+2)*nao+(k0+0)];
        double dm_jk_3_0 = dm[(j0+3)*nao+(k0+0)];
        double dm_jk_4_0 = dm[(j0+4)*nao+(k0+0)];
        double dm_jk_5_0 = dm[(j0+5)*nao+(k0+0)];
        double dm_jl_0_0 = dm[(j0+0)*nao+(l0+0)];
        double dm_jl_1_0 = dm[(j0+1)*nao+(l0+0)];
        double dm_jl_2_0 = dm[(j0+2)*nao+(l0+0)];
        double dm_jl_3_0 = dm[(j0+3)*nao+(l0+0)];
        double dm_jl_4_0 = dm[(j0+4)*nao+(l0+0)];
        double dm_jl_5_0 = dm[(j0+5)*nao+(l0+0)];
        double dm_ik_0_0 = dm[(i0+0)*nao+(k0+0)];
        double dm_ik_1_0 = dm[(i0+1)*nao+(k0+0)];
        double dm_ik_2_0 = dm[(i0+2)*nao+(k0+0)];
        double dm_ik_3_0 = dm[(i0+3)*nao+(k0+0)];
        double dm_ik_4_0 = dm[(i0+4)*nao+(k0+0)];
        double dm_ik_5_0 = dm[(i0+5)*nao+(k0+0)];
        double dm_il_0_0 = dm[(i0+0)*nao+(l0+0)];
        double dm_il_1_0 = dm[(i0+1)*nao+(l0+0)];
        double dm_il_2_0 = dm[(i0+2)*nao+(l0+0)];
        double dm_il_3_0 = dm[(i0+3)*nao+(l0+0)];
        double dm_il_4_0 = dm[(i0+4)*nao+(l0+0)];
        double dm_il_5_0 = dm[(i0+5)*nao+(l0+0)];
        double dd_jk, dd_jl, vj_dd, vk_dd;
        double prod_xy;
        double prod_xz;
        double prod_yz;
        double fxi;
        double fyi;
        double fzi;
        double fxj;
        double fyj;
        double fzj;
        double fxk;
        double fyk;
        double fzk;
        double fxl;
        double fyl;
        double fzl;
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double ak2 = ak * 2;
            double al2 = al * 2;
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double ai2 = ai * 2;
                double aj2 = aj * 2;
                double aij = ai + aj;
                double xjxi = rj[0] - ri[0];
                double yjyi = rj[1] - ri[1];
                double zjzi = rj[2] - ri[2];
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa; // (ai*xi+aj*xj)/aij
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(3, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(3, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 3; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                __syncthreads();
                if (task_id < ntasks) {
                    for (int irys = 0; irys < 3; ++irys) {
                        double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                        double rt = rw[sq_id +  2*irys   *nsq_per_block];
                        double rt_aa = rt / (aij + akl);
                        double rt_aij = rt_aa * akl;
                        double c0x = xpa - xpq*rt_aij;
                        double trr_10x = c0x * fac;
                        double b10 = .5/aij * (1 - rt_aij);
                        double trr_20x = c0x * trr_10x + 1*b10 * fac;
                        double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                        double trr_40x = c0x * trr_30x + 3*b10 * trr_20x;
                        double hrr_3100x = trr_40x - xjxi * trr_30x;
                        double hrr_2100x = trr_30x - xjxi * trr_20x;
                        double hrr_2200x = hrr_3100x - xjxi * hrr_2100x;
                        prod_xy = hrr_2200x * 1;
                        prod_xz = hrr_2200x * wt;
                        prod_yz = 1 * wt;
                        double trr_50x = c0x * trr_40x + 4*b10 * trr_30x;
                        double hrr_4100x = trr_50x - xjxi * trr_40x;
                        double hrr_3200x = hrr_4100x - xjxi * hrr_3100x;
                        fxi = ai2 * prod_yz * hrr_3200x;
                        double c0y = ypa - ypq*rt_aij;
                        double trr_10y = c0y * 1;
                        fyi = ai2 * prod_xz * trr_10y;
                        double c0z = zpa - zpq*rt_aij;
                        double trr_10z = c0z * wt;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_2300x = hrr_3200x - xjxi * hrr_2200x;
                        fxj = aj2 * prod_yz * hrr_2300x;
                        double hrr_0100y = trr_10y - yjyi * 1;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0100z = trr_10z - zjzi * wt;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double rt_akl = rt_aa * aij;
                        double cpx = xqc + xpq*rt_akl;
                        double b00 = .5 * rt_aa;
                        double trr_41x = cpx * trr_40x + 4*b00 * trr_30x;
                        double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                        double hrr_3110x = trr_41x - xjxi * trr_31x;
                        double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                        double hrr_2110x = trr_31x - xjxi * trr_21x;
                        double hrr_2210x = hrr_3110x - xjxi * hrr_2110x;
                        fxk = ak2 * prod_yz * hrr_2210x;
                        double cpy = yqc + ypq*rt_akl;
                        double trr_01y = cpy * 1;
                        fyk = ak2 * prod_xz * trr_01y;
                        double cpz = zqc + zpq*rt_akl;
                        double trr_01z = cpz * wt;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_4001x = trr_41x - xlxk * trr_40x;
                        double hrr_3001x = trr_31x - xlxk * trr_30x;
                        double hrr_3101x = hrr_4001x - xjxi * hrr_3001x;
                        double hrr_2001x = trr_21x - xlxk * trr_20x;
                        double hrr_2101x = hrr_3001x - xjxi * hrr_2001x;
                        double hrr_2201x = hrr_3101x - xjxi * hrr_2101x;
                        fxl = al2 * prod_yz * hrr_2201x;
                        double hrr_0001y = trr_01y - ylyk * 1;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0001z = trr_01z - zlzk * wt;
                        fzl = al2 * prod_xy * hrr_0001z;
                        double hrr_1100x = trr_20x - xjxi * trr_10x;
                        double hrr_1200x = hrr_2100x - xjxi * hrr_1100x;
                        fxi -= 2 * prod_yz * hrr_1200x;
                        fxj -= 2 * prod_yz * hrr_2100x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_0_0;
                            dd_jl = dm_jl_0_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[0*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1200x * trr_10y;
                        prod_xz = hrr_1200x * wt;
                        prod_yz = trr_10y * wt;
                        fxi = ai2 * prod_yz * hrr_2200x;
                        double trr_20y = c0y * trr_10y + 1*b10 * 1;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_1300x = hrr_2200x - xjxi * hrr_1200x;
                        fxj = aj2 * prod_yz * hrr_1300x;
                        double hrr_1100y = trr_20y - yjyi * trr_10y;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double trr_11x = cpx * trr_10x + 1*b00 * fac;
                        double hrr_1110x = trr_21x - xjxi * trr_11x;
                        double hrr_1210x = hrr_2110x - xjxi * hrr_1110x;
                        fxk = ak2 * prod_yz * hrr_1210x;
                        double trr_11y = cpy * trr_10y + 1*b00 * 1;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_1001x = trr_11x - xlxk * trr_10x;
                        double hrr_1101x = hrr_2001x - xjxi * hrr_1001x;
                        double hrr_1201x = hrr_2101x - xjxi * hrr_1101x;
                        fxl = al2 * prod_yz * hrr_1201x;
                        double hrr_1001y = trr_11y - ylyk * trr_10y;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        double hrr_0100x = trr_10x - xjxi * fac;
                        double hrr_0200x = hrr_1100x - xjxi * hrr_0100x;
                        fxi -= 1 * prod_yz * hrr_0200x;
                        fyi -= 1 * prod_xz * 1;
                        fxj -= 2 * prod_yz * hrr_1100x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_1_0;
                            dd_jl = dm_jl_0_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[1*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1200x * 1;
                        prod_xz = hrr_1200x * trr_10z;
                        prod_yz = 1 * trr_10z;
                        fxi = ai2 * prod_yz * hrr_2200x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_20z = c0z * trr_10z + 1*b10 * wt;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_1300x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1100z = trr_20z - zjzi * trr_10z;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * hrr_1210x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_11z = cpz * trr_10z + 1*b00 * wt;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_1201x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1001z = trr_11z - zlzk * trr_10z;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fxi -= 1 * prod_yz * hrr_0200x;
                        fzi -= 1 * prod_xy * wt;
                        fxj -= 2 * prod_yz * hrr_1100x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_2_0;
                            dd_jl = dm_jl_0_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[2*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0200x * trr_20y;
                        prod_xz = hrr_0200x * wt;
                        prod_yz = trr_20y * wt;
                        fxi = ai2 * prod_yz * hrr_1200x;
                        double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                        fyi = ai2 * prod_xz * trr_30y;
                        fzi = ai2 * prod_xy * trr_10z;
                        double hrr_0300x = hrr_1200x - xjxi * hrr_0200x;
                        fxj = aj2 * prod_yz * hrr_0300x;
                        double hrr_2100y = trr_30y - yjyi * trr_20y;
                        fyj = aj2 * prod_xz * hrr_2100y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        double trr_01x = cpx * fac;
                        double hrr_0110x = trr_11x - xjxi * trr_01x;
                        double hrr_0210x = hrr_1110x - xjxi * hrr_0110x;
                        fxk = ak2 * prod_yz * hrr_0210x;
                        double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                        fyk = ak2 * prod_xz * trr_21y;
                        fzk = ak2 * prod_xy * trr_01z;
                        double hrr_0001x = trr_01x - xlxk * fac;
                        double hrr_0101x = hrr_1001x - xjxi * hrr_0001x;
                        double hrr_0201x = hrr_1101x - xjxi * hrr_0101x;
                        fxl = al2 * prod_yz * hrr_0201x;
                        double hrr_2001y = trr_21y - ylyk * trr_20y;
                        fyl = al2 * prod_xz * hrr_2001y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 2 * prod_xz * trr_10y;
                        fxj -= 2 * prod_yz * hrr_0100x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_3_0;
                            dd_jl = dm_jl_0_0 * dm_ik_3_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[3*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0200x * trr_10y;
                        prod_xz = hrr_0200x * trr_10z;
                        prod_yz = trr_10y * trr_10z;
                        fxi = ai2 * prod_yz * hrr_1200x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0300x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * hrr_0210x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0201x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fyi -= 1 * prod_xz * 1;
                        fzi -= 1 * prod_xy * wt;
                        fxj -= 2 * prod_yz * hrr_0100x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_4_0;
                            dd_jl = dm_jl_0_0 * dm_ik_4_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[4*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0200x * 1;
                        prod_xz = hrr_0200x * trr_20z;
                        prod_yz = 1 * trr_20z;
                        fxi = ai2 * prod_yz * hrr_1200x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                        fzi = ai2 * prod_xy * trr_30z;
                        fxj = aj2 * prod_yz * hrr_0300x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_2100z = trr_30z - zjzi * trr_20z;
                        fzj = aj2 * prod_xy * hrr_2100z;
                        fxk = ak2 * prod_yz * hrr_0210x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                        fzk = ak2 * prod_xy * trr_21z;
                        fxl = al2 * prod_yz * hrr_0201x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_2001z = trr_21z - zlzk * trr_20z;
                        fzl = al2 * prod_xy * hrr_2001z;
                        fzi -= 2 * prod_xy * trr_10z;
                        fxj -= 2 * prod_yz * hrr_0100x;
                        if (vk != NULL) {
                            dd_jk = dm_jk_0_0 * dm_il_5_0;
                            dd_jl = dm_jl_0_0 * dm_ik_5_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+0)*nao+k0+0] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+0)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[5*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_2100x * hrr_0100y;
                        prod_xz = hrr_2100x * wt;
                        prod_yz = hrr_0100y * wt;
                        fxi = ai2 * prod_yz * hrr_3100x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_2200x;
                        double hrr_0200y = hrr_1100y - yjyi * hrr_0100y;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * hrr_2110x;
                        double hrr_0110y = trr_11y - yjyi * trr_01y;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_2101x;
                        double hrr_0101y = hrr_1001y - yjyi * hrr_0001y;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 2 * prod_yz * hrr_1100x;
                        fxj -= 1 * prod_yz * trr_20x;
                        fyj -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_0_0;
                            dd_jl = dm_jl_1_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[6*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1100x * hrr_1100y;
                        prod_xz = hrr_1100x * wt;
                        prod_yz = hrr_1100y * wt;
                        fxi = ai2 * prod_yz * hrr_2100x;
                        fyi = ai2 * prod_xz * hrr_2100y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_1200x;
                        double hrr_1200y = hrr_2100y - yjyi * hrr_1100y;
                        fyj = aj2 * prod_xz * hrr_1200y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * hrr_1110x;
                        double hrr_1110y = trr_21y - yjyi * trr_11y;
                        fyk = ak2 * prod_xz * hrr_1110y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_1101x;
                        double hrr_1101y = hrr_2001y - yjyi * hrr_1001y;
                        fyl = al2 * prod_xz * hrr_1101y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * hrr_0100x;
                        fyi -= 1 * prod_xz * hrr_0100y;
                        fxj -= 1 * prod_yz * trr_10x;
                        fyj -= 1 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_1_0;
                            dd_jl = dm_jl_1_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[7*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1100x * hrr_0100y;
                        prod_xz = hrr_1100x * trr_10z;
                        prod_yz = hrr_0100y * trr_10z;
                        fxi = ai2 * prod_yz * hrr_2100x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_1200x;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * hrr_1110x;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_1101x;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fxi -= 1 * prod_yz * hrr_0100x;
                        fzi -= 1 * prod_xy * wt;
                        fxj -= 1 * prod_yz * trr_10x;
                        fyj -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_2_0;
                            dd_jl = dm_jl_1_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[8*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * hrr_2100y;
                        prod_xz = hrr_0100x * wt;
                        prod_yz = hrr_2100y * wt;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        double trr_40y = c0y * trr_30y + 3*b10 * trr_20y;
                        double hrr_3100y = trr_40y - yjyi * trr_30y;
                        fyi = ai2 * prod_xz * hrr_3100y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        double hrr_2200y = hrr_3100y - yjyi * hrr_2100y;
                        fyj = aj2 * prod_xz * hrr_2200y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                        double hrr_2110y = trr_31y - yjyi * trr_21y;
                        fyk = ak2 * prod_xz * hrr_2110y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_0101x;
                        double hrr_3001y = trr_31y - ylyk * trr_30y;
                        double hrr_2101y = hrr_3001y - yjyi * hrr_2001y;
                        fyl = al2 * prod_xz * hrr_2101y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 2 * prod_xz * hrr_1100y;
                        fxj -= 1 * prod_yz * fac;
                        fyj -= 1 * prod_xz * trr_20y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_3_0;
                            dd_jl = dm_jl_1_0 * dm_ik_3_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[9*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * hrr_1100y;
                        prod_xz = hrr_0100x * trr_10z;
                        prod_yz = hrr_1100y * trr_10z;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        fyi = ai2 * prod_xz * hrr_2100y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        fyj = aj2 * prod_xz * hrr_1200y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        fyk = ak2 * prod_xz * hrr_1110y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0101x;
                        fyl = al2 * prod_xz * hrr_1101y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fyi -= 1 * prod_xz * hrr_0100y;
                        fzi -= 1 * prod_xy * wt;
                        fxj -= 1 * prod_yz * fac;
                        fyj -= 1 * prod_xz * trr_10y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_4_0;
                            dd_jl = dm_jl_1_0 * dm_ik_4_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[10*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * hrr_0100y;
                        prod_xz = hrr_0100x * trr_20z;
                        prod_yz = hrr_0100y * trr_20z;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * trr_30z;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_2100z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * trr_21z;
                        fxl = al2 * prod_yz * hrr_0101x;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_2001z;
                        fzi -= 2 * prod_xy * trr_10z;
                        fxj -= 1 * prod_yz * fac;
                        fyj -= 1 * prod_xz * 1;
                        if (vk != NULL) {
                            dd_jk = dm_jk_1_0 * dm_il_5_0;
                            dd_jl = dm_jl_1_0 * dm_ik_5_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+1)*nao+k0+0] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+1)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[11*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_2100x * 1;
                        prod_xz = hrr_2100x * hrr_0100z;
                        prod_yz = 1 * hrr_0100z;
                        fxi = ai2 * prod_yz * hrr_3100x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_2200x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0200z = hrr_1100z - zjzi * hrr_0100z;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * hrr_2110x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double hrr_0110z = trr_11z - zjzi * trr_01z;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_2101x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0101z = hrr_1001z - zjzi * hrr_0001z;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fxi -= 2 * prod_yz * hrr_1100x;
                        fxj -= 1 * prod_yz * trr_20x;
                        fzj -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_0_0;
                            dd_jl = dm_jl_2_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[12*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1100x * trr_10y;
                        prod_xz = hrr_1100x * hrr_0100z;
                        prod_yz = trr_10y * hrr_0100z;
                        fxi = ai2 * prod_yz * hrr_2100x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_1200x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * hrr_1110x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_1101x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fxi -= 1 * prod_yz * hrr_0100x;
                        fyi -= 1 * prod_xz * 1;
                        fxj -= 1 * prod_yz * trr_10x;
                        fzj -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_1_0;
                            dd_jl = dm_jl_2_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[13*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_1100x * 1;
                        prod_xz = hrr_1100x * hrr_1100z;
                        prod_yz = 1 * hrr_1100z;
                        fxi = ai2 * prod_yz * hrr_2100x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_2100z;
                        fxj = aj2 * prod_yz * hrr_1200x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1200z = hrr_2100z - zjzi * hrr_1100z;
                        fzj = aj2 * prod_xy * hrr_1200z;
                        fxk = ak2 * prod_yz * hrr_1110x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double hrr_1110z = trr_21z - zjzi * trr_11z;
                        fzk = ak2 * prod_xy * hrr_1110z;
                        fxl = al2 * prod_yz * hrr_1101x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1101z = hrr_2001z - zjzi * hrr_1001z;
                        fzl = al2 * prod_xy * hrr_1101z;
                        fxi -= 1 * prod_yz * hrr_0100x;
                        fzi -= 1 * prod_xy * hrr_0100z;
                        fxj -= 1 * prod_yz * trr_10x;
                        fzj -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_2_0;
                            dd_jl = dm_jl_2_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[14*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * trr_20y;
                        prod_xz = hrr_0100x * hrr_0100z;
                        prod_yz = trr_20y * hrr_0100z;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        fyi = ai2 * prod_xz * trr_30y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        fyj = aj2 * prod_xz * hrr_2100y;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        fyk = ak2 * prod_xz * trr_21y;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_0101x;
                        fyl = al2 * prod_xz * hrr_2001y;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fyi -= 2 * prod_xz * trr_10y;
                        fxj -= 1 * prod_yz * fac;
                        fzj -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_3_0;
                            dd_jl = dm_jl_2_0 * dm_ik_3_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[15*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * trr_10y;
                        prod_xz = hrr_0100x * hrr_1100z;
                        prod_yz = trr_10y * hrr_1100z;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * hrr_2100z;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_1200z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * hrr_1110z;
                        fxl = al2 * prod_yz * hrr_0101x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_1101z;
                        fyi -= 1 * prod_xz * 1;
                        fzi -= 1 * prod_xy * hrr_0100z;
                        fxj -= 1 * prod_yz * fac;
                        fzj -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_4_0;
                            dd_jl = dm_jl_2_0 * dm_ik_4_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[16*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = hrr_0100x * 1;
                        prod_xz = hrr_0100x * hrr_2100z;
                        prod_yz = 1 * hrr_2100z;
                        fxi = ai2 * prod_yz * hrr_1100x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_40z = c0z * trr_30z + 3*b10 * trr_20z;
                        double hrr_3100z = trr_40z - zjzi * trr_30z;
                        fzi = ai2 * prod_xy * hrr_3100z;
                        fxj = aj2 * prod_yz * hrr_0200x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_2200z = hrr_3100z - zjzi * hrr_2100z;
                        fzj = aj2 * prod_xy * hrr_2200z;
                        fxk = ak2 * prod_yz * hrr_0110x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                        double hrr_2110z = trr_31z - zjzi * trr_21z;
                        fzk = ak2 * prod_xy * hrr_2110z;
                        fxl = al2 * prod_yz * hrr_0101x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_3001z = trr_31z - zlzk * trr_30z;
                        double hrr_2101z = hrr_3001z - zjzi * hrr_2001z;
                        fzl = al2 * prod_xy * hrr_2101z;
                        fzi -= 2 * prod_xy * hrr_1100z;
                        fxj -= 1 * prod_yz * fac;
                        fzj -= 1 * prod_xy * trr_20z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_2_0 * dm_il_5_0;
                            dd_jl = dm_jl_2_0 * dm_ik_5_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+2)*nao+k0+0] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+2)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[17*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_20x * hrr_0200y;
                        prod_xz = trr_20x * wt;
                        prod_yz = hrr_0200y * wt;
                        fxi = ai2 * prod_yz * trr_30x;
                        fyi = ai2 * prod_xz * hrr_1200y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_2100x;
                        double hrr_0300y = hrr_1200y - yjyi * hrr_0200y;
                        fyj = aj2 * prod_xz * hrr_0300y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_21x;
                        double hrr_0210y = hrr_1110y - yjyi * hrr_0110y;
                        fyk = ak2 * prod_xz * hrr_0210y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_2001x;
                        double hrr_0201y = hrr_1101y - yjyi * hrr_0101y;
                        fyl = al2 * prod_xz * hrr_0201y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 2 * prod_yz * trr_10x;
                        fyj -= 2 * prod_xz * hrr_0100y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_3_0 * dm_il_0_0;
                            dd_jl = dm_jl_3_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+3)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+3)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[18*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * hrr_1200y;
                        prod_xz = trr_10x * wt;
                        prod_yz = hrr_1200y * wt;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * hrr_2200y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        double hrr_1300y = hrr_2200y - yjyi * hrr_1200y;
                        fyj = aj2 * prod_xz * hrr_1300y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_11x;
                        double hrr_1210y = hrr_2110y - yjyi * hrr_1110y;
                        fyk = ak2 * prod_xz * hrr_1210y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        double hrr_1201y = hrr_2101y - yjyi * hrr_1101y;
                        fyl = al2 * prod_xz * hrr_1201y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fxi -= 1 * prod_yz * fac;
                        fyi -= 1 * prod_xz * hrr_0200y;
                        fyj -= 2 * prod_xz * hrr_1100y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_3_0 * dm_il_1_0;
                            dd_jl = dm_jl_3_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+3)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+3)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[19*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * hrr_0200y;
                        prod_xz = trr_10x * trr_10z;
                        prod_yz = hrr_0200y * trr_10z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * hrr_1200y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0300y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * hrr_0210y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0201y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fxi -= 1 * prod_yz * fac;
                        fzi -= 1 * prod_xy * wt;
                        fyj -= 2 * prod_xz * hrr_0100y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_3_0 * dm_il_2_0;
                            dd_jl = dm_jl_3_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+3)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+3)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[20*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_2200y;
                        prod_xz = fac * wt;
                        prod_yz = hrr_2200y * wt;
                        fxi = ai2 * prod_yz * trr_10x;
                        double trr_50y = c0y * trr_40y + 4*b10 * trr_30y;
                        double hrr_4100y = trr_50y - yjyi * trr_40y;
                        double hrr_3200y = hrr_4100y - yjyi * hrr_3100y;
                        fyi = ai2 * prod_xz * hrr_3200y;
                        fzi = ai2 * prod_xy * trr_10z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        double hrr_2300y = hrr_3200y - yjyi * hrr_2200y;
                        fyj = aj2 * prod_xz * hrr_2300y;
                        fzj = aj2 * prod_xy * hrr_0100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        double trr_41y = cpy * trr_40y + 4*b00 * trr_30y;
                        double hrr_3110y = trr_41y - yjyi * trr_31y;
                        double hrr_2210y = hrr_3110y - yjyi * hrr_2110y;
                        fyk = ak2 * prod_xz * hrr_2210y;
                        fzk = ak2 * prod_xy * trr_01z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        double hrr_4001y = trr_41y - ylyk * trr_40y;
                        double hrr_3101y = hrr_4001y - yjyi * hrr_3001y;
                        double hrr_2201y = hrr_3101y - yjyi * hrr_2101y;
                        fyl = al2 * prod_xz * hrr_2201y;
                        fzl = al2 * prod_xy * hrr_0001z;
                        fyi -= 2 * prod_xz * hrr_1200y;
                        fyj -= 2 * prod_xz * hrr_2100y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_3_0 * dm_il_3_0;
                            dd_jl = dm_jl_3_0 * dm_ik_3_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+3)*nao+k0+0] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+3)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[21*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_1200y;
                        prod_xz = fac * trr_10z;
                        prod_yz = hrr_1200y * trr_10z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_2200y;
                        fzi = ai2 * prod_xy * trr_20z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1300y;
                        fzj = aj2 * prod_xy * hrr_1100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_1210y;
                        fzk = ak2 * prod_xy * trr_11z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1201y;
                        fzl = al2 * prod_xy * hrr_1001z;
                        fyi -= 1 * prod_xz * hrr_0200y;
                        fzi -= 1 * prod_xy * wt;
                        fyj -= 2 * prod_xz * hrr_1100y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_3_0 * dm_il_4_0;
                            dd_jl = dm_jl_3_0 * dm_ik_4_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+3)*nao+k0+0] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+3)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[22*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_0200y;
                        prod_xz = fac * trr_20z;
                        prod_yz = hrr_0200y * trr_20z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_1200y;
                        fzi = ai2 * prod_xy * trr_30z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0300y;
                        fzj = aj2 * prod_xy * hrr_2100z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_0210y;
                        fzk = ak2 * prod_xy * trr_21z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0201y;
                        fzl = al2 * prod_xy * hrr_2001z;
                        fzi -= 2 * prod_xy * trr_10z;
                        fyj -= 2 * prod_xz * hrr_0100y;
                        if (vk != NULL) {
                            dd_jk = dm_jk_3_0 * dm_il_5_0;
                            dd_jl = dm_jl_3_0 * dm_ik_5_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+3)*nao+k0+0] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+3)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[23*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_20x * hrr_0100y;
                        prod_xz = trr_20x * hrr_0100z;
                        prod_yz = hrr_0100y * hrr_0100z;
                        fxi = ai2 * prod_yz * trr_30x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_2100x;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * trr_21x;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_2001x;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fxi -= 2 * prod_yz * trr_10x;
                        fyj -= 1 * prod_xz * 1;
                        fzj -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_4_0 * dm_il_0_0;
                            dd_jl = dm_jl_4_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+4)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+4)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[24*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * hrr_1100y;
                        prod_xz = trr_10x * hrr_0100z;
                        prod_yz = hrr_1100y * hrr_0100z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * hrr_2100y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_1200y;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * hrr_1110y;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_1101y;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fxi -= 1 * prod_yz * fac;
                        fyi -= 1 * prod_xz * hrr_0100y;
                        fyj -= 1 * prod_xz * trr_10y;
                        fzj -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_4_0 * dm_il_1_0;
                            dd_jl = dm_jl_4_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+4)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+4)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[25*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * hrr_0100y;
                        prod_xz = trr_10x * hrr_1100z;
                        prod_yz = hrr_0100y * hrr_1100z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * hrr_2100z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_1200z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * hrr_1110z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_1101z;
                        fxi -= 1 * prod_yz * fac;
                        fzi -= 1 * prod_xy * hrr_0100z;
                        fyj -= 1 * prod_xz * 1;
                        fzj -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_4_0 * dm_il_2_0;
                            dd_jl = dm_jl_4_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+4)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+4)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[26*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_2100y;
                        prod_xz = fac * hrr_0100z;
                        prod_yz = hrr_2100y * hrr_0100z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_3100y;
                        fzi = ai2 * prod_xy * hrr_1100z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_2200y;
                        fzj = aj2 * prod_xy * hrr_0200z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_2110y;
                        fzk = ak2 * prod_xy * hrr_0110z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_2101y;
                        fzl = al2 * prod_xy * hrr_0101z;
                        fyi -= 2 * prod_xz * hrr_1100y;
                        fyj -= 1 * prod_xz * trr_20y;
                        fzj -= 1 * prod_xy * wt;
                        if (vk != NULL) {
                            dd_jk = dm_jk_4_0 * dm_il_3_0;
                            dd_jl = dm_jl_4_0 * dm_ik_3_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+4)*nao+k0+0] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+4)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[27*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_1100y;
                        prod_xz = fac * hrr_1100z;
                        prod_yz = hrr_1100y * hrr_1100z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_2100y;
                        fzi = ai2 * prod_xy * hrr_2100z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1200y;
                        fzj = aj2 * prod_xy * hrr_1200z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_1110y;
                        fzk = ak2 * prod_xy * hrr_1110z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1101y;
                        fzl = al2 * prod_xy * hrr_1101z;
                        fyi -= 1 * prod_xz * hrr_0100y;
                        fzi -= 1 * prod_xy * hrr_0100z;
                        fyj -= 1 * prod_xz * trr_10y;
                        fzj -= 1 * prod_xy * trr_10z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_4_0 * dm_il_4_0;
                            dd_jl = dm_jl_4_0 * dm_ik_4_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+4)*nao+k0+0] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+4)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[28*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * hrr_0100y;
                        prod_xz = fac * hrr_2100z;
                        prod_yz = hrr_0100y * hrr_2100z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * hrr_1100y;
                        fzi = ai2 * prod_xy * hrr_3100z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0200y;
                        fzj = aj2 * prod_xy * hrr_2200z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * hrr_0110y;
                        fzk = ak2 * prod_xy * hrr_2110z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0101y;
                        fzl = al2 * prod_xy * hrr_2101z;
                        fzi -= 2 * prod_xy * hrr_1100z;
                        fyj -= 1 * prod_xz * 1;
                        fzj -= 1 * prod_xy * trr_20z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_4_0 * dm_il_5_0;
                            dd_jl = dm_jl_4_0 * dm_ik_5_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+4)*nao+k0+0] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+4)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[29*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_20x * 1;
                        prod_xz = trr_20x * hrr_0200z;
                        prod_yz = 1 * hrr_0200z;
                        fxi = ai2 * prod_yz * trr_30x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_1200z;
                        fxj = aj2 * prod_yz * hrr_2100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_0300z = hrr_1200z - zjzi * hrr_0200z;
                        fzj = aj2 * prod_xy * hrr_0300z;
                        fxk = ak2 * prod_yz * trr_21x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double hrr_0210z = hrr_1110z - zjzi * hrr_0110z;
                        fzk = ak2 * prod_xy * hrr_0210z;
                        fxl = al2 * prod_yz * hrr_2001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_0201z = hrr_1101z - zjzi * hrr_0101z;
                        fzl = al2 * prod_xy * hrr_0201z;
                        fxi -= 2 * prod_yz * trr_10x;
                        fzj -= 2 * prod_xy * hrr_0100z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_5_0 * dm_il_0_0;
                            dd_jl = dm_jl_5_0 * dm_ik_0_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+5)*nao+k0+0] * dm[(nao+i0+0)*nao+l0+0];
                                dd_jl = dm[(nao+j0+5)*nao+l0+0] * dm[(nao+i0+0)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[30*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * trr_10y;
                        prod_xz = trr_10x * hrr_0200z;
                        prod_yz = trr_10y * hrr_0200z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * hrr_1200z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_0300z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * hrr_0210z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_0201z;
                        fxi -= 1 * prod_yz * fac;
                        fyi -= 1 * prod_xz * 1;
                        fzj -= 2 * prod_xy * hrr_0100z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_5_0 * dm_il_1_0;
                            dd_jl = dm_jl_5_0 * dm_ik_1_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+5)*nao+k0+0] * dm[(nao+i0+1)*nao+l0+0];
                                dd_jl = dm[(nao+j0+5)*nao+l0+0] * dm[(nao+i0+1)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[31*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = trr_10x * 1;
                        prod_xz = trr_10x * hrr_1200z;
                        prod_yz = 1 * hrr_1200z;
                        fxi = ai2 * prod_yz * trr_20x;
                        fyi = ai2 * prod_xz * trr_10y;
                        fzi = ai2 * prod_xy * hrr_2200z;
                        fxj = aj2 * prod_yz * hrr_1100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_1300z = hrr_2200z - zjzi * hrr_1200z;
                        fzj = aj2 * prod_xy * hrr_1300z;
                        fxk = ak2 * prod_yz * trr_11x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double hrr_1210z = hrr_2110z - zjzi * hrr_1110z;
                        fzk = ak2 * prod_xy * hrr_1210z;
                        fxl = al2 * prod_yz * hrr_1001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_1201z = hrr_2101z - zjzi * hrr_1101z;
                        fzl = al2 * prod_xy * hrr_1201z;
                        fxi -= 1 * prod_yz * fac;
                        fzi -= 1 * prod_xy * hrr_0200z;
                        fzj -= 2 * prod_xy * hrr_1100z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_5_0 * dm_il_2_0;
                            dd_jl = dm_jl_5_0 * dm_ik_2_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+5)*nao+k0+0] * dm[(nao+i0+2)*nao+l0+0];
                                dd_jl = dm[(nao+j0+5)*nao+l0+0] * dm[(nao+i0+2)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[32*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_20y;
                        prod_xz = fac * hrr_0200z;
                        prod_yz = trr_20y * hrr_0200z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_30y;
                        fzi = ai2 * prod_xy * hrr_1200z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_2100y;
                        fzj = aj2 * prod_xy * hrr_0300z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_21y;
                        fzk = ak2 * prod_xy * hrr_0210z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_2001y;
                        fzl = al2 * prod_xy * hrr_0201z;
                        fyi -= 2 * prod_xz * trr_10y;
                        fzj -= 2 * prod_xy * hrr_0100z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_5_0 * dm_il_3_0;
                            dd_jl = dm_jl_5_0 * dm_ik_3_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+5)*nao+k0+0] * dm[(nao+i0+3)*nao+l0+0];
                                dd_jl = dm[(nao+j0+5)*nao+l0+0] * dm[(nao+i0+3)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[33*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * trr_10y;
                        prod_xz = fac * hrr_1200z;
                        prod_yz = trr_10y * hrr_1200z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_20y;
                        fzi = ai2 * prod_xy * hrr_2200z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_1100y;
                        fzj = aj2 * prod_xy * hrr_1300z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_11y;
                        fzk = ak2 * prod_xy * hrr_1210z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_1001y;
                        fzl = al2 * prod_xy * hrr_1201z;
                        fyi -= 1 * prod_xz * 1;
                        fzi -= 1 * prod_xy * hrr_0200z;
                        fzj -= 2 * prod_xy * hrr_1100z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_5_0 * dm_il_4_0;
                            dd_jl = dm_jl_5_0 * dm_ik_4_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+5)*nao+k0+0] * dm[(nao+i0+4)*nao+l0+0];
                                dd_jl = dm[(nao+j0+5)*nao+l0+0] * dm[(nao+i0+4)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[34*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                        prod_xy = fac * 1;
                        prod_xz = fac * hrr_2200z;
                        prod_yz = 1 * hrr_2200z;
                        fxi = ai2 * prod_yz * trr_10x;
                        fyi = ai2 * prod_xz * trr_10y;
                        double trr_50z = c0z * trr_40z + 4*b10 * trr_30z;
                        double hrr_4100z = trr_50z - zjzi * trr_40z;
                        double hrr_3200z = hrr_4100z - zjzi * hrr_3100z;
                        fzi = ai2 * prod_xy * hrr_3200z;
                        fxj = aj2 * prod_yz * hrr_0100x;
                        fyj = aj2 * prod_xz * hrr_0100y;
                        double hrr_2300z = hrr_3200z - zjzi * hrr_2200z;
                        fzj = aj2 * prod_xy * hrr_2300z;
                        fxk = ak2 * prod_yz * trr_01x;
                        fyk = ak2 * prod_xz * trr_01y;
                        double trr_41z = cpz * trr_40z + 4*b00 * trr_30z;
                        double hrr_3110z = trr_41z - zjzi * trr_31z;
                        double hrr_2210z = hrr_3110z - zjzi * hrr_2110z;
                        fzk = ak2 * prod_xy * hrr_2210z;
                        fxl = al2 * prod_yz * hrr_0001x;
                        fyl = al2 * prod_xz * hrr_0001y;
                        double hrr_4001z = trr_41z - zlzk * trr_40z;
                        double hrr_3101z = hrr_4001z - zjzi * hrr_3001z;
                        double hrr_2201z = hrr_3101z - zjzi * hrr_2101z;
                        fzl = al2 * prod_xy * hrr_2201z;
                        fzi -= 2 * prod_xy * hrr_1200z;
                        fzj -= 2 * prod_xy * hrr_2100z;
                        if (vk != NULL) {
                            dd_jk = dm_jk_5_0 * dm_il_5_0;
                            dd_jl = dm_jl_5_0 * dm_ik_5_0;
                            vk_dd = dd_jk + dd_jl;
                            if (jk.n_dm > 1) {
                                dd_jk = dm[(nao+j0+5)*nao+k0+0] * dm[(nao+i0+5)*nao+l0+0];
                                dd_jl = dm[(nao+j0+5)*nao+l0+0] * dm[(nao+i0+5)*nao+k0+0];
                                vk_dd += dd_jk + dd_jl;
                            }
                            vk_grad_ix += fxi * vk_dd;
                            vk_grad_iy += fyi * vk_dd;
                            vk_grad_iz += fzi * vk_dd;
                            vk_grad_jx += fxj * vk_dd;
                            vk_grad_jy += fyj * vk_dd;
                            vk_grad_jz += fzj * vk_dd;
                            vk_grad_kx += fxk * vk_dd;
                            vk_grad_ky += fyk * vk_dd;
                            vk_grad_kz += fzk * vk_dd;
                            vk_grad_lx += fxl * vk_dd;
                            vk_grad_ly += fyl * vk_dd;
                            vk_grad_lz += fzl * vk_dd;
                        }
                        if (vj != NULL) {
                            vj_dd = dm_cache[35*TILE2+sh_ij] * dm_lk_0_0;
                            vj_grad_ix += fxi * vj_dd;
                            vj_grad_iy += fyi * vj_dd;
                            vj_grad_iz += fzi * vj_dd;
                            vj_grad_jx += fxj * vj_dd;
                            vj_grad_jy += fyj * vj_dd;
                            vj_grad_jz += fzj * vj_dd;
                            vj_grad_kx += fxk * vj_dd;
                            vj_grad_ky += fyk * vj_dd;
                            vj_grad_kz += fzk * vj_dd;
                            vj_grad_lx += fxl * vj_dd;
                            vj_grad_ly += fyl * vj_dd;
                            vj_grad_lz += fzl * vj_dd;
                        }
                    }
                }
            }
        }
        int ia = bas[ish*BAS_SLOTS+ATOM_OF];
        int ja = bas[jsh*BAS_SLOTS+ATOM_OF];
        int ka = bas[ksh*BAS_SLOTS+ATOM_OF];
        int la = bas[lsh*BAS_SLOTS+ATOM_OF];
        if (vj != NULL) {
            atomicAdd(vj+ia*3+0, vj_grad_ix);
            atomicAdd(vj+ia*3+1, vj_grad_iy);
            atomicAdd(vj+ia*3+2, vj_grad_iz);
            atomicAdd(vj+ja*3+0, vj_grad_jx);
            atomicAdd(vj+ja*3+1, vj_grad_jy);
            atomicAdd(vj+ja*3+2, vj_grad_jz);
            atomicAdd(vj+ka*3+0, vj_grad_kx);
            atomicAdd(vj+ka*3+1, vj_grad_ky);
            atomicAdd(vj+ka*3+2, vj_grad_kz);
            atomicAdd(vj+la*3+0, vj_grad_lx);
            atomicAdd(vj+la*3+1, vj_grad_ly);
            atomicAdd(vj+la*3+2, vj_grad_lz);
        }
        if (vk != NULL) {
            atomicAdd(vk+ia*3+0, vk_grad_ix);
            atomicAdd(vk+ia*3+1, vk_grad_iy);
            atomicAdd(vk+ia*3+2, vk_grad_iz);
            atomicAdd(vk+ja*3+0, vk_grad_jx);
            atomicAdd(vk+ja*3+1, vk_grad_jy);
            atomicAdd(vk+ja*3+2, vk_grad_jz);
            atomicAdd(vk+ka*3+0, vk_grad_kx);
            atomicAdd(vk+ka*3+1, vk_grad_ky);
            atomicAdd(vk+ka*3+2, vk_grad_kz);
            atomicAdd(vk+la*3+0, vk_grad_lx);
            atomicAdd(vk+la*3+1, vk_grad_ly);
            atomicAdd(vk+la*3+2, vk_grad_lz);
        }
    }
}
__global__
void rys_ejk_ip1_2200(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds,
                ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int nbas = envs.nbas;
        int ntasks = _fill_ejk_tasks(shl_quartet_idx, envs, jk, bounds,
                                     batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas_tiles = nbas / TILE;
            int tile_i = tile_ij / nbas_tiles;
            int tile_j = tile_ij % nbas_tiles;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_ejk_ip1_2200(envs, jk, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

int rys_ejk_ip1_unrolled(RysIntEnvVars *envs, JKMatrix *jk, BoundsInfo *bounds,
                         ShellQuartet *pool, uint32_t *batch_head, int *scheme, int workers)
{
    int li = bounds->li;
    int lj = bounds->lj;
    int lk = bounds->lk;
    int ll = bounds->ll;
    int threads = scheme[0] * scheme[1];
    int nroots = (li + lj + lk + ll + 1) / 2 + 1;
    int iprim = bounds->iprim;
    int jprim = bounds->jprim;
    int ij_prims = iprim * jprim;
    int nfi = (li + 1) * (li + 2) / 2;
    int nfj = (lj + 1) * (lj + 2) / 2;
    int buflen = nroots*2 * threads + nfi*nfj*TILE2 + ij_prims*TILE2*4;
    int ijkl = li*125 + lj*25 + lk*5 + ll;
    switch (ijkl) {
    case 0: rys_ejk_ip1_0000<<<workers, threads, buflen*sizeof(double)>>>(*envs, *jk, *bounds, pool, batch_head); break;
    case 125: rys_ejk_ip1_1000<<<workers, threads, buflen*sizeof(double)>>>(*envs, *jk, *bounds, pool, batch_head); break;
    case 130: rys_ejk_ip1_1010<<<workers, threads, buflen*sizeof(double)>>>(*envs, *jk, *bounds, pool, batch_head); break;
    case 131: rys_ejk_ip1_1011<<<workers, threads, buflen*sizeof(double)>>>(*envs, *jk, *bounds, pool, batch_head); break;
    case 150: rys_ejk_ip1_1100<<<workers, threads, buflen*sizeof(double)>>>(*envs, *jk, *bounds, pool, batch_head); break;
    case 155: rys_ejk_ip1_1110<<<workers, threads, buflen*sizeof(double)>>>(*envs, *jk, *bounds, pool, batch_head); break;
    case 156: rys_ejk_ip1_1111<<<workers, threads, buflen*sizeof(double)>>>(*envs, *jk, *bounds, pool, batch_head); break;
    case 250: rys_ejk_ip1_2000<<<workers, threads, buflen*sizeof(double)>>>(*envs, *jk, *bounds, pool, batch_head); break;
    case 255: rys_ejk_ip1_2010<<<workers, threads, buflen*sizeof(double)>>>(*envs, *jk, *bounds, pool, batch_head); break;
    case 256: rys_ejk_ip1_2011<<<workers, threads, buflen*sizeof(double)>>>(*envs, *jk, *bounds, pool, batch_head); break;
    case 260: rys_ejk_ip1_2020<<<workers, threads, buflen*sizeof(double)>>>(*envs, *jk, *bounds, pool, batch_head); break;
    case 275: rys_ejk_ip1_2100<<<workers, threads, buflen*sizeof(double)>>>(*envs, *jk, *bounds, pool, batch_head); break;
    case 280: rys_ejk_ip1_2110<<<workers, threads, buflen*sizeof(double)>>>(*envs, *jk, *bounds, pool, batch_head); break;
    case 300: rys_ejk_ip1_2200<<<workers, threads, buflen*sizeof(double)>>>(*envs, *jk, *bounds, pool, batch_head); break;
    default: return 0;
    }
    return 1;
}
