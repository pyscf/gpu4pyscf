#include <stdio.h>
#include <cuda.h>
#include <cuda_runtime.h>
#include "gvhf-rys/vhf.cuh"
#include "gvhf-rys/gamma_inc_unrolled.cu"


// TILEX=64, TILEY=32,
#if CUDA_VERSION >= 12040
__global__ __maxnreg__(128)
#else
__global__
#endif
void md_j_0_0(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 1024;
    int task_kl0 = blockIdx.y * 512;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 256;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 2048;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 16;
    double *dm_ij_cache = vj_kl_cache + 512;
    double *dm_kl_cache = dm_ij_cache + 16;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 2112; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 512; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 512; n += 256) {
        int task_kl = blockIdx.y * 512 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+512] = ykl;
            Rq_cache[n+1024] = zkl;
            Rq_cache[n+1536] = akl;
        }
    }

    for (int n = tx; n < 32; n += 16) {
        int i = n / 32;
        int tile = n % 32;
        int task_kl = blockIdx.y * 512 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*512] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 64; ++batch_ij) {
        int task_ij0 = blockIdx.x * 1024 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 1; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 32; ++batch_kl) {
            int task_kl0 = blockIdx.y * 512 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+512];
            double zkl = Rq_cache[sq_kl+1024];
            double akl = Rq_cache[sq_kl+1536];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 0);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 0; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 1; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 32; n += 16) {
        int i = n / 32;
        int tile = n % 32;
        int task_kl = blockIdx.y * 512 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*512]);
        }
    }
}

// TILEX=64, TILEY=32,
#if CUDA_VERSION >= 12040
__global__ __maxnreg__(128)
#else
__global__
#endif
void md_j_1_0(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 1024;
    int task_kl0 = blockIdx.y * 512;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 512;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 2048;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 64;
    double *dm_ij_cache = vj_kl_cache + 512;
    double *dm_kl_cache = dm_ij_cache + 64;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 2112; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 512; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 512; n += 256) {
        int task_kl = blockIdx.y * 512 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+512] = ykl;
            Rq_cache[n+1024] = zkl;
            Rq_cache[n+1536] = akl;
        }
    }

    for (int n = tx; n < 32; n += 16) {
        int i = n / 32;
        int tile = n % 32;
        int task_kl = blockIdx.y * 512 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*512] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 64; ++batch_ij) {
        int task_ij0 = blockIdx.x * 1024 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 4; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 32; ++batch_kl) {
            int task_kl0 = blockIdx.y * 512 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+512];
            double zkl = Rq_cache[sq_kl+1024];
            double akl = Rq_cache[sq_kl+1536];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 1);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 1; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+32];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+48];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 4; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 32; n += 16) {
        int i = n / 32;
        int tile = n % 32;
        int task_kl = blockIdx.y * 512 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*512]);
        }
    }
}

// TILEX=64, TILEY=25,
#if CUDA_VERSION >= 12040
__global__ __maxnreg__(128)
#else
__global__
#endif
void md_j_1_1(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 1024;
    int task_kl0 = blockIdx.y * 400;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 768;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 1600;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 64;
    double *dm_ij_cache = vj_kl_cache + 1600;
    double *dm_kl_cache = dm_ij_cache + 64;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 1664; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 1600; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 400; n += 256) {
        int task_kl = blockIdx.y * 400 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+400] = ykl;
            Rq_cache[n+800] = zkl;
            Rq_cache[n+1200] = akl;
        }
    }

    for (int n = tx; n < 100; n += 16) {
        int i = n / 25;
        int tile = n % 25;
        int task_kl = blockIdx.y * 400 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*400] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 64; ++batch_ij) {
        int task_ij0 = blockIdx.x * 1024 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 4; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 25; ++batch_kl) {
            int task_kl0 = blockIdx.y * 400 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+400];
            double zkl = Rq_cache[sq_kl+800];
            double akl = Rq_cache[sq_kl+1200];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 2);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 2; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+32];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+48];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_1 * dm_ij_cache[tx+0];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl -= R_0_0_0_2 * dm_ij_cache[tx+16];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+32];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+48];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+400] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+16];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl -= R_0_0_2_0 * dm_ij_cache[tx+32];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+48];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+800] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+32];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl -= R_0_2_0_0 * dm_ij_cache[tx+48];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1200] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_1 * dm_kl_cache[sq_kl+400];
            vj_ij -= R_0_0_1_0 * dm_kl_cache[sq_kl+800];
            vj_ij -= R_0_1_0_0 * dm_kl_cache[sq_kl+1200];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_2 * dm_kl_cache[sq_kl+400];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+800];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+1200];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+400];
            vj_ij -= R_0_0_2_0 * dm_kl_cache[sq_kl+800];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+1200];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+400];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+800];
            vj_ij -= R_0_2_0_0 * dm_kl_cache[sq_kl+1200];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 4; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 100; n += 16) {
        int i = n / 25;
        int tile = n % 25;
        int task_kl = blockIdx.y * 400 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*400]);
        }
    }
}

// TILEX=64, TILEY=28,
__global__
void md_j_1_2(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 1024;
    int task_kl0 = blockIdx.y * 448;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 1024;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 1792;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 64;
    double *dm_ij_cache = vj_kl_cache + 4480;
    double *dm_kl_cache = dm_ij_cache + 64;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 1856; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 4480; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 448; n += 256) {
        int task_kl = blockIdx.y * 448 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+448] = ykl;
            Rq_cache[n+896] = zkl;
            Rq_cache[n+1344] = akl;
        }
    }

    for (int n = tx; n < 280; n += 16) {
        int i = n / 28;
        int tile = n % 28;
        int task_kl = blockIdx.y * 448 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*448] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 64; ++batch_ij) {
        int task_ij0 = blockIdx.x * 1024 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 4; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 28; ++batch_kl) {
            int task_kl0 = blockIdx.y * 448 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+448];
            double zkl = Rq_cache[sq_kl+896];
            double akl = Rq_cache[sq_kl+1344];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 3);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 3; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+32];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+48];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_1 * dm_ij_cache[tx+0];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl -= R_0_0_0_2 * dm_ij_cache[tx+16];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+32];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+48];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+448] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+0];
            double R_2_0_0_1 = zpq * gamma_inc[sq_id+3*256];
            double R_1_0_0_2 = zpq * R_2_0_0_1 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_0_3 = zpq * R_1_0_0_2 + 2 * R_1_0_0_1;
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+16];
            double R_0_0_1_2 = ypq * R_1_0_0_2;
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+32];
            double R_0_1_0_2 = xpq * R_1_0_0_2;
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+48];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+896] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+16];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl -= R_0_0_2_0 * dm_ij_cache[tx+32];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+48];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1344] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+16];
            double R_1_0_1_1 = ypq * R_2_0_0_1;
            double R_0_0_2_1 = ypq * R_1_0_1_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+32];
            double R_0_1_1_1 = xpq * R_1_0_1_1;
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+48];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1792] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+16];
            double R_2_0_1_0 = ypq * gamma_inc[sq_id+3*256];
            double R_1_0_2_0 = ypq * R_2_0_1_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_3_0 = ypq * R_1_0_2_0 + 2 * R_1_0_1_0;
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+32];
            double R_0_1_2_0 = xpq * R_1_0_2_0;
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+48];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2240] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+32];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl -= R_0_2_0_0 * dm_ij_cache[tx+48];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2688] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+32];
            double R_1_1_0_1 = xpq * R_2_0_0_1;
            double R_0_2_0_1 = xpq * R_1_1_0_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+48];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3136] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+32];
            double R_1_1_1_0 = xpq * R_2_0_1_0;
            double R_0_2_1_0 = xpq * R_1_1_1_0 + 1 * R_1_0_1_0;
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+48];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3584] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+32];
            double R_2_1_0_0 = xpq * gamma_inc[sq_id+3*256];
            double R_1_2_0_0 = xpq * R_2_1_0_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_3_0_0 = xpq * R_1_2_0_0 + 2 * R_1_1_0_0;
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+48];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+4032] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_1 * dm_kl_cache[sq_kl+448];
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_1_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+1792];
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+2240];
            vj_ij -= R_0_1_0_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+4032];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_2 * dm_kl_cache[sq_kl+448];
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+1792];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+2240];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+4032];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+448];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_2_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+1792];
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+2240];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+4032];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+448];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+1792];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+2240];
            vj_ij -= R_0_2_0_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+4032];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 4; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 280; n += 16) {
        int i = n / 28;
        int tile = n % 28;
        int task_kl = blockIdx.y * 448 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*448]);
        }
    }
}

// TILEX=42, TILEY=32,
#if CUDA_VERSION >= 12040
__global__ __maxnreg__(128)
#else
__global__
#endif
void md_j_2_0(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 672;
    int task_kl0 = blockIdx.y * 512;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 768;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 2048;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 160;
    double *dm_ij_cache = vj_kl_cache + 512;
    double *dm_kl_cache = dm_ij_cache + 160;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 2112; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 512; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 512; n += 256) {
        int task_kl = blockIdx.y * 512 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+512] = ykl;
            Rq_cache[n+1024] = zkl;
            Rq_cache[n+1536] = akl;
        }
    }

    for (int n = tx; n < 32; n += 16) {
        int i = n / 32;
        int tile = n % 32;
        int task_kl = blockIdx.y * 512 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*512] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 42; ++batch_ij) {
        int task_ij0 = blockIdx.x * 672 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 10; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 32; ++batch_kl) {
            int task_kl0 = blockIdx.y * 512 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+512];
            double zkl = Rq_cache[sq_kl+1024];
            double akl = Rq_cache[sq_kl+1536];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 2);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 2; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+32];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+48];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+64];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+80];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+96];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+112];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+128];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+64] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+80] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+96] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+112] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+128] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+144] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 10; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 32; n += 16) {
        int i = n / 32;
        int tile = n % 32;
        int task_kl = blockIdx.y * 512 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*512]);
        }
    }
}

// TILEX=42, TILEY=23,
#if CUDA_VERSION >= 12040
__global__ __maxnreg__(128)
#else
__global__
#endif
void md_j_2_1(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 672;
    int task_kl0 = blockIdx.y * 368;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 1024;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 1472;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 160;
    double *dm_ij_cache = vj_kl_cache + 1472;
    double *dm_kl_cache = dm_ij_cache + 160;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 1536; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 1472; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 368; n += 256) {
        int task_kl = blockIdx.y * 368 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+368] = ykl;
            Rq_cache[n+736] = zkl;
            Rq_cache[n+1104] = akl;
        }
    }

    for (int n = tx; n < 92; n += 16) {
        int i = n / 23;
        int tile = n % 23;
        int task_kl = blockIdx.y * 368 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*368] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 42; ++batch_ij) {
        int task_ij0 = blockIdx.x * 672 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 10; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 23; ++batch_kl) {
            int task_kl0 = blockIdx.y * 368 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+368];
            double zkl = Rq_cache[sq_kl+736];
            double akl = Rq_cache[sq_kl+1104];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 3);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 3; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+32];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+48];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+64];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+80];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+96];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+112];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+128];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_2 * dm_ij_cache[tx+16];
            double R_2_0_0_1 = zpq * gamma_inc[sq_id+3*256];
            double R_1_0_0_2 = zpq * R_2_0_0_1 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_0_3 = zpq * R_1_0_0_2 + 2 * R_1_0_0_1;
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+48];
            double R_0_0_1_2 = ypq * R_1_0_0_2;
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+64];
            double R_1_0_1_1 = ypq * R_2_0_0_1;
            double R_0_0_2_1 = ypq * R_1_0_1_1 + 1 * R_1_0_0_1;
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+96];
            double R_0_1_0_2 = xpq * R_1_0_0_2;
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+112];
            double R_0_1_1_1 = xpq * R_1_0_1_1;
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+128];
            double R_1_1_0_1 = xpq * R_2_0_0_1;
            double R_0_2_0_1 = xpq * R_1_1_0_1 + 1 * R_1_0_0_1;
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+368] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_2_0 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+64];
            double R_2_0_1_0 = ypq * gamma_inc[sq_id+3*256];
            double R_1_0_2_0 = ypq * R_2_0_1_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_3_0 = ypq * R_1_0_2_0 + 2 * R_1_0_1_0;
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+112];
            double R_0_1_2_0 = xpq * R_1_0_2_0;
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+128];
            double R_1_1_1_0 = xpq * R_2_0_1_0;
            double R_0_2_1_0 = xpq * R_1_1_1_0 + 1 * R_1_0_1_0;
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+736] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_0_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+128];
            double R_2_1_0_0 = xpq * gamma_inc[sq_id+3*256];
            double R_1_2_0_0 = xpq * R_2_1_0_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_3_0_0 = xpq * R_1_2_0_0 + 2 * R_1_1_0_0;
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1104] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_1 * dm_kl_cache[sq_kl+368];
            vj_ij -= R_0_0_1_0 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_1_0_0 * dm_kl_cache[sq_kl+1104];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_2 * dm_kl_cache[sq_kl+368];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+1104];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+368];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+1104];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+368];
            vj_ij -= R_0_0_2_0 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+1104];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+368];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+1104];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+64] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+368];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+1104];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+80] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+368];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_2_0_0 * dm_kl_cache[sq_kl+1104];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+96] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+368];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+1104];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+112] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+368];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+1104];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+128] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+368];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+1104];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+144] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 10; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 92; n += 16) {
        int i = n / 23;
        int tile = n % 23;
        int task_kl = blockIdx.y * 368 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*368]);
        }
    }
}

// TILEX=42, TILEY=11,
#if CUDA_VERSION >= 12040
__global__ __maxnreg__(128)
#else
__global__
#endif
void md_j_2_2(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 672;
    int task_kl0 = blockIdx.y * 176;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 1280;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 704;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 160;
    double *dm_ij_cache = vj_kl_cache + 1760;
    double *dm_kl_cache = dm_ij_cache + 160;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 768; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 1760; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 176; n += 256) {
        int task_kl = blockIdx.y * 176 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+176] = ykl;
            Rq_cache[n+352] = zkl;
            Rq_cache[n+528] = akl;
        }
    }

    for (int n = tx; n < 110; n += 16) {
        int i = n / 11;
        int tile = n % 11;
        int task_kl = blockIdx.y * 176 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*176] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 42; ++batch_ij) {
        int task_ij0 = blockIdx.x * 672 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 10; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 11; ++batch_kl) {
            int task_kl0 = blockIdx.y * 176 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+176];
            double zkl = Rq_cache[sq_kl+352];
            double akl = Rq_cache[sq_kl+528];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 4);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 4; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+32];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+48];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+64];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+80];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+96];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+112];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+128];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_2 * dm_ij_cache[tx+16];
            double R_2_0_0_1 = zpq * gamma_inc[sq_id+3*256];
            double R_1_0_0_2 = zpq * R_2_0_0_1 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_0_3 = zpq * R_1_0_0_2 + 2 * R_1_0_0_1;
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+48];
            double R_0_0_1_2 = ypq * R_1_0_0_2;
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+64];
            double R_1_0_1_1 = ypq * R_2_0_0_1;
            double R_0_0_2_1 = ypq * R_1_0_1_1 + 1 * R_1_0_0_1;
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+96];
            double R_0_1_0_2 = xpq * R_1_0_0_2;
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+112];
            double R_0_1_1_1 = xpq * R_1_0_1_1;
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+128];
            double R_1_1_0_1 = xpq * R_2_0_0_1;
            double R_0_2_0_1 = xpq * R_1_1_0_1 + 1 * R_1_0_0_1;
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+176] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+16];
            double R_3_0_0_1 = zpq * gamma_inc[sq_id+4*256];
            double R_2_0_0_2 = zpq * R_3_0_0_1 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_0_3 = zpq * R_2_0_0_2 + 2 * R_2_0_0_1;
            double R_0_0_0_4 = zpq * R_1_0_0_3 + 3 * R_1_0_0_2;
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+48];
            double R_0_0_1_3 = ypq * R_1_0_0_3;
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+64];
            double R_1_0_1_2 = ypq * R_2_0_0_2;
            double R_0_0_2_2 = ypq * R_1_0_1_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+96];
            double R_0_1_0_3 = xpq * R_1_0_0_3;
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+112];
            double R_0_1_1_2 = xpq * R_1_0_1_2;
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+128];
            double R_1_1_0_2 = xpq * R_2_0_0_2;
            double R_0_2_0_2 = xpq * R_1_1_0_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+352] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_2_0 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+64];
            double R_2_0_1_0 = ypq * gamma_inc[sq_id+3*256];
            double R_1_0_2_0 = ypq * R_2_0_1_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_3_0 = ypq * R_1_0_2_0 + 2 * R_1_0_1_0;
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+112];
            double R_0_1_2_0 = xpq * R_1_0_2_0;
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+128];
            double R_1_1_1_0 = xpq * R_2_0_1_0;
            double R_0_2_1_0 = xpq * R_1_1_1_0 + 1 * R_1_0_1_0;
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+528] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+64];
            double R_2_0_1_1 = ypq * R_3_0_0_1;
            double R_1_0_2_1 = ypq * R_2_0_1_1 + 1 * R_2_0_0_1;
            double R_0_0_3_1 = ypq * R_1_0_2_1 + 2 * R_1_0_1_1;
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+112];
            double R_0_1_2_1 = xpq * R_1_0_2_1;
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+128];
            double R_1_1_1_1 = xpq * R_2_0_1_1;
            double R_0_2_1_1 = xpq * R_1_1_1_1 + 1 * R_1_0_1_1;
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+704] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+64];
            double R_3_0_1_0 = ypq * gamma_inc[sq_id+4*256];
            double R_2_0_2_0 = ypq * R_3_0_1_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_3_0 = ypq * R_2_0_2_0 + 2 * R_2_0_1_0;
            double R_0_0_4_0 = ypq * R_1_0_3_0 + 3 * R_1_0_2_0;
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+112];
            double R_0_1_3_0 = xpq * R_1_0_3_0;
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+128];
            double R_1_1_2_0 = xpq * R_2_0_2_0;
            double R_0_2_2_0 = xpq * R_1_1_2_0 + 1 * R_1_0_2_0;
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+880] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_0_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+128];
            double R_2_1_0_0 = xpq * gamma_inc[sq_id+3*256];
            double R_1_2_0_0 = xpq * R_2_1_0_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_3_0_0 = xpq * R_1_2_0_0 + 2 * R_1_1_0_0;
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1056] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+128];
            double R_2_1_0_1 = xpq * R_3_0_0_1;
            double R_1_2_0_1 = xpq * R_2_1_0_1 + 1 * R_2_0_0_1;
            double R_0_3_0_1 = xpq * R_1_2_0_1 + 2 * R_1_1_0_1;
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1232] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+128];
            double R_2_1_1_0 = xpq * R_3_0_1_0;
            double R_1_2_1_0 = xpq * R_2_1_1_0 + 1 * R_2_0_1_0;
            double R_0_3_1_0 = xpq * R_1_2_1_0 + 2 * R_1_1_1_0;
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1408] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+128];
            double R_3_1_0_0 = xpq * gamma_inc[sq_id+4*256];
            double R_2_2_0_0 = xpq * R_3_1_0_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_3_0_0 = xpq * R_2_2_0_0 + 2 * R_2_1_0_0;
            double R_0_4_0_0 = xpq * R_1_3_0_0 + 3 * R_1_2_0_0;
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1584] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_1_0 * dm_kl_cache[sq_kl+528];
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_1_0_0 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+1232];
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+1408];
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+1584];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_2 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+528];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+1232];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+1408];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+1584];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+528];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+1232];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+1408];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+1584];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_2_0 * dm_kl_cache[sq_kl+528];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+1232];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+1408];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+1584];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+528];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+1232];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1408];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+1584];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+64] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+528];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1232];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+1408];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+1584];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+80] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+528];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_2_0_0 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+1232];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+1408];
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+1584];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+96] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+528];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+1232];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+1408];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+1584];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+112] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+528];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+1232];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+1408];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+1584];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+128] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+528];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+1232];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+1408];
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+1584];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+144] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 10; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 110; n += 16) {
        int i = n / 11;
        int tile = n % 11;
        int task_kl = blockIdx.y * 176 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*176]);
        }
    }
}

// TILEX=42, TILEY=14,
__global__
void md_j_2_3(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 672;
    int task_kl0 = blockIdx.y * 224;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 1536;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 896;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 160;
    double *dm_ij_cache = vj_kl_cache + 4480;
    double *dm_kl_cache = dm_ij_cache + 160;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 960; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 4480; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 224; n += 256) {
        int task_kl = blockIdx.y * 224 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+224] = ykl;
            Rq_cache[n+448] = zkl;
            Rq_cache[n+672] = akl;
        }
    }

    for (int n = tx; n < 280; n += 16) {
        int i = n / 14;
        int tile = n % 14;
        int task_kl = blockIdx.y * 224 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*224] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 42; ++batch_ij) {
        int task_ij0 = blockIdx.x * 672 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 10; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 14; ++batch_kl) {
            int task_kl0 = blockIdx.y * 224 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+224];
            double zkl = Rq_cache[sq_kl+448];
            double akl = Rq_cache[sq_kl+672];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 5);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 5; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+32];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+48];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+64];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+80];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+96];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+112];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+128];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_2 * dm_ij_cache[tx+16];
            double R_2_0_0_1 = zpq * gamma_inc[sq_id+3*256];
            double R_1_0_0_2 = zpq * R_2_0_0_1 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_0_3 = zpq * R_1_0_0_2 + 2 * R_1_0_0_1;
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+48];
            double R_0_0_1_2 = ypq * R_1_0_0_2;
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+64];
            double R_1_0_1_1 = ypq * R_2_0_0_1;
            double R_0_0_2_1 = ypq * R_1_0_1_1 + 1 * R_1_0_0_1;
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+96];
            double R_0_1_0_2 = xpq * R_1_0_0_2;
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+112];
            double R_0_1_1_1 = xpq * R_1_0_1_1;
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+128];
            double R_1_1_0_1 = xpq * R_2_0_0_1;
            double R_0_2_0_1 = xpq * R_1_1_0_1 + 1 * R_1_0_0_1;
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+224] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+16];
            double R_3_0_0_1 = zpq * gamma_inc[sq_id+4*256];
            double R_2_0_0_2 = zpq * R_3_0_0_1 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_0_3 = zpq * R_2_0_0_2 + 2 * R_2_0_0_1;
            double R_0_0_0_4 = zpq * R_1_0_0_3 + 3 * R_1_0_0_2;
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+48];
            double R_0_0_1_3 = ypq * R_1_0_0_3;
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+64];
            double R_1_0_1_2 = ypq * R_2_0_0_2;
            double R_0_0_2_2 = ypq * R_1_0_1_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+96];
            double R_0_1_0_3 = xpq * R_1_0_0_3;
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+112];
            double R_0_1_1_2 = xpq * R_1_0_1_2;
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+128];
            double R_1_1_0_2 = xpq * R_2_0_0_2;
            double R_0_2_0_2 = xpq * R_1_1_0_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+448] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+16];
            double R_4_0_0_1 = zpq * gamma_inc[sq_id+5*256];
            double R_3_0_0_2 = zpq * R_4_0_0_1 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_0_3 = zpq * R_3_0_0_2 + 2 * R_3_0_0_1;
            double R_1_0_0_4 = zpq * R_2_0_0_3 + 3 * R_2_0_0_2;
            double R_0_0_0_5 = zpq * R_1_0_0_4 + 4 * R_1_0_0_3;
            vj_kl -= R_0_0_0_5 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+48];
            double R_0_0_1_4 = ypq * R_1_0_0_4;
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+64];
            double R_1_0_1_3 = ypq * R_2_0_0_3;
            double R_0_0_2_3 = ypq * R_1_0_1_3 + 1 * R_1_0_0_3;
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+96];
            double R_0_1_0_4 = xpq * R_1_0_0_4;
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+112];
            double R_0_1_1_3 = xpq * R_1_0_1_3;
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+128];
            double R_1_1_0_3 = xpq * R_2_0_0_3;
            double R_0_2_0_3 = xpq * R_1_1_0_3 + 1 * R_1_0_0_3;
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+672] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_2_0 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+64];
            double R_2_0_1_0 = ypq * gamma_inc[sq_id+3*256];
            double R_1_0_2_0 = ypq * R_2_0_1_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_3_0 = ypq * R_1_0_2_0 + 2 * R_1_0_1_0;
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+112];
            double R_0_1_2_0 = xpq * R_1_0_2_0;
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+128];
            double R_1_1_1_0 = xpq * R_2_0_1_0;
            double R_0_2_1_0 = xpq * R_1_1_1_0 + 1 * R_1_0_1_0;
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+896] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+64];
            double R_2_0_1_1 = ypq * R_3_0_0_1;
            double R_1_0_2_1 = ypq * R_2_0_1_1 + 1 * R_2_0_0_1;
            double R_0_0_3_1 = ypq * R_1_0_2_1 + 2 * R_1_0_1_1;
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+112];
            double R_0_1_2_1 = xpq * R_1_0_2_1;
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+128];
            double R_1_1_1_1 = xpq * R_2_0_1_1;
            double R_0_2_1_1 = xpq * R_1_1_1_1 + 1 * R_1_0_1_1;
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1120] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+64];
            double R_2_0_1_2 = ypq * R_3_0_0_2;
            double R_1_0_2_2 = ypq * R_2_0_1_2 + 1 * R_2_0_0_2;
            double R_0_0_3_2 = ypq * R_1_0_2_2 + 2 * R_1_0_1_2;
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+112];
            double R_0_1_2_2 = xpq * R_1_0_2_2;
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+128];
            double R_1_1_1_2 = xpq * R_2_0_1_2;
            double R_0_2_1_2 = xpq * R_1_1_1_2 + 1 * R_1_0_1_2;
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1344] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+64];
            double R_3_0_1_0 = ypq * gamma_inc[sq_id+4*256];
            double R_2_0_2_0 = ypq * R_3_0_1_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_3_0 = ypq * R_2_0_2_0 + 2 * R_2_0_1_0;
            double R_0_0_4_0 = ypq * R_1_0_3_0 + 3 * R_1_0_2_0;
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+112];
            double R_0_1_3_0 = xpq * R_1_0_3_0;
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+128];
            double R_1_1_2_0 = xpq * R_2_0_2_0;
            double R_0_2_2_0 = xpq * R_1_1_2_0 + 1 * R_1_0_2_0;
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1568] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+64];
            double R_3_0_1_1 = ypq * R_4_0_0_1;
            double R_2_0_2_1 = ypq * R_3_0_1_1 + 1 * R_3_0_0_1;
            double R_1_0_3_1 = ypq * R_2_0_2_1 + 2 * R_2_0_1_1;
            double R_0_0_4_1 = ypq * R_1_0_3_1 + 3 * R_1_0_2_1;
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+112];
            double R_0_1_3_1 = xpq * R_1_0_3_1;
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+128];
            double R_1_1_2_1 = xpq * R_2_0_2_1;
            double R_0_2_2_1 = xpq * R_1_1_2_1 + 1 * R_1_0_2_1;
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1792] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+64];
            double R_4_0_1_0 = ypq * gamma_inc[sq_id+5*256];
            double R_3_0_2_0 = ypq * R_4_0_1_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_3_0 = ypq * R_3_0_2_0 + 2 * R_3_0_1_0;
            double R_1_0_4_0 = ypq * R_2_0_3_0 + 3 * R_2_0_2_0;
            double R_0_0_5_0 = ypq * R_1_0_4_0 + 4 * R_1_0_3_0;
            vj_kl -= R_0_0_5_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+112];
            double R_0_1_4_0 = xpq * R_1_0_4_0;
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+128];
            double R_1_1_3_0 = xpq * R_2_0_3_0;
            double R_0_2_3_0 = xpq * R_1_1_3_0 + 1 * R_1_0_3_0;
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2016] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_0_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+128];
            double R_2_1_0_0 = xpq * gamma_inc[sq_id+3*256];
            double R_1_2_0_0 = xpq * R_2_1_0_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_3_0_0 = xpq * R_1_2_0_0 + 2 * R_1_1_0_0;
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2240] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+128];
            double R_2_1_0_1 = xpq * R_3_0_0_1;
            double R_1_2_0_1 = xpq * R_2_1_0_1 + 1 * R_2_0_0_1;
            double R_0_3_0_1 = xpq * R_1_2_0_1 + 2 * R_1_1_0_1;
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2464] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+128];
            double R_2_1_0_2 = xpq * R_3_0_0_2;
            double R_1_2_0_2 = xpq * R_2_1_0_2 + 1 * R_2_0_0_2;
            double R_0_3_0_2 = xpq * R_1_2_0_2 + 2 * R_1_1_0_2;
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2688] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+128];
            double R_2_1_1_0 = xpq * R_3_0_1_0;
            double R_1_2_1_0 = xpq * R_2_1_1_0 + 1 * R_2_0_1_0;
            double R_0_3_1_0 = xpq * R_1_2_1_0 + 2 * R_1_1_1_0;
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2912] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+128];
            double R_2_1_1_1 = xpq * R_3_0_1_1;
            double R_1_2_1_1 = xpq * R_2_1_1_1 + 1 * R_2_0_1_1;
            double R_0_3_1_1 = xpq * R_1_2_1_1 + 2 * R_1_1_1_1;
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3136] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+128];
            double R_2_1_2_0 = xpq * R_3_0_2_0;
            double R_1_2_2_0 = xpq * R_2_1_2_0 + 1 * R_2_0_2_0;
            double R_0_3_2_0 = xpq * R_1_2_2_0 + 2 * R_1_1_2_0;
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3360] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+128];
            double R_3_1_0_0 = xpq * gamma_inc[sq_id+4*256];
            double R_2_2_0_0 = xpq * R_3_1_0_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_3_0_0 = xpq * R_2_2_0_0 + 2 * R_2_1_0_0;
            double R_0_4_0_0 = xpq * R_1_3_0_0 + 3 * R_1_2_0_0;
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3584] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+128];
            double R_3_1_0_1 = xpq * R_4_0_0_1;
            double R_2_2_0_1 = xpq * R_3_1_0_1 + 1 * R_3_0_0_1;
            double R_1_3_0_1 = xpq * R_2_2_0_1 + 2 * R_2_1_0_1;
            double R_0_4_0_1 = xpq * R_1_3_0_1 + 3 * R_1_2_0_1;
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3808] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+128];
            double R_3_1_1_0 = xpq * R_4_0_1_0;
            double R_2_2_1_0 = xpq * R_3_1_1_0 + 1 * R_3_0_1_0;
            double R_1_3_1_0 = xpq * R_2_2_1_0 + 2 * R_2_1_1_0;
            double R_0_4_1_0 = xpq * R_1_3_1_0 + 3 * R_1_2_1_0;
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+4032] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+48];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+128];
            double R_4_1_0_0 = xpq * gamma_inc[sq_id+5*256];
            double R_3_2_0_0 = xpq * R_4_1_0_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_3_0_0 = xpq * R_3_2_0_0 + 2 * R_3_1_0_0;
            double R_1_4_0_0 = xpq * R_2_3_0_0 + 3 * R_2_2_0_0;
            double R_0_5_0_0 = xpq * R_1_4_0_0 + 4 * R_1_3_0_0;
            vj_kl -= R_0_5_0_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+4256] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_1 * dm_kl_cache[sq_kl+224];
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_1_0 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+1120];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_0_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+3360];
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+3584];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+3808];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+4032];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+4256];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_2 * dm_kl_cache[sq_kl+224];
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+1120];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+3360];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+3584];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+3808];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+4032];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+4256];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+224];
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_0_5 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+1120];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+3360];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+3584];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+3808];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+4032];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+4256];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+224];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_2_0 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+1120];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+3360];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+3584];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+3808];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+4032];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+4256];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+224];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+1120];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+3360];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+3584];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+3808];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+4032];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+4256];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+64] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+224];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+1120];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_0_5_0 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+3360];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+3584];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+3808];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+4032];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+4256];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+80] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+224];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+1120];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_0_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+3360];
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+3584];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+3808];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+4032];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+4256];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+96] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+224];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+1120];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+3360];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+3584];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+3808];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+4032];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+4256];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+112] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+224];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1120];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+3360];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+3584];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+3808];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+4032];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+4256];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+128] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+224];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+1120];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+3360];
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+3584];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+3808];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+4032];
            vj_ij -= R_0_5_0_0 * dm_kl_cache[sq_kl+4256];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+144] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 10; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 280; n += 16) {
        int i = n / 14;
        int tile = n % 14;
        int task_kl = blockIdx.y * 224 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*224]);
        }
    }
}

// TILEX=42, TILEY=8,
__global__
void md_j_2_4(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 672;
    int task_kl0 = blockIdx.y * 128;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 1792;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 512;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 160;
    double *dm_ij_cache = vj_kl_cache + 4480;
    double *dm_kl_cache = dm_ij_cache + 160;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 576; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 4480; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 128; n += 256) {
        int task_kl = blockIdx.y * 128 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+128] = ykl;
            Rq_cache[n+256] = zkl;
            Rq_cache[n+384] = akl;
        }
    }

    for (int n = tx; n < 280; n += 16) {
        int i = n / 8;
        int tile = n % 8;
        int task_kl = blockIdx.y * 128 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*128] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 42; ++batch_ij) {
        int task_ij0 = blockIdx.x * 672 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 10; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 8; ++batch_kl) {
            int task_kl0 = blockIdx.y * 128 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+128];
            double zkl = Rq_cache[sq_kl+256];
            double akl = Rq_cache[sq_kl+384];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 6);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 6; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+32];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+48];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+64];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+80];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+96];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+112];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+128];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_2 * dm_ij_cache[tx+16];
            double R_2_0_0_1 = zpq * gamma_inc[sq_id+3*256];
            double R_1_0_0_2 = zpq * R_2_0_0_1 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_0_3 = zpq * R_1_0_0_2 + 2 * R_1_0_0_1;
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+48];
            double R_0_0_1_2 = ypq * R_1_0_0_2;
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+64];
            double R_1_0_1_1 = ypq * R_2_0_0_1;
            double R_0_0_2_1 = ypq * R_1_0_1_1 + 1 * R_1_0_0_1;
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+96];
            double R_0_1_0_2 = xpq * R_1_0_0_2;
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+112];
            double R_0_1_1_1 = xpq * R_1_0_1_1;
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+128];
            double R_1_1_0_1 = xpq * R_2_0_0_1;
            double R_0_2_0_1 = xpq * R_1_1_0_1 + 1 * R_1_0_0_1;
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+128] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+16];
            double R_3_0_0_1 = zpq * gamma_inc[sq_id+4*256];
            double R_2_0_0_2 = zpq * R_3_0_0_1 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_0_3 = zpq * R_2_0_0_2 + 2 * R_2_0_0_1;
            double R_0_0_0_4 = zpq * R_1_0_0_3 + 3 * R_1_0_0_2;
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+48];
            double R_0_0_1_3 = ypq * R_1_0_0_3;
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+64];
            double R_1_0_1_2 = ypq * R_2_0_0_2;
            double R_0_0_2_2 = ypq * R_1_0_1_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+96];
            double R_0_1_0_3 = xpq * R_1_0_0_3;
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+112];
            double R_0_1_1_2 = xpq * R_1_0_1_2;
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+128];
            double R_1_1_0_2 = xpq * R_2_0_0_2;
            double R_0_2_0_2 = xpq * R_1_1_0_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+256] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+16];
            double R_4_0_0_1 = zpq * gamma_inc[sq_id+5*256];
            double R_3_0_0_2 = zpq * R_4_0_0_1 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_0_3 = zpq * R_3_0_0_2 + 2 * R_3_0_0_1;
            double R_1_0_0_4 = zpq * R_2_0_0_3 + 3 * R_2_0_0_2;
            double R_0_0_0_5 = zpq * R_1_0_0_4 + 4 * R_1_0_0_3;
            vj_kl -= R_0_0_0_5 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+48];
            double R_0_0_1_4 = ypq * R_1_0_0_4;
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+64];
            double R_1_0_1_3 = ypq * R_2_0_0_3;
            double R_0_0_2_3 = ypq * R_1_0_1_3 + 1 * R_1_0_0_3;
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+96];
            double R_0_1_0_4 = xpq * R_1_0_0_4;
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+112];
            double R_0_1_1_3 = xpq * R_1_0_1_3;
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+128];
            double R_1_1_0_3 = xpq * R_2_0_0_3;
            double R_0_2_0_3 = xpq * R_1_1_0_3 + 1 * R_1_0_0_3;
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+384] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+16];
            double R_5_0_0_1 = zpq * gamma_inc[sq_id+6*256];
            double R_4_0_0_2 = zpq * R_5_0_0_1 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_0_3 = zpq * R_4_0_0_2 + 2 * R_4_0_0_1;
            double R_2_0_0_4 = zpq * R_3_0_0_3 + 3 * R_3_0_0_2;
            double R_1_0_0_5 = zpq * R_2_0_0_4 + 4 * R_2_0_0_3;
            double R_0_0_0_6 = zpq * R_1_0_0_5 + 5 * R_1_0_0_4;
            vj_kl += R_0_0_0_6 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+48];
            double R_0_0_1_5 = ypq * R_1_0_0_5;
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+64];
            double R_1_0_1_4 = ypq * R_2_0_0_4;
            double R_0_0_2_4 = ypq * R_1_0_1_4 + 1 * R_1_0_0_4;
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+96];
            double R_0_1_0_5 = xpq * R_1_0_0_5;
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+112];
            double R_0_1_1_4 = xpq * R_1_0_1_4;
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+128];
            double R_1_1_0_4 = xpq * R_2_0_0_4;
            double R_0_2_0_4 = xpq * R_1_1_0_4 + 1 * R_1_0_0_4;
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+512] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_2_0 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+64];
            double R_2_0_1_0 = ypq * gamma_inc[sq_id+3*256];
            double R_1_0_2_0 = ypq * R_2_0_1_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_3_0 = ypq * R_1_0_2_0 + 2 * R_1_0_1_0;
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+112];
            double R_0_1_2_0 = xpq * R_1_0_2_0;
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+128];
            double R_1_1_1_0 = xpq * R_2_0_1_0;
            double R_0_2_1_0 = xpq * R_1_1_1_0 + 1 * R_1_0_1_0;
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+640] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+64];
            double R_2_0_1_1 = ypq * R_3_0_0_1;
            double R_1_0_2_1 = ypq * R_2_0_1_1 + 1 * R_2_0_0_1;
            double R_0_0_3_1 = ypq * R_1_0_2_1 + 2 * R_1_0_1_1;
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+112];
            double R_0_1_2_1 = xpq * R_1_0_2_1;
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+128];
            double R_1_1_1_1 = xpq * R_2_0_1_1;
            double R_0_2_1_1 = xpq * R_1_1_1_1 + 1 * R_1_0_1_1;
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+768] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+64];
            double R_2_0_1_2 = ypq * R_3_0_0_2;
            double R_1_0_2_2 = ypq * R_2_0_1_2 + 1 * R_2_0_0_2;
            double R_0_0_3_2 = ypq * R_1_0_2_2 + 2 * R_1_0_1_2;
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+112];
            double R_0_1_2_2 = xpq * R_1_0_2_2;
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+128];
            double R_1_1_1_2 = xpq * R_2_0_1_2;
            double R_0_2_1_2 = xpq * R_1_1_1_2 + 1 * R_1_0_1_2;
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+896] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+64];
            double R_2_0_1_3 = ypq * R_3_0_0_3;
            double R_1_0_2_3 = ypq * R_2_0_1_3 + 1 * R_2_0_0_3;
            double R_0_0_3_3 = ypq * R_1_0_2_3 + 2 * R_1_0_1_3;
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+112];
            double R_0_1_2_3 = xpq * R_1_0_2_3;
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+128];
            double R_1_1_1_3 = xpq * R_2_0_1_3;
            double R_0_2_1_3 = xpq * R_1_1_1_3 + 1 * R_1_0_1_3;
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1024] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+64];
            double R_3_0_1_0 = ypq * gamma_inc[sq_id+4*256];
            double R_2_0_2_0 = ypq * R_3_0_1_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_3_0 = ypq * R_2_0_2_0 + 2 * R_2_0_1_0;
            double R_0_0_4_0 = ypq * R_1_0_3_0 + 3 * R_1_0_2_0;
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+112];
            double R_0_1_3_0 = xpq * R_1_0_3_0;
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+128];
            double R_1_1_2_0 = xpq * R_2_0_2_0;
            double R_0_2_2_0 = xpq * R_1_1_2_0 + 1 * R_1_0_2_0;
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1152] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+64];
            double R_3_0_1_1 = ypq * R_4_0_0_1;
            double R_2_0_2_1 = ypq * R_3_0_1_1 + 1 * R_3_0_0_1;
            double R_1_0_3_1 = ypq * R_2_0_2_1 + 2 * R_2_0_1_1;
            double R_0_0_4_1 = ypq * R_1_0_3_1 + 3 * R_1_0_2_1;
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+112];
            double R_0_1_3_1 = xpq * R_1_0_3_1;
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+128];
            double R_1_1_2_1 = xpq * R_2_0_2_1;
            double R_0_2_2_1 = xpq * R_1_1_2_1 + 1 * R_1_0_2_1;
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1280] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+64];
            double R_3_0_1_2 = ypq * R_4_0_0_2;
            double R_2_0_2_2 = ypq * R_3_0_1_2 + 1 * R_3_0_0_2;
            double R_1_0_3_2 = ypq * R_2_0_2_2 + 2 * R_2_0_1_2;
            double R_0_0_4_2 = ypq * R_1_0_3_2 + 3 * R_1_0_2_2;
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+112];
            double R_0_1_3_2 = xpq * R_1_0_3_2;
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+128];
            double R_1_1_2_2 = xpq * R_2_0_2_2;
            double R_0_2_2_2 = xpq * R_1_1_2_2 + 1 * R_1_0_2_2;
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1408] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+64];
            double R_4_0_1_0 = ypq * gamma_inc[sq_id+5*256];
            double R_3_0_2_0 = ypq * R_4_0_1_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_3_0 = ypq * R_3_0_2_0 + 2 * R_3_0_1_0;
            double R_1_0_4_0 = ypq * R_2_0_3_0 + 3 * R_2_0_2_0;
            double R_0_0_5_0 = ypq * R_1_0_4_0 + 4 * R_1_0_3_0;
            vj_kl -= R_0_0_5_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+112];
            double R_0_1_4_0 = xpq * R_1_0_4_0;
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+128];
            double R_1_1_3_0 = xpq * R_2_0_3_0;
            double R_0_2_3_0 = xpq * R_1_1_3_0 + 1 * R_1_0_3_0;
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1536] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+64];
            double R_4_0_1_1 = ypq * R_5_0_0_1;
            double R_3_0_2_1 = ypq * R_4_0_1_1 + 1 * R_4_0_0_1;
            double R_2_0_3_1 = ypq * R_3_0_2_1 + 2 * R_3_0_1_1;
            double R_1_0_4_1 = ypq * R_2_0_3_1 + 3 * R_2_0_2_1;
            double R_0_0_5_1 = ypq * R_1_0_4_1 + 4 * R_1_0_3_1;
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+112];
            double R_0_1_4_1 = xpq * R_1_0_4_1;
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+128];
            double R_1_1_3_1 = xpq * R_2_0_3_1;
            double R_0_2_3_1 = xpq * R_1_1_3_1 + 1 * R_1_0_3_1;
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1664] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+64];
            double R_5_0_1_0 = ypq * gamma_inc[sq_id+6*256];
            double R_4_0_2_0 = ypq * R_5_0_1_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_3_0 = ypq * R_4_0_2_0 + 2 * R_4_0_1_0;
            double R_2_0_4_0 = ypq * R_3_0_3_0 + 3 * R_3_0_2_0;
            double R_1_0_5_0 = ypq * R_2_0_4_0 + 4 * R_2_0_3_0;
            double R_0_0_6_0 = ypq * R_1_0_5_0 + 5 * R_1_0_4_0;
            vj_kl += R_0_0_6_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+112];
            double R_0_1_5_0 = xpq * R_1_0_5_0;
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+128];
            double R_1_1_4_0 = xpq * R_2_0_4_0;
            double R_0_2_4_0 = xpq * R_1_1_4_0 + 1 * R_1_0_4_0;
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1792] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_0_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+128];
            double R_2_1_0_0 = xpq * gamma_inc[sq_id+3*256];
            double R_1_2_0_0 = xpq * R_2_1_0_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_3_0_0 = xpq * R_1_2_0_0 + 2 * R_1_1_0_0;
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1920] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+128];
            double R_2_1_0_1 = xpq * R_3_0_0_1;
            double R_1_2_0_1 = xpq * R_2_1_0_1 + 1 * R_2_0_0_1;
            double R_0_3_0_1 = xpq * R_1_2_0_1 + 2 * R_1_1_0_1;
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2048] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+128];
            double R_2_1_0_2 = xpq * R_3_0_0_2;
            double R_1_2_0_2 = xpq * R_2_1_0_2 + 1 * R_2_0_0_2;
            double R_0_3_0_2 = xpq * R_1_2_0_2 + 2 * R_1_1_0_2;
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2176] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+128];
            double R_2_1_0_3 = xpq * R_3_0_0_3;
            double R_1_2_0_3 = xpq * R_2_1_0_3 + 1 * R_2_0_0_3;
            double R_0_3_0_3 = xpq * R_1_2_0_3 + 2 * R_1_1_0_3;
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2304] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+128];
            double R_2_1_1_0 = xpq * R_3_0_1_0;
            double R_1_2_1_0 = xpq * R_2_1_1_0 + 1 * R_2_0_1_0;
            double R_0_3_1_0 = xpq * R_1_2_1_0 + 2 * R_1_1_1_0;
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2432] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+128];
            double R_2_1_1_1 = xpq * R_3_0_1_1;
            double R_1_2_1_1 = xpq * R_2_1_1_1 + 1 * R_2_0_1_1;
            double R_0_3_1_1 = xpq * R_1_2_1_1 + 2 * R_1_1_1_1;
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2560] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+128];
            double R_2_1_1_2 = xpq * R_3_0_1_2;
            double R_1_2_1_2 = xpq * R_2_1_1_2 + 1 * R_2_0_1_2;
            double R_0_3_1_2 = xpq * R_1_2_1_2 + 2 * R_1_1_1_2;
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2688] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+128];
            double R_2_1_2_0 = xpq * R_3_0_2_0;
            double R_1_2_2_0 = xpq * R_2_1_2_0 + 1 * R_2_0_2_0;
            double R_0_3_2_0 = xpq * R_1_2_2_0 + 2 * R_1_1_2_0;
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2816] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+128];
            double R_2_1_2_1 = xpq * R_3_0_2_1;
            double R_1_2_2_1 = xpq * R_2_1_2_1 + 1 * R_2_0_2_1;
            double R_0_3_2_1 = xpq * R_1_2_2_1 + 2 * R_1_1_2_1;
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2944] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+128];
            double R_2_1_3_0 = xpq * R_3_0_3_0;
            double R_1_2_3_0 = xpq * R_2_1_3_0 + 1 * R_2_0_3_0;
            double R_0_3_3_0 = xpq * R_1_2_3_0 + 2 * R_1_1_3_0;
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3072] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+128];
            double R_3_1_0_0 = xpq * gamma_inc[sq_id+4*256];
            double R_2_2_0_0 = xpq * R_3_1_0_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_3_0_0 = xpq * R_2_2_0_0 + 2 * R_2_1_0_0;
            double R_0_4_0_0 = xpq * R_1_3_0_0 + 3 * R_1_2_0_0;
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3200] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+128];
            double R_3_1_0_1 = xpq * R_4_0_0_1;
            double R_2_2_0_1 = xpq * R_3_1_0_1 + 1 * R_3_0_0_1;
            double R_1_3_0_1 = xpq * R_2_2_0_1 + 2 * R_2_1_0_1;
            double R_0_4_0_1 = xpq * R_1_3_0_1 + 3 * R_1_2_0_1;
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3328] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+128];
            double R_3_1_0_2 = xpq * R_4_0_0_2;
            double R_2_2_0_2 = xpq * R_3_1_0_2 + 1 * R_3_0_0_2;
            double R_1_3_0_2 = xpq * R_2_2_0_2 + 2 * R_2_1_0_2;
            double R_0_4_0_2 = xpq * R_1_3_0_2 + 3 * R_1_2_0_2;
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3456] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+128];
            double R_3_1_1_0 = xpq * R_4_0_1_0;
            double R_2_2_1_0 = xpq * R_3_1_1_0 + 1 * R_3_0_1_0;
            double R_1_3_1_0 = xpq * R_2_2_1_0 + 2 * R_2_1_1_0;
            double R_0_4_1_0 = xpq * R_1_3_1_0 + 3 * R_1_2_1_0;
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3584] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+128];
            double R_3_1_1_1 = xpq * R_4_0_1_1;
            double R_2_2_1_1 = xpq * R_3_1_1_1 + 1 * R_3_0_1_1;
            double R_1_3_1_1 = xpq * R_2_2_1_1 + 2 * R_2_1_1_1;
            double R_0_4_1_1 = xpq * R_1_3_1_1 + 3 * R_1_2_1_1;
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3712] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+128];
            double R_3_1_2_0 = xpq * R_4_0_2_0;
            double R_2_2_2_0 = xpq * R_3_1_2_0 + 1 * R_3_0_2_0;
            double R_1_3_2_0 = xpq * R_2_2_2_0 + 2 * R_2_1_2_0;
            double R_0_4_2_0 = xpq * R_1_3_2_0 + 3 * R_1_2_2_0;
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3840] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+48];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+128];
            double R_4_1_0_0 = xpq * gamma_inc[sq_id+5*256];
            double R_3_2_0_0 = xpq * R_4_1_0_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_3_0_0 = xpq * R_3_2_0_0 + 2 * R_3_1_0_0;
            double R_1_4_0_0 = xpq * R_2_3_0_0 + 3 * R_2_2_0_0;
            double R_0_5_0_0 = xpq * R_1_4_0_0 + 4 * R_1_3_0_0;
            vj_kl -= R_0_5_0_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3968] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+48];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+64];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+128];
            double R_4_1_0_1 = xpq * R_5_0_0_1;
            double R_3_2_0_1 = xpq * R_4_1_0_1 + 1 * R_4_0_0_1;
            double R_2_3_0_1 = xpq * R_3_2_0_1 + 2 * R_3_1_0_1;
            double R_1_4_0_1 = xpq * R_2_3_0_1 + 3 * R_2_2_0_1;
            double R_0_5_0_1 = xpq * R_1_4_0_1 + 4 * R_1_3_0_1;
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+4096] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+48];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+64];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+128];
            double R_4_1_1_0 = xpq * R_5_0_1_0;
            double R_3_2_1_0 = xpq * R_4_1_1_0 + 1 * R_4_0_1_0;
            double R_2_3_1_0 = xpq * R_3_2_1_0 + 2 * R_3_1_1_0;
            double R_1_4_1_0 = xpq * R_2_3_1_0 + 3 * R_2_2_1_0;
            double R_0_5_1_0 = xpq * R_1_4_1_0 + 4 * R_1_3_1_0;
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+4224] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+48];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+64];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+128];
            double R_5_1_0_0 = xpq * gamma_inc[sq_id+6*256];
            double R_4_2_0_0 = xpq * R_5_1_0_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_3_0_0 = xpq * R_4_2_0_0 + 2 * R_4_1_0_0;
            double R_2_4_0_0 = xpq * R_3_3_0_0 + 3 * R_3_2_0_0;
            double R_1_5_0_0 = xpq * R_2_4_0_0 + 4 * R_2_3_0_0;
            double R_0_6_0_0 = xpq * R_1_5_0_0 + 5 * R_1_4_0_0;
            vj_kl += R_0_6_0_0 * dm_ij_cache[tx+144];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+4352] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_1 * dm_kl_cache[sq_kl+128];
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_1_0 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+768];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+1024];
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+1280];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+1536];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+1664];
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_0_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+2048];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+2176];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+2816];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+3328];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+3712];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+3840];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+3968];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+4096];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+4224];
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+4352];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_2 * dm_kl_cache[sq_kl+128];
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+768];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+1024];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+1280];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+1536];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+1664];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+2048];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+2176];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+2816];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+3328];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+3712];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+3840];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+3968];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+4096];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+4224];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+4352];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+128];
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_0_5 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_0_6 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+768];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+1024];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+1280];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1536];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+1664];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+2048];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+2176];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+2816];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+3328];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+3712];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+3840];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+3968];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+4096];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+4224];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+4352];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+128];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_2_0 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+768];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+1024];
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+1280];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+1536];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+1664];
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+2048];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+2176];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+2816];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+3328];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+3712];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+3840];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+3968];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+4096];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+4224];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+4352];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+128];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+768];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+1024];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1280];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+1536];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+1664];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+2048];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+2176];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+2816];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+3328];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+3712];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+3840];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+3968];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+4096];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+4224];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+4352];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+64] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+128];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+768];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+1024];
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+1280];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_5_0 * dm_kl_cache[sq_kl+1536];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+1664];
            vj_ij += R_0_0_6_0 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+2048];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+2176];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+2816];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+3328];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+3712];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+3840];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+3968];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+4096];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+4224];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+4352];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+80] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+128];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+768];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+1024];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1280];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1536];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1664];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_0_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+2048];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+2176];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+2816];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+3328];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+3712];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+3840];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+3968];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+4096];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+4224];
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+4352];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+96] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+128];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+768];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+1024];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1280];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1536];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1664];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+2048];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+2176];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2816];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+3328];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+3712];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+3840];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+3968];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+4096];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+4224];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+4352];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+112] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+128];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+768];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1024];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1280];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+1536];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1664];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2048];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2176];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+2816];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+3328];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+3712];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+3840];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+3968];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+4096];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+4224];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+4352];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+128] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+128];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+768];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+1024];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1280];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+1536];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+1664];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+2048];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+2176];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+2816];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+3328];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+3712];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+3840];
            vj_ij -= R_0_5_0_0 * dm_kl_cache[sq_kl+3968];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+4096];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+4224];
            vj_ij += R_0_6_0_0 * dm_kl_cache[sq_kl+4352];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+144] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 10; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 280; n += 16) {
        int i = n / 8;
        int tile = n % 8;
        int task_kl = blockIdx.y * 128 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*128]);
        }
    }
}

// TILEX=32, TILEY=32,
__global__
void md_j_3_0(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 512;
    int task_kl0 = blockIdx.y * 512;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 1024;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 2048;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 320;
    double *dm_ij_cache = vj_kl_cache + 512;
    double *dm_kl_cache = dm_ij_cache + 320;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 2112; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 512; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 512; n += 256) {
        int task_kl = blockIdx.y * 512 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+512] = ykl;
            Rq_cache[n+1024] = zkl;
            Rq_cache[n+1536] = akl;
        }
    }

    for (int n = tx; n < 32; n += 16) {
        int i = n / 32;
        int tile = n % 32;
        int task_kl = blockIdx.y * 512 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*512] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 32; ++batch_ij) {
        int task_ij0 = blockIdx.x * 512 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 20; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 32; ++batch_kl) {
            int task_kl0 = blockIdx.y * 512 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+512];
            double zkl = Rq_cache[sq_kl+1024];
            double akl = Rq_cache[sq_kl+1536];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 3);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 3; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+32];
            double R_2_0_0_1 = zpq * gamma_inc[sq_id+3*256];
            double R_1_0_0_2 = zpq * R_2_0_0_1 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_0_3 = zpq * R_1_0_0_2 + 2 * R_1_0_0_1;
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+48];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+64];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+80];
            double R_0_0_1_2 = ypq * R_1_0_0_2;
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+96];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+112];
            double R_1_0_1_1 = ypq * R_2_0_0_1;
            double R_0_0_2_1 = ypq * R_1_0_1_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+128];
            double R_2_0_1_0 = ypq * gamma_inc[sq_id+3*256];
            double R_1_0_2_0 = ypq * R_2_0_1_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_3_0 = ypq * R_1_0_2_0 + 2 * R_1_0_1_0;
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+144];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+160];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+176];
            double R_0_1_0_2 = xpq * R_1_0_0_2;
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+192];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+208];
            double R_0_1_1_1 = xpq * R_1_0_1_1;
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+224];
            double R_0_1_2_0 = xpq * R_1_0_2_0;
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+240];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+256];
            double R_1_1_0_1 = xpq * R_2_0_0_1;
            double R_0_2_0_1 = xpq * R_1_1_0_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+272];
            double R_1_1_1_0 = xpq * R_2_0_1_0;
            double R_0_2_1_0 = xpq * R_1_1_1_0 + 1 * R_1_0_1_0;
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+288];
            double R_2_1_0_0 = xpq * gamma_inc[sq_id+3*256];
            double R_1_2_0_0 = xpq * R_2_1_0_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_3_0_0 = xpq * R_1_2_0_0 + 2 * R_1_1_0_0;
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+64] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+80] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+96] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+112] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+128] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+144] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+160] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+176] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+192] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+208] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+224] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+240] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+256] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+272] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+288] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+304] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 20; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 32; n += 16) {
        int i = n / 32;
        int tile = n % 32;
        int task_kl = blockIdx.y * 512 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*512]);
        }
    }
}

// TILEX=32, TILEY=32,
__global__
void md_j_3_1(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 512;
    int task_kl0 = blockIdx.y * 512;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 1280;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 2048;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 320;
    double *dm_ij_cache = vj_kl_cache + 2048;
    double *dm_kl_cache = dm_ij_cache + 320;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 2112; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 2048; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 512; n += 256) {
        int task_kl = blockIdx.y * 512 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+512] = ykl;
            Rq_cache[n+1024] = zkl;
            Rq_cache[n+1536] = akl;
        }
    }

    for (int n = tx; n < 128; n += 16) {
        int i = n / 32;
        int tile = n % 32;
        int task_kl = blockIdx.y * 512 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*512] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 32; ++batch_ij) {
        int task_ij0 = blockIdx.x * 512 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 20; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 32; ++batch_kl) {
            int task_kl0 = blockIdx.y * 512 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+512];
            double zkl = Rq_cache[sq_kl+1024];
            double akl = Rq_cache[sq_kl+1536];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 4);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 4; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+32];
            double R_2_0_0_1 = zpq * gamma_inc[sq_id+3*256];
            double R_1_0_0_2 = zpq * R_2_0_0_1 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_0_3 = zpq * R_1_0_0_2 + 2 * R_1_0_0_1;
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+48];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+64];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+80];
            double R_0_0_1_2 = ypq * R_1_0_0_2;
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+96];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+112];
            double R_1_0_1_1 = ypq * R_2_0_0_1;
            double R_0_0_2_1 = ypq * R_1_0_1_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+128];
            double R_2_0_1_0 = ypq * gamma_inc[sq_id+3*256];
            double R_1_0_2_0 = ypq * R_2_0_1_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_3_0 = ypq * R_1_0_2_0 + 2 * R_1_0_1_0;
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+144];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+160];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+176];
            double R_0_1_0_2 = xpq * R_1_0_0_2;
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+192];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+208];
            double R_0_1_1_1 = xpq * R_1_0_1_1;
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+224];
            double R_0_1_2_0 = xpq * R_1_0_2_0;
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+240];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+256];
            double R_1_1_0_1 = xpq * R_2_0_0_1;
            double R_0_2_0_1 = xpq * R_1_1_0_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+272];
            double R_1_1_1_0 = xpq * R_2_0_1_0;
            double R_0_2_1_0 = xpq * R_1_1_1_0 + 1 * R_1_0_1_0;
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+288];
            double R_2_1_0_0 = xpq * gamma_inc[sq_id+3*256];
            double R_1_2_0_0 = xpq * R_2_1_0_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_3_0_0 = xpq * R_1_2_0_0 + 2 * R_1_1_0_0;
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+32];
            double R_3_0_0_1 = zpq * gamma_inc[sq_id+4*256];
            double R_2_0_0_2 = zpq * R_3_0_0_1 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_0_3 = zpq * R_2_0_0_2 + 2 * R_2_0_0_1;
            double R_0_0_0_4 = zpq * R_1_0_0_3 + 3 * R_1_0_0_2;
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+80];
            double R_0_0_1_3 = ypq * R_1_0_0_3;
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+112];
            double R_1_0_1_2 = ypq * R_2_0_0_2;
            double R_0_0_2_2 = ypq * R_1_0_1_2 + 1 * R_1_0_0_2;
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+128];
            double R_2_0_1_1 = ypq * R_3_0_0_1;
            double R_1_0_2_1 = ypq * R_2_0_1_1 + 1 * R_2_0_0_1;
            double R_0_0_3_1 = ypq * R_1_0_2_1 + 2 * R_1_0_1_1;
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+176];
            double R_0_1_0_3 = xpq * R_1_0_0_3;
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+208];
            double R_0_1_1_2 = xpq * R_1_0_1_2;
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+224];
            double R_0_1_2_1 = xpq * R_1_0_2_1;
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+256];
            double R_1_1_0_2 = xpq * R_2_0_0_2;
            double R_0_2_0_2 = xpq * R_1_1_0_2 + 1 * R_1_0_0_2;
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+272];
            double R_1_1_1_1 = xpq * R_2_0_1_1;
            double R_0_2_1_1 = xpq * R_1_1_1_1 + 1 * R_1_0_1_1;
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+288];
            double R_2_1_0_1 = xpq * R_3_0_0_1;
            double R_1_2_0_1 = xpq * R_2_1_0_1 + 1 * R_2_0_0_1;
            double R_0_3_0_1 = xpq * R_1_2_0_1 + 2 * R_1_1_0_1;
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+512] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_2_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+128];
            double R_3_0_1_0 = ypq * gamma_inc[sq_id+4*256];
            double R_2_0_2_0 = ypq * R_3_0_1_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_3_0 = ypq * R_2_0_2_0 + 2 * R_2_0_1_0;
            double R_0_0_4_0 = ypq * R_1_0_3_0 + 3 * R_1_0_2_0;
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+224];
            double R_0_1_3_0 = xpq * R_1_0_3_0;
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+272];
            double R_1_1_2_0 = xpq * R_2_0_2_0;
            double R_0_2_2_0 = xpq * R_1_1_2_0 + 1 * R_1_0_2_0;
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+288];
            double R_2_1_1_0 = xpq * R_3_0_1_0;
            double R_1_2_1_0 = xpq * R_2_1_1_0 + 1 * R_2_0_1_0;
            double R_0_3_1_0 = xpq * R_1_2_1_0 + 2 * R_1_1_1_0;
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1024] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_0_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+288];
            double R_3_1_0_0 = xpq * gamma_inc[sq_id+4*256];
            double R_2_2_0_0 = xpq * R_3_1_0_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_3_0_0 = xpq * R_2_2_0_0 + 2 * R_2_1_0_0;
            double R_0_4_0_0 = xpq * R_1_3_0_0 + 3 * R_1_2_0_0;
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1536] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_1_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_0_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_2_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+64] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+80] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+96] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+112] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+128] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+144] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_0_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+160] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+176] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+192] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+208] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+224] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+240] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+256] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+272] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+288] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+304] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 20; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 128; n += 16) {
        int i = n / 32;
        int tile = n % 32;
        int task_kl = blockIdx.y * 512 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*512]);
        }
    }
}

// TILEX=32, TILEY=25,
__global__
void md_j_3_2(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 512;
    int task_kl0 = blockIdx.y * 400;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 1536;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 1600;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 320;
    double *dm_ij_cache = vj_kl_cache + 4000;
    double *dm_kl_cache = dm_ij_cache + 320;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 1664; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 4000; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 400; n += 256) {
        int task_kl = blockIdx.y * 400 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+400] = ykl;
            Rq_cache[n+800] = zkl;
            Rq_cache[n+1200] = akl;
        }
    }

    for (int n = tx; n < 250; n += 16) {
        int i = n / 25;
        int tile = n % 25;
        int task_kl = blockIdx.y * 400 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*400] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 32; ++batch_ij) {
        int task_ij0 = blockIdx.x * 512 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 20; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 25; ++batch_kl) {
            int task_kl0 = blockIdx.y * 400 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+400];
            double zkl = Rq_cache[sq_kl+800];
            double akl = Rq_cache[sq_kl+1200];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 5);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 5; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+32];
            double R_2_0_0_1 = zpq * gamma_inc[sq_id+3*256];
            double R_1_0_0_2 = zpq * R_2_0_0_1 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_0_3 = zpq * R_1_0_0_2 + 2 * R_1_0_0_1;
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+48];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+64];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+80];
            double R_0_0_1_2 = ypq * R_1_0_0_2;
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+96];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+112];
            double R_1_0_1_1 = ypq * R_2_0_0_1;
            double R_0_0_2_1 = ypq * R_1_0_1_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+128];
            double R_2_0_1_0 = ypq * gamma_inc[sq_id+3*256];
            double R_1_0_2_0 = ypq * R_2_0_1_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_3_0 = ypq * R_1_0_2_0 + 2 * R_1_0_1_0;
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+144];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+160];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+176];
            double R_0_1_0_2 = xpq * R_1_0_0_2;
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+192];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+208];
            double R_0_1_1_1 = xpq * R_1_0_1_1;
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+224];
            double R_0_1_2_0 = xpq * R_1_0_2_0;
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+240];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+256];
            double R_1_1_0_1 = xpq * R_2_0_0_1;
            double R_0_2_0_1 = xpq * R_1_1_0_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+272];
            double R_1_1_1_0 = xpq * R_2_0_1_0;
            double R_0_2_1_0 = xpq * R_1_1_1_0 + 1 * R_1_0_1_0;
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+288];
            double R_2_1_0_0 = xpq * gamma_inc[sq_id+3*256];
            double R_1_2_0_0 = xpq * R_2_1_0_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_3_0_0 = xpq * R_1_2_0_0 + 2 * R_1_1_0_0;
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+32];
            double R_3_0_0_1 = zpq * gamma_inc[sq_id+4*256];
            double R_2_0_0_2 = zpq * R_3_0_0_1 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_0_3 = zpq * R_2_0_0_2 + 2 * R_2_0_0_1;
            double R_0_0_0_4 = zpq * R_1_0_0_3 + 3 * R_1_0_0_2;
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+80];
            double R_0_0_1_3 = ypq * R_1_0_0_3;
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+112];
            double R_1_0_1_2 = ypq * R_2_0_0_2;
            double R_0_0_2_2 = ypq * R_1_0_1_2 + 1 * R_1_0_0_2;
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+128];
            double R_2_0_1_1 = ypq * R_3_0_0_1;
            double R_1_0_2_1 = ypq * R_2_0_1_1 + 1 * R_2_0_0_1;
            double R_0_0_3_1 = ypq * R_1_0_2_1 + 2 * R_1_0_1_1;
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+176];
            double R_0_1_0_3 = xpq * R_1_0_0_3;
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+208];
            double R_0_1_1_2 = xpq * R_1_0_1_2;
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+224];
            double R_0_1_2_1 = xpq * R_1_0_2_1;
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+256];
            double R_1_1_0_2 = xpq * R_2_0_0_2;
            double R_0_2_0_2 = xpq * R_1_1_0_2 + 1 * R_1_0_0_2;
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+272];
            double R_1_1_1_1 = xpq * R_2_0_1_1;
            double R_0_2_1_1 = xpq * R_1_1_1_1 + 1 * R_1_0_1_1;
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+288];
            double R_2_1_0_1 = xpq * R_3_0_0_1;
            double R_1_2_0_1 = xpq * R_2_1_0_1 + 1 * R_2_0_0_1;
            double R_0_3_0_1 = xpq * R_1_2_0_1 + 2 * R_1_1_0_1;
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+400] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+32];
            double R_4_0_0_1 = zpq * gamma_inc[sq_id+5*256];
            double R_3_0_0_2 = zpq * R_4_0_0_1 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_0_3 = zpq * R_3_0_0_2 + 2 * R_3_0_0_1;
            double R_1_0_0_4 = zpq * R_2_0_0_3 + 3 * R_2_0_0_2;
            double R_0_0_0_5 = zpq * R_1_0_0_4 + 4 * R_1_0_0_3;
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+80];
            double R_0_0_1_4 = ypq * R_1_0_0_4;
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+112];
            double R_1_0_1_3 = ypq * R_2_0_0_3;
            double R_0_0_2_3 = ypq * R_1_0_1_3 + 1 * R_1_0_0_3;
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+128];
            double R_2_0_1_2 = ypq * R_3_0_0_2;
            double R_1_0_2_2 = ypq * R_2_0_1_2 + 1 * R_2_0_0_2;
            double R_0_0_3_2 = ypq * R_1_0_2_2 + 2 * R_1_0_1_2;
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+176];
            double R_0_1_0_4 = xpq * R_1_0_0_4;
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+208];
            double R_0_1_1_3 = xpq * R_1_0_1_3;
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+224];
            double R_0_1_2_2 = xpq * R_1_0_2_2;
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+256];
            double R_1_1_0_3 = xpq * R_2_0_0_3;
            double R_0_2_0_3 = xpq * R_1_1_0_3 + 1 * R_1_0_0_3;
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+272];
            double R_1_1_1_2 = xpq * R_2_0_1_2;
            double R_0_2_1_2 = xpq * R_1_1_1_2 + 1 * R_1_0_1_2;
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+288];
            double R_2_1_0_2 = xpq * R_3_0_0_2;
            double R_1_2_0_2 = xpq * R_2_1_0_2 + 1 * R_2_0_0_2;
            double R_0_3_0_2 = xpq * R_1_2_0_2 + 2 * R_1_1_0_2;
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+800] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_2_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+128];
            double R_3_0_1_0 = ypq * gamma_inc[sq_id+4*256];
            double R_2_0_2_0 = ypq * R_3_0_1_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_3_0 = ypq * R_2_0_2_0 + 2 * R_2_0_1_0;
            double R_0_0_4_0 = ypq * R_1_0_3_0 + 3 * R_1_0_2_0;
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+224];
            double R_0_1_3_0 = xpq * R_1_0_3_0;
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+272];
            double R_1_1_2_0 = xpq * R_2_0_2_0;
            double R_0_2_2_0 = xpq * R_1_1_2_0 + 1 * R_1_0_2_0;
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+288];
            double R_2_1_1_0 = xpq * R_3_0_1_0;
            double R_1_2_1_0 = xpq * R_2_1_1_0 + 1 * R_2_0_1_0;
            double R_0_3_1_0 = xpq * R_1_2_1_0 + 2 * R_1_1_1_0;
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1200] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+128];
            double R_3_0_1_1 = ypq * R_4_0_0_1;
            double R_2_0_2_1 = ypq * R_3_0_1_1 + 1 * R_3_0_0_1;
            double R_1_0_3_1 = ypq * R_2_0_2_1 + 2 * R_2_0_1_1;
            double R_0_0_4_1 = ypq * R_1_0_3_1 + 3 * R_1_0_2_1;
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+224];
            double R_0_1_3_1 = xpq * R_1_0_3_1;
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+272];
            double R_1_1_2_1 = xpq * R_2_0_2_1;
            double R_0_2_2_1 = xpq * R_1_1_2_1 + 1 * R_1_0_2_1;
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+288];
            double R_2_1_1_1 = xpq * R_3_0_1_1;
            double R_1_2_1_1 = xpq * R_2_1_1_1 + 1 * R_2_0_1_1;
            double R_0_3_1_1 = xpq * R_1_2_1_1 + 2 * R_1_1_1_1;
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1600] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+128];
            double R_4_0_1_0 = ypq * gamma_inc[sq_id+5*256];
            double R_3_0_2_0 = ypq * R_4_0_1_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_3_0 = ypq * R_3_0_2_0 + 2 * R_3_0_1_0;
            double R_1_0_4_0 = ypq * R_2_0_3_0 + 3 * R_2_0_2_0;
            double R_0_0_5_0 = ypq * R_1_0_4_0 + 4 * R_1_0_3_0;
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+224];
            double R_0_1_4_0 = xpq * R_1_0_4_0;
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+272];
            double R_1_1_3_0 = xpq * R_2_0_3_0;
            double R_0_2_3_0 = xpq * R_1_1_3_0 + 1 * R_1_0_3_0;
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+288];
            double R_2_1_2_0 = xpq * R_3_0_2_0;
            double R_1_2_2_0 = xpq * R_2_1_2_0 + 1 * R_2_0_2_0;
            double R_0_3_2_0 = xpq * R_1_2_2_0 + 2 * R_1_1_2_0;
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2000] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_0_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+288];
            double R_3_1_0_0 = xpq * gamma_inc[sq_id+4*256];
            double R_2_2_0_0 = xpq * R_3_1_0_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_3_0_0 = xpq * R_2_2_0_0 + 2 * R_2_1_0_0;
            double R_0_4_0_0 = xpq * R_1_3_0_0 + 3 * R_1_2_0_0;
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2400] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+288];
            double R_3_1_0_1 = xpq * R_4_0_0_1;
            double R_2_2_0_1 = xpq * R_3_1_0_1 + 1 * R_3_0_0_1;
            double R_1_3_0_1 = xpq * R_2_2_0_1 + 2 * R_2_1_0_1;
            double R_0_4_0_1 = xpq * R_1_3_0_1 + 3 * R_1_2_0_1;
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2800] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+288];
            double R_3_1_1_0 = xpq * R_4_0_1_0;
            double R_2_2_1_0 = xpq * R_3_1_1_0 + 1 * R_3_0_1_0;
            double R_1_3_1_0 = xpq * R_2_2_1_0 + 2 * R_2_1_1_0;
            double R_0_4_1_0 = xpq * R_1_3_1_0 + 3 * R_1_2_1_0;
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3200] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+160];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+256];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+272];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+288];
            double R_4_1_0_0 = xpq * gamma_inc[sq_id+5*256];
            double R_3_2_0_0 = xpq * R_4_1_0_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_3_0_0 = xpq * R_3_2_0_0 + 2 * R_3_1_0_0;
            double R_1_4_0_0 = xpq * R_2_3_0_0 + 3 * R_2_2_0_0;
            double R_0_5_0_0 = xpq * R_1_4_0_0 + 4 * R_1_3_0_0;
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3600] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_1 * dm_kl_cache[sq_kl+400];
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+800];
            vj_ij -= R_0_0_1_0 * dm_kl_cache[sq_kl+1200];
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+2000];
            vj_ij -= R_0_1_0_0 * dm_kl_cache[sq_kl+2400];
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+2800];
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+3200];
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+3600];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_2 * dm_kl_cache[sq_kl+400];
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+800];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+1200];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+2000];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+2400];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+2800];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+3200];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+3600];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+400];
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+800];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+1200];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+2000];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+2400];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+2800];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+3200];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+3600];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+400];
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+800];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+1200];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+2000];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+2400];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+2800];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+3200];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+3600];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+400];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+800];
            vj_ij -= R_0_0_2_0 * dm_kl_cache[sq_kl+1200];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+2000];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+2400];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+2800];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+3200];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+3600];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+64] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+400];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+800];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+1200];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+2000];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+2400];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+2800];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+3200];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+3600];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+80] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+400];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+800];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+1200];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+2000];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+2400];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+2800];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+3200];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+3600];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+96] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+400];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+800];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+1200];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+2000];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+2400];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+2800];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+3200];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+3600];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+112] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+400];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+800];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+1200];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+2000];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+2400];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+2800];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+3200];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+3600];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+128] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+400];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+800];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+1200];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+2000];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+2400];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+2800];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+3200];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+3600];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+144] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+400];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+800];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+1200];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+2000];
            vj_ij -= R_0_2_0_0 * dm_kl_cache[sq_kl+2400];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+2800];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+3200];
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+3600];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+160] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+400];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+800];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+1200];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+2000];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+2400];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+2800];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+3200];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+3600];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+176] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+400];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+800];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1200];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+2000];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+2400];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+2800];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+3200];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+3600];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+192] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+400];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+800];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+1200];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+2000];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+2400];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2800];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+3200];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+3600];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+208] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+400];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+800];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1200];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+2000];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+2400];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2800];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+3200];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+3600];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+224] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+400];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+800];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1200];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+2000];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+2400];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2800];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+3200];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+3600];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+240] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+400];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+800];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+1200];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+2000];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+2400];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+2800];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+3200];
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+3600];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+256] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+400];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+800];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+1200];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2000];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+2400];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+2800];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+3200];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+3600];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+272] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+400];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+800];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+1200];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+2000];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+2400];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+2800];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+3200];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+3600];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+288] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+400];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+800];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+1200];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+2000];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+2400];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+2800];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+3200];
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+3600];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+304] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 20; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 250; n += 16) {
        int i = n / 25;
        int tile = n % 25;
        int task_kl = blockIdx.y * 400 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*400]);
        }
    }
}

// TILEX=32, TILEY=13,
__global__
void md_j_3_3(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 512;
    int task_kl0 = blockIdx.y * 208;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 1792;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 832;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 320;
    double *dm_ij_cache = vj_kl_cache + 4160;
    double *dm_kl_cache = dm_ij_cache + 320;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 896; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 4160; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 208; n += 256) {
        int task_kl = blockIdx.y * 208 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+208] = ykl;
            Rq_cache[n+416] = zkl;
            Rq_cache[n+624] = akl;
        }
    }

    for (int n = tx; n < 260; n += 16) {
        int i = n / 13;
        int tile = n % 13;
        int task_kl = blockIdx.y * 208 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*208] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 32; ++batch_ij) {
        int task_ij0 = blockIdx.x * 512 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 20; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 13; ++batch_kl) {
            int task_kl0 = blockIdx.y * 208 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+208];
            double zkl = Rq_cache[sq_kl+416];
            double akl = Rq_cache[sq_kl+624];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 6);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 6; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+32];
            double R_2_0_0_1 = zpq * gamma_inc[sq_id+3*256];
            double R_1_0_0_2 = zpq * R_2_0_0_1 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_0_3 = zpq * R_1_0_0_2 + 2 * R_1_0_0_1;
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+48];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+64];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+80];
            double R_0_0_1_2 = ypq * R_1_0_0_2;
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+96];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+112];
            double R_1_0_1_1 = ypq * R_2_0_0_1;
            double R_0_0_2_1 = ypq * R_1_0_1_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+128];
            double R_2_0_1_0 = ypq * gamma_inc[sq_id+3*256];
            double R_1_0_2_0 = ypq * R_2_0_1_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_3_0 = ypq * R_1_0_2_0 + 2 * R_1_0_1_0;
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+144];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+160];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+176];
            double R_0_1_0_2 = xpq * R_1_0_0_2;
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+192];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+208];
            double R_0_1_1_1 = xpq * R_1_0_1_1;
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+224];
            double R_0_1_2_0 = xpq * R_1_0_2_0;
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+240];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+256];
            double R_1_1_0_1 = xpq * R_2_0_0_1;
            double R_0_2_0_1 = xpq * R_1_1_0_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+272];
            double R_1_1_1_0 = xpq * R_2_0_1_0;
            double R_0_2_1_0 = xpq * R_1_1_1_0 + 1 * R_1_0_1_0;
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+288];
            double R_2_1_0_0 = xpq * gamma_inc[sq_id+3*256];
            double R_1_2_0_0 = xpq * R_2_1_0_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_3_0_0 = xpq * R_1_2_0_0 + 2 * R_1_1_0_0;
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+32];
            double R_3_0_0_1 = zpq * gamma_inc[sq_id+4*256];
            double R_2_0_0_2 = zpq * R_3_0_0_1 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_0_3 = zpq * R_2_0_0_2 + 2 * R_2_0_0_1;
            double R_0_0_0_4 = zpq * R_1_0_0_3 + 3 * R_1_0_0_2;
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+80];
            double R_0_0_1_3 = ypq * R_1_0_0_3;
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+112];
            double R_1_0_1_2 = ypq * R_2_0_0_2;
            double R_0_0_2_2 = ypq * R_1_0_1_2 + 1 * R_1_0_0_2;
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+128];
            double R_2_0_1_1 = ypq * R_3_0_0_1;
            double R_1_0_2_1 = ypq * R_2_0_1_1 + 1 * R_2_0_0_1;
            double R_0_0_3_1 = ypq * R_1_0_2_1 + 2 * R_1_0_1_1;
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+176];
            double R_0_1_0_3 = xpq * R_1_0_0_3;
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+208];
            double R_0_1_1_2 = xpq * R_1_0_1_2;
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+224];
            double R_0_1_2_1 = xpq * R_1_0_2_1;
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+256];
            double R_1_1_0_2 = xpq * R_2_0_0_2;
            double R_0_2_0_2 = xpq * R_1_1_0_2 + 1 * R_1_0_0_2;
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+272];
            double R_1_1_1_1 = xpq * R_2_0_1_1;
            double R_0_2_1_1 = xpq * R_1_1_1_1 + 1 * R_1_0_1_1;
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+288];
            double R_2_1_0_1 = xpq * R_3_0_0_1;
            double R_1_2_0_1 = xpq * R_2_1_0_1 + 1 * R_2_0_0_1;
            double R_0_3_0_1 = xpq * R_1_2_0_1 + 2 * R_1_1_0_1;
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+208] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+32];
            double R_4_0_0_1 = zpq * gamma_inc[sq_id+5*256];
            double R_3_0_0_2 = zpq * R_4_0_0_1 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_0_3 = zpq * R_3_0_0_2 + 2 * R_3_0_0_1;
            double R_1_0_0_4 = zpq * R_2_0_0_3 + 3 * R_2_0_0_2;
            double R_0_0_0_5 = zpq * R_1_0_0_4 + 4 * R_1_0_0_3;
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+80];
            double R_0_0_1_4 = ypq * R_1_0_0_4;
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+112];
            double R_1_0_1_3 = ypq * R_2_0_0_3;
            double R_0_0_2_3 = ypq * R_1_0_1_3 + 1 * R_1_0_0_3;
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+128];
            double R_2_0_1_2 = ypq * R_3_0_0_2;
            double R_1_0_2_2 = ypq * R_2_0_1_2 + 1 * R_2_0_0_2;
            double R_0_0_3_2 = ypq * R_1_0_2_2 + 2 * R_1_0_1_2;
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+176];
            double R_0_1_0_4 = xpq * R_1_0_0_4;
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+208];
            double R_0_1_1_3 = xpq * R_1_0_1_3;
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+224];
            double R_0_1_2_2 = xpq * R_1_0_2_2;
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+256];
            double R_1_1_0_3 = xpq * R_2_0_0_3;
            double R_0_2_0_3 = xpq * R_1_1_0_3 + 1 * R_1_0_0_3;
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+272];
            double R_1_1_1_2 = xpq * R_2_0_1_2;
            double R_0_2_1_2 = xpq * R_1_1_1_2 + 1 * R_1_0_1_2;
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+288];
            double R_2_1_0_2 = xpq * R_3_0_0_2;
            double R_1_2_0_2 = xpq * R_2_1_0_2 + 1 * R_2_0_0_2;
            double R_0_3_0_2 = xpq * R_1_2_0_2 + 2 * R_1_1_0_2;
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+416] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_5 * dm_ij_cache[tx+32];
            double R_5_0_0_1 = zpq * gamma_inc[sq_id+6*256];
            double R_4_0_0_2 = zpq * R_5_0_0_1 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_0_3 = zpq * R_4_0_0_2 + 2 * R_4_0_0_1;
            double R_2_0_0_4 = zpq * R_3_0_0_3 + 3 * R_3_0_0_2;
            double R_1_0_0_5 = zpq * R_2_0_0_4 + 4 * R_2_0_0_3;
            double R_0_0_0_6 = zpq * R_1_0_0_5 + 5 * R_1_0_0_4;
            vj_kl -= R_0_0_0_6 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+80];
            double R_0_0_1_5 = ypq * R_1_0_0_5;
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+112];
            double R_1_0_1_4 = ypq * R_2_0_0_4;
            double R_0_0_2_4 = ypq * R_1_0_1_4 + 1 * R_1_0_0_4;
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+128];
            double R_2_0_1_3 = ypq * R_3_0_0_3;
            double R_1_0_2_3 = ypq * R_2_0_1_3 + 1 * R_2_0_0_3;
            double R_0_0_3_3 = ypq * R_1_0_2_3 + 2 * R_1_0_1_3;
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+176];
            double R_0_1_0_5 = xpq * R_1_0_0_5;
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+208];
            double R_0_1_1_4 = xpq * R_1_0_1_4;
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+224];
            double R_0_1_2_3 = xpq * R_1_0_2_3;
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+256];
            double R_1_1_0_4 = xpq * R_2_0_0_4;
            double R_0_2_0_4 = xpq * R_1_1_0_4 + 1 * R_1_0_0_4;
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+272];
            double R_1_1_1_3 = xpq * R_2_0_1_3;
            double R_0_2_1_3 = xpq * R_1_1_1_3 + 1 * R_1_0_1_3;
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+288];
            double R_2_1_0_3 = xpq * R_3_0_0_3;
            double R_1_2_0_3 = xpq * R_2_1_0_3 + 1 * R_2_0_0_3;
            double R_0_3_0_3 = xpq * R_1_2_0_3 + 2 * R_1_1_0_3;
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+624] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_2_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+128];
            double R_3_0_1_0 = ypq * gamma_inc[sq_id+4*256];
            double R_2_0_2_0 = ypq * R_3_0_1_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_3_0 = ypq * R_2_0_2_0 + 2 * R_2_0_1_0;
            double R_0_0_4_0 = ypq * R_1_0_3_0 + 3 * R_1_0_2_0;
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+224];
            double R_0_1_3_0 = xpq * R_1_0_3_0;
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+272];
            double R_1_1_2_0 = xpq * R_2_0_2_0;
            double R_0_2_2_0 = xpq * R_1_1_2_0 + 1 * R_1_0_2_0;
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+288];
            double R_2_1_1_0 = xpq * R_3_0_1_0;
            double R_1_2_1_0 = xpq * R_2_1_1_0 + 1 * R_2_0_1_0;
            double R_0_3_1_0 = xpq * R_1_2_1_0 + 2 * R_1_1_1_0;
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+832] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+128];
            double R_3_0_1_1 = ypq * R_4_0_0_1;
            double R_2_0_2_1 = ypq * R_3_0_1_1 + 1 * R_3_0_0_1;
            double R_1_0_3_1 = ypq * R_2_0_2_1 + 2 * R_2_0_1_1;
            double R_0_0_4_1 = ypq * R_1_0_3_1 + 3 * R_1_0_2_1;
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+224];
            double R_0_1_3_1 = xpq * R_1_0_3_1;
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+272];
            double R_1_1_2_1 = xpq * R_2_0_2_1;
            double R_0_2_2_1 = xpq * R_1_1_2_1 + 1 * R_1_0_2_1;
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+288];
            double R_2_1_1_1 = xpq * R_3_0_1_1;
            double R_1_2_1_1 = xpq * R_2_1_1_1 + 1 * R_2_0_1_1;
            double R_0_3_1_1 = xpq * R_1_2_1_1 + 2 * R_1_1_1_1;
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1040] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+128];
            double R_3_0_1_2 = ypq * R_4_0_0_2;
            double R_2_0_2_2 = ypq * R_3_0_1_2 + 1 * R_3_0_0_2;
            double R_1_0_3_2 = ypq * R_2_0_2_2 + 2 * R_2_0_1_2;
            double R_0_0_4_2 = ypq * R_1_0_3_2 + 3 * R_1_0_2_2;
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+224];
            double R_0_1_3_2 = xpq * R_1_0_3_2;
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+272];
            double R_1_1_2_2 = xpq * R_2_0_2_2;
            double R_0_2_2_2 = xpq * R_1_1_2_2 + 1 * R_1_0_2_2;
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+288];
            double R_2_1_1_2 = xpq * R_3_0_1_2;
            double R_1_2_1_2 = xpq * R_2_1_1_2 + 1 * R_2_0_1_2;
            double R_0_3_1_2 = xpq * R_1_2_1_2 + 2 * R_1_1_1_2;
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1248] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+128];
            double R_4_0_1_0 = ypq * gamma_inc[sq_id+5*256];
            double R_3_0_2_0 = ypq * R_4_0_1_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_3_0 = ypq * R_3_0_2_0 + 2 * R_3_0_1_0;
            double R_1_0_4_0 = ypq * R_2_0_3_0 + 3 * R_2_0_2_0;
            double R_0_0_5_0 = ypq * R_1_0_4_0 + 4 * R_1_0_3_0;
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+224];
            double R_0_1_4_0 = xpq * R_1_0_4_0;
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+272];
            double R_1_1_3_0 = xpq * R_2_0_3_0;
            double R_0_2_3_0 = xpq * R_1_1_3_0 + 1 * R_1_0_3_0;
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+288];
            double R_2_1_2_0 = xpq * R_3_0_2_0;
            double R_1_2_2_0 = xpq * R_2_1_2_0 + 1 * R_2_0_2_0;
            double R_0_3_2_0 = xpq * R_1_2_2_0 + 2 * R_1_1_2_0;
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1456] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+128];
            double R_4_0_1_1 = ypq * R_5_0_0_1;
            double R_3_0_2_1 = ypq * R_4_0_1_1 + 1 * R_4_0_0_1;
            double R_2_0_3_1 = ypq * R_3_0_2_1 + 2 * R_3_0_1_1;
            double R_1_0_4_1 = ypq * R_2_0_3_1 + 3 * R_2_0_2_1;
            double R_0_0_5_1 = ypq * R_1_0_4_1 + 4 * R_1_0_3_1;
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+224];
            double R_0_1_4_1 = xpq * R_1_0_4_1;
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+272];
            double R_1_1_3_1 = xpq * R_2_0_3_1;
            double R_0_2_3_1 = xpq * R_1_1_3_1 + 1 * R_1_0_3_1;
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+288];
            double R_2_1_2_1 = xpq * R_3_0_2_1;
            double R_1_2_2_1 = xpq * R_2_1_2_1 + 1 * R_2_0_2_1;
            double R_0_3_2_1 = xpq * R_1_2_2_1 + 2 * R_1_1_2_1;
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1664] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_5_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+128];
            double R_5_0_1_0 = ypq * gamma_inc[sq_id+6*256];
            double R_4_0_2_0 = ypq * R_5_0_1_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_3_0 = ypq * R_4_0_2_0 + 2 * R_4_0_1_0;
            double R_2_0_4_0 = ypq * R_3_0_3_0 + 3 * R_3_0_2_0;
            double R_1_0_5_0 = ypq * R_2_0_4_0 + 4 * R_2_0_3_0;
            double R_0_0_6_0 = ypq * R_1_0_5_0 + 5 * R_1_0_4_0;
            vj_kl -= R_0_0_6_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+224];
            double R_0_1_5_0 = xpq * R_1_0_5_0;
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+272];
            double R_1_1_4_0 = xpq * R_2_0_4_0;
            double R_0_2_4_0 = xpq * R_1_1_4_0 + 1 * R_1_0_4_0;
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+288];
            double R_2_1_3_0 = xpq * R_3_0_3_0;
            double R_1_2_3_0 = xpq * R_2_1_3_0 + 1 * R_2_0_3_0;
            double R_0_3_3_0 = xpq * R_1_2_3_0 + 2 * R_1_1_3_0;
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1872] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_0_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+288];
            double R_3_1_0_0 = xpq * gamma_inc[sq_id+4*256];
            double R_2_2_0_0 = xpq * R_3_1_0_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_3_0_0 = xpq * R_2_2_0_0 + 2 * R_2_1_0_0;
            double R_0_4_0_0 = xpq * R_1_3_0_0 + 3 * R_1_2_0_0;
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2080] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+288];
            double R_3_1_0_1 = xpq * R_4_0_0_1;
            double R_2_2_0_1 = xpq * R_3_1_0_1 + 1 * R_3_0_0_1;
            double R_1_3_0_1 = xpq * R_2_2_0_1 + 2 * R_2_1_0_1;
            double R_0_4_0_1 = xpq * R_1_3_0_1 + 3 * R_1_2_0_1;
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2288] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+288];
            double R_3_1_0_2 = xpq * R_4_0_0_2;
            double R_2_2_0_2 = xpq * R_3_1_0_2 + 1 * R_3_0_0_2;
            double R_1_3_0_2 = xpq * R_2_2_0_2 + 2 * R_2_1_0_2;
            double R_0_4_0_2 = xpq * R_1_3_0_2 + 3 * R_1_2_0_2;
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2496] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+288];
            double R_3_1_1_0 = xpq * R_4_0_1_0;
            double R_2_2_1_0 = xpq * R_3_1_1_0 + 1 * R_3_0_1_0;
            double R_1_3_1_0 = xpq * R_2_2_1_0 + 2 * R_2_1_1_0;
            double R_0_4_1_0 = xpq * R_1_3_1_0 + 3 * R_1_2_1_0;
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2704] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+288];
            double R_3_1_1_1 = xpq * R_4_0_1_1;
            double R_2_2_1_1 = xpq * R_3_1_1_1 + 1 * R_3_0_1_1;
            double R_1_3_1_1 = xpq * R_2_2_1_1 + 2 * R_2_1_1_1;
            double R_0_4_1_1 = xpq * R_1_3_1_1 + 3 * R_1_2_1_1;
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2912] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+288];
            double R_3_1_2_0 = xpq * R_4_0_2_0;
            double R_2_2_2_0 = xpq * R_3_1_2_0 + 1 * R_3_0_2_0;
            double R_1_3_2_0 = xpq * R_2_2_2_0 + 2 * R_2_1_2_0;
            double R_0_4_2_0 = xpq * R_1_3_2_0 + 3 * R_1_2_2_0;
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3120] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+160];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+256];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+272];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+288];
            double R_4_1_0_0 = xpq * gamma_inc[sq_id+5*256];
            double R_3_2_0_0 = xpq * R_4_1_0_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_3_0_0 = xpq * R_3_2_0_0 + 2 * R_3_1_0_0;
            double R_1_4_0_0 = xpq * R_2_3_0_0 + 3 * R_2_2_0_0;
            double R_0_5_0_0 = xpq * R_1_4_0_0 + 4 * R_1_3_0_0;
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3328] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+192];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+224];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+288];
            double R_4_1_0_1 = xpq * R_5_0_0_1;
            double R_3_2_0_1 = xpq * R_4_1_0_1 + 1 * R_4_0_0_1;
            double R_2_3_0_1 = xpq * R_3_2_0_1 + 2 * R_3_1_0_1;
            double R_1_4_0_1 = xpq * R_2_3_0_1 + 3 * R_2_2_0_1;
            double R_0_5_0_1 = xpq * R_1_4_0_1 + 4 * R_1_3_0_1;
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3536] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+272];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+288];
            double R_4_1_1_0 = xpq * R_5_0_1_0;
            double R_3_2_1_0 = xpq * R_4_1_1_0 + 1 * R_4_0_1_0;
            double R_2_3_1_0 = xpq * R_3_2_1_0 + 2 * R_3_1_1_0;
            double R_1_4_1_0 = xpq * R_2_3_1_0 + 3 * R_2_2_1_0;
            double R_0_5_1_0 = xpq * R_1_4_1_0 + 4 * R_1_3_1_0;
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3744] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_5_0_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+272];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+288];
            double R_5_1_0_0 = xpq * gamma_inc[sq_id+6*256];
            double R_4_2_0_0 = xpq * R_5_1_0_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_3_0_0 = xpq * R_4_2_0_0 + 2 * R_4_1_0_0;
            double R_2_4_0_0 = xpq * R_3_3_0_0 + 3 * R_3_2_0_0;
            double R_1_5_0_0 = xpq * R_2_4_0_0 + 4 * R_2_3_0_0;
            double R_0_6_0_0 = xpq * R_1_5_0_0 + 5 * R_1_4_0_0;
            vj_kl -= R_0_6_0_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3952] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_1 * dm_kl_cache[sq_kl+208];
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+416];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+624];
            vj_ij -= R_0_0_1_0 * dm_kl_cache[sq_kl+832];
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+1040];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+1456];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_0_0 * dm_kl_cache[sq_kl+2080];
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+2704];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+3120];
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+3536];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+3744];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+3952];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_2 * dm_kl_cache[sq_kl+208];
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+416];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+624];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+832];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+1040];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+1456];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+2080];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+2704];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+3120];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+3536];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+3744];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+3952];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+208];
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+416];
            vj_ij -= R_0_0_0_5 * dm_kl_cache[sq_kl+624];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+832];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+1040];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+1456];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+2080];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+2704];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+3120];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+3536];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+3744];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+3952];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+208];
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+416];
            vj_ij -= R_0_0_0_6 * dm_kl_cache[sq_kl+624];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+832];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+1040];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+1456];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+2080];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+2704];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+3120];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+3536];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+3744];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+3952];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+208];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+416];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+624];
            vj_ij -= R_0_0_2_0 * dm_kl_cache[sq_kl+832];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+1040];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+1456];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+2080];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+2704];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+3120];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+3536];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+3744];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+3952];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+64] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+208];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+416];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+624];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+832];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+1040];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+1456];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+2080];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+2704];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+3120];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+3536];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+3744];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+3952];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+80] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+208];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+416];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+624];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+832];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+1040];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+1456];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+2080];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+2704];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+3120];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+3536];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+3744];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+3952];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+96] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+208];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+416];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+624];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+832];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+1040];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+1456];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_0_5_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+2080];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+2704];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+3120];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+3536];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+3744];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+3952];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+112] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+208];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+416];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+624];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+832];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+1040];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+1456];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+2080];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+2704];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+3120];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+3536];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+3744];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+3952];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+128] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+208];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+416];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+624];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+832];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+1040];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+1456];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_0_6_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+2080];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+2704];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+3120];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+3536];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+3744];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+3952];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+144] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+208];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+416];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+624];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+832];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+1040];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+1456];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_0_0 * dm_kl_cache[sq_kl+2080];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+2704];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+3120];
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+3536];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+3744];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+3952];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+160] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+208];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+416];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+624];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+832];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+1040];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1456];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+2080];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2704];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+3120];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+3536];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+3744];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+3952];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+176] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+208];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+416];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+624];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+832];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+1040];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1456];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+2080];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2704];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+3120];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+3536];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+3744];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+3952];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+192] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+208];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+416];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+624];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+832];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1040];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+1456];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+2080];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+2704];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+3120];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+3536];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+3744];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+3952];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+208] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+208];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+416];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+624];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+832];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1040];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1456];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+2080];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2704];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+3120];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+3536];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+3744];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+3952];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+224] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+208];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+416];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+624];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+832];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1040];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+1456];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+2080];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+2704];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+3120];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+3536];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+3744];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+3952];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+240] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+208];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+416];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+624];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+832];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+1040];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+1456];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+2080];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+2704];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+3120];
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+3536];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+3744];
            vj_ij -= R_0_5_0_0 * dm_kl_cache[sq_kl+3952];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+256] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+208];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+416];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+624];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+832];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+1040];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1456];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+2080];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+2704];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+3120];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+3536];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+3744];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+3952];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+272] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+208];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+416];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+624];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+832];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1040];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+1456];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+2080];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+2704];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+3120];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+3536];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+3744];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+3952];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+288] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+208];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+416];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+624];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+832];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+1040];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+1456];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+2080];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+2704];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+2912];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+3120];
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+3536];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+3744];
            vj_ij -= R_0_6_0_0 * dm_kl_cache[sq_kl+3952];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+304] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 20; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 260; n += 16) {
        int i = n / 13;
        int tile = n % 13;
        int task_kl = blockIdx.y * 208 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*208]);
        }
    }
}

// TILEX=32, TILEY=7,
__global__
void md_j_3_4(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 512;
    int task_kl0 = blockIdx.y * 112;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 2048;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 448;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 320;
    double *dm_ij_cache = vj_kl_cache + 3920;
    double *dm_kl_cache = dm_ij_cache + 320;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 512; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 3920; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 112; n += 256) {
        int task_kl = blockIdx.y * 112 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+112] = ykl;
            Rq_cache[n+224] = zkl;
            Rq_cache[n+336] = akl;
        }
    }

    for (int n = tx; n < 245; n += 16) {
        int i = n / 7;
        int tile = n % 7;
        int task_kl = blockIdx.y * 112 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*112] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 32; ++batch_ij) {
        int task_ij0 = blockIdx.x * 512 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 20; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 7; ++batch_kl) {
            int task_kl0 = blockIdx.y * 112 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+112];
            double zkl = Rq_cache[sq_kl+224];
            double akl = Rq_cache[sq_kl+336];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 7);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 7; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+32];
            double R_2_0_0_1 = zpq * gamma_inc[sq_id+3*256];
            double R_1_0_0_2 = zpq * R_2_0_0_1 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_0_3 = zpq * R_1_0_0_2 + 2 * R_1_0_0_1;
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+48];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+64];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+80];
            double R_0_0_1_2 = ypq * R_1_0_0_2;
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+96];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+112];
            double R_1_0_1_1 = ypq * R_2_0_0_1;
            double R_0_0_2_1 = ypq * R_1_0_1_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+128];
            double R_2_0_1_0 = ypq * gamma_inc[sq_id+3*256];
            double R_1_0_2_0 = ypq * R_2_0_1_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_3_0 = ypq * R_1_0_2_0 + 2 * R_1_0_1_0;
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+144];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+160];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+176];
            double R_0_1_0_2 = xpq * R_1_0_0_2;
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+192];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+208];
            double R_0_1_1_1 = xpq * R_1_0_1_1;
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+224];
            double R_0_1_2_0 = xpq * R_1_0_2_0;
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+240];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+256];
            double R_1_1_0_1 = xpq * R_2_0_0_1;
            double R_0_2_0_1 = xpq * R_1_1_0_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+272];
            double R_1_1_1_0 = xpq * R_2_0_1_0;
            double R_0_2_1_0 = xpq * R_1_1_1_0 + 1 * R_1_0_1_0;
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+288];
            double R_2_1_0_0 = xpq * gamma_inc[sq_id+3*256];
            double R_1_2_0_0 = xpq * R_2_1_0_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_3_0_0 = xpq * R_1_2_0_0 + 2 * R_1_1_0_0;
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+32];
            double R_3_0_0_1 = zpq * gamma_inc[sq_id+4*256];
            double R_2_0_0_2 = zpq * R_3_0_0_1 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_0_3 = zpq * R_2_0_0_2 + 2 * R_2_0_0_1;
            double R_0_0_0_4 = zpq * R_1_0_0_3 + 3 * R_1_0_0_2;
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+80];
            double R_0_0_1_3 = ypq * R_1_0_0_3;
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+112];
            double R_1_0_1_2 = ypq * R_2_0_0_2;
            double R_0_0_2_2 = ypq * R_1_0_1_2 + 1 * R_1_0_0_2;
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+128];
            double R_2_0_1_1 = ypq * R_3_0_0_1;
            double R_1_0_2_1 = ypq * R_2_0_1_1 + 1 * R_2_0_0_1;
            double R_0_0_3_1 = ypq * R_1_0_2_1 + 2 * R_1_0_1_1;
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+176];
            double R_0_1_0_3 = xpq * R_1_0_0_3;
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+208];
            double R_0_1_1_2 = xpq * R_1_0_1_2;
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+224];
            double R_0_1_2_1 = xpq * R_1_0_2_1;
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+256];
            double R_1_1_0_2 = xpq * R_2_0_0_2;
            double R_0_2_0_2 = xpq * R_1_1_0_2 + 1 * R_1_0_0_2;
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+272];
            double R_1_1_1_1 = xpq * R_2_0_1_1;
            double R_0_2_1_1 = xpq * R_1_1_1_1 + 1 * R_1_0_1_1;
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+288];
            double R_2_1_0_1 = xpq * R_3_0_0_1;
            double R_1_2_0_1 = xpq * R_2_1_0_1 + 1 * R_2_0_0_1;
            double R_0_3_0_1 = xpq * R_1_2_0_1 + 2 * R_1_1_0_1;
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+112] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+32];
            double R_4_0_0_1 = zpq * gamma_inc[sq_id+5*256];
            double R_3_0_0_2 = zpq * R_4_0_0_1 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_0_3 = zpq * R_3_0_0_2 + 2 * R_3_0_0_1;
            double R_1_0_0_4 = zpq * R_2_0_0_3 + 3 * R_2_0_0_2;
            double R_0_0_0_5 = zpq * R_1_0_0_4 + 4 * R_1_0_0_3;
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+80];
            double R_0_0_1_4 = ypq * R_1_0_0_4;
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+112];
            double R_1_0_1_3 = ypq * R_2_0_0_3;
            double R_0_0_2_3 = ypq * R_1_0_1_3 + 1 * R_1_0_0_3;
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+128];
            double R_2_0_1_2 = ypq * R_3_0_0_2;
            double R_1_0_2_2 = ypq * R_2_0_1_2 + 1 * R_2_0_0_2;
            double R_0_0_3_2 = ypq * R_1_0_2_2 + 2 * R_1_0_1_2;
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+176];
            double R_0_1_0_4 = xpq * R_1_0_0_4;
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+208];
            double R_0_1_1_3 = xpq * R_1_0_1_3;
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+224];
            double R_0_1_2_2 = xpq * R_1_0_2_2;
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+256];
            double R_1_1_0_3 = xpq * R_2_0_0_3;
            double R_0_2_0_3 = xpq * R_1_1_0_3 + 1 * R_1_0_0_3;
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+272];
            double R_1_1_1_2 = xpq * R_2_0_1_2;
            double R_0_2_1_2 = xpq * R_1_1_1_2 + 1 * R_1_0_1_2;
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+288];
            double R_2_1_0_2 = xpq * R_3_0_0_2;
            double R_1_2_0_2 = xpq * R_2_1_0_2 + 1 * R_2_0_0_2;
            double R_0_3_0_2 = xpq * R_1_2_0_2 + 2 * R_1_1_0_2;
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+224] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_5 * dm_ij_cache[tx+32];
            double R_5_0_0_1 = zpq * gamma_inc[sq_id+6*256];
            double R_4_0_0_2 = zpq * R_5_0_0_1 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_0_3 = zpq * R_4_0_0_2 + 2 * R_4_0_0_1;
            double R_2_0_0_4 = zpq * R_3_0_0_3 + 3 * R_3_0_0_2;
            double R_1_0_0_5 = zpq * R_2_0_0_4 + 4 * R_2_0_0_3;
            double R_0_0_0_6 = zpq * R_1_0_0_5 + 5 * R_1_0_0_4;
            vj_kl -= R_0_0_0_6 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+80];
            double R_0_0_1_5 = ypq * R_1_0_0_5;
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+112];
            double R_1_0_1_4 = ypq * R_2_0_0_4;
            double R_0_0_2_4 = ypq * R_1_0_1_4 + 1 * R_1_0_0_4;
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+128];
            double R_2_0_1_3 = ypq * R_3_0_0_3;
            double R_1_0_2_3 = ypq * R_2_0_1_3 + 1 * R_2_0_0_3;
            double R_0_0_3_3 = ypq * R_1_0_2_3 + 2 * R_1_0_1_3;
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+176];
            double R_0_1_0_5 = xpq * R_1_0_0_5;
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+208];
            double R_0_1_1_4 = xpq * R_1_0_1_4;
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+224];
            double R_0_1_2_3 = xpq * R_1_0_2_3;
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+256];
            double R_1_1_0_4 = xpq * R_2_0_0_4;
            double R_0_2_0_4 = xpq * R_1_1_0_4 + 1 * R_1_0_0_4;
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+272];
            double R_1_1_1_3 = xpq * R_2_0_1_3;
            double R_0_2_1_3 = xpq * R_1_1_1_3 + 1 * R_1_0_1_3;
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+288];
            double R_2_1_0_3 = xpq * R_3_0_0_3;
            double R_1_2_0_3 = xpq * R_2_1_0_3 + 1 * R_2_0_0_3;
            double R_0_3_0_3 = xpq * R_1_2_0_3 + 2 * R_1_1_0_3;
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+336] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_0_6 * dm_ij_cache[tx+32];
            double R_6_0_0_1 = zpq * gamma_inc[sq_id+7*256];
            double R_5_0_0_2 = zpq * R_6_0_0_1 + 1 * gamma_inc[sq_id+6*256];
            double R_4_0_0_3 = zpq * R_5_0_0_2 + 2 * R_5_0_0_1;
            double R_3_0_0_4 = zpq * R_4_0_0_3 + 3 * R_4_0_0_2;
            double R_2_0_0_5 = zpq * R_3_0_0_4 + 4 * R_3_0_0_3;
            double R_1_0_0_6 = zpq * R_2_0_0_5 + 5 * R_2_0_0_4;
            double R_0_0_0_7 = zpq * R_1_0_0_6 + 6 * R_1_0_0_5;
            vj_kl += R_0_0_0_7 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+80];
            double R_0_0_1_6 = ypq * R_1_0_0_6;
            vj_kl += R_0_0_1_6 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+112];
            double R_1_0_1_5 = ypq * R_2_0_0_5;
            double R_0_0_2_5 = ypq * R_1_0_1_5 + 1 * R_1_0_0_5;
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+128];
            double R_2_0_1_4 = ypq * R_3_0_0_4;
            double R_1_0_2_4 = ypq * R_2_0_1_4 + 1 * R_2_0_0_4;
            double R_0_0_3_4 = ypq * R_1_0_2_4 + 2 * R_1_0_1_4;
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+176];
            double R_0_1_0_6 = xpq * R_1_0_0_6;
            vj_kl += R_0_1_0_6 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+208];
            double R_0_1_1_5 = xpq * R_1_0_1_5;
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+224];
            double R_0_1_2_4 = xpq * R_1_0_2_4;
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+256];
            double R_1_1_0_5 = xpq * R_2_0_0_5;
            double R_0_2_0_5 = xpq * R_1_1_0_5 + 1 * R_1_0_0_5;
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+272];
            double R_1_1_1_4 = xpq * R_2_0_1_4;
            double R_0_2_1_4 = xpq * R_1_1_1_4 + 1 * R_1_0_1_4;
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+288];
            double R_2_1_0_4 = xpq * R_3_0_0_4;
            double R_1_2_0_4 = xpq * R_2_1_0_4 + 1 * R_2_0_0_4;
            double R_0_3_0_4 = xpq * R_1_2_0_4 + 2 * R_1_1_0_4;
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+448] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_2_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+128];
            double R_3_0_1_0 = ypq * gamma_inc[sq_id+4*256];
            double R_2_0_2_0 = ypq * R_3_0_1_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_3_0 = ypq * R_2_0_2_0 + 2 * R_2_0_1_0;
            double R_0_0_4_0 = ypq * R_1_0_3_0 + 3 * R_1_0_2_0;
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+224];
            double R_0_1_3_0 = xpq * R_1_0_3_0;
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+272];
            double R_1_1_2_0 = xpq * R_2_0_2_0;
            double R_0_2_2_0 = xpq * R_1_1_2_0 + 1 * R_1_0_2_0;
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+288];
            double R_2_1_1_0 = xpq * R_3_0_1_0;
            double R_1_2_1_0 = xpq * R_2_1_1_0 + 1 * R_2_0_1_0;
            double R_0_3_1_0 = xpq * R_1_2_1_0 + 2 * R_1_1_1_0;
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+560] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+128];
            double R_3_0_1_1 = ypq * R_4_0_0_1;
            double R_2_0_2_1 = ypq * R_3_0_1_1 + 1 * R_3_0_0_1;
            double R_1_0_3_1 = ypq * R_2_0_2_1 + 2 * R_2_0_1_1;
            double R_0_0_4_1 = ypq * R_1_0_3_1 + 3 * R_1_0_2_1;
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+224];
            double R_0_1_3_1 = xpq * R_1_0_3_1;
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+272];
            double R_1_1_2_1 = xpq * R_2_0_2_1;
            double R_0_2_2_1 = xpq * R_1_1_2_1 + 1 * R_1_0_2_1;
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+288];
            double R_2_1_1_1 = xpq * R_3_0_1_1;
            double R_1_2_1_1 = xpq * R_2_1_1_1 + 1 * R_2_0_1_1;
            double R_0_3_1_1 = xpq * R_1_2_1_1 + 2 * R_1_1_1_1;
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+672] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+128];
            double R_3_0_1_2 = ypq * R_4_0_0_2;
            double R_2_0_2_2 = ypq * R_3_0_1_2 + 1 * R_3_0_0_2;
            double R_1_0_3_2 = ypq * R_2_0_2_2 + 2 * R_2_0_1_2;
            double R_0_0_4_2 = ypq * R_1_0_3_2 + 3 * R_1_0_2_2;
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+224];
            double R_0_1_3_2 = xpq * R_1_0_3_2;
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+272];
            double R_1_1_2_2 = xpq * R_2_0_2_2;
            double R_0_2_2_2 = xpq * R_1_1_2_2 + 1 * R_1_0_2_2;
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+288];
            double R_2_1_1_2 = xpq * R_3_0_1_2;
            double R_1_2_1_2 = xpq * R_2_1_1_2 + 1 * R_2_0_1_2;
            double R_0_3_1_2 = xpq * R_1_2_1_2 + 2 * R_1_1_1_2;
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+784] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_1_6 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+128];
            double R_3_0_1_3 = ypq * R_4_0_0_3;
            double R_2_0_2_3 = ypq * R_3_0_1_3 + 1 * R_3_0_0_3;
            double R_1_0_3_3 = ypq * R_2_0_2_3 + 2 * R_2_0_1_3;
            double R_0_0_4_3 = ypq * R_1_0_3_3 + 3 * R_1_0_2_3;
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+224];
            double R_0_1_3_3 = xpq * R_1_0_3_3;
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+272];
            double R_1_1_2_3 = xpq * R_2_0_2_3;
            double R_0_2_2_3 = xpq * R_1_1_2_3 + 1 * R_1_0_2_3;
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+288];
            double R_2_1_1_3 = xpq * R_3_0_1_3;
            double R_1_2_1_3 = xpq * R_2_1_1_3 + 1 * R_2_0_1_3;
            double R_0_3_1_3 = xpq * R_1_2_1_3 + 2 * R_1_1_1_3;
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+896] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+128];
            double R_4_0_1_0 = ypq * gamma_inc[sq_id+5*256];
            double R_3_0_2_0 = ypq * R_4_0_1_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_3_0 = ypq * R_3_0_2_0 + 2 * R_3_0_1_0;
            double R_1_0_4_0 = ypq * R_2_0_3_0 + 3 * R_2_0_2_0;
            double R_0_0_5_0 = ypq * R_1_0_4_0 + 4 * R_1_0_3_0;
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+224];
            double R_0_1_4_0 = xpq * R_1_0_4_0;
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+272];
            double R_1_1_3_0 = xpq * R_2_0_3_0;
            double R_0_2_3_0 = xpq * R_1_1_3_0 + 1 * R_1_0_3_0;
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+288];
            double R_2_1_2_0 = xpq * R_3_0_2_0;
            double R_1_2_2_0 = xpq * R_2_1_2_0 + 1 * R_2_0_2_0;
            double R_0_3_2_0 = xpq * R_1_2_2_0 + 2 * R_1_1_2_0;
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1008] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+128];
            double R_4_0_1_1 = ypq * R_5_0_0_1;
            double R_3_0_2_1 = ypq * R_4_0_1_1 + 1 * R_4_0_0_1;
            double R_2_0_3_1 = ypq * R_3_0_2_1 + 2 * R_3_0_1_1;
            double R_1_0_4_1 = ypq * R_2_0_3_1 + 3 * R_2_0_2_1;
            double R_0_0_5_1 = ypq * R_1_0_4_1 + 4 * R_1_0_3_1;
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+224];
            double R_0_1_4_1 = xpq * R_1_0_4_1;
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+272];
            double R_1_1_3_1 = xpq * R_2_0_3_1;
            double R_0_2_3_1 = xpq * R_1_1_3_1 + 1 * R_1_0_3_1;
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+288];
            double R_2_1_2_1 = xpq * R_3_0_2_1;
            double R_1_2_2_1 = xpq * R_2_1_2_1 + 1 * R_2_0_2_1;
            double R_0_3_2_1 = xpq * R_1_2_2_1 + 2 * R_1_1_2_1;
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1120] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+128];
            double R_4_0_1_2 = ypq * R_5_0_0_2;
            double R_3_0_2_2 = ypq * R_4_0_1_2 + 1 * R_4_0_0_2;
            double R_2_0_3_2 = ypq * R_3_0_2_2 + 2 * R_3_0_1_2;
            double R_1_0_4_2 = ypq * R_2_0_3_2 + 3 * R_2_0_2_2;
            double R_0_0_5_2 = ypq * R_1_0_4_2 + 4 * R_1_0_3_2;
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+224];
            double R_0_1_4_2 = xpq * R_1_0_4_2;
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+272];
            double R_1_1_3_2 = xpq * R_2_0_3_2;
            double R_0_2_3_2 = xpq * R_1_1_3_2 + 1 * R_1_0_3_2;
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+288];
            double R_2_1_2_2 = xpq * R_3_0_2_2;
            double R_1_2_2_2 = xpq * R_2_1_2_2 + 1 * R_2_0_2_2;
            double R_0_3_2_2 = xpq * R_1_2_2_2 + 2 * R_1_1_2_2;
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1232] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_5_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+128];
            double R_5_0_1_0 = ypq * gamma_inc[sq_id+6*256];
            double R_4_0_2_0 = ypq * R_5_0_1_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_3_0 = ypq * R_4_0_2_0 + 2 * R_4_0_1_0;
            double R_2_0_4_0 = ypq * R_3_0_3_0 + 3 * R_3_0_2_0;
            double R_1_0_5_0 = ypq * R_2_0_4_0 + 4 * R_2_0_3_0;
            double R_0_0_6_0 = ypq * R_1_0_5_0 + 5 * R_1_0_4_0;
            vj_kl -= R_0_0_6_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+224];
            double R_0_1_5_0 = xpq * R_1_0_5_0;
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+272];
            double R_1_1_4_0 = xpq * R_2_0_4_0;
            double R_0_2_4_0 = xpq * R_1_1_4_0 + 1 * R_1_0_4_0;
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+288];
            double R_2_1_3_0 = xpq * R_3_0_3_0;
            double R_1_2_3_0 = xpq * R_2_1_3_0 + 1 * R_2_0_3_0;
            double R_0_3_3_0 = xpq * R_1_2_3_0 + 2 * R_1_1_3_0;
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1344] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+128];
            double R_5_0_1_1 = ypq * R_6_0_0_1;
            double R_4_0_2_1 = ypq * R_5_0_1_1 + 1 * R_5_0_0_1;
            double R_3_0_3_1 = ypq * R_4_0_2_1 + 2 * R_4_0_1_1;
            double R_2_0_4_1 = ypq * R_3_0_3_1 + 3 * R_3_0_2_1;
            double R_1_0_5_1 = ypq * R_2_0_4_1 + 4 * R_2_0_3_1;
            double R_0_0_6_1 = ypq * R_1_0_5_1 + 5 * R_1_0_4_1;
            vj_kl += R_0_0_6_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+224];
            double R_0_1_5_1 = xpq * R_1_0_5_1;
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+272];
            double R_1_1_4_1 = xpq * R_2_0_4_1;
            double R_0_2_4_1 = xpq * R_1_1_4_1 + 1 * R_1_0_4_1;
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+288];
            double R_2_1_3_1 = xpq * R_3_0_3_1;
            double R_1_2_3_1 = xpq * R_2_1_3_1 + 1 * R_2_0_3_1;
            double R_0_3_3_1 = xpq * R_1_2_3_1 + 2 * R_1_1_3_1;
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1456] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_6_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_6_1 * dm_ij_cache[tx+128];
            double R_6_0_1_0 = ypq * gamma_inc[sq_id+7*256];
            double R_5_0_2_0 = ypq * R_6_0_1_0 + 1 * gamma_inc[sq_id+6*256];
            double R_4_0_3_0 = ypq * R_5_0_2_0 + 2 * R_5_0_1_0;
            double R_3_0_4_0 = ypq * R_4_0_3_0 + 3 * R_4_0_2_0;
            double R_2_0_5_0 = ypq * R_3_0_4_0 + 4 * R_3_0_3_0;
            double R_1_0_6_0 = ypq * R_2_0_5_0 + 5 * R_2_0_4_0;
            double R_0_0_7_0 = ypq * R_1_0_6_0 + 6 * R_1_0_5_0;
            vj_kl += R_0_0_7_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+224];
            double R_0_1_6_0 = xpq * R_1_0_6_0;
            vj_kl += R_0_1_6_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+272];
            double R_1_1_5_0 = xpq * R_2_0_5_0;
            double R_0_2_5_0 = xpq * R_1_1_5_0 + 1 * R_1_0_5_0;
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+288];
            double R_2_1_4_0 = xpq * R_3_0_4_0;
            double R_1_2_4_0 = xpq * R_2_1_4_0 + 1 * R_2_0_4_0;
            double R_0_3_4_0 = xpq * R_1_2_4_0 + 2 * R_1_1_4_0;
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1568] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_0_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+288];
            double R_3_1_0_0 = xpq * gamma_inc[sq_id+4*256];
            double R_2_2_0_0 = xpq * R_3_1_0_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_3_0_0 = xpq * R_2_2_0_0 + 2 * R_2_1_0_0;
            double R_0_4_0_0 = xpq * R_1_3_0_0 + 3 * R_1_2_0_0;
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1680] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+288];
            double R_3_1_0_1 = xpq * R_4_0_0_1;
            double R_2_2_0_1 = xpq * R_3_1_0_1 + 1 * R_3_0_0_1;
            double R_1_3_0_1 = xpq * R_2_2_0_1 + 2 * R_2_1_0_1;
            double R_0_4_0_1 = xpq * R_1_3_0_1 + 3 * R_1_2_0_1;
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1792] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+288];
            double R_3_1_0_2 = xpq * R_4_0_0_2;
            double R_2_2_0_2 = xpq * R_3_1_0_2 + 1 * R_3_0_0_2;
            double R_1_3_0_2 = xpq * R_2_2_0_2 + 2 * R_2_1_0_2;
            double R_0_4_0_2 = xpq * R_1_3_0_2 + 3 * R_1_2_0_2;
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1904] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_0_6 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+288];
            double R_3_1_0_3 = xpq * R_4_0_0_3;
            double R_2_2_0_3 = xpq * R_3_1_0_3 + 1 * R_3_0_0_3;
            double R_1_3_0_3 = xpq * R_2_2_0_3 + 2 * R_2_1_0_3;
            double R_0_4_0_3 = xpq * R_1_3_0_3 + 3 * R_1_2_0_3;
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2016] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+288];
            double R_3_1_1_0 = xpq * R_4_0_1_0;
            double R_2_2_1_0 = xpq * R_3_1_1_0 + 1 * R_3_0_1_0;
            double R_1_3_1_0 = xpq * R_2_2_1_0 + 2 * R_2_1_1_0;
            double R_0_4_1_0 = xpq * R_1_3_1_0 + 3 * R_1_2_1_0;
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2128] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+288];
            double R_3_1_1_1 = xpq * R_4_0_1_1;
            double R_2_2_1_1 = xpq * R_3_1_1_1 + 1 * R_3_0_1_1;
            double R_1_3_1_1 = xpq * R_2_2_1_1 + 2 * R_2_1_1_1;
            double R_0_4_1_1 = xpq * R_1_3_1_1 + 3 * R_1_2_1_1;
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2240] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+288];
            double R_3_1_1_2 = xpq * R_4_0_1_2;
            double R_2_2_1_2 = xpq * R_3_1_1_2 + 1 * R_3_0_1_2;
            double R_1_3_1_2 = xpq * R_2_2_1_2 + 2 * R_2_1_1_2;
            double R_0_4_1_2 = xpq * R_1_3_1_2 + 3 * R_1_2_1_2;
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2352] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+288];
            double R_3_1_2_0 = xpq * R_4_0_2_0;
            double R_2_2_2_0 = xpq * R_3_1_2_0 + 1 * R_3_0_2_0;
            double R_1_3_2_0 = xpq * R_2_2_2_0 + 2 * R_2_1_2_0;
            double R_0_4_2_0 = xpq * R_1_3_2_0 + 3 * R_1_2_2_0;
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2464] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+288];
            double R_3_1_2_1 = xpq * R_4_0_2_1;
            double R_2_2_2_1 = xpq * R_3_1_2_1 + 1 * R_3_0_2_1;
            double R_1_3_2_1 = xpq * R_2_2_2_1 + 2 * R_2_1_2_1;
            double R_0_4_2_1 = xpq * R_1_3_2_1 + 3 * R_1_2_2_1;
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2576] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_6_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+288];
            double R_3_1_3_0 = xpq * R_4_0_3_0;
            double R_2_2_3_0 = xpq * R_3_1_3_0 + 1 * R_3_0_3_0;
            double R_1_3_3_0 = xpq * R_2_2_3_0 + 2 * R_2_1_3_0;
            double R_0_4_3_0 = xpq * R_1_3_3_0 + 3 * R_1_2_3_0;
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2688] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+160];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+256];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+272];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+288];
            double R_4_1_0_0 = xpq * gamma_inc[sq_id+5*256];
            double R_3_2_0_0 = xpq * R_4_1_0_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_3_0_0 = xpq * R_3_2_0_0 + 2 * R_3_1_0_0;
            double R_1_4_0_0 = xpq * R_2_3_0_0 + 3 * R_2_2_0_0;
            double R_0_5_0_0 = xpq * R_1_4_0_0 + 4 * R_1_3_0_0;
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2800] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+192];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+224];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+288];
            double R_4_1_0_1 = xpq * R_5_0_0_1;
            double R_3_2_0_1 = xpq * R_4_1_0_1 + 1 * R_4_0_0_1;
            double R_2_3_0_1 = xpq * R_3_2_0_1 + 2 * R_3_1_0_1;
            double R_1_4_0_1 = xpq * R_2_3_0_1 + 3 * R_2_2_0_1;
            double R_0_5_0_1 = xpq * R_1_4_0_1 + 4 * R_1_3_0_1;
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2912] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+144];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+160];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+176];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+192];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+224];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+288];
            double R_4_1_0_2 = xpq * R_5_0_0_2;
            double R_3_2_0_2 = xpq * R_4_1_0_2 + 1 * R_4_0_0_2;
            double R_2_3_0_2 = xpq * R_3_2_0_2 + 2 * R_3_1_0_2;
            double R_1_4_0_2 = xpq * R_2_3_0_2 + 3 * R_2_2_0_2;
            double R_0_5_0_2 = xpq * R_1_4_0_2 + 4 * R_1_3_0_2;
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3024] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+272];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+288];
            double R_4_1_1_0 = xpq * R_5_0_1_0;
            double R_3_2_1_0 = xpq * R_4_1_1_0 + 1 * R_4_0_1_0;
            double R_2_3_1_0 = xpq * R_3_2_1_0 + 2 * R_3_1_1_0;
            double R_1_4_1_0 = xpq * R_2_3_1_0 + 3 * R_2_2_1_0;
            double R_0_5_1_0 = xpq * R_1_4_1_0 + 4 * R_1_3_1_0;
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3136] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+192];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+224];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+288];
            double R_4_1_1_1 = xpq * R_5_0_1_1;
            double R_3_2_1_1 = xpq * R_4_1_1_1 + 1 * R_4_0_1_1;
            double R_2_3_1_1 = xpq * R_3_2_1_1 + 2 * R_3_1_1_1;
            double R_1_4_1_1 = xpq * R_2_3_1_1 + 3 * R_2_2_1_1;
            double R_0_5_1_1 = xpq * R_1_4_1_1 + 4 * R_1_3_1_1;
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3248] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+160];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+256];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+272];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+288];
            double R_4_1_2_0 = xpq * R_5_0_2_0;
            double R_3_2_2_0 = xpq * R_4_1_2_0 + 1 * R_4_0_2_0;
            double R_2_3_2_0 = xpq * R_3_2_2_0 + 2 * R_3_1_2_0;
            double R_1_4_2_0 = xpq * R_2_3_2_0 + 3 * R_2_2_2_0;
            double R_0_5_2_0 = xpq * R_1_4_2_0 + 4 * R_1_3_2_0;
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3360] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_5_0_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+272];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+288];
            double R_5_1_0_0 = xpq * gamma_inc[sq_id+6*256];
            double R_4_2_0_0 = xpq * R_5_1_0_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_3_0_0 = xpq * R_4_2_0_0 + 2 * R_4_1_0_0;
            double R_2_4_0_0 = xpq * R_3_3_0_0 + 3 * R_3_2_0_0;
            double R_1_5_0_0 = xpq * R_2_4_0_0 + 4 * R_2_3_0_0;
            double R_0_6_0_0 = xpq * R_1_5_0_0 + 5 * R_1_4_0_0;
            vj_kl -= R_0_6_0_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3472] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+64];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+192];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+224];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+288];
            double R_5_1_0_1 = xpq * R_6_0_0_1;
            double R_4_2_0_1 = xpq * R_5_1_0_1 + 1 * R_5_0_0_1;
            double R_3_3_0_1 = xpq * R_4_2_0_1 + 2 * R_4_1_0_1;
            double R_2_4_0_1 = xpq * R_3_3_0_1 + 3 * R_3_2_0_1;
            double R_1_5_0_1 = xpq * R_2_4_0_1 + 4 * R_2_3_0_1;
            double R_0_6_0_1 = xpq * R_1_5_0_1 + 5 * R_1_4_0_1;
            vj_kl += R_0_6_0_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3584] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+64];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+128];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+160];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+256];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+272];
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+288];
            double R_5_1_1_0 = xpq * R_6_0_1_0;
            double R_4_2_1_0 = xpq * R_5_1_1_0 + 1 * R_5_0_1_0;
            double R_3_3_1_0 = xpq * R_4_2_1_0 + 2 * R_4_1_1_0;
            double R_2_4_1_0 = xpq * R_3_3_1_0 + 3 * R_3_2_1_0;
            double R_1_5_1_0 = xpq * R_2_4_1_0 + 4 * R_2_3_1_0;
            double R_0_6_1_0 = xpq * R_1_5_1_0 + 5 * R_1_4_1_0;
            vj_kl += R_0_6_1_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3696] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+64];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+128];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+160];
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_6_0_0 * dm_ij_cache[tx+256];
            vj_kl += R_0_6_0_1 * dm_ij_cache[tx+272];
            vj_kl += R_0_6_1_0 * dm_ij_cache[tx+288];
            double R_6_1_0_0 = xpq * gamma_inc[sq_id+7*256];
            double R_5_2_0_0 = xpq * R_6_1_0_0 + 1 * gamma_inc[sq_id+6*256];
            double R_4_3_0_0 = xpq * R_5_2_0_0 + 2 * R_5_1_0_0;
            double R_3_4_0_0 = xpq * R_4_3_0_0 + 3 * R_4_2_0_0;
            double R_2_5_0_0 = xpq * R_3_4_0_0 + 4 * R_3_3_0_0;
            double R_1_6_0_0 = xpq * R_2_5_0_0 + 5 * R_2_4_0_0;
            double R_0_7_0_0 = xpq * R_1_6_0_0 + 6 * R_1_5_0_0;
            vj_kl += R_0_7_0_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3808] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_1 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_1_0 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_0_0 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_2 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_0_0_5 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_0_6 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_0_0_6 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_0_7 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_0_1_6 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_1_0_6 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_2_0 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+64] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+80] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_1_6 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+96] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_5_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_0_6_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+112] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_0_6_1 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+128] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_6_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_6_1 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_0_7_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_6_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+144] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_2_0_0 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+160] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+176] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_0_6 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+192] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+208] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+224] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_1_6_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+240] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_5_0_0 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_6_0_0 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+256] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_6_0_1 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+272] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_6_1_0 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+288] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_6_0_0 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_6_0_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_6_1_0 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_7_0_0 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+304] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 20; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 245; n += 16) {
        int i = n / 7;
        int tile = n % 7;
        int task_kl = blockIdx.y * 112 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*112]);
        }
    }
}

// TILEX=32, TILEY=4,
__global__
void md_j_3_5(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 512;
    int task_kl0 = blockIdx.y * 64;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 2304;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 256;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 320;
    double *dm_ij_cache = vj_kl_cache + 3584;
    double *dm_kl_cache = dm_ij_cache + 320;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 320; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 3584; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 64; n += 256) {
        int task_kl = blockIdx.y * 64 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+64] = ykl;
            Rq_cache[n+128] = zkl;
            Rq_cache[n+192] = akl;
        }
    }

    for (int n = tx; n < 224; n += 16) {
        int i = n / 4;
        int tile = n % 4;
        int task_kl = blockIdx.y * 64 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*64] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 32; ++batch_ij) {
        int task_ij0 = blockIdx.x * 512 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 20; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 4; ++batch_kl) {
            int task_kl0 = blockIdx.y * 64 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+64];
            double zkl = Rq_cache[sq_kl+128];
            double akl = Rq_cache[sq_kl+192];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 8);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 8; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+32];
            double R_2_0_0_1 = zpq * gamma_inc[sq_id+3*256];
            double R_1_0_0_2 = zpq * R_2_0_0_1 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_0_3 = zpq * R_1_0_0_2 + 2 * R_1_0_0_1;
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+48];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+64];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+80];
            double R_0_0_1_2 = ypq * R_1_0_0_2;
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+96];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+112];
            double R_1_0_1_1 = ypq * R_2_0_0_1;
            double R_0_0_2_1 = ypq * R_1_0_1_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+128];
            double R_2_0_1_0 = ypq * gamma_inc[sq_id+3*256];
            double R_1_0_2_0 = ypq * R_2_0_1_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_3_0 = ypq * R_1_0_2_0 + 2 * R_1_0_1_0;
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+144];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+160];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+176];
            double R_0_1_0_2 = xpq * R_1_0_0_2;
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+192];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+208];
            double R_0_1_1_1 = xpq * R_1_0_1_1;
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+224];
            double R_0_1_2_0 = xpq * R_1_0_2_0;
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+240];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+256];
            double R_1_1_0_1 = xpq * R_2_0_0_1;
            double R_0_2_0_1 = xpq * R_1_1_0_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+272];
            double R_1_1_1_0 = xpq * R_2_0_1_0;
            double R_0_2_1_0 = xpq * R_1_1_1_0 + 1 * R_1_0_1_0;
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+288];
            double R_2_1_0_0 = xpq * gamma_inc[sq_id+3*256];
            double R_1_2_0_0 = xpq * R_2_1_0_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_3_0_0 = xpq * R_1_2_0_0 + 2 * R_1_1_0_0;
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+32];
            double R_3_0_0_1 = zpq * gamma_inc[sq_id+4*256];
            double R_2_0_0_2 = zpq * R_3_0_0_1 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_0_3 = zpq * R_2_0_0_2 + 2 * R_2_0_0_1;
            double R_0_0_0_4 = zpq * R_1_0_0_3 + 3 * R_1_0_0_2;
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+80];
            double R_0_0_1_3 = ypq * R_1_0_0_3;
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+112];
            double R_1_0_1_2 = ypq * R_2_0_0_2;
            double R_0_0_2_2 = ypq * R_1_0_1_2 + 1 * R_1_0_0_2;
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+128];
            double R_2_0_1_1 = ypq * R_3_0_0_1;
            double R_1_0_2_1 = ypq * R_2_0_1_1 + 1 * R_2_0_0_1;
            double R_0_0_3_1 = ypq * R_1_0_2_1 + 2 * R_1_0_1_1;
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+176];
            double R_0_1_0_3 = xpq * R_1_0_0_3;
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+208];
            double R_0_1_1_2 = xpq * R_1_0_1_2;
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+224];
            double R_0_1_2_1 = xpq * R_1_0_2_1;
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+256];
            double R_1_1_0_2 = xpq * R_2_0_0_2;
            double R_0_2_0_2 = xpq * R_1_1_0_2 + 1 * R_1_0_0_2;
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+272];
            double R_1_1_1_1 = xpq * R_2_0_1_1;
            double R_0_2_1_1 = xpq * R_1_1_1_1 + 1 * R_1_0_1_1;
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+288];
            double R_2_1_0_1 = xpq * R_3_0_0_1;
            double R_1_2_0_1 = xpq * R_2_1_0_1 + 1 * R_2_0_0_1;
            double R_0_3_0_1 = xpq * R_1_2_0_1 + 2 * R_1_1_0_1;
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+64] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+32];
            double R_4_0_0_1 = zpq * gamma_inc[sq_id+5*256];
            double R_3_0_0_2 = zpq * R_4_0_0_1 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_0_3 = zpq * R_3_0_0_2 + 2 * R_3_0_0_1;
            double R_1_0_0_4 = zpq * R_2_0_0_3 + 3 * R_2_0_0_2;
            double R_0_0_0_5 = zpq * R_1_0_0_4 + 4 * R_1_0_0_3;
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+80];
            double R_0_0_1_4 = ypq * R_1_0_0_4;
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+112];
            double R_1_0_1_3 = ypq * R_2_0_0_3;
            double R_0_0_2_3 = ypq * R_1_0_1_3 + 1 * R_1_0_0_3;
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+128];
            double R_2_0_1_2 = ypq * R_3_0_0_2;
            double R_1_0_2_2 = ypq * R_2_0_1_2 + 1 * R_2_0_0_2;
            double R_0_0_3_2 = ypq * R_1_0_2_2 + 2 * R_1_0_1_2;
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+176];
            double R_0_1_0_4 = xpq * R_1_0_0_4;
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+208];
            double R_0_1_1_3 = xpq * R_1_0_1_3;
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+224];
            double R_0_1_2_2 = xpq * R_1_0_2_2;
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+256];
            double R_1_1_0_3 = xpq * R_2_0_0_3;
            double R_0_2_0_3 = xpq * R_1_1_0_3 + 1 * R_1_0_0_3;
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+272];
            double R_1_1_1_2 = xpq * R_2_0_1_2;
            double R_0_2_1_2 = xpq * R_1_1_1_2 + 1 * R_1_0_1_2;
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+288];
            double R_2_1_0_2 = xpq * R_3_0_0_2;
            double R_1_2_0_2 = xpq * R_2_1_0_2 + 1 * R_2_0_0_2;
            double R_0_3_0_2 = xpq * R_1_2_0_2 + 2 * R_1_1_0_2;
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+128] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_5 * dm_ij_cache[tx+32];
            double R_5_0_0_1 = zpq * gamma_inc[sq_id+6*256];
            double R_4_0_0_2 = zpq * R_5_0_0_1 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_0_3 = zpq * R_4_0_0_2 + 2 * R_4_0_0_1;
            double R_2_0_0_4 = zpq * R_3_0_0_3 + 3 * R_3_0_0_2;
            double R_1_0_0_5 = zpq * R_2_0_0_4 + 4 * R_2_0_0_3;
            double R_0_0_0_6 = zpq * R_1_0_0_5 + 5 * R_1_0_0_4;
            vj_kl -= R_0_0_0_6 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+80];
            double R_0_0_1_5 = ypq * R_1_0_0_5;
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+112];
            double R_1_0_1_4 = ypq * R_2_0_0_4;
            double R_0_0_2_4 = ypq * R_1_0_1_4 + 1 * R_1_0_0_4;
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+128];
            double R_2_0_1_3 = ypq * R_3_0_0_3;
            double R_1_0_2_3 = ypq * R_2_0_1_3 + 1 * R_2_0_0_3;
            double R_0_0_3_3 = ypq * R_1_0_2_3 + 2 * R_1_0_1_3;
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+176];
            double R_0_1_0_5 = xpq * R_1_0_0_5;
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+208];
            double R_0_1_1_4 = xpq * R_1_0_1_4;
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+224];
            double R_0_1_2_3 = xpq * R_1_0_2_3;
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+256];
            double R_1_1_0_4 = xpq * R_2_0_0_4;
            double R_0_2_0_4 = xpq * R_1_1_0_4 + 1 * R_1_0_0_4;
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+272];
            double R_1_1_1_3 = xpq * R_2_0_1_3;
            double R_0_2_1_3 = xpq * R_1_1_1_3 + 1 * R_1_0_1_3;
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+288];
            double R_2_1_0_3 = xpq * R_3_0_0_3;
            double R_1_2_0_3 = xpq * R_2_1_0_3 + 1 * R_2_0_0_3;
            double R_0_3_0_3 = xpq * R_1_2_0_3 + 2 * R_1_1_0_3;
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+192] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_0_6 * dm_ij_cache[tx+32];
            double R_6_0_0_1 = zpq * gamma_inc[sq_id+7*256];
            double R_5_0_0_2 = zpq * R_6_0_0_1 + 1 * gamma_inc[sq_id+6*256];
            double R_4_0_0_3 = zpq * R_5_0_0_2 + 2 * R_5_0_0_1;
            double R_3_0_0_4 = zpq * R_4_0_0_3 + 3 * R_4_0_0_2;
            double R_2_0_0_5 = zpq * R_3_0_0_4 + 4 * R_3_0_0_3;
            double R_1_0_0_6 = zpq * R_2_0_0_5 + 5 * R_2_0_0_4;
            double R_0_0_0_7 = zpq * R_1_0_0_6 + 6 * R_1_0_0_5;
            vj_kl += R_0_0_0_7 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+80];
            double R_0_0_1_6 = ypq * R_1_0_0_6;
            vj_kl += R_0_0_1_6 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+112];
            double R_1_0_1_5 = ypq * R_2_0_0_5;
            double R_0_0_2_5 = ypq * R_1_0_1_5 + 1 * R_1_0_0_5;
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+128];
            double R_2_0_1_4 = ypq * R_3_0_0_4;
            double R_1_0_2_4 = ypq * R_2_0_1_4 + 1 * R_2_0_0_4;
            double R_0_0_3_4 = ypq * R_1_0_2_4 + 2 * R_1_0_1_4;
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+176];
            double R_0_1_0_6 = xpq * R_1_0_0_6;
            vj_kl += R_0_1_0_6 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+208];
            double R_0_1_1_5 = xpq * R_1_0_1_5;
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+224];
            double R_0_1_2_4 = xpq * R_1_0_2_4;
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+256];
            double R_1_1_0_5 = xpq * R_2_0_0_5;
            double R_0_2_0_5 = xpq * R_1_1_0_5 + 1 * R_1_0_0_5;
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+272];
            double R_1_1_1_4 = xpq * R_2_0_1_4;
            double R_0_2_1_4 = xpq * R_1_1_1_4 + 1 * R_1_0_1_4;
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+288];
            double R_2_1_0_4 = xpq * R_3_0_0_4;
            double R_1_2_0_4 = xpq * R_2_1_0_4 + 1 * R_2_0_0_4;
            double R_0_3_0_4 = xpq * R_1_2_0_4 + 2 * R_1_1_0_4;
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+256] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_5 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_6 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_7 * dm_ij_cache[tx+32];
            double R_7_0_0_1 = zpq * gamma_inc[sq_id+8*256];
            double R_6_0_0_2 = zpq * R_7_0_0_1 + 1 * gamma_inc[sq_id+7*256];
            double R_5_0_0_3 = zpq * R_6_0_0_2 + 2 * R_6_0_0_1;
            double R_4_0_0_4 = zpq * R_5_0_0_3 + 3 * R_5_0_0_2;
            double R_3_0_0_5 = zpq * R_4_0_0_4 + 4 * R_4_0_0_3;
            double R_2_0_0_6 = zpq * R_3_0_0_5 + 5 * R_3_0_0_4;
            double R_1_0_0_7 = zpq * R_2_0_0_6 + 6 * R_2_0_0_5;
            double R_0_0_0_8 = zpq * R_1_0_0_7 + 7 * R_1_0_0_6;
            vj_kl -= R_0_0_0_8 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_6 * dm_ij_cache[tx+80];
            double R_0_0_1_7 = ypq * R_1_0_0_7;
            vj_kl -= R_0_0_1_7 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+112];
            double R_1_0_1_6 = ypq * R_2_0_0_6;
            double R_0_0_2_6 = ypq * R_1_0_1_6 + 1 * R_1_0_0_6;
            vj_kl -= R_0_0_2_6 * dm_ij_cache[tx+128];
            double R_2_0_1_5 = ypq * R_3_0_0_5;
            double R_1_0_2_5 = ypq * R_2_0_1_5 + 1 * R_2_0_0_5;
            double R_0_0_3_5 = ypq * R_1_0_2_5 + 2 * R_1_0_1_5;
            vj_kl -= R_0_0_3_5 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_0_6 * dm_ij_cache[tx+176];
            double R_0_1_0_7 = xpq * R_1_0_0_7;
            vj_kl -= R_0_1_0_7 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+208];
            double R_0_1_1_6 = xpq * R_1_0_1_6;
            vj_kl -= R_0_1_1_6 * dm_ij_cache[tx+224];
            double R_0_1_2_5 = xpq * R_1_0_2_5;
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+256];
            double R_1_1_0_6 = xpq * R_2_0_0_6;
            double R_0_2_0_6 = xpq * R_1_1_0_6 + 1 * R_1_0_0_6;
            vj_kl -= R_0_2_0_6 * dm_ij_cache[tx+272];
            double R_1_1_1_5 = xpq * R_2_0_1_5;
            double R_0_2_1_5 = xpq * R_1_1_1_5 + 1 * R_1_0_1_5;
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+288];
            double R_2_1_0_5 = xpq * R_3_0_0_5;
            double R_1_2_0_5 = xpq * R_2_1_0_5 + 1 * R_2_0_0_5;
            double R_0_3_0_5 = xpq * R_1_2_0_5 + 2 * R_1_1_0_5;
            vj_kl -= R_0_3_0_5 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+320] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_2_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+128];
            double R_3_0_1_0 = ypq * gamma_inc[sq_id+4*256];
            double R_2_0_2_0 = ypq * R_3_0_1_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_3_0 = ypq * R_2_0_2_0 + 2 * R_2_0_1_0;
            double R_0_0_4_0 = ypq * R_1_0_3_0 + 3 * R_1_0_2_0;
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+224];
            double R_0_1_3_0 = xpq * R_1_0_3_0;
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+272];
            double R_1_1_2_0 = xpq * R_2_0_2_0;
            double R_0_2_2_0 = xpq * R_1_1_2_0 + 1 * R_1_0_2_0;
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+288];
            double R_2_1_1_0 = xpq * R_3_0_1_0;
            double R_1_2_1_0 = xpq * R_2_1_1_0 + 1 * R_2_0_1_0;
            double R_0_3_1_0 = xpq * R_1_2_1_0 + 2 * R_1_1_1_0;
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+384] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+128];
            double R_3_0_1_1 = ypq * R_4_0_0_1;
            double R_2_0_2_1 = ypq * R_3_0_1_1 + 1 * R_3_0_0_1;
            double R_1_0_3_1 = ypq * R_2_0_2_1 + 2 * R_2_0_1_1;
            double R_0_0_4_1 = ypq * R_1_0_3_1 + 3 * R_1_0_2_1;
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+224];
            double R_0_1_3_1 = xpq * R_1_0_3_1;
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+272];
            double R_1_1_2_1 = xpq * R_2_0_2_1;
            double R_0_2_2_1 = xpq * R_1_1_2_1 + 1 * R_1_0_2_1;
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+288];
            double R_2_1_1_1 = xpq * R_3_0_1_1;
            double R_1_2_1_1 = xpq * R_2_1_1_1 + 1 * R_2_0_1_1;
            double R_0_3_1_1 = xpq * R_1_2_1_1 + 2 * R_1_1_1_1;
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+448] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+128];
            double R_3_0_1_2 = ypq * R_4_0_0_2;
            double R_2_0_2_2 = ypq * R_3_0_1_2 + 1 * R_3_0_0_2;
            double R_1_0_3_2 = ypq * R_2_0_2_2 + 2 * R_2_0_1_2;
            double R_0_0_4_2 = ypq * R_1_0_3_2 + 3 * R_1_0_2_2;
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+224];
            double R_0_1_3_2 = xpq * R_1_0_3_2;
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+272];
            double R_1_1_2_2 = xpq * R_2_0_2_2;
            double R_0_2_2_2 = xpq * R_1_1_2_2 + 1 * R_1_0_2_2;
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+288];
            double R_2_1_1_2 = xpq * R_3_0_1_2;
            double R_1_2_1_2 = xpq * R_2_1_1_2 + 1 * R_2_0_1_2;
            double R_0_3_1_2 = xpq * R_1_2_1_2 + 2 * R_1_1_1_2;
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+512] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_1_6 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+128];
            double R_3_0_1_3 = ypq * R_4_0_0_3;
            double R_2_0_2_3 = ypq * R_3_0_1_3 + 1 * R_3_0_0_3;
            double R_1_0_3_3 = ypq * R_2_0_2_3 + 2 * R_2_0_1_3;
            double R_0_0_4_3 = ypq * R_1_0_3_3 + 3 * R_1_0_2_3;
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+224];
            double R_0_1_3_3 = xpq * R_1_0_3_3;
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+272];
            double R_1_1_2_3 = xpq * R_2_0_2_3;
            double R_0_2_2_3 = xpq * R_1_1_2_3 + 1 * R_1_0_2_3;
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+288];
            double R_2_1_1_3 = xpq * R_3_0_1_3;
            double R_1_2_1_3 = xpq * R_2_1_1_3 + 1 * R_2_0_1_3;
            double R_0_3_1_3 = xpq * R_1_2_1_3 + 2 * R_1_1_1_3;
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+576] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_6 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_7 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_2_6 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_3_5 * dm_ij_cache[tx+128];
            double R_3_0_1_4 = ypq * R_4_0_0_4;
            double R_2_0_2_4 = ypq * R_3_0_1_4 + 1 * R_3_0_0_4;
            double R_1_0_3_4 = ypq * R_2_0_2_4 + 2 * R_2_0_1_4;
            double R_0_0_4_4 = ypq * R_1_0_3_4 + 3 * R_1_0_2_4;
            vj_kl -= R_0_0_4_4 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_1_6 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+224];
            double R_0_1_3_4 = xpq * R_1_0_3_4;
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+272];
            double R_1_1_2_4 = xpq * R_2_0_2_4;
            double R_0_2_2_4 = xpq * R_1_1_2_4 + 1 * R_1_0_2_4;
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+288];
            double R_2_1_1_4 = xpq * R_3_0_1_4;
            double R_1_2_1_4 = xpq * R_2_1_1_4 + 1 * R_2_0_1_4;
            double R_0_3_1_4 = xpq * R_1_2_1_4 + 2 * R_1_1_1_4;
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+640] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+128];
            double R_4_0_1_0 = ypq * gamma_inc[sq_id+5*256];
            double R_3_0_2_0 = ypq * R_4_0_1_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_3_0 = ypq * R_3_0_2_0 + 2 * R_3_0_1_0;
            double R_1_0_4_0 = ypq * R_2_0_3_0 + 3 * R_2_0_2_0;
            double R_0_0_5_0 = ypq * R_1_0_4_0 + 4 * R_1_0_3_0;
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+224];
            double R_0_1_4_0 = xpq * R_1_0_4_0;
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+272];
            double R_1_1_3_0 = xpq * R_2_0_3_0;
            double R_0_2_3_0 = xpq * R_1_1_3_0 + 1 * R_1_0_3_0;
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+288];
            double R_2_1_2_0 = xpq * R_3_0_2_0;
            double R_1_2_2_0 = xpq * R_2_1_2_0 + 1 * R_2_0_2_0;
            double R_0_3_2_0 = xpq * R_1_2_2_0 + 2 * R_1_1_2_0;
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+704] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+128];
            double R_4_0_1_1 = ypq * R_5_0_0_1;
            double R_3_0_2_1 = ypq * R_4_0_1_1 + 1 * R_4_0_0_1;
            double R_2_0_3_1 = ypq * R_3_0_2_1 + 2 * R_3_0_1_1;
            double R_1_0_4_1 = ypq * R_2_0_3_1 + 3 * R_2_0_2_1;
            double R_0_0_5_1 = ypq * R_1_0_4_1 + 4 * R_1_0_3_1;
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+224];
            double R_0_1_4_1 = xpq * R_1_0_4_1;
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+272];
            double R_1_1_3_1 = xpq * R_2_0_3_1;
            double R_0_2_3_1 = xpq * R_1_1_3_1 + 1 * R_1_0_3_1;
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+288];
            double R_2_1_2_1 = xpq * R_3_0_2_1;
            double R_1_2_2_1 = xpq * R_2_1_2_1 + 1 * R_2_0_2_1;
            double R_0_3_2_1 = xpq * R_1_2_2_1 + 2 * R_1_1_2_1;
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+768] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+128];
            double R_4_0_1_2 = ypq * R_5_0_0_2;
            double R_3_0_2_2 = ypq * R_4_0_1_2 + 1 * R_4_0_0_2;
            double R_2_0_3_2 = ypq * R_3_0_2_2 + 2 * R_3_0_1_2;
            double R_1_0_4_2 = ypq * R_2_0_3_2 + 3 * R_2_0_2_2;
            double R_0_0_5_2 = ypq * R_1_0_4_2 + 4 * R_1_0_3_2;
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+224];
            double R_0_1_4_2 = xpq * R_1_0_4_2;
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+272];
            double R_1_1_3_2 = xpq * R_2_0_3_2;
            double R_0_2_3_2 = xpq * R_1_1_3_2 + 1 * R_1_0_3_2;
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+288];
            double R_2_1_2_2 = xpq * R_3_0_2_2;
            double R_1_2_2_2 = xpq * R_2_1_2_2 + 1 * R_2_0_2_2;
            double R_0_3_2_2 = xpq * R_1_2_2_2 + 2 * R_1_1_2_2;
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+832] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_2_6 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_3_5 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_4_4 * dm_ij_cache[tx+128];
            double R_4_0_1_3 = ypq * R_5_0_0_3;
            double R_3_0_2_3 = ypq * R_4_0_1_3 + 1 * R_4_0_0_3;
            double R_2_0_3_3 = ypq * R_3_0_2_3 + 2 * R_3_0_1_3;
            double R_1_0_4_3 = ypq * R_2_0_3_3 + 3 * R_2_0_2_3;
            double R_0_0_5_3 = ypq * R_1_0_4_3 + 4 * R_1_0_3_3;
            vj_kl -= R_0_0_5_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+224];
            double R_0_1_4_3 = xpq * R_1_0_4_3;
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+272];
            double R_1_1_3_3 = xpq * R_2_0_3_3;
            double R_0_2_3_3 = xpq * R_1_1_3_3 + 1 * R_1_0_3_3;
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+288];
            double R_2_1_2_3 = xpq * R_3_0_2_3;
            double R_1_2_2_3 = xpq * R_2_1_2_3 + 1 * R_2_0_2_3;
            double R_0_3_2_3 = xpq * R_1_2_2_3 + 2 * R_1_1_2_3;
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+896] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_5_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+128];
            double R_5_0_1_0 = ypq * gamma_inc[sq_id+6*256];
            double R_4_0_2_0 = ypq * R_5_0_1_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_3_0 = ypq * R_4_0_2_0 + 2 * R_4_0_1_0;
            double R_2_0_4_0 = ypq * R_3_0_3_0 + 3 * R_3_0_2_0;
            double R_1_0_5_0 = ypq * R_2_0_4_0 + 4 * R_2_0_3_0;
            double R_0_0_6_0 = ypq * R_1_0_5_0 + 5 * R_1_0_4_0;
            vj_kl -= R_0_0_6_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+224];
            double R_0_1_5_0 = xpq * R_1_0_5_0;
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+272];
            double R_1_1_4_0 = xpq * R_2_0_4_0;
            double R_0_2_4_0 = xpq * R_1_1_4_0 + 1 * R_1_0_4_0;
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+288];
            double R_2_1_3_0 = xpq * R_3_0_3_0;
            double R_1_2_3_0 = xpq * R_2_1_3_0 + 1 * R_2_0_3_0;
            double R_0_3_3_0 = xpq * R_1_2_3_0 + 2 * R_1_1_3_0;
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+960] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+128];
            double R_5_0_1_1 = ypq * R_6_0_0_1;
            double R_4_0_2_1 = ypq * R_5_0_1_1 + 1 * R_5_0_0_1;
            double R_3_0_3_1 = ypq * R_4_0_2_1 + 2 * R_4_0_1_1;
            double R_2_0_4_1 = ypq * R_3_0_3_1 + 3 * R_3_0_2_1;
            double R_1_0_5_1 = ypq * R_2_0_4_1 + 4 * R_2_0_3_1;
            double R_0_0_6_1 = ypq * R_1_0_5_1 + 5 * R_1_0_4_1;
            vj_kl += R_0_0_6_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+224];
            double R_0_1_5_1 = xpq * R_1_0_5_1;
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+272];
            double R_1_1_4_1 = xpq * R_2_0_4_1;
            double R_0_2_4_1 = xpq * R_1_1_4_1 + 1 * R_1_0_4_1;
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+288];
            double R_2_1_3_1 = xpq * R_3_0_3_1;
            double R_1_2_3_1 = xpq * R_2_1_3_1 + 1 * R_2_0_3_1;
            double R_0_3_3_1 = xpq * R_1_2_3_1 + 2 * R_1_1_3_1;
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1024] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_3_5 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_4_4 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_5_3 * dm_ij_cache[tx+128];
            double R_5_0_1_2 = ypq * R_6_0_0_2;
            double R_4_0_2_2 = ypq * R_5_0_1_2 + 1 * R_5_0_0_2;
            double R_3_0_3_2 = ypq * R_4_0_2_2 + 2 * R_4_0_1_2;
            double R_2_0_4_2 = ypq * R_3_0_3_2 + 3 * R_3_0_2_2;
            double R_1_0_5_2 = ypq * R_2_0_4_2 + 4 * R_2_0_3_2;
            double R_0_0_6_2 = ypq * R_1_0_5_2 + 5 * R_1_0_4_2;
            vj_kl -= R_0_0_6_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+224];
            double R_0_1_5_2 = xpq * R_1_0_5_2;
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+272];
            double R_1_1_4_2 = xpq * R_2_0_4_2;
            double R_0_2_4_2 = xpq * R_1_1_4_2 + 1 * R_1_0_4_2;
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+288];
            double R_2_1_3_2 = xpq * R_3_0_3_2;
            double R_1_2_3_2 = xpq * R_2_1_3_2 + 1 * R_2_0_3_2;
            double R_0_3_3_2 = xpq * R_1_2_3_2 + 2 * R_1_1_3_2;
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1088] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_6_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_6_1 * dm_ij_cache[tx+128];
            double R_6_0_1_0 = ypq * gamma_inc[sq_id+7*256];
            double R_5_0_2_0 = ypq * R_6_0_1_0 + 1 * gamma_inc[sq_id+6*256];
            double R_4_0_3_0 = ypq * R_5_0_2_0 + 2 * R_5_0_1_0;
            double R_3_0_4_0 = ypq * R_4_0_3_0 + 3 * R_4_0_2_0;
            double R_2_0_5_0 = ypq * R_3_0_4_0 + 4 * R_3_0_3_0;
            double R_1_0_6_0 = ypq * R_2_0_5_0 + 5 * R_2_0_4_0;
            double R_0_0_7_0 = ypq * R_1_0_6_0 + 6 * R_1_0_5_0;
            vj_kl += R_0_0_7_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+224];
            double R_0_1_6_0 = xpq * R_1_0_6_0;
            vj_kl += R_0_1_6_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+272];
            double R_1_1_5_0 = xpq * R_2_0_5_0;
            double R_0_2_5_0 = xpq * R_1_1_5_0 + 1 * R_1_0_5_0;
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+288];
            double R_2_1_4_0 = xpq * R_3_0_4_0;
            double R_1_2_4_0 = xpq * R_2_1_4_0 + 1 * R_2_0_4_0;
            double R_0_3_4_0 = xpq * R_1_2_4_0 + 2 * R_1_1_4_0;
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1152] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_4_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_5_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_6_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_6_2 * dm_ij_cache[tx+128];
            double R_6_0_1_1 = ypq * R_7_0_0_1;
            double R_5_0_2_1 = ypq * R_6_0_1_1 + 1 * R_6_0_0_1;
            double R_4_0_3_1 = ypq * R_5_0_2_1 + 2 * R_5_0_1_1;
            double R_3_0_4_1 = ypq * R_4_0_3_1 + 3 * R_4_0_2_1;
            double R_2_0_5_1 = ypq * R_3_0_4_1 + 4 * R_3_0_3_1;
            double R_1_0_6_1 = ypq * R_2_0_5_1 + 5 * R_2_0_4_1;
            double R_0_0_7_1 = ypq * R_1_0_6_1 + 6 * R_1_0_5_1;
            vj_kl -= R_0_0_7_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+224];
            double R_0_1_6_1 = xpq * R_1_0_6_1;
            vj_kl -= R_0_1_6_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+272];
            double R_1_1_5_1 = xpq * R_2_0_5_1;
            double R_0_2_5_1 = xpq * R_1_1_5_1 + 1 * R_1_0_5_1;
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+288];
            double R_2_1_4_1 = xpq * R_3_0_4_1;
            double R_1_2_4_1 = xpq * R_2_1_4_1 + 1 * R_2_0_4_1;
            double R_0_3_4_1 = xpq * R_1_2_4_1 + 2 * R_1_1_4_1;
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1216] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_5_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_5_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_6_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_6_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_6_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_7_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_7_1 * dm_ij_cache[tx+128];
            double R_7_0_1_0 = ypq * gamma_inc[sq_id+8*256];
            double R_6_0_2_0 = ypq * R_7_0_1_0 + 1 * gamma_inc[sq_id+7*256];
            double R_5_0_3_0 = ypq * R_6_0_2_0 + 2 * R_6_0_1_0;
            double R_4_0_4_0 = ypq * R_5_0_3_0 + 3 * R_5_0_2_0;
            double R_3_0_5_0 = ypq * R_4_0_4_0 + 4 * R_4_0_3_0;
            double R_2_0_6_0 = ypq * R_3_0_5_0 + 5 * R_3_0_4_0;
            double R_1_0_7_0 = ypq * R_2_0_6_0 + 6 * R_2_0_5_0;
            double R_0_0_8_0 = ypq * R_1_0_7_0 + 7 * R_1_0_6_0;
            vj_kl -= R_0_0_8_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_6_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_6_1 * dm_ij_cache[tx+224];
            double R_0_1_7_0 = xpq * R_1_0_7_0;
            vj_kl -= R_0_1_7_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+272];
            double R_1_1_6_0 = xpq * R_2_0_6_0;
            double R_0_2_6_0 = xpq * R_1_1_6_0 + 1 * R_1_0_6_0;
            vj_kl -= R_0_2_6_0 * dm_ij_cache[tx+288];
            double R_2_1_5_0 = xpq * R_3_0_5_0;
            double R_1_2_5_0 = xpq * R_2_1_5_0 + 1 * R_2_0_5_0;
            double R_0_3_5_0 = xpq * R_1_2_5_0 + 2 * R_1_1_5_0;
            vj_kl -= R_0_3_5_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1280] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_0_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+288];
            double R_3_1_0_0 = xpq * gamma_inc[sq_id+4*256];
            double R_2_2_0_0 = xpq * R_3_1_0_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_3_0_0 = xpq * R_2_2_0_0 + 2 * R_2_1_0_0;
            double R_0_4_0_0 = xpq * R_1_3_0_0 + 3 * R_1_2_0_0;
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1344] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+288];
            double R_3_1_0_1 = xpq * R_4_0_0_1;
            double R_2_2_0_1 = xpq * R_3_1_0_1 + 1 * R_3_0_0_1;
            double R_1_3_0_1 = xpq * R_2_2_0_1 + 2 * R_2_1_0_1;
            double R_0_4_0_1 = xpq * R_1_3_0_1 + 3 * R_1_2_0_1;
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1408] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+288];
            double R_3_1_0_2 = xpq * R_4_0_0_2;
            double R_2_2_0_2 = xpq * R_3_1_0_2 + 1 * R_3_0_0_2;
            double R_1_3_0_2 = xpq * R_2_2_0_2 + 2 * R_2_1_0_2;
            double R_0_4_0_2 = xpq * R_1_3_0_2 + 3 * R_1_2_0_2;
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1472] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_0_6 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+288];
            double R_3_1_0_3 = xpq * R_4_0_0_3;
            double R_2_2_0_3 = xpq * R_3_1_0_3 + 1 * R_3_0_0_3;
            double R_1_3_0_3 = xpq * R_2_2_0_3 + 2 * R_2_1_0_3;
            double R_0_4_0_3 = xpq * R_1_3_0_3 + 3 * R_1_2_0_3;
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1536] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_6 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_7 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_6 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_0_6 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_0_5 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+288];
            double R_3_1_0_4 = xpq * R_4_0_0_4;
            double R_2_2_0_4 = xpq * R_3_1_0_4 + 1 * R_3_0_0_4;
            double R_1_3_0_4 = xpq * R_2_2_0_4 + 2 * R_2_1_0_4;
            double R_0_4_0_4 = xpq * R_1_3_0_4 + 3 * R_1_2_0_4;
            vj_kl -= R_0_4_0_4 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1600] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+288];
            double R_3_1_1_0 = xpq * R_4_0_1_0;
            double R_2_2_1_0 = xpq * R_3_1_1_0 + 1 * R_3_0_1_0;
            double R_1_3_1_0 = xpq * R_2_2_1_0 + 2 * R_2_1_1_0;
            double R_0_4_1_0 = xpq * R_1_3_1_0 + 3 * R_1_2_1_0;
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1664] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+288];
            double R_3_1_1_1 = xpq * R_4_0_1_1;
            double R_2_2_1_1 = xpq * R_3_1_1_1 + 1 * R_3_0_1_1;
            double R_1_3_1_1 = xpq * R_2_2_1_1 + 2 * R_2_1_1_1;
            double R_0_4_1_1 = xpq * R_1_3_1_1 + 3 * R_1_2_1_1;
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1728] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+288];
            double R_3_1_1_2 = xpq * R_4_0_1_2;
            double R_2_2_1_2 = xpq * R_3_1_1_2 + 1 * R_3_0_1_2;
            double R_1_3_1_2 = xpq * R_2_2_1_2 + 2 * R_2_1_1_2;
            double R_0_4_1_2 = xpq * R_1_3_1_2 + 3 * R_1_2_1_2;
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1792] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_1_6 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+288];
            double R_3_1_1_3 = xpq * R_4_0_1_3;
            double R_2_2_1_3 = xpq * R_3_1_1_3 + 1 * R_3_0_1_3;
            double R_1_3_1_3 = xpq * R_2_2_1_3 + 2 * R_2_1_1_3;
            double R_0_4_1_3 = xpq * R_1_3_1_3 + 3 * R_1_2_1_3;
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1856] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+288];
            double R_3_1_2_0 = xpq * R_4_0_2_0;
            double R_2_2_2_0 = xpq * R_3_1_2_0 + 1 * R_3_0_2_0;
            double R_1_3_2_0 = xpq * R_2_2_2_0 + 2 * R_2_1_2_0;
            double R_0_4_2_0 = xpq * R_1_3_2_0 + 3 * R_1_2_2_0;
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1920] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+288];
            double R_3_1_2_1 = xpq * R_4_0_2_1;
            double R_2_2_2_1 = xpq * R_3_1_2_1 + 1 * R_3_0_2_1;
            double R_1_3_2_1 = xpq * R_2_2_2_1 + 2 * R_2_1_2_1;
            double R_0_4_2_1 = xpq * R_1_3_2_1 + 3 * R_1_2_2_1;
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1984] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+288];
            double R_3_1_2_2 = xpq * R_4_0_2_2;
            double R_2_2_2_2 = xpq * R_3_1_2_2 + 1 * R_3_0_2_2;
            double R_1_3_2_2 = xpq * R_2_2_2_2 + 2 * R_2_1_2_2;
            double R_0_4_2_2 = xpq * R_1_3_2_2 + 3 * R_1_2_2_2;
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2048] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_6_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+288];
            double R_3_1_3_0 = xpq * R_4_0_3_0;
            double R_2_2_3_0 = xpq * R_3_1_3_0 + 1 * R_3_0_3_0;
            double R_1_3_3_0 = xpq * R_2_2_3_0 + 2 * R_2_1_3_0;
            double R_0_4_3_0 = xpq * R_1_3_3_0 + 3 * R_1_2_3_0;
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2112] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_6_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+288];
            double R_3_1_3_1 = xpq * R_4_0_3_1;
            double R_2_2_3_1 = xpq * R_3_1_3_1 + 1 * R_3_0_3_1;
            double R_1_3_3_1 = xpq * R_2_2_3_1 + 2 * R_2_1_3_1;
            double R_0_4_3_1 = xpq * R_1_3_3_1 + 3 * R_1_2_3_1;
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2176] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_6_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_6_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_7_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_6_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_5_0 * dm_ij_cache[tx+288];
            double R_3_1_4_0 = xpq * R_4_0_4_0;
            double R_2_2_4_0 = xpq * R_3_1_4_0 + 1 * R_3_0_4_0;
            double R_1_3_4_0 = xpq * R_2_2_4_0 + 2 * R_2_1_4_0;
            double R_0_4_4_0 = xpq * R_1_3_4_0 + 3 * R_1_2_4_0;
            vj_kl -= R_0_4_4_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2240] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+160];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+256];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+272];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+288];
            double R_4_1_0_0 = xpq * gamma_inc[sq_id+5*256];
            double R_3_2_0_0 = xpq * R_4_1_0_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_3_0_0 = xpq * R_3_2_0_0 + 2 * R_3_1_0_0;
            double R_1_4_0_0 = xpq * R_2_3_0_0 + 3 * R_2_2_0_0;
            double R_0_5_0_0 = xpq * R_1_4_0_0 + 4 * R_1_3_0_0;
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2304] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+192];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+224];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+288];
            double R_4_1_0_1 = xpq * R_5_0_0_1;
            double R_3_2_0_1 = xpq * R_4_1_0_1 + 1 * R_4_0_0_1;
            double R_2_3_0_1 = xpq * R_3_2_0_1 + 2 * R_3_1_0_1;
            double R_1_4_0_1 = xpq * R_2_3_0_1 + 3 * R_2_2_0_1;
            double R_0_5_0_1 = xpq * R_1_4_0_1 + 4 * R_1_3_0_1;
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2368] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+144];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+160];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+176];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+192];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+224];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+288];
            double R_4_1_0_2 = xpq * R_5_0_0_2;
            double R_3_2_0_2 = xpq * R_4_1_0_2 + 1 * R_4_0_0_2;
            double R_2_3_0_2 = xpq * R_3_2_0_2 + 2 * R_3_1_0_2;
            double R_1_4_0_2 = xpq * R_2_3_0_2 + 3 * R_2_2_0_2;
            double R_0_5_0_2 = xpq * R_1_4_0_2 + 4 * R_1_3_0_2;
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2432] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_0_6 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+128];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+160];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+176];
            vj_kl -= R_0_3_0_5 * dm_ij_cache[tx+192];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+208];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+224];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+240];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_4_0_4 * dm_ij_cache[tx+272];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+288];
            double R_4_1_0_3 = xpq * R_5_0_0_3;
            double R_3_2_0_3 = xpq * R_4_1_0_3 + 1 * R_4_0_0_3;
            double R_2_3_0_3 = xpq * R_3_2_0_3 + 2 * R_3_1_0_3;
            double R_1_4_0_3 = xpq * R_2_3_0_3 + 3 * R_2_2_0_3;
            double R_0_5_0_3 = xpq * R_1_4_0_3 + 4 * R_1_3_0_3;
            vj_kl -= R_0_5_0_3 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2496] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+272];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+288];
            double R_4_1_1_0 = xpq * R_5_0_1_0;
            double R_3_2_1_0 = xpq * R_4_1_1_0 + 1 * R_4_0_1_0;
            double R_2_3_1_0 = xpq * R_3_2_1_0 + 2 * R_3_1_1_0;
            double R_1_4_1_0 = xpq * R_2_3_1_0 + 3 * R_2_2_1_0;
            double R_0_5_1_0 = xpq * R_1_4_1_0 + 4 * R_1_3_1_0;
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2560] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+192];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+224];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+288];
            double R_4_1_1_1 = xpq * R_5_0_1_1;
            double R_3_2_1_1 = xpq * R_4_1_1_1 + 1 * R_4_0_1_1;
            double R_2_3_1_1 = xpq * R_3_2_1_1 + 2 * R_3_1_1_1;
            double R_1_4_1_1 = xpq * R_2_3_1_1 + 3 * R_2_2_1_1;
            double R_0_5_1_1 = xpq * R_1_4_1_1 + 4 * R_1_3_1_1;
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2624] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+160];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+192];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+288];
            double R_4_1_1_2 = xpq * R_5_0_1_2;
            double R_3_2_1_2 = xpq * R_4_1_1_2 + 1 * R_4_0_1_2;
            double R_2_3_1_2 = xpq * R_3_2_1_2 + 2 * R_3_1_1_2;
            double R_1_4_1_2 = xpq * R_2_3_1_2 + 3 * R_2_2_1_2;
            double R_0_5_1_2 = xpq * R_1_4_1_2 + 4 * R_1_3_1_2;
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2688] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+160];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+256];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+272];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+288];
            double R_4_1_2_0 = xpq * R_5_0_2_0;
            double R_3_2_2_0 = xpq * R_4_1_2_0 + 1 * R_4_0_2_0;
            double R_2_3_2_0 = xpq * R_3_2_2_0 + 2 * R_3_1_2_0;
            double R_1_4_2_0 = xpq * R_2_3_2_0 + 3 * R_2_2_2_0;
            double R_0_5_2_0 = xpq * R_1_4_2_0 + 4 * R_1_3_2_0;
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2752] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+192];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+224];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+288];
            double R_4_1_2_1 = xpq * R_5_0_2_1;
            double R_3_2_2_1 = xpq * R_4_1_2_1 + 1 * R_4_0_2_1;
            double R_2_3_2_1 = xpq * R_3_2_2_1 + 2 * R_3_1_2_1;
            double R_1_4_2_1 = xpq * R_2_3_2_1 + 3 * R_2_2_2_1;
            double R_0_5_2_1 = xpq * R_1_4_2_1 + 4 * R_1_3_2_1;
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2816] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_2_6_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_3_5_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+272];
            vj_kl -= R_0_4_4_0 * dm_ij_cache[tx+288];
            double R_4_1_3_0 = xpq * R_5_0_3_0;
            double R_3_2_3_0 = xpq * R_4_1_3_0 + 1 * R_4_0_3_0;
            double R_2_3_3_0 = xpq * R_3_2_3_0 + 2 * R_3_1_3_0;
            double R_1_4_3_0 = xpq * R_2_3_3_0 + 3 * R_2_2_3_0;
            double R_0_5_3_0 = xpq * R_1_4_3_0 + 4 * R_1_3_3_0;
            vj_kl -= R_0_5_3_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2880] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_5_0_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+272];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+288];
            double R_5_1_0_0 = xpq * gamma_inc[sq_id+6*256];
            double R_4_2_0_0 = xpq * R_5_1_0_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_3_0_0 = xpq * R_4_2_0_0 + 2 * R_4_1_0_0;
            double R_2_4_0_0 = xpq * R_3_3_0_0 + 3 * R_3_2_0_0;
            double R_1_5_0_0 = xpq * R_2_4_0_0 + 4 * R_2_3_0_0;
            double R_0_6_0_0 = xpq * R_1_5_0_0 + 5 * R_1_4_0_0;
            vj_kl -= R_0_6_0_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2944] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+64];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+192];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+224];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+288];
            double R_5_1_0_1 = xpq * R_6_0_0_1;
            double R_4_2_0_1 = xpq * R_5_1_0_1 + 1 * R_5_0_0_1;
            double R_3_3_0_1 = xpq * R_4_2_0_1 + 2 * R_4_1_0_1;
            double R_2_4_0_1 = xpq * R_3_3_0_1 + 3 * R_3_2_0_1;
            double R_1_5_0_1 = xpq * R_2_4_0_1 + 4 * R_2_3_0_1;
            double R_0_6_0_1 = xpq * R_1_5_0_1 + 5 * R_1_4_0_1;
            vj_kl += R_0_6_0_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3008] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_3_0_5 * dm_ij_cache[tx+48];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+64];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+80];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+96];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+160];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_4_0_4 * dm_ij_cache[tx+192];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_5_0_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+288];
            double R_5_1_0_2 = xpq * R_6_0_0_2;
            double R_4_2_0_2 = xpq * R_5_1_0_2 + 1 * R_5_0_0_2;
            double R_3_3_0_2 = xpq * R_4_2_0_2 + 2 * R_4_1_0_2;
            double R_2_4_0_2 = xpq * R_3_3_0_2 + 3 * R_3_2_0_2;
            double R_1_5_0_2 = xpq * R_2_4_0_2 + 4 * R_2_3_0_2;
            double R_0_6_0_2 = xpq * R_1_5_0_2 + 5 * R_1_4_0_2;
            vj_kl -= R_0_6_0_2 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3072] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+64];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+128];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+160];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+256];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+272];
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+288];
            double R_5_1_1_0 = xpq * R_6_0_1_0;
            double R_4_2_1_0 = xpq * R_5_1_1_0 + 1 * R_5_0_1_0;
            double R_3_3_1_0 = xpq * R_4_2_1_0 + 2 * R_4_1_1_0;
            double R_2_4_1_0 = xpq * R_3_3_1_0 + 3 * R_3_2_1_0;
            double R_1_5_1_0 = xpq * R_2_4_1_0 + 4 * R_2_3_1_0;
            double R_0_6_1_0 = xpq * R_1_5_1_0 + 5 * R_1_4_1_0;
            vj_kl += R_0_6_1_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3136] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+192];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+224];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+288];
            double R_5_1_1_1 = xpq * R_6_0_1_1;
            double R_4_2_1_1 = xpq * R_5_1_1_1 + 1 * R_5_0_1_1;
            double R_3_3_1_1 = xpq * R_4_2_1_1 + 2 * R_4_1_1_1;
            double R_2_4_1_1 = xpq * R_3_3_1_1 + 3 * R_3_2_1_1;
            double R_1_5_1_1 = xpq * R_2_4_1_1 + 4 * R_2_3_1_1;
            double R_0_6_1_1 = xpq * R_1_5_1_1 + 5 * R_1_4_1_1;
            vj_kl -= R_0_6_1_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3200] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_3_5_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_4_4_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+272];
            vj_kl -= R_0_5_3_0 * dm_ij_cache[tx+288];
            double R_5_1_2_0 = xpq * R_6_0_2_0;
            double R_4_2_2_0 = xpq * R_5_1_2_0 + 1 * R_5_0_2_0;
            double R_3_3_2_0 = xpq * R_4_2_2_0 + 2 * R_4_1_2_0;
            double R_2_4_2_0 = xpq * R_3_3_2_0 + 3 * R_3_2_2_0;
            double R_1_5_2_0 = xpq * R_2_4_2_0 + 4 * R_2_3_2_0;
            double R_0_6_2_0 = xpq * R_1_5_2_0 + 5 * R_1_4_2_0;
            vj_kl -= R_0_6_2_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3264] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+64];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+128];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+160];
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_6_0_0 * dm_ij_cache[tx+256];
            vj_kl += R_0_6_0_1 * dm_ij_cache[tx+272];
            vj_kl += R_0_6_1_0 * dm_ij_cache[tx+288];
            double R_6_1_0_0 = xpq * gamma_inc[sq_id+7*256];
            double R_5_2_0_0 = xpq * R_6_1_0_0 + 1 * gamma_inc[sq_id+6*256];
            double R_4_3_0_0 = xpq * R_5_2_0_0 + 2 * R_5_1_0_0;
            double R_3_4_0_0 = xpq * R_4_3_0_0 + 3 * R_4_2_0_0;
            double R_2_5_0_0 = xpq * R_3_4_0_0 + 4 * R_3_3_0_0;
            double R_1_6_0_0 = xpq * R_2_5_0_0 + 5 * R_2_4_0_0;
            double R_0_7_0_0 = xpq * R_1_6_0_0 + 6 * R_1_5_0_0;
            vj_kl += R_0_7_0_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3328] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_4_0_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+64];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_5_0_3 * dm_ij_cache[tx+192];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+224];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_6_0_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_6_0_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_6_1_1 * dm_ij_cache[tx+288];
            double R_6_1_0_1 = xpq * R_7_0_0_1;
            double R_5_2_0_1 = xpq * R_6_1_0_1 + 1 * R_6_0_0_1;
            double R_4_3_0_1 = xpq * R_5_2_0_1 + 2 * R_5_1_0_1;
            double R_3_4_0_1 = xpq * R_4_3_0_1 + 3 * R_4_2_0_1;
            double R_2_5_0_1 = xpq * R_3_4_0_1 + 4 * R_3_3_0_1;
            double R_1_6_0_1 = xpq * R_2_5_0_1 + 5 * R_2_4_0_1;
            double R_0_7_0_1 = xpq * R_1_6_0_1 + 6 * R_1_5_0_1;
            vj_kl -= R_0_7_0_1 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3392] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_4_4_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_5_3_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_6_1_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_6_1_1 * dm_ij_cache[tx+272];
            vj_kl -= R_0_6_2_0 * dm_ij_cache[tx+288];
            double R_6_1_1_0 = xpq * R_7_0_1_0;
            double R_5_2_1_0 = xpq * R_6_1_1_0 + 1 * R_6_0_1_0;
            double R_4_3_1_0 = xpq * R_5_2_1_0 + 2 * R_5_1_1_0;
            double R_3_4_1_0 = xpq * R_4_3_1_0 + 3 * R_4_2_1_0;
            double R_2_5_1_0 = xpq * R_3_4_1_0 + 4 * R_3_3_1_0;
            double R_1_6_1_0 = xpq * R_2_5_1_0 + 5 * R_2_4_1_0;
            double R_0_7_1_0 = xpq * R_1_6_1_0 + 6 * R_1_5_1_0;
            vj_kl -= R_0_7_1_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3456] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_5_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_5_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+64];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_5_3_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_6_0_0 * dm_ij_cache[tx+160];
            vj_kl -= R_0_6_0_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_6_0_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_6_1_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_6_1_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_6_2_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_7_0_0 * dm_ij_cache[tx+256];
            vj_kl -= R_0_7_0_1 * dm_ij_cache[tx+272];
            vj_kl -= R_0_7_1_0 * dm_ij_cache[tx+288];
            double R_7_1_0_0 = xpq * gamma_inc[sq_id+8*256];
            double R_6_2_0_0 = xpq * R_7_1_0_0 + 1 * gamma_inc[sq_id+7*256];
            double R_5_3_0_0 = xpq * R_6_2_0_0 + 2 * R_6_1_0_0;
            double R_4_4_0_0 = xpq * R_5_3_0_0 + 3 * R_5_2_0_0;
            double R_3_5_0_0 = xpq * R_4_4_0_0 + 4 * R_4_3_0_0;
            double R_2_6_0_0 = xpq * R_3_5_0_0 + 5 * R_3_4_0_0;
            double R_1_7_0_0 = xpq * R_2_6_0_0 + 6 * R_2_5_0_0;
            double R_0_8_0_0 = xpq * R_1_7_0_0 + 7 * R_1_6_0_0;
            vj_kl -= R_0_8_0_0 * dm_ij_cache[tx+304];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3520] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_1 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_0_5 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_0_1_0 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_0_5_0 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_1_0_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_0_0 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_2 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_0_6 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_0_0_5 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_0_6 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_0_7 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_6 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_0_6 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_0_0_6 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_0_7 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_0_8 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_0_1_6 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_7 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_0_2_6 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_0_3_5 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_4_4 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_0_5_3 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_0_6 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_0_7 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_1_6 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_0_6 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_3_0_5 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_0_4 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_0_3 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_0_2_0 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_0_6_0 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+64] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_1_6 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_0_6_1 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+80] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_1_6 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_1_7 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_2_6 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_0_3_5 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_0_4_4 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_5_3 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_0_6_2 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_1_6 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+96] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_5_0 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_0_6_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_6_1 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_0_7_0 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_1_6_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+112] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_2_6 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_3_5 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_0_4_4 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_0_5_3 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_0_6_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_6_2 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_0_7_1 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_1_6_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+128] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_3_5 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_4_4 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_0_5_3 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_6_0 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_6_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_0_6_2 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_0_7_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_7_1 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_0_8_0 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_1_6_0 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_6_1 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_1_7_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_6_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_5_0 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_4_4_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_3_0 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+144] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_2_0_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_6_0_0 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+160] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_1_0_6 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_6_0_1 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+176] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_1_0_6 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_1_0_7 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_1_6 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_0_6 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_3_0_5 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_4_0_4 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_5_0_3 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_6_0_2 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+192] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_1_6_0 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_6_1_0 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+208] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_1_1_6 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_1_6_1 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_6_1_1 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+224] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_1_6_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_6_1 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_1_7_0 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_2_6_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_5_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_4_4_0 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_5_3_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_6_2_0 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+240] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_5_0_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_6_0_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_6_0_1 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_6_1_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_7_0_0 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+256] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_2_0_6 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_3_0_5 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_4_0_4 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_5_0_3 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_6_0_1 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_6_0_2 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_6_1_1 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_7_0_1 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+272] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_2_6_0 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_3_5_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_4_4_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_5_3_0 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_6_1_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_6_1_1 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_6_2_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_7_1_0 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+288] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_3_0_5 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_3_5_0 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_4_0_4 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_4_4_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_5_0_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_5_3_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_6_0_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_6_0_1 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_6_0_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_6_1_0 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_6_1_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_6_2_0 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_7_0_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_7_0_1 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_7_1_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_8_0_0 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+304] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 20; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 224; n += 16) {
        int i = n / 4;
        int tile = n % 4;
        int task_kl = blockIdx.y * 64 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*64]);
        }
    }
}

// TILEX=25, TILEY=32,
__global__
void md_j_4_0(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 400;
    int task_kl0 = blockIdx.y * 512;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 1280;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 2048;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 560;
    double *dm_ij_cache = vj_kl_cache + 512;
    double *dm_kl_cache = dm_ij_cache + 560;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 2112; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 512; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 512; n += 256) {
        int task_kl = blockIdx.y * 512 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+512] = ykl;
            Rq_cache[n+1024] = zkl;
            Rq_cache[n+1536] = akl;
        }
    }

    for (int n = tx; n < 32; n += 16) {
        int i = n / 32;
        int tile = n % 32;
        int task_kl = blockIdx.y * 512 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*512] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 25; ++batch_ij) {
        int task_ij0 = blockIdx.x * 400 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 35; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 32; ++batch_kl) {
            int task_kl0 = blockIdx.y * 512 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+512];
            double zkl = Rq_cache[sq_kl+1024];
            double akl = Rq_cache[sq_kl+1536];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 4);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 4; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+32];
            double R_2_0_0_1 = zpq * gamma_inc[sq_id+3*256];
            double R_1_0_0_2 = zpq * R_2_0_0_1 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_0_3 = zpq * R_1_0_0_2 + 2 * R_1_0_0_1;
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+48];
            double R_3_0_0_1 = zpq * gamma_inc[sq_id+4*256];
            double R_2_0_0_2 = zpq * R_3_0_0_1 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_0_3 = zpq * R_2_0_0_2 + 2 * R_2_0_0_1;
            double R_0_0_0_4 = zpq * R_1_0_0_3 + 3 * R_1_0_0_2;
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+64];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+80];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+96];
            double R_0_0_1_2 = ypq * R_1_0_0_2;
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+112];
            double R_0_0_1_3 = ypq * R_1_0_0_3;
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+128];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+144];
            double R_1_0_1_1 = ypq * R_2_0_0_1;
            double R_0_0_2_1 = ypq * R_1_0_1_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+160];
            double R_1_0_1_2 = ypq * R_2_0_0_2;
            double R_0_0_2_2 = ypq * R_1_0_1_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+176];
            double R_2_0_1_0 = ypq * gamma_inc[sq_id+3*256];
            double R_1_0_2_0 = ypq * R_2_0_1_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_3_0 = ypq * R_1_0_2_0 + 2 * R_1_0_1_0;
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+192];
            double R_2_0_1_1 = ypq * R_3_0_0_1;
            double R_1_0_2_1 = ypq * R_2_0_1_1 + 1 * R_2_0_0_1;
            double R_0_0_3_1 = ypq * R_1_0_2_1 + 2 * R_1_0_1_1;
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+208];
            double R_3_0_1_0 = ypq * gamma_inc[sq_id+4*256];
            double R_2_0_2_0 = ypq * R_3_0_1_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_3_0 = ypq * R_2_0_2_0 + 2 * R_2_0_1_0;
            double R_0_0_4_0 = ypq * R_1_0_3_0 + 3 * R_1_0_2_0;
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+224];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+240];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+256];
            double R_0_1_0_2 = xpq * R_1_0_0_2;
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+272];
            double R_0_1_0_3 = xpq * R_1_0_0_3;
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+288];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+304];
            double R_0_1_1_1 = xpq * R_1_0_1_1;
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+320];
            double R_0_1_1_2 = xpq * R_1_0_1_2;
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+336];
            double R_0_1_2_0 = xpq * R_1_0_2_0;
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+352];
            double R_0_1_2_1 = xpq * R_1_0_2_1;
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+368];
            double R_0_1_3_0 = xpq * R_1_0_3_0;
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+384];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+400];
            double R_1_1_0_1 = xpq * R_2_0_0_1;
            double R_0_2_0_1 = xpq * R_1_1_0_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+416];
            double R_1_1_0_2 = xpq * R_2_0_0_2;
            double R_0_2_0_2 = xpq * R_1_1_0_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+432];
            double R_1_1_1_0 = xpq * R_2_0_1_0;
            double R_0_2_1_0 = xpq * R_1_1_1_0 + 1 * R_1_0_1_0;
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+448];
            double R_1_1_1_1 = xpq * R_2_0_1_1;
            double R_0_2_1_1 = xpq * R_1_1_1_1 + 1 * R_1_0_1_1;
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+464];
            double R_1_1_2_0 = xpq * R_2_0_2_0;
            double R_0_2_2_0 = xpq * R_1_1_2_0 + 1 * R_1_0_2_0;
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+480];
            double R_2_1_0_0 = xpq * gamma_inc[sq_id+3*256];
            double R_1_2_0_0 = xpq * R_2_1_0_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_3_0_0 = xpq * R_1_2_0_0 + 2 * R_1_1_0_0;
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+496];
            double R_2_1_0_1 = xpq * R_3_0_0_1;
            double R_1_2_0_1 = xpq * R_2_1_0_1 + 1 * R_2_0_0_1;
            double R_0_3_0_1 = xpq * R_1_2_0_1 + 2 * R_1_1_0_1;
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+512];
            double R_2_1_1_0 = xpq * R_3_0_1_0;
            double R_1_2_1_0 = xpq * R_2_1_1_0 + 1 * R_2_0_1_0;
            double R_0_3_1_0 = xpq * R_1_2_1_0 + 2 * R_1_1_1_0;
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+528];
            double R_3_1_0_0 = xpq * gamma_inc[sq_id+4*256];
            double R_2_2_0_0 = xpq * R_3_1_0_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_3_0_0 = xpq * R_2_2_0_0 + 2 * R_2_1_0_0;
            double R_0_4_0_0 = xpq * R_1_3_0_0 + 3 * R_1_2_0_0;
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+64] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+80] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+96] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+112] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+128] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+144] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+160] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+176] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+192] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+208] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+224] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+240] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+256] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+272] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+288] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+304] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+320] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+336] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+352] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+368] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+384] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+400] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+416] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+432] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+448] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+464] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+480] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+496] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+512] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+528] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+544] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 35; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 32; n += 16) {
        int i = n / 32;
        int tile = n % 32;
        int task_kl = blockIdx.y * 512 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*512]);
        }
    }
}

// TILEX=25, TILEY=32,
__global__
void md_j_4_1(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 400;
    int task_kl0 = blockIdx.y * 512;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 1536;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 2048;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 560;
    double *dm_ij_cache = vj_kl_cache + 2048;
    double *dm_kl_cache = dm_ij_cache + 560;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 2112; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 2048; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 512; n += 256) {
        int task_kl = blockIdx.y * 512 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+512] = ykl;
            Rq_cache[n+1024] = zkl;
            Rq_cache[n+1536] = akl;
        }
    }

    for (int n = tx; n < 128; n += 16) {
        int i = n / 32;
        int tile = n % 32;
        int task_kl = blockIdx.y * 512 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*512] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 25; ++batch_ij) {
        int task_ij0 = blockIdx.x * 400 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 35; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 32; ++batch_kl) {
            int task_kl0 = blockIdx.y * 512 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+512];
            double zkl = Rq_cache[sq_kl+1024];
            double akl = Rq_cache[sq_kl+1536];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 5);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 5; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+32];
            double R_2_0_0_1 = zpq * gamma_inc[sq_id+3*256];
            double R_1_0_0_2 = zpq * R_2_0_0_1 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_0_3 = zpq * R_1_0_0_2 + 2 * R_1_0_0_1;
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+48];
            double R_3_0_0_1 = zpq * gamma_inc[sq_id+4*256];
            double R_2_0_0_2 = zpq * R_3_0_0_1 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_0_3 = zpq * R_2_0_0_2 + 2 * R_2_0_0_1;
            double R_0_0_0_4 = zpq * R_1_0_0_3 + 3 * R_1_0_0_2;
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+64];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+80];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+96];
            double R_0_0_1_2 = ypq * R_1_0_0_2;
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+112];
            double R_0_0_1_3 = ypq * R_1_0_0_3;
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+128];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+144];
            double R_1_0_1_1 = ypq * R_2_0_0_1;
            double R_0_0_2_1 = ypq * R_1_0_1_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+160];
            double R_1_0_1_2 = ypq * R_2_0_0_2;
            double R_0_0_2_2 = ypq * R_1_0_1_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+176];
            double R_2_0_1_0 = ypq * gamma_inc[sq_id+3*256];
            double R_1_0_2_0 = ypq * R_2_0_1_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_3_0 = ypq * R_1_0_2_0 + 2 * R_1_0_1_0;
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+192];
            double R_2_0_1_1 = ypq * R_3_0_0_1;
            double R_1_0_2_1 = ypq * R_2_0_1_1 + 1 * R_2_0_0_1;
            double R_0_0_3_1 = ypq * R_1_0_2_1 + 2 * R_1_0_1_1;
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+208];
            double R_3_0_1_0 = ypq * gamma_inc[sq_id+4*256];
            double R_2_0_2_0 = ypq * R_3_0_1_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_3_0 = ypq * R_2_0_2_0 + 2 * R_2_0_1_0;
            double R_0_0_4_0 = ypq * R_1_0_3_0 + 3 * R_1_0_2_0;
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+224];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+240];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+256];
            double R_0_1_0_2 = xpq * R_1_0_0_2;
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+272];
            double R_0_1_0_3 = xpq * R_1_0_0_3;
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+288];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+304];
            double R_0_1_1_1 = xpq * R_1_0_1_1;
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+320];
            double R_0_1_1_2 = xpq * R_1_0_1_2;
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+336];
            double R_0_1_2_0 = xpq * R_1_0_2_0;
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+352];
            double R_0_1_2_1 = xpq * R_1_0_2_1;
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+368];
            double R_0_1_3_0 = xpq * R_1_0_3_0;
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+384];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+400];
            double R_1_1_0_1 = xpq * R_2_0_0_1;
            double R_0_2_0_1 = xpq * R_1_1_0_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+416];
            double R_1_1_0_2 = xpq * R_2_0_0_2;
            double R_0_2_0_2 = xpq * R_1_1_0_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+432];
            double R_1_1_1_0 = xpq * R_2_0_1_0;
            double R_0_2_1_0 = xpq * R_1_1_1_0 + 1 * R_1_0_1_0;
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+448];
            double R_1_1_1_1 = xpq * R_2_0_1_1;
            double R_0_2_1_1 = xpq * R_1_1_1_1 + 1 * R_1_0_1_1;
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+464];
            double R_1_1_2_0 = xpq * R_2_0_2_0;
            double R_0_2_2_0 = xpq * R_1_1_2_0 + 1 * R_1_0_2_0;
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+480];
            double R_2_1_0_0 = xpq * gamma_inc[sq_id+3*256];
            double R_1_2_0_0 = xpq * R_2_1_0_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_3_0_0 = xpq * R_1_2_0_0 + 2 * R_1_1_0_0;
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+496];
            double R_2_1_0_1 = xpq * R_3_0_0_1;
            double R_1_2_0_1 = xpq * R_2_1_0_1 + 1 * R_2_0_0_1;
            double R_0_3_0_1 = xpq * R_1_2_0_1 + 2 * R_1_1_0_1;
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+512];
            double R_2_1_1_0 = xpq * R_3_0_1_0;
            double R_1_2_1_0 = xpq * R_2_1_1_0 + 1 * R_2_0_1_0;
            double R_0_3_1_0 = xpq * R_1_2_1_0 + 2 * R_1_1_1_0;
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+528];
            double R_3_1_0_0 = xpq * gamma_inc[sq_id+4*256];
            double R_2_2_0_0 = xpq * R_3_1_0_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_3_0_0 = xpq * R_2_2_0_0 + 2 * R_2_1_0_0;
            double R_0_4_0_0 = xpq * R_1_3_0_0 + 3 * R_1_2_0_0;
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+48];
            double R_4_0_0_1 = zpq * gamma_inc[sq_id+5*256];
            double R_3_0_0_2 = zpq * R_4_0_0_1 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_0_3 = zpq * R_3_0_0_2 + 2 * R_3_0_0_1;
            double R_1_0_0_4 = zpq * R_2_0_0_3 + 3 * R_2_0_0_2;
            double R_0_0_0_5 = zpq * R_1_0_0_4 + 4 * R_1_0_0_3;
            vj_kl -= R_0_0_0_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+112];
            double R_0_0_1_4 = ypq * R_1_0_0_4;
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+160];
            double R_1_0_1_3 = ypq * R_2_0_0_3;
            double R_0_0_2_3 = ypq * R_1_0_1_3 + 1 * R_1_0_0_3;
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+192];
            double R_2_0_1_2 = ypq * R_3_0_0_2;
            double R_1_0_2_2 = ypq * R_2_0_1_2 + 1 * R_2_0_0_2;
            double R_0_0_3_2 = ypq * R_1_0_2_2 + 2 * R_1_0_1_2;
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+208];
            double R_3_0_1_1 = ypq * R_4_0_0_1;
            double R_2_0_2_1 = ypq * R_3_0_1_1 + 1 * R_3_0_0_1;
            double R_1_0_3_1 = ypq * R_2_0_2_1 + 2 * R_2_0_1_1;
            double R_0_0_4_1 = ypq * R_1_0_3_1 + 3 * R_1_0_2_1;
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+272];
            double R_0_1_0_4 = xpq * R_1_0_0_4;
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+320];
            double R_0_1_1_3 = xpq * R_1_0_1_3;
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+352];
            double R_0_1_2_2 = xpq * R_1_0_2_2;
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+368];
            double R_0_1_3_1 = xpq * R_1_0_3_1;
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+416];
            double R_1_1_0_3 = xpq * R_2_0_0_3;
            double R_0_2_0_3 = xpq * R_1_1_0_3 + 1 * R_1_0_0_3;
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+448];
            double R_1_1_1_2 = xpq * R_2_0_1_2;
            double R_0_2_1_2 = xpq * R_1_1_1_2 + 1 * R_1_0_1_2;
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+464];
            double R_1_1_2_1 = xpq * R_2_0_2_1;
            double R_0_2_2_1 = xpq * R_1_1_2_1 + 1 * R_1_0_2_1;
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+496];
            double R_2_1_0_2 = xpq * R_3_0_0_2;
            double R_1_2_0_2 = xpq * R_2_1_0_2 + 1 * R_2_0_0_2;
            double R_0_3_0_2 = xpq * R_1_2_0_2 + 2 * R_1_1_0_2;
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+512];
            double R_2_1_1_1 = xpq * R_3_0_1_1;
            double R_1_2_1_1 = xpq * R_2_1_1_1 + 1 * R_2_0_1_1;
            double R_0_3_1_1 = xpq * R_1_2_1_1 + 2 * R_1_1_1_1;
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+528];
            double R_3_1_0_1 = xpq * R_4_0_0_1;
            double R_2_2_0_1 = xpq * R_3_1_0_1 + 1 * R_3_0_0_1;
            double R_1_3_0_1 = xpq * R_2_2_0_1 + 2 * R_2_1_0_1;
            double R_0_4_0_1 = xpq * R_1_3_0_1 + 3 * R_1_2_0_1;
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+512] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_2_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+208];
            double R_4_0_1_0 = ypq * gamma_inc[sq_id+5*256];
            double R_3_0_2_0 = ypq * R_4_0_1_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_3_0 = ypq * R_3_0_2_0 + 2 * R_3_0_1_0;
            double R_1_0_4_0 = ypq * R_2_0_3_0 + 3 * R_2_0_2_0;
            double R_0_0_5_0 = ypq * R_1_0_4_0 + 4 * R_1_0_3_0;
            vj_kl -= R_0_0_5_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+368];
            double R_0_1_4_0 = xpq * R_1_0_4_0;
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+464];
            double R_1_1_3_0 = xpq * R_2_0_3_0;
            double R_0_2_3_0 = xpq * R_1_1_3_0 + 1 * R_1_0_3_0;
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+512];
            double R_2_1_2_0 = xpq * R_3_0_2_0;
            double R_1_2_2_0 = xpq * R_2_1_2_0 + 1 * R_2_0_2_0;
            double R_0_3_2_0 = xpq * R_1_2_2_0 + 2 * R_1_1_2_0;
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+528];
            double R_3_1_1_0 = xpq * R_4_0_1_0;
            double R_2_2_1_0 = xpq * R_3_1_1_0 + 1 * R_3_0_1_0;
            double R_1_3_1_0 = xpq * R_2_2_1_0 + 2 * R_2_1_1_0;
            double R_0_4_1_0 = xpq * R_1_3_1_0 + 3 * R_1_2_1_0;
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1024] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_0_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+512];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+528];
            double R_4_1_0_0 = xpq * gamma_inc[sq_id+5*256];
            double R_3_2_0_0 = xpq * R_4_1_0_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_3_0_0 = xpq * R_3_2_0_0 + 2 * R_3_1_0_0;
            double R_1_4_0_0 = xpq * R_2_3_0_0 + 3 * R_2_2_0_0;
            double R_0_5_0_0 = xpq * R_1_4_0_0 + 4 * R_1_3_0_0;
            vj_kl -= R_0_5_0_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1536] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_1_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_0_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_5 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+64] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_2_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+80] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+96] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+112] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+128] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+144] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+160] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+176] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+192] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+208] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_5_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+224] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_0_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+240] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+256] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+272] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+288] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+304] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+320] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+336] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+352] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+368] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+384] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+400] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+416] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+432] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+448] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+464] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+480] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+496] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+512] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+528] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_5_0_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+544] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 35; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 128; n += 16) {
        int i = n / 32;
        int tile = n % 32;
        int task_kl = blockIdx.y * 512 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*512]);
        }
    }
}

// TILEX=25, TILEY=23,
__global__
void md_j_4_2(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 400;
    int task_kl0 = blockIdx.y * 368;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 1792;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 1472;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 560;
    double *dm_ij_cache = vj_kl_cache + 3680;
    double *dm_kl_cache = dm_ij_cache + 560;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 1536; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 3680; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 368; n += 256) {
        int task_kl = blockIdx.y * 368 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+368] = ykl;
            Rq_cache[n+736] = zkl;
            Rq_cache[n+1104] = akl;
        }
    }

    for (int n = tx; n < 230; n += 16) {
        int i = n / 23;
        int tile = n % 23;
        int task_kl = blockIdx.y * 368 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*368] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 25; ++batch_ij) {
        int task_ij0 = blockIdx.x * 400 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 35; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 23; ++batch_kl) {
            int task_kl0 = blockIdx.y * 368 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+368];
            double zkl = Rq_cache[sq_kl+736];
            double akl = Rq_cache[sq_kl+1104];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 6);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 6; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+32];
            double R_2_0_0_1 = zpq * gamma_inc[sq_id+3*256];
            double R_1_0_0_2 = zpq * R_2_0_0_1 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_0_3 = zpq * R_1_0_0_2 + 2 * R_1_0_0_1;
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+48];
            double R_3_0_0_1 = zpq * gamma_inc[sq_id+4*256];
            double R_2_0_0_2 = zpq * R_3_0_0_1 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_0_3 = zpq * R_2_0_0_2 + 2 * R_2_0_0_1;
            double R_0_0_0_4 = zpq * R_1_0_0_3 + 3 * R_1_0_0_2;
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+64];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+80];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+96];
            double R_0_0_1_2 = ypq * R_1_0_0_2;
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+112];
            double R_0_0_1_3 = ypq * R_1_0_0_3;
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+128];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+144];
            double R_1_0_1_1 = ypq * R_2_0_0_1;
            double R_0_0_2_1 = ypq * R_1_0_1_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+160];
            double R_1_0_1_2 = ypq * R_2_0_0_2;
            double R_0_0_2_2 = ypq * R_1_0_1_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+176];
            double R_2_0_1_0 = ypq * gamma_inc[sq_id+3*256];
            double R_1_0_2_0 = ypq * R_2_0_1_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_3_0 = ypq * R_1_0_2_0 + 2 * R_1_0_1_0;
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+192];
            double R_2_0_1_1 = ypq * R_3_0_0_1;
            double R_1_0_2_1 = ypq * R_2_0_1_1 + 1 * R_2_0_0_1;
            double R_0_0_3_1 = ypq * R_1_0_2_1 + 2 * R_1_0_1_1;
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+208];
            double R_3_0_1_0 = ypq * gamma_inc[sq_id+4*256];
            double R_2_0_2_0 = ypq * R_3_0_1_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_3_0 = ypq * R_2_0_2_0 + 2 * R_2_0_1_0;
            double R_0_0_4_0 = ypq * R_1_0_3_0 + 3 * R_1_0_2_0;
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+224];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+240];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+256];
            double R_0_1_0_2 = xpq * R_1_0_0_2;
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+272];
            double R_0_1_0_3 = xpq * R_1_0_0_3;
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+288];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+304];
            double R_0_1_1_1 = xpq * R_1_0_1_1;
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+320];
            double R_0_1_1_2 = xpq * R_1_0_1_2;
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+336];
            double R_0_1_2_0 = xpq * R_1_0_2_0;
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+352];
            double R_0_1_2_1 = xpq * R_1_0_2_1;
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+368];
            double R_0_1_3_0 = xpq * R_1_0_3_0;
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+384];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+400];
            double R_1_1_0_1 = xpq * R_2_0_0_1;
            double R_0_2_0_1 = xpq * R_1_1_0_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+416];
            double R_1_1_0_2 = xpq * R_2_0_0_2;
            double R_0_2_0_2 = xpq * R_1_1_0_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+432];
            double R_1_1_1_0 = xpq * R_2_0_1_0;
            double R_0_2_1_0 = xpq * R_1_1_1_0 + 1 * R_1_0_1_0;
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+448];
            double R_1_1_1_1 = xpq * R_2_0_1_1;
            double R_0_2_1_1 = xpq * R_1_1_1_1 + 1 * R_1_0_1_1;
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+464];
            double R_1_1_2_0 = xpq * R_2_0_2_0;
            double R_0_2_2_0 = xpq * R_1_1_2_0 + 1 * R_1_0_2_0;
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+480];
            double R_2_1_0_0 = xpq * gamma_inc[sq_id+3*256];
            double R_1_2_0_0 = xpq * R_2_1_0_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_3_0_0 = xpq * R_1_2_0_0 + 2 * R_1_1_0_0;
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+496];
            double R_2_1_0_1 = xpq * R_3_0_0_1;
            double R_1_2_0_1 = xpq * R_2_1_0_1 + 1 * R_2_0_0_1;
            double R_0_3_0_1 = xpq * R_1_2_0_1 + 2 * R_1_1_0_1;
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+512];
            double R_2_1_1_0 = xpq * R_3_0_1_0;
            double R_1_2_1_0 = xpq * R_2_1_1_0 + 1 * R_2_0_1_0;
            double R_0_3_1_0 = xpq * R_1_2_1_0 + 2 * R_1_1_1_0;
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+528];
            double R_3_1_0_0 = xpq * gamma_inc[sq_id+4*256];
            double R_2_2_0_0 = xpq * R_3_1_0_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_3_0_0 = xpq * R_2_2_0_0 + 2 * R_2_1_0_0;
            double R_0_4_0_0 = xpq * R_1_3_0_0 + 3 * R_1_2_0_0;
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+48];
            double R_4_0_0_1 = zpq * gamma_inc[sq_id+5*256];
            double R_3_0_0_2 = zpq * R_4_0_0_1 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_0_3 = zpq * R_3_0_0_2 + 2 * R_3_0_0_1;
            double R_1_0_0_4 = zpq * R_2_0_0_3 + 3 * R_2_0_0_2;
            double R_0_0_0_5 = zpq * R_1_0_0_4 + 4 * R_1_0_0_3;
            vj_kl -= R_0_0_0_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+112];
            double R_0_0_1_4 = ypq * R_1_0_0_4;
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+160];
            double R_1_0_1_3 = ypq * R_2_0_0_3;
            double R_0_0_2_3 = ypq * R_1_0_1_3 + 1 * R_1_0_0_3;
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+192];
            double R_2_0_1_2 = ypq * R_3_0_0_2;
            double R_1_0_2_2 = ypq * R_2_0_1_2 + 1 * R_2_0_0_2;
            double R_0_0_3_2 = ypq * R_1_0_2_2 + 2 * R_1_0_1_2;
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+208];
            double R_3_0_1_1 = ypq * R_4_0_0_1;
            double R_2_0_2_1 = ypq * R_3_0_1_1 + 1 * R_3_0_0_1;
            double R_1_0_3_1 = ypq * R_2_0_2_1 + 2 * R_2_0_1_1;
            double R_0_0_4_1 = ypq * R_1_0_3_1 + 3 * R_1_0_2_1;
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+272];
            double R_0_1_0_4 = xpq * R_1_0_0_4;
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+320];
            double R_0_1_1_3 = xpq * R_1_0_1_3;
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+352];
            double R_0_1_2_2 = xpq * R_1_0_2_2;
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+368];
            double R_0_1_3_1 = xpq * R_1_0_3_1;
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+416];
            double R_1_1_0_3 = xpq * R_2_0_0_3;
            double R_0_2_0_3 = xpq * R_1_1_0_3 + 1 * R_1_0_0_3;
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+448];
            double R_1_1_1_2 = xpq * R_2_0_1_2;
            double R_0_2_1_2 = xpq * R_1_1_1_2 + 1 * R_1_0_1_2;
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+464];
            double R_1_1_2_1 = xpq * R_2_0_2_1;
            double R_0_2_2_1 = xpq * R_1_1_2_1 + 1 * R_1_0_2_1;
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+496];
            double R_2_1_0_2 = xpq * R_3_0_0_2;
            double R_1_2_0_2 = xpq * R_2_1_0_2 + 1 * R_2_0_0_2;
            double R_0_3_0_2 = xpq * R_1_2_0_2 + 2 * R_1_1_0_2;
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+512];
            double R_2_1_1_1 = xpq * R_3_0_1_1;
            double R_1_2_1_1 = xpq * R_2_1_1_1 + 1 * R_2_0_1_1;
            double R_0_3_1_1 = xpq * R_1_2_1_1 + 2 * R_1_1_1_1;
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+528];
            double R_3_1_0_1 = xpq * R_4_0_0_1;
            double R_2_2_0_1 = xpq * R_3_1_0_1 + 1 * R_3_0_0_1;
            double R_1_3_0_1 = xpq * R_2_2_0_1 + 2 * R_2_1_0_1;
            double R_0_4_0_1 = xpq * R_1_3_0_1 + 3 * R_1_2_0_1;
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+368] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+48];
            double R_5_0_0_1 = zpq * gamma_inc[sq_id+6*256];
            double R_4_0_0_2 = zpq * R_5_0_0_1 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_0_3 = zpq * R_4_0_0_2 + 2 * R_4_0_0_1;
            double R_2_0_0_4 = zpq * R_3_0_0_3 + 3 * R_3_0_0_2;
            double R_1_0_0_5 = zpq * R_2_0_0_4 + 4 * R_2_0_0_3;
            double R_0_0_0_6 = zpq * R_1_0_0_5 + 5 * R_1_0_0_4;
            vj_kl += R_0_0_0_6 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+112];
            double R_0_0_1_5 = ypq * R_1_0_0_5;
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+160];
            double R_1_0_1_4 = ypq * R_2_0_0_4;
            double R_0_0_2_4 = ypq * R_1_0_1_4 + 1 * R_1_0_0_4;
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+192];
            double R_2_0_1_3 = ypq * R_3_0_0_3;
            double R_1_0_2_3 = ypq * R_2_0_1_3 + 1 * R_2_0_0_3;
            double R_0_0_3_3 = ypq * R_1_0_2_3 + 2 * R_1_0_1_3;
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+208];
            double R_3_0_1_2 = ypq * R_4_0_0_2;
            double R_2_0_2_2 = ypq * R_3_0_1_2 + 1 * R_3_0_0_2;
            double R_1_0_3_2 = ypq * R_2_0_2_2 + 2 * R_2_0_1_2;
            double R_0_0_4_2 = ypq * R_1_0_3_2 + 3 * R_1_0_2_2;
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+272];
            double R_0_1_0_5 = xpq * R_1_0_0_5;
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+320];
            double R_0_1_1_4 = xpq * R_1_0_1_4;
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+352];
            double R_0_1_2_3 = xpq * R_1_0_2_3;
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+368];
            double R_0_1_3_2 = xpq * R_1_0_3_2;
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+416];
            double R_1_1_0_4 = xpq * R_2_0_0_4;
            double R_0_2_0_4 = xpq * R_1_1_0_4 + 1 * R_1_0_0_4;
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+448];
            double R_1_1_1_3 = xpq * R_2_0_1_3;
            double R_0_2_1_3 = xpq * R_1_1_1_3 + 1 * R_1_0_1_3;
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+464];
            double R_1_1_2_2 = xpq * R_2_0_2_2;
            double R_0_2_2_2 = xpq * R_1_1_2_2 + 1 * R_1_0_2_2;
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+496];
            double R_2_1_0_3 = xpq * R_3_0_0_3;
            double R_1_2_0_3 = xpq * R_2_1_0_3 + 1 * R_2_0_0_3;
            double R_0_3_0_3 = xpq * R_1_2_0_3 + 2 * R_1_1_0_3;
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+512];
            double R_2_1_1_2 = xpq * R_3_0_1_2;
            double R_1_2_1_2 = xpq * R_2_1_1_2 + 1 * R_2_0_1_2;
            double R_0_3_1_2 = xpq * R_1_2_1_2 + 2 * R_1_1_1_2;
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+528];
            double R_3_1_0_2 = xpq * R_4_0_0_2;
            double R_2_2_0_2 = xpq * R_3_1_0_2 + 1 * R_3_0_0_2;
            double R_1_3_0_2 = xpq * R_2_2_0_2 + 2 * R_2_1_0_2;
            double R_0_4_0_2 = xpq * R_1_3_0_2 + 3 * R_1_2_0_2;
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+736] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_2_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+208];
            double R_4_0_1_0 = ypq * gamma_inc[sq_id+5*256];
            double R_3_0_2_0 = ypq * R_4_0_1_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_3_0 = ypq * R_3_0_2_0 + 2 * R_3_0_1_0;
            double R_1_0_4_0 = ypq * R_2_0_3_0 + 3 * R_2_0_2_0;
            double R_0_0_5_0 = ypq * R_1_0_4_0 + 4 * R_1_0_3_0;
            vj_kl -= R_0_0_5_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+368];
            double R_0_1_4_0 = xpq * R_1_0_4_0;
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+464];
            double R_1_1_3_0 = xpq * R_2_0_3_0;
            double R_0_2_3_0 = xpq * R_1_1_3_0 + 1 * R_1_0_3_0;
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+512];
            double R_2_1_2_0 = xpq * R_3_0_2_0;
            double R_1_2_2_0 = xpq * R_2_1_2_0 + 1 * R_2_0_2_0;
            double R_0_3_2_0 = xpq * R_1_2_2_0 + 2 * R_1_1_2_0;
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+528];
            double R_3_1_1_0 = xpq * R_4_0_1_0;
            double R_2_2_1_0 = xpq * R_3_1_1_0 + 1 * R_3_0_1_0;
            double R_1_3_1_0 = xpq * R_2_2_1_0 + 2 * R_2_1_1_0;
            double R_0_4_1_0 = xpq * R_1_3_1_0 + 3 * R_1_2_1_0;
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1104] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+208];
            double R_4_0_1_1 = ypq * R_5_0_0_1;
            double R_3_0_2_1 = ypq * R_4_0_1_1 + 1 * R_4_0_0_1;
            double R_2_0_3_1 = ypq * R_3_0_2_1 + 2 * R_3_0_1_1;
            double R_1_0_4_1 = ypq * R_2_0_3_1 + 3 * R_2_0_2_1;
            double R_0_0_5_1 = ypq * R_1_0_4_1 + 4 * R_1_0_3_1;
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+368];
            double R_0_1_4_1 = xpq * R_1_0_4_1;
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+464];
            double R_1_1_3_1 = xpq * R_2_0_3_1;
            double R_0_2_3_1 = xpq * R_1_1_3_1 + 1 * R_1_0_3_1;
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+512];
            double R_2_1_2_1 = xpq * R_3_0_2_1;
            double R_1_2_2_1 = xpq * R_2_1_2_1 + 1 * R_2_0_2_1;
            double R_0_3_2_1 = xpq * R_1_2_2_1 + 2 * R_1_1_2_1;
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+528];
            double R_3_1_1_1 = xpq * R_4_0_1_1;
            double R_2_2_1_1 = xpq * R_3_1_1_1 + 1 * R_3_0_1_1;
            double R_1_3_1_1 = xpq * R_2_2_1_1 + 2 * R_2_1_1_1;
            double R_0_4_1_1 = xpq * R_1_3_1_1 + 3 * R_1_2_1_1;
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1472] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+208];
            double R_5_0_1_0 = ypq * gamma_inc[sq_id+6*256];
            double R_4_0_2_0 = ypq * R_5_0_1_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_3_0 = ypq * R_4_0_2_0 + 2 * R_4_0_1_0;
            double R_2_0_4_0 = ypq * R_3_0_3_0 + 3 * R_3_0_2_0;
            double R_1_0_5_0 = ypq * R_2_0_4_0 + 4 * R_2_0_3_0;
            double R_0_0_6_0 = ypq * R_1_0_5_0 + 5 * R_1_0_4_0;
            vj_kl += R_0_0_6_0 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+368];
            double R_0_1_5_0 = xpq * R_1_0_5_0;
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+464];
            double R_1_1_4_0 = xpq * R_2_0_4_0;
            double R_0_2_4_0 = xpq * R_1_1_4_0 + 1 * R_1_0_4_0;
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+496];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+512];
            double R_2_1_3_0 = xpq * R_3_0_3_0;
            double R_1_2_3_0 = xpq * R_2_1_3_0 + 1 * R_2_0_3_0;
            double R_0_3_3_0 = xpq * R_1_2_3_0 + 2 * R_1_1_3_0;
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+528];
            double R_3_1_2_0 = xpq * R_4_0_2_0;
            double R_2_2_2_0 = xpq * R_3_1_2_0 + 1 * R_3_0_2_0;
            double R_1_3_2_0 = xpq * R_2_2_2_0 + 2 * R_2_1_2_0;
            double R_0_4_2_0 = xpq * R_1_3_2_0 + 3 * R_1_2_2_0;
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1840] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_0_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+512];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+528];
            double R_4_1_0_0 = xpq * gamma_inc[sq_id+5*256];
            double R_3_2_0_0 = xpq * R_4_1_0_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_3_0_0 = xpq * R_3_2_0_0 + 2 * R_3_1_0_0;
            double R_1_4_0_0 = xpq * R_2_3_0_0 + 3 * R_2_2_0_0;
            double R_0_5_0_0 = xpq * R_1_4_0_0 + 4 * R_1_3_0_0;
            vj_kl -= R_0_5_0_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2208] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+288];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+384];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+400];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+416];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+432];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+448];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+464];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+480];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+512];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+528];
            double R_4_1_0_1 = xpq * R_5_0_0_1;
            double R_3_2_0_1 = xpq * R_4_1_0_1 + 1 * R_4_0_0_1;
            double R_2_3_0_1 = xpq * R_3_2_0_1 + 2 * R_3_1_0_1;
            double R_1_4_0_1 = xpq * R_2_3_0_1 + 3 * R_2_2_0_1;
            double R_0_5_0_1 = xpq * R_1_4_0_1 + 4 * R_1_3_0_1;
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2576] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+288];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+304];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+384];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+464];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+496];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+512];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+528];
            double R_4_1_1_0 = xpq * R_5_0_1_0;
            double R_3_2_1_0 = xpq * R_4_1_1_0 + 1 * R_4_0_1_0;
            double R_2_3_1_0 = xpq * R_3_2_1_0 + 2 * R_3_1_1_0;
            double R_1_4_1_0 = xpq * R_2_3_1_0 + 3 * R_2_2_1_0;
            double R_0_5_1_0 = xpq * R_1_4_1_0 + 4 * R_1_3_1_0;
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2944] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+224];
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+288];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+304];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+368];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+384];
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+464];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+496];
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+512];
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+528];
            double R_5_1_0_0 = xpq * gamma_inc[sq_id+6*256];
            double R_4_2_0_0 = xpq * R_5_1_0_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_3_0_0 = xpq * R_4_2_0_0 + 2 * R_4_1_0_0;
            double R_2_4_0_0 = xpq * R_3_3_0_0 + 3 * R_3_2_0_0;
            double R_1_5_0_0 = xpq * R_2_4_0_0 + 4 * R_2_3_0_0;
            double R_0_6_0_0 = xpq * R_1_5_0_0 + 5 * R_1_4_0_0;
            vj_kl += R_0_6_0_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3312] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_1 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_0_1_0 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_1_0_0 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_2 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_5 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_0_0_6 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+64] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_0_2_0 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+80] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+96] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+112] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+128] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+144] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+160] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+176] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+192] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+208] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_0_5_0 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_0_6_0 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+224] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_2_0_0 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+240] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+256] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+272] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+288] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+304] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+320] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+336] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+352] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+368] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+384] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+400] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+416] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+432] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+448] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+464] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+480] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+496] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+512] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+528] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+368];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+736];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+1104];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+1840];
            vj_ij -= R_0_5_0_0 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_6_0_0 * dm_kl_cache[sq_kl+3312];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+544] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 35; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 230; n += 16) {
        int i = n / 23;
        int tile = n % 23;
        int task_kl = blockIdx.y * 368 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*368]);
        }
    }
}

// TILEX=25, TILEY=12,
__global__
void md_j_4_3(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 400;
    int task_kl0 = blockIdx.y * 192;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 2048;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 768;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 560;
    double *dm_ij_cache = vj_kl_cache + 3840;
    double *dm_kl_cache = dm_ij_cache + 560;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 832; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 3840; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 192; n += 256) {
        int task_kl = blockIdx.y * 192 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+192] = ykl;
            Rq_cache[n+384] = zkl;
            Rq_cache[n+576] = akl;
        }
    }

    for (int n = tx; n < 240; n += 16) {
        int i = n / 12;
        int tile = n % 12;
        int task_kl = blockIdx.y * 192 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*192] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 25; ++batch_ij) {
        int task_ij0 = blockIdx.x * 400 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 35; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 12; ++batch_kl) {
            int task_kl0 = blockIdx.y * 192 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+192];
            double zkl = Rq_cache[sq_kl+384];
            double akl = Rq_cache[sq_kl+576];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 7);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 7; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+32];
            double R_2_0_0_1 = zpq * gamma_inc[sq_id+3*256];
            double R_1_0_0_2 = zpq * R_2_0_0_1 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_0_3 = zpq * R_1_0_0_2 + 2 * R_1_0_0_1;
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+48];
            double R_3_0_0_1 = zpq * gamma_inc[sq_id+4*256];
            double R_2_0_0_2 = zpq * R_3_0_0_1 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_0_3 = zpq * R_2_0_0_2 + 2 * R_2_0_0_1;
            double R_0_0_0_4 = zpq * R_1_0_0_3 + 3 * R_1_0_0_2;
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+64];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+80];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+96];
            double R_0_0_1_2 = ypq * R_1_0_0_2;
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+112];
            double R_0_0_1_3 = ypq * R_1_0_0_3;
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+128];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+144];
            double R_1_0_1_1 = ypq * R_2_0_0_1;
            double R_0_0_2_1 = ypq * R_1_0_1_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+160];
            double R_1_0_1_2 = ypq * R_2_0_0_2;
            double R_0_0_2_2 = ypq * R_1_0_1_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+176];
            double R_2_0_1_0 = ypq * gamma_inc[sq_id+3*256];
            double R_1_0_2_0 = ypq * R_2_0_1_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_3_0 = ypq * R_1_0_2_0 + 2 * R_1_0_1_0;
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+192];
            double R_2_0_1_1 = ypq * R_3_0_0_1;
            double R_1_0_2_1 = ypq * R_2_0_1_1 + 1 * R_2_0_0_1;
            double R_0_0_3_1 = ypq * R_1_0_2_1 + 2 * R_1_0_1_1;
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+208];
            double R_3_0_1_0 = ypq * gamma_inc[sq_id+4*256];
            double R_2_0_2_0 = ypq * R_3_0_1_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_3_0 = ypq * R_2_0_2_0 + 2 * R_2_0_1_0;
            double R_0_0_4_0 = ypq * R_1_0_3_0 + 3 * R_1_0_2_0;
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+224];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+240];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+256];
            double R_0_1_0_2 = xpq * R_1_0_0_2;
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+272];
            double R_0_1_0_3 = xpq * R_1_0_0_3;
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+288];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+304];
            double R_0_1_1_1 = xpq * R_1_0_1_1;
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+320];
            double R_0_1_1_2 = xpq * R_1_0_1_2;
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+336];
            double R_0_1_2_0 = xpq * R_1_0_2_0;
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+352];
            double R_0_1_2_1 = xpq * R_1_0_2_1;
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+368];
            double R_0_1_3_0 = xpq * R_1_0_3_0;
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+384];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+400];
            double R_1_1_0_1 = xpq * R_2_0_0_1;
            double R_0_2_0_1 = xpq * R_1_1_0_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+416];
            double R_1_1_0_2 = xpq * R_2_0_0_2;
            double R_0_2_0_2 = xpq * R_1_1_0_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+432];
            double R_1_1_1_0 = xpq * R_2_0_1_0;
            double R_0_2_1_0 = xpq * R_1_1_1_0 + 1 * R_1_0_1_0;
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+448];
            double R_1_1_1_1 = xpq * R_2_0_1_1;
            double R_0_2_1_1 = xpq * R_1_1_1_1 + 1 * R_1_0_1_1;
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+464];
            double R_1_1_2_0 = xpq * R_2_0_2_0;
            double R_0_2_2_0 = xpq * R_1_1_2_0 + 1 * R_1_0_2_0;
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+480];
            double R_2_1_0_0 = xpq * gamma_inc[sq_id+3*256];
            double R_1_2_0_0 = xpq * R_2_1_0_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_3_0_0 = xpq * R_1_2_0_0 + 2 * R_1_1_0_0;
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+496];
            double R_2_1_0_1 = xpq * R_3_0_0_1;
            double R_1_2_0_1 = xpq * R_2_1_0_1 + 1 * R_2_0_0_1;
            double R_0_3_0_1 = xpq * R_1_2_0_1 + 2 * R_1_1_0_1;
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+512];
            double R_2_1_1_0 = xpq * R_3_0_1_0;
            double R_1_2_1_0 = xpq * R_2_1_1_0 + 1 * R_2_0_1_0;
            double R_0_3_1_0 = xpq * R_1_2_1_0 + 2 * R_1_1_1_0;
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+528];
            double R_3_1_0_0 = xpq * gamma_inc[sq_id+4*256];
            double R_2_2_0_0 = xpq * R_3_1_0_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_3_0_0 = xpq * R_2_2_0_0 + 2 * R_2_1_0_0;
            double R_0_4_0_0 = xpq * R_1_3_0_0 + 3 * R_1_2_0_0;
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+48];
            double R_4_0_0_1 = zpq * gamma_inc[sq_id+5*256];
            double R_3_0_0_2 = zpq * R_4_0_0_1 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_0_3 = zpq * R_3_0_0_2 + 2 * R_3_0_0_1;
            double R_1_0_0_4 = zpq * R_2_0_0_3 + 3 * R_2_0_0_2;
            double R_0_0_0_5 = zpq * R_1_0_0_4 + 4 * R_1_0_0_3;
            vj_kl -= R_0_0_0_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+112];
            double R_0_0_1_4 = ypq * R_1_0_0_4;
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+160];
            double R_1_0_1_3 = ypq * R_2_0_0_3;
            double R_0_0_2_3 = ypq * R_1_0_1_3 + 1 * R_1_0_0_3;
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+192];
            double R_2_0_1_2 = ypq * R_3_0_0_2;
            double R_1_0_2_2 = ypq * R_2_0_1_2 + 1 * R_2_0_0_2;
            double R_0_0_3_2 = ypq * R_1_0_2_2 + 2 * R_1_0_1_2;
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+208];
            double R_3_0_1_1 = ypq * R_4_0_0_1;
            double R_2_0_2_1 = ypq * R_3_0_1_1 + 1 * R_3_0_0_1;
            double R_1_0_3_1 = ypq * R_2_0_2_1 + 2 * R_2_0_1_1;
            double R_0_0_4_1 = ypq * R_1_0_3_1 + 3 * R_1_0_2_1;
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+272];
            double R_0_1_0_4 = xpq * R_1_0_0_4;
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+320];
            double R_0_1_1_3 = xpq * R_1_0_1_3;
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+352];
            double R_0_1_2_2 = xpq * R_1_0_2_2;
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+368];
            double R_0_1_3_1 = xpq * R_1_0_3_1;
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+416];
            double R_1_1_0_3 = xpq * R_2_0_0_3;
            double R_0_2_0_3 = xpq * R_1_1_0_3 + 1 * R_1_0_0_3;
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+448];
            double R_1_1_1_2 = xpq * R_2_0_1_2;
            double R_0_2_1_2 = xpq * R_1_1_1_2 + 1 * R_1_0_1_2;
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+464];
            double R_1_1_2_1 = xpq * R_2_0_2_1;
            double R_0_2_2_1 = xpq * R_1_1_2_1 + 1 * R_1_0_2_1;
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+496];
            double R_2_1_0_2 = xpq * R_3_0_0_2;
            double R_1_2_0_2 = xpq * R_2_1_0_2 + 1 * R_2_0_0_2;
            double R_0_3_0_2 = xpq * R_1_2_0_2 + 2 * R_1_1_0_2;
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+512];
            double R_2_1_1_1 = xpq * R_3_0_1_1;
            double R_1_2_1_1 = xpq * R_2_1_1_1 + 1 * R_2_0_1_1;
            double R_0_3_1_1 = xpq * R_1_2_1_1 + 2 * R_1_1_1_1;
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+528];
            double R_3_1_0_1 = xpq * R_4_0_0_1;
            double R_2_2_0_1 = xpq * R_3_1_0_1 + 1 * R_3_0_0_1;
            double R_1_3_0_1 = xpq * R_2_2_0_1 + 2 * R_2_1_0_1;
            double R_0_4_0_1 = xpq * R_1_3_0_1 + 3 * R_1_2_0_1;
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+192] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+48];
            double R_5_0_0_1 = zpq * gamma_inc[sq_id+6*256];
            double R_4_0_0_2 = zpq * R_5_0_0_1 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_0_3 = zpq * R_4_0_0_2 + 2 * R_4_0_0_1;
            double R_2_0_0_4 = zpq * R_3_0_0_3 + 3 * R_3_0_0_2;
            double R_1_0_0_5 = zpq * R_2_0_0_4 + 4 * R_2_0_0_3;
            double R_0_0_0_6 = zpq * R_1_0_0_5 + 5 * R_1_0_0_4;
            vj_kl += R_0_0_0_6 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+112];
            double R_0_0_1_5 = ypq * R_1_0_0_5;
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+160];
            double R_1_0_1_4 = ypq * R_2_0_0_4;
            double R_0_0_2_4 = ypq * R_1_0_1_4 + 1 * R_1_0_0_4;
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+192];
            double R_2_0_1_3 = ypq * R_3_0_0_3;
            double R_1_0_2_3 = ypq * R_2_0_1_3 + 1 * R_2_0_0_3;
            double R_0_0_3_3 = ypq * R_1_0_2_3 + 2 * R_1_0_1_3;
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+208];
            double R_3_0_1_2 = ypq * R_4_0_0_2;
            double R_2_0_2_2 = ypq * R_3_0_1_2 + 1 * R_3_0_0_2;
            double R_1_0_3_2 = ypq * R_2_0_2_2 + 2 * R_2_0_1_2;
            double R_0_0_4_2 = ypq * R_1_0_3_2 + 3 * R_1_0_2_2;
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+272];
            double R_0_1_0_5 = xpq * R_1_0_0_5;
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+320];
            double R_0_1_1_4 = xpq * R_1_0_1_4;
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+352];
            double R_0_1_2_3 = xpq * R_1_0_2_3;
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+368];
            double R_0_1_3_2 = xpq * R_1_0_3_2;
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+416];
            double R_1_1_0_4 = xpq * R_2_0_0_4;
            double R_0_2_0_4 = xpq * R_1_1_0_4 + 1 * R_1_0_0_4;
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+448];
            double R_1_1_1_3 = xpq * R_2_0_1_3;
            double R_0_2_1_3 = xpq * R_1_1_1_3 + 1 * R_1_0_1_3;
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+464];
            double R_1_1_2_2 = xpq * R_2_0_2_2;
            double R_0_2_2_2 = xpq * R_1_1_2_2 + 1 * R_1_0_2_2;
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+496];
            double R_2_1_0_3 = xpq * R_3_0_0_3;
            double R_1_2_0_3 = xpq * R_2_1_0_3 + 1 * R_2_0_0_3;
            double R_0_3_0_3 = xpq * R_1_2_0_3 + 2 * R_1_1_0_3;
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+512];
            double R_2_1_1_2 = xpq * R_3_0_1_2;
            double R_1_2_1_2 = xpq * R_2_1_1_2 + 1 * R_2_0_1_2;
            double R_0_3_1_2 = xpq * R_1_2_1_2 + 2 * R_1_1_1_2;
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+528];
            double R_3_1_0_2 = xpq * R_4_0_0_2;
            double R_2_2_0_2 = xpq * R_3_1_0_2 + 1 * R_3_0_0_2;
            double R_1_3_0_2 = xpq * R_2_2_0_2 + 2 * R_2_1_0_2;
            double R_0_4_0_2 = xpq * R_1_3_0_2 + 3 * R_1_2_0_2;
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+384] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_5 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_0_6 * dm_ij_cache[tx+48];
            double R_6_0_0_1 = zpq * gamma_inc[sq_id+7*256];
            double R_5_0_0_2 = zpq * R_6_0_0_1 + 1 * gamma_inc[sq_id+6*256];
            double R_4_0_0_3 = zpq * R_5_0_0_2 + 2 * R_5_0_0_1;
            double R_3_0_0_4 = zpq * R_4_0_0_3 + 3 * R_4_0_0_2;
            double R_2_0_0_5 = zpq * R_3_0_0_4 + 4 * R_3_0_0_3;
            double R_1_0_0_6 = zpq * R_2_0_0_5 + 5 * R_2_0_0_4;
            double R_0_0_0_7 = zpq * R_1_0_0_6 + 6 * R_1_0_0_5;
            vj_kl -= R_0_0_0_7 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+112];
            double R_0_0_1_6 = ypq * R_1_0_0_6;
            vj_kl -= R_0_0_1_6 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+160];
            double R_1_0_1_5 = ypq * R_2_0_0_5;
            double R_0_0_2_5 = ypq * R_1_0_1_5 + 1 * R_1_0_0_5;
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+192];
            double R_2_0_1_4 = ypq * R_3_0_0_4;
            double R_1_0_2_4 = ypq * R_2_0_1_4 + 1 * R_2_0_0_4;
            double R_0_0_3_4 = ypq * R_1_0_2_4 + 2 * R_1_0_1_4;
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+208];
            double R_3_0_1_3 = ypq * R_4_0_0_3;
            double R_2_0_2_3 = ypq * R_3_0_1_3 + 1 * R_3_0_0_3;
            double R_1_0_3_3 = ypq * R_2_0_2_3 + 2 * R_2_0_1_3;
            double R_0_0_4_3 = ypq * R_1_0_3_3 + 3 * R_1_0_2_3;
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+272];
            double R_0_1_0_6 = xpq * R_1_0_0_6;
            vj_kl -= R_0_1_0_6 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+320];
            double R_0_1_1_5 = xpq * R_1_0_1_5;
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+352];
            double R_0_1_2_4 = xpq * R_1_0_2_4;
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+368];
            double R_0_1_3_3 = xpq * R_1_0_3_3;
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+416];
            double R_1_1_0_5 = xpq * R_2_0_0_5;
            double R_0_2_0_5 = xpq * R_1_1_0_5 + 1 * R_1_0_0_5;
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+448];
            double R_1_1_1_4 = xpq * R_2_0_1_4;
            double R_0_2_1_4 = xpq * R_1_1_1_4 + 1 * R_1_0_1_4;
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+464];
            double R_1_1_2_3 = xpq * R_2_0_2_3;
            double R_0_2_2_3 = xpq * R_1_1_2_3 + 1 * R_1_0_2_3;
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+496];
            double R_2_1_0_4 = xpq * R_3_0_0_4;
            double R_1_2_0_4 = xpq * R_2_1_0_4 + 1 * R_2_0_0_4;
            double R_0_3_0_4 = xpq * R_1_2_0_4 + 2 * R_1_1_0_4;
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+512];
            double R_2_1_1_3 = xpq * R_3_0_1_3;
            double R_1_2_1_3 = xpq * R_2_1_1_3 + 1 * R_2_0_1_3;
            double R_0_3_1_3 = xpq * R_1_2_1_3 + 2 * R_1_1_1_3;
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+528];
            double R_3_1_0_3 = xpq * R_4_0_0_3;
            double R_2_2_0_3 = xpq * R_3_1_0_3 + 1 * R_3_0_0_3;
            double R_1_3_0_3 = xpq * R_2_2_0_3 + 2 * R_2_1_0_3;
            double R_0_4_0_3 = xpq * R_1_3_0_3 + 3 * R_1_2_0_3;
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+576] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_2_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+208];
            double R_4_0_1_0 = ypq * gamma_inc[sq_id+5*256];
            double R_3_0_2_0 = ypq * R_4_0_1_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_3_0 = ypq * R_3_0_2_0 + 2 * R_3_0_1_0;
            double R_1_0_4_0 = ypq * R_2_0_3_0 + 3 * R_2_0_2_0;
            double R_0_0_5_0 = ypq * R_1_0_4_0 + 4 * R_1_0_3_0;
            vj_kl -= R_0_0_5_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+368];
            double R_0_1_4_0 = xpq * R_1_0_4_0;
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+464];
            double R_1_1_3_0 = xpq * R_2_0_3_0;
            double R_0_2_3_0 = xpq * R_1_1_3_0 + 1 * R_1_0_3_0;
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+512];
            double R_2_1_2_0 = xpq * R_3_0_2_0;
            double R_1_2_2_0 = xpq * R_2_1_2_0 + 1 * R_2_0_2_0;
            double R_0_3_2_0 = xpq * R_1_2_2_0 + 2 * R_1_1_2_0;
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+528];
            double R_3_1_1_0 = xpq * R_4_0_1_0;
            double R_2_2_1_0 = xpq * R_3_1_1_0 + 1 * R_3_0_1_0;
            double R_1_3_1_0 = xpq * R_2_2_1_0 + 2 * R_2_1_1_0;
            double R_0_4_1_0 = xpq * R_1_3_1_0 + 3 * R_1_2_1_0;
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+768] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+208];
            double R_4_0_1_1 = ypq * R_5_0_0_1;
            double R_3_0_2_1 = ypq * R_4_0_1_1 + 1 * R_4_0_0_1;
            double R_2_0_3_1 = ypq * R_3_0_2_1 + 2 * R_3_0_1_1;
            double R_1_0_4_1 = ypq * R_2_0_3_1 + 3 * R_2_0_2_1;
            double R_0_0_5_1 = ypq * R_1_0_4_1 + 4 * R_1_0_3_1;
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+368];
            double R_0_1_4_1 = xpq * R_1_0_4_1;
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+464];
            double R_1_1_3_1 = xpq * R_2_0_3_1;
            double R_0_2_3_1 = xpq * R_1_1_3_1 + 1 * R_1_0_3_1;
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+512];
            double R_2_1_2_1 = xpq * R_3_0_2_1;
            double R_1_2_2_1 = xpq * R_2_1_2_1 + 1 * R_2_0_2_1;
            double R_0_3_2_1 = xpq * R_1_2_2_1 + 2 * R_1_1_2_1;
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+528];
            double R_3_1_1_1 = xpq * R_4_0_1_1;
            double R_2_2_1_1 = xpq * R_3_1_1_1 + 1 * R_3_0_1_1;
            double R_1_3_1_1 = xpq * R_2_2_1_1 + 2 * R_2_1_1_1;
            double R_0_4_1_1 = xpq * R_1_3_1_1 + 3 * R_1_2_1_1;
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+960] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_6 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+208];
            double R_4_0_1_2 = ypq * R_5_0_0_2;
            double R_3_0_2_2 = ypq * R_4_0_1_2 + 1 * R_4_0_0_2;
            double R_2_0_3_2 = ypq * R_3_0_2_2 + 2 * R_3_0_1_2;
            double R_1_0_4_2 = ypq * R_2_0_3_2 + 3 * R_2_0_2_2;
            double R_0_0_5_2 = ypq * R_1_0_4_2 + 4 * R_1_0_3_2;
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+368];
            double R_0_1_4_2 = xpq * R_1_0_4_2;
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+464];
            double R_1_1_3_2 = xpq * R_2_0_3_2;
            double R_0_2_3_2 = xpq * R_1_1_3_2 + 1 * R_1_0_3_2;
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+496];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+512];
            double R_2_1_2_2 = xpq * R_3_0_2_2;
            double R_1_2_2_2 = xpq * R_2_1_2_2 + 1 * R_2_0_2_2;
            double R_0_3_2_2 = xpq * R_1_2_2_2 + 2 * R_1_1_2_2;
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+528];
            double R_3_1_1_2 = xpq * R_4_0_1_2;
            double R_2_2_1_2 = xpq * R_3_1_1_2 + 1 * R_3_0_1_2;
            double R_1_3_1_2 = xpq * R_2_2_1_2 + 2 * R_2_1_1_2;
            double R_0_4_1_2 = xpq * R_1_3_1_2 + 3 * R_1_2_1_2;
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1152] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+208];
            double R_5_0_1_0 = ypq * gamma_inc[sq_id+6*256];
            double R_4_0_2_0 = ypq * R_5_0_1_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_3_0 = ypq * R_4_0_2_0 + 2 * R_4_0_1_0;
            double R_2_0_4_0 = ypq * R_3_0_3_0 + 3 * R_3_0_2_0;
            double R_1_0_5_0 = ypq * R_2_0_4_0 + 4 * R_2_0_3_0;
            double R_0_0_6_0 = ypq * R_1_0_5_0 + 5 * R_1_0_4_0;
            vj_kl += R_0_0_6_0 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+368];
            double R_0_1_5_0 = xpq * R_1_0_5_0;
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+464];
            double R_1_1_4_0 = xpq * R_2_0_4_0;
            double R_0_2_4_0 = xpq * R_1_1_4_0 + 1 * R_1_0_4_0;
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+496];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+512];
            double R_2_1_3_0 = xpq * R_3_0_3_0;
            double R_1_2_3_0 = xpq * R_2_1_3_0 + 1 * R_2_0_3_0;
            double R_0_3_3_0 = xpq * R_1_2_3_0 + 2 * R_1_1_3_0;
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+528];
            double R_3_1_2_0 = xpq * R_4_0_2_0;
            double R_2_2_2_0 = xpq * R_3_1_2_0 + 1 * R_3_0_2_0;
            double R_1_3_2_0 = xpq * R_2_2_2_0 + 2 * R_2_1_2_0;
            double R_0_4_2_0 = xpq * R_1_3_2_0 + 3 * R_1_2_2_0;
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1344] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+208];
            double R_5_0_1_1 = ypq * R_6_0_0_1;
            double R_4_0_2_1 = ypq * R_5_0_1_1 + 1 * R_5_0_0_1;
            double R_3_0_3_1 = ypq * R_4_0_2_1 + 2 * R_4_0_1_1;
            double R_2_0_4_1 = ypq * R_3_0_3_1 + 3 * R_3_0_2_1;
            double R_1_0_5_1 = ypq * R_2_0_4_1 + 4 * R_2_0_3_1;
            double R_0_0_6_1 = ypq * R_1_0_5_1 + 5 * R_1_0_4_1;
            vj_kl -= R_0_0_6_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+368];
            double R_0_1_5_1 = xpq * R_1_0_5_1;
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+464];
            double R_1_1_4_1 = xpq * R_2_0_4_1;
            double R_0_2_4_1 = xpq * R_1_1_4_1 + 1 * R_1_0_4_1;
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+512];
            double R_2_1_3_1 = xpq * R_3_0_3_1;
            double R_1_2_3_1 = xpq * R_2_1_3_1 + 1 * R_2_0_3_1;
            double R_0_3_3_1 = xpq * R_1_2_3_1 + 2 * R_1_1_3_1;
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+528];
            double R_3_1_2_1 = xpq * R_4_0_2_1;
            double R_2_2_2_1 = xpq * R_3_1_2_1 + 1 * R_3_0_2_1;
            double R_1_3_2_1 = xpq * R_2_2_2_1 + 2 * R_2_1_2_1;
            double R_0_4_2_1 = xpq * R_1_3_2_1 + 3 * R_1_2_2_1;
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1536] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_5_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_6_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_6_1 * dm_ij_cache[tx+208];
            double R_6_0_1_0 = ypq * gamma_inc[sq_id+7*256];
            double R_5_0_2_0 = ypq * R_6_0_1_0 + 1 * gamma_inc[sq_id+6*256];
            double R_4_0_3_0 = ypq * R_5_0_2_0 + 2 * R_5_0_1_0;
            double R_3_0_4_0 = ypq * R_4_0_3_0 + 3 * R_4_0_2_0;
            double R_2_0_5_0 = ypq * R_3_0_4_0 + 4 * R_3_0_3_0;
            double R_1_0_6_0 = ypq * R_2_0_5_0 + 5 * R_2_0_4_0;
            double R_0_0_7_0 = ypq * R_1_0_6_0 + 6 * R_1_0_5_0;
            vj_kl -= R_0_0_7_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+368];
            double R_0_1_6_0 = xpq * R_1_0_6_0;
            vj_kl -= R_0_1_6_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+464];
            double R_1_1_5_0 = xpq * R_2_0_5_0;
            double R_0_2_5_0 = xpq * R_1_1_5_0 + 1 * R_1_0_5_0;
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+512];
            double R_2_1_4_0 = xpq * R_3_0_4_0;
            double R_1_2_4_0 = xpq * R_2_1_4_0 + 1 * R_2_0_4_0;
            double R_0_3_4_0 = xpq * R_1_2_4_0 + 2 * R_1_1_4_0;
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+528];
            double R_3_1_3_0 = xpq * R_4_0_3_0;
            double R_2_2_3_0 = xpq * R_3_1_3_0 + 1 * R_3_0_3_0;
            double R_1_3_3_0 = xpq * R_2_2_3_0 + 2 * R_2_1_3_0;
            double R_0_4_3_0 = xpq * R_1_3_3_0 + 3 * R_1_2_3_0;
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1728] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_0_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+512];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+528];
            double R_4_1_0_0 = xpq * gamma_inc[sq_id+5*256];
            double R_3_2_0_0 = xpq * R_4_1_0_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_3_0_0 = xpq * R_3_2_0_0 + 2 * R_3_1_0_0;
            double R_1_4_0_0 = xpq * R_2_3_0_0 + 3 * R_2_2_0_0;
            double R_0_5_0_0 = xpq * R_1_4_0_0 + 4 * R_1_3_0_0;
            vj_kl -= R_0_5_0_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1920] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+288];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+384];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+400];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+416];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+432];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+448];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+464];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+480];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+512];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+528];
            double R_4_1_0_1 = xpq * R_5_0_0_1;
            double R_3_2_0_1 = xpq * R_4_1_0_1 + 1 * R_4_0_0_1;
            double R_2_3_0_1 = xpq * R_3_2_0_1 + 2 * R_3_1_0_1;
            double R_1_4_0_1 = xpq * R_2_3_0_1 + 3 * R_2_2_0_1;
            double R_0_5_0_1 = xpq * R_1_4_0_1 + 4 * R_1_3_0_1;
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2112] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_0_6 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+272];
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+288];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+304];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+384];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+400];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+416];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+432];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+464];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+480];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+496];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+512];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+528];
            double R_4_1_0_2 = xpq * R_5_0_0_2;
            double R_3_2_0_2 = xpq * R_4_1_0_2 + 1 * R_4_0_0_2;
            double R_2_3_0_2 = xpq * R_3_2_0_2 + 2 * R_3_1_0_2;
            double R_1_4_0_2 = xpq * R_2_3_0_2 + 3 * R_2_2_0_2;
            double R_0_5_0_2 = xpq * R_1_4_0_2 + 4 * R_1_3_0_2;
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2304] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+288];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+304];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+384];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+464];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+496];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+512];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+528];
            double R_4_1_1_0 = xpq * R_5_0_1_0;
            double R_3_2_1_0 = xpq * R_4_1_1_0 + 1 * R_4_0_1_0;
            double R_2_3_1_0 = xpq * R_3_2_1_0 + 2 * R_3_1_1_0;
            double R_1_4_1_0 = xpq * R_2_3_1_0 + 3 * R_2_2_1_0;
            double R_0_5_1_0 = xpq * R_1_4_1_0 + 4 * R_1_3_1_0;
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2496] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+288];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+384];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+400];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+416];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+432];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+448];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+464];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+512];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+528];
            double R_4_1_1_1 = xpq * R_5_0_1_1;
            double R_3_2_1_1 = xpq * R_4_1_1_1 + 1 * R_4_0_1_1;
            double R_2_3_1_1 = xpq * R_3_2_1_1 + 2 * R_3_1_1_1;
            double R_1_4_1_1 = xpq * R_2_3_1_1 + 3 * R_2_2_1_1;
            double R_0_5_1_1 = xpq * R_1_4_1_1 + 4 * R_1_3_1_1;
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2688] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_6_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+512];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+528];
            double R_4_1_2_0 = xpq * R_5_0_2_0;
            double R_3_2_2_0 = xpq * R_4_1_2_0 + 1 * R_4_0_2_0;
            double R_2_3_2_0 = xpq * R_3_2_2_0 + 2 * R_3_1_2_0;
            double R_1_4_2_0 = xpq * R_2_3_2_0 + 3 * R_2_2_2_0;
            double R_0_5_2_0 = xpq * R_1_4_2_0 + 4 * R_1_3_2_0;
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2880] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+224];
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+288];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+304];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+368];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+384];
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+464];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+496];
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+512];
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+528];
            double R_5_1_0_0 = xpq * gamma_inc[sq_id+6*256];
            double R_4_2_0_0 = xpq * R_5_1_0_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_3_0_0 = xpq * R_4_2_0_0 + 2 * R_4_1_0_0;
            double R_2_4_0_0 = xpq * R_3_3_0_0 + 3 * R_3_2_0_0;
            double R_1_5_0_0 = xpq * R_2_4_0_0 + 4 * R_2_3_0_0;
            double R_0_6_0_0 = xpq * R_1_5_0_0 + 5 * R_1_4_0_0;
            vj_kl += R_0_6_0_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3072] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+128];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+288];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+384];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+400];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+416];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+432];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+448];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+464];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+512];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+528];
            double R_5_1_0_1 = xpq * R_6_0_0_1;
            double R_4_2_0_1 = xpq * R_5_1_0_1 + 1 * R_5_0_0_1;
            double R_3_3_0_1 = xpq * R_4_2_0_1 + 2 * R_4_1_0_1;
            double R_2_4_0_1 = xpq * R_3_3_0_1 + 3 * R_3_2_0_1;
            double R_1_5_0_1 = xpq * R_2_4_0_1 + 4 * R_2_3_0_1;
            double R_0_6_0_1 = xpq * R_1_5_0_1 + 5 * R_1_4_0_1;
            vj_kl -= R_0_6_0_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3264] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+512];
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+528];
            double R_5_1_1_0 = xpq * R_6_0_1_0;
            double R_4_2_1_0 = xpq * R_5_1_1_0 + 1 * R_5_0_1_0;
            double R_3_3_1_0 = xpq * R_4_2_1_0 + 2 * R_4_1_1_0;
            double R_2_4_1_0 = xpq * R_3_3_1_0 + 3 * R_3_2_1_0;
            double R_1_5_1_0 = xpq * R_2_4_1_0 + 4 * R_2_3_1_0;
            double R_0_6_1_0 = xpq * R_1_5_1_0 + 5 * R_1_4_1_0;
            vj_kl -= R_0_6_1_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3456] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_5_0_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_6_0_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_6_0_1 * dm_ij_cache[tx+512];
            vj_kl -= R_0_6_1_0 * dm_ij_cache[tx+528];
            double R_6_1_0_0 = xpq * gamma_inc[sq_id+7*256];
            double R_5_2_0_0 = xpq * R_6_1_0_0 + 1 * gamma_inc[sq_id+6*256];
            double R_4_3_0_0 = xpq * R_5_2_0_0 + 2 * R_5_1_0_0;
            double R_3_4_0_0 = xpq * R_4_3_0_0 + 3 * R_4_2_0_0;
            double R_2_5_0_0 = xpq * R_3_4_0_0 + 4 * R_3_3_0_0;
            double R_1_6_0_0 = xpq * R_2_5_0_0 + 5 * R_2_4_0_0;
            double R_0_7_0_0 = xpq * R_1_6_0_0 + 6 * R_1_5_0_0;
            vj_kl -= R_0_7_0_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3648] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_1 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_0 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_1_0_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_2 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_0_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_0_6 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_5 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_0_6 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_0_7 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_0_1_6 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_0_6 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+64] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_2_0 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+80] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+96] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+112] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_1_6 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+128] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_0_5_0 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+144] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+160] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+176] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_0_6_0 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+192] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_0_6_1 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+208] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_5_0 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_6_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_0_6_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_0_7_0 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_1_6_0 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+224] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_2_0_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+240] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+256] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+272] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_1_0_6 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+288] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+304] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+320] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+336] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+352] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+368] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_6_0 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+384] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_0_0 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+400] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+416] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+432] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+448] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+464] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+480] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_6_0_0 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+496] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_6_0_1 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+512] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_6_1_0 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+528] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+960];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+1728];
            vj_ij -= R_0_5_0_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+2688];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+2880];
            vj_ij += R_0_6_0_0 * dm_kl_cache[sq_kl+3072];
            vj_ij -= R_0_6_0_1 * dm_kl_cache[sq_kl+3264];
            vj_ij -= R_0_6_1_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_7_0_0 * dm_kl_cache[sq_kl+3648];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+544] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 35; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 240; n += 16) {
        int i = n / 12;
        int tile = n % 12;
        int task_kl = blockIdx.y * 192 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*192]);
        }
    }
}

// TILEX=25, TILEY=7,
__global__
void md_j_4_4(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 400;
    int task_kl0 = blockIdx.y * 112;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 2304;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 448;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 560;
    double *dm_ij_cache = vj_kl_cache + 3920;
    double *dm_kl_cache = dm_ij_cache + 560;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 512; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 3920; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 112; n += 256) {
        int task_kl = blockIdx.y * 112 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+112] = ykl;
            Rq_cache[n+224] = zkl;
            Rq_cache[n+336] = akl;
        }
    }

    for (int n = tx; n < 245; n += 16) {
        int i = n / 7;
        int tile = n % 7;
        int task_kl = blockIdx.y * 112 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*112] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 25; ++batch_ij) {
        int task_ij0 = blockIdx.x * 400 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 35; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 7; ++batch_kl) {
            int task_kl0 = blockIdx.y * 112 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+112];
            double zkl = Rq_cache[sq_kl+224];
            double akl = Rq_cache[sq_kl+336];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 8);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 8; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+32];
            double R_2_0_0_1 = zpq * gamma_inc[sq_id+3*256];
            double R_1_0_0_2 = zpq * R_2_0_0_1 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_0_3 = zpq * R_1_0_0_2 + 2 * R_1_0_0_1;
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+48];
            double R_3_0_0_1 = zpq * gamma_inc[sq_id+4*256];
            double R_2_0_0_2 = zpq * R_3_0_0_1 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_0_3 = zpq * R_2_0_0_2 + 2 * R_2_0_0_1;
            double R_0_0_0_4 = zpq * R_1_0_0_3 + 3 * R_1_0_0_2;
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+64];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+80];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+96];
            double R_0_0_1_2 = ypq * R_1_0_0_2;
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+112];
            double R_0_0_1_3 = ypq * R_1_0_0_3;
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+128];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+144];
            double R_1_0_1_1 = ypq * R_2_0_0_1;
            double R_0_0_2_1 = ypq * R_1_0_1_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+160];
            double R_1_0_1_2 = ypq * R_2_0_0_2;
            double R_0_0_2_2 = ypq * R_1_0_1_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+176];
            double R_2_0_1_0 = ypq * gamma_inc[sq_id+3*256];
            double R_1_0_2_0 = ypq * R_2_0_1_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_3_0 = ypq * R_1_0_2_0 + 2 * R_1_0_1_0;
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+192];
            double R_2_0_1_1 = ypq * R_3_0_0_1;
            double R_1_0_2_1 = ypq * R_2_0_1_1 + 1 * R_2_0_0_1;
            double R_0_0_3_1 = ypq * R_1_0_2_1 + 2 * R_1_0_1_1;
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+208];
            double R_3_0_1_0 = ypq * gamma_inc[sq_id+4*256];
            double R_2_0_2_0 = ypq * R_3_0_1_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_3_0 = ypq * R_2_0_2_0 + 2 * R_2_0_1_0;
            double R_0_0_4_0 = ypq * R_1_0_3_0 + 3 * R_1_0_2_0;
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+224];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+240];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+256];
            double R_0_1_0_2 = xpq * R_1_0_0_2;
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+272];
            double R_0_1_0_3 = xpq * R_1_0_0_3;
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+288];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+304];
            double R_0_1_1_1 = xpq * R_1_0_1_1;
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+320];
            double R_0_1_1_2 = xpq * R_1_0_1_2;
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+336];
            double R_0_1_2_0 = xpq * R_1_0_2_0;
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+352];
            double R_0_1_2_1 = xpq * R_1_0_2_1;
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+368];
            double R_0_1_3_0 = xpq * R_1_0_3_0;
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+384];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+400];
            double R_1_1_0_1 = xpq * R_2_0_0_1;
            double R_0_2_0_1 = xpq * R_1_1_0_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+416];
            double R_1_1_0_2 = xpq * R_2_0_0_2;
            double R_0_2_0_2 = xpq * R_1_1_0_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+432];
            double R_1_1_1_0 = xpq * R_2_0_1_0;
            double R_0_2_1_0 = xpq * R_1_1_1_0 + 1 * R_1_0_1_0;
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+448];
            double R_1_1_1_1 = xpq * R_2_0_1_1;
            double R_0_2_1_1 = xpq * R_1_1_1_1 + 1 * R_1_0_1_1;
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+464];
            double R_1_1_2_0 = xpq * R_2_0_2_0;
            double R_0_2_2_0 = xpq * R_1_1_2_0 + 1 * R_1_0_2_0;
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+480];
            double R_2_1_0_0 = xpq * gamma_inc[sq_id+3*256];
            double R_1_2_0_0 = xpq * R_2_1_0_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_3_0_0 = xpq * R_1_2_0_0 + 2 * R_1_1_0_0;
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+496];
            double R_2_1_0_1 = xpq * R_3_0_0_1;
            double R_1_2_0_1 = xpq * R_2_1_0_1 + 1 * R_2_0_0_1;
            double R_0_3_0_1 = xpq * R_1_2_0_1 + 2 * R_1_1_0_1;
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+512];
            double R_2_1_1_0 = xpq * R_3_0_1_0;
            double R_1_2_1_0 = xpq * R_2_1_1_0 + 1 * R_2_0_1_0;
            double R_0_3_1_0 = xpq * R_1_2_1_0 + 2 * R_1_1_1_0;
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+528];
            double R_3_1_0_0 = xpq * gamma_inc[sq_id+4*256];
            double R_2_2_0_0 = xpq * R_3_1_0_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_3_0_0 = xpq * R_2_2_0_0 + 2 * R_2_1_0_0;
            double R_0_4_0_0 = xpq * R_1_3_0_0 + 3 * R_1_2_0_0;
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+48];
            double R_4_0_0_1 = zpq * gamma_inc[sq_id+5*256];
            double R_3_0_0_2 = zpq * R_4_0_0_1 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_0_3 = zpq * R_3_0_0_2 + 2 * R_3_0_0_1;
            double R_1_0_0_4 = zpq * R_2_0_0_3 + 3 * R_2_0_0_2;
            double R_0_0_0_5 = zpq * R_1_0_0_4 + 4 * R_1_0_0_3;
            vj_kl -= R_0_0_0_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+112];
            double R_0_0_1_4 = ypq * R_1_0_0_4;
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+160];
            double R_1_0_1_3 = ypq * R_2_0_0_3;
            double R_0_0_2_3 = ypq * R_1_0_1_3 + 1 * R_1_0_0_3;
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+192];
            double R_2_0_1_2 = ypq * R_3_0_0_2;
            double R_1_0_2_2 = ypq * R_2_0_1_2 + 1 * R_2_0_0_2;
            double R_0_0_3_2 = ypq * R_1_0_2_2 + 2 * R_1_0_1_2;
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+208];
            double R_3_0_1_1 = ypq * R_4_0_0_1;
            double R_2_0_2_1 = ypq * R_3_0_1_1 + 1 * R_3_0_0_1;
            double R_1_0_3_1 = ypq * R_2_0_2_1 + 2 * R_2_0_1_1;
            double R_0_0_4_1 = ypq * R_1_0_3_1 + 3 * R_1_0_2_1;
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+272];
            double R_0_1_0_4 = xpq * R_1_0_0_4;
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+320];
            double R_0_1_1_3 = xpq * R_1_0_1_3;
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+352];
            double R_0_1_2_2 = xpq * R_1_0_2_2;
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+368];
            double R_0_1_3_1 = xpq * R_1_0_3_1;
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+416];
            double R_1_1_0_3 = xpq * R_2_0_0_3;
            double R_0_2_0_3 = xpq * R_1_1_0_3 + 1 * R_1_0_0_3;
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+448];
            double R_1_1_1_2 = xpq * R_2_0_1_2;
            double R_0_2_1_2 = xpq * R_1_1_1_2 + 1 * R_1_0_1_2;
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+464];
            double R_1_1_2_1 = xpq * R_2_0_2_1;
            double R_0_2_2_1 = xpq * R_1_1_2_1 + 1 * R_1_0_2_1;
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+496];
            double R_2_1_0_2 = xpq * R_3_0_0_2;
            double R_1_2_0_2 = xpq * R_2_1_0_2 + 1 * R_2_0_0_2;
            double R_0_3_0_2 = xpq * R_1_2_0_2 + 2 * R_1_1_0_2;
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+512];
            double R_2_1_1_1 = xpq * R_3_0_1_1;
            double R_1_2_1_1 = xpq * R_2_1_1_1 + 1 * R_2_0_1_1;
            double R_0_3_1_1 = xpq * R_1_2_1_1 + 2 * R_1_1_1_1;
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+528];
            double R_3_1_0_1 = xpq * R_4_0_0_1;
            double R_2_2_0_1 = xpq * R_3_1_0_1 + 1 * R_3_0_0_1;
            double R_1_3_0_1 = xpq * R_2_2_0_1 + 2 * R_2_1_0_1;
            double R_0_4_0_1 = xpq * R_1_3_0_1 + 3 * R_1_2_0_1;
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+112] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+48];
            double R_5_0_0_1 = zpq * gamma_inc[sq_id+6*256];
            double R_4_0_0_2 = zpq * R_5_0_0_1 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_0_3 = zpq * R_4_0_0_2 + 2 * R_4_0_0_1;
            double R_2_0_0_4 = zpq * R_3_0_0_3 + 3 * R_3_0_0_2;
            double R_1_0_0_5 = zpq * R_2_0_0_4 + 4 * R_2_0_0_3;
            double R_0_0_0_6 = zpq * R_1_0_0_5 + 5 * R_1_0_0_4;
            vj_kl += R_0_0_0_6 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+112];
            double R_0_0_1_5 = ypq * R_1_0_0_5;
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+160];
            double R_1_0_1_4 = ypq * R_2_0_0_4;
            double R_0_0_2_4 = ypq * R_1_0_1_4 + 1 * R_1_0_0_4;
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+192];
            double R_2_0_1_3 = ypq * R_3_0_0_3;
            double R_1_0_2_3 = ypq * R_2_0_1_3 + 1 * R_2_0_0_3;
            double R_0_0_3_3 = ypq * R_1_0_2_3 + 2 * R_1_0_1_3;
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+208];
            double R_3_0_1_2 = ypq * R_4_0_0_2;
            double R_2_0_2_2 = ypq * R_3_0_1_2 + 1 * R_3_0_0_2;
            double R_1_0_3_2 = ypq * R_2_0_2_2 + 2 * R_2_0_1_2;
            double R_0_0_4_2 = ypq * R_1_0_3_2 + 3 * R_1_0_2_2;
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+272];
            double R_0_1_0_5 = xpq * R_1_0_0_5;
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+320];
            double R_0_1_1_4 = xpq * R_1_0_1_4;
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+352];
            double R_0_1_2_3 = xpq * R_1_0_2_3;
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+368];
            double R_0_1_3_2 = xpq * R_1_0_3_2;
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+416];
            double R_1_1_0_4 = xpq * R_2_0_0_4;
            double R_0_2_0_4 = xpq * R_1_1_0_4 + 1 * R_1_0_0_4;
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+448];
            double R_1_1_1_3 = xpq * R_2_0_1_3;
            double R_0_2_1_3 = xpq * R_1_1_1_3 + 1 * R_1_0_1_3;
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+464];
            double R_1_1_2_2 = xpq * R_2_0_2_2;
            double R_0_2_2_2 = xpq * R_1_1_2_2 + 1 * R_1_0_2_2;
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+496];
            double R_2_1_0_3 = xpq * R_3_0_0_3;
            double R_1_2_0_3 = xpq * R_2_1_0_3 + 1 * R_2_0_0_3;
            double R_0_3_0_3 = xpq * R_1_2_0_3 + 2 * R_1_1_0_3;
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+512];
            double R_2_1_1_2 = xpq * R_3_0_1_2;
            double R_1_2_1_2 = xpq * R_2_1_1_2 + 1 * R_2_0_1_2;
            double R_0_3_1_2 = xpq * R_1_2_1_2 + 2 * R_1_1_1_2;
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+528];
            double R_3_1_0_2 = xpq * R_4_0_0_2;
            double R_2_2_0_2 = xpq * R_3_1_0_2 + 1 * R_3_0_0_2;
            double R_1_3_0_2 = xpq * R_2_2_0_2 + 2 * R_2_1_0_2;
            double R_0_4_0_2 = xpq * R_1_3_0_2 + 3 * R_1_2_0_2;
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+224] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_5 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_0_6 * dm_ij_cache[tx+48];
            double R_6_0_0_1 = zpq * gamma_inc[sq_id+7*256];
            double R_5_0_0_2 = zpq * R_6_0_0_1 + 1 * gamma_inc[sq_id+6*256];
            double R_4_0_0_3 = zpq * R_5_0_0_2 + 2 * R_5_0_0_1;
            double R_3_0_0_4 = zpq * R_4_0_0_3 + 3 * R_4_0_0_2;
            double R_2_0_0_5 = zpq * R_3_0_0_4 + 4 * R_3_0_0_3;
            double R_1_0_0_6 = zpq * R_2_0_0_5 + 5 * R_2_0_0_4;
            double R_0_0_0_7 = zpq * R_1_0_0_6 + 6 * R_1_0_0_5;
            vj_kl -= R_0_0_0_7 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+112];
            double R_0_0_1_6 = ypq * R_1_0_0_6;
            vj_kl -= R_0_0_1_6 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+160];
            double R_1_0_1_5 = ypq * R_2_0_0_5;
            double R_0_0_2_5 = ypq * R_1_0_1_5 + 1 * R_1_0_0_5;
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+192];
            double R_2_0_1_4 = ypq * R_3_0_0_4;
            double R_1_0_2_4 = ypq * R_2_0_1_4 + 1 * R_2_0_0_4;
            double R_0_0_3_4 = ypq * R_1_0_2_4 + 2 * R_1_0_1_4;
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+208];
            double R_3_0_1_3 = ypq * R_4_0_0_3;
            double R_2_0_2_3 = ypq * R_3_0_1_3 + 1 * R_3_0_0_3;
            double R_1_0_3_3 = ypq * R_2_0_2_3 + 2 * R_2_0_1_3;
            double R_0_0_4_3 = ypq * R_1_0_3_3 + 3 * R_1_0_2_3;
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+272];
            double R_0_1_0_6 = xpq * R_1_0_0_6;
            vj_kl -= R_0_1_0_6 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+320];
            double R_0_1_1_5 = xpq * R_1_0_1_5;
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+352];
            double R_0_1_2_4 = xpq * R_1_0_2_4;
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+368];
            double R_0_1_3_3 = xpq * R_1_0_3_3;
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+416];
            double R_1_1_0_5 = xpq * R_2_0_0_5;
            double R_0_2_0_5 = xpq * R_1_1_0_5 + 1 * R_1_0_0_5;
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+448];
            double R_1_1_1_4 = xpq * R_2_0_1_4;
            double R_0_2_1_4 = xpq * R_1_1_1_4 + 1 * R_1_0_1_4;
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+464];
            double R_1_1_2_3 = xpq * R_2_0_2_3;
            double R_0_2_2_3 = xpq * R_1_1_2_3 + 1 * R_1_0_2_3;
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+496];
            double R_2_1_0_4 = xpq * R_3_0_0_4;
            double R_1_2_0_4 = xpq * R_2_1_0_4 + 1 * R_2_0_0_4;
            double R_0_3_0_4 = xpq * R_1_2_0_4 + 2 * R_1_1_0_4;
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+512];
            double R_2_1_1_3 = xpq * R_3_0_1_3;
            double R_1_2_1_3 = xpq * R_2_1_1_3 + 1 * R_2_0_1_3;
            double R_0_3_1_3 = xpq * R_1_2_1_3 + 2 * R_1_1_1_3;
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+528];
            double R_3_1_0_3 = xpq * R_4_0_0_3;
            double R_2_2_0_3 = xpq * R_3_1_0_3 + 1 * R_3_0_0_3;
            double R_1_3_0_3 = xpq * R_2_2_0_3 + 2 * R_2_1_0_3;
            double R_0_4_0_3 = xpq * R_1_3_0_3 + 3 * R_1_2_0_3;
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+336] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_0_6 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_0_7 * dm_ij_cache[tx+48];
            double R_7_0_0_1 = zpq * gamma_inc[sq_id+8*256];
            double R_6_0_0_2 = zpq * R_7_0_0_1 + 1 * gamma_inc[sq_id+7*256];
            double R_5_0_0_3 = zpq * R_6_0_0_2 + 2 * R_6_0_0_1;
            double R_4_0_0_4 = zpq * R_5_0_0_3 + 3 * R_5_0_0_2;
            double R_3_0_0_5 = zpq * R_4_0_0_4 + 4 * R_4_0_0_3;
            double R_2_0_0_6 = zpq * R_3_0_0_5 + 5 * R_3_0_0_4;
            double R_1_0_0_7 = zpq * R_2_0_0_6 + 6 * R_2_0_0_5;
            double R_0_0_0_8 = zpq * R_1_0_0_7 + 7 * R_1_0_0_6;
            vj_kl += R_0_0_0_8 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_1_6 * dm_ij_cache[tx+112];
            double R_0_0_1_7 = ypq * R_1_0_0_7;
            vj_kl += R_0_0_1_7 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+160];
            double R_1_0_1_6 = ypq * R_2_0_0_6;
            double R_0_0_2_6 = ypq * R_1_0_1_6 + 1 * R_1_0_0_6;
            vj_kl += R_0_0_2_6 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+192];
            double R_2_0_1_5 = ypq * R_3_0_0_5;
            double R_1_0_2_5 = ypq * R_2_0_1_5 + 1 * R_2_0_0_5;
            double R_0_0_3_5 = ypq * R_1_0_2_5 + 2 * R_1_0_1_5;
            vj_kl += R_0_0_3_5 * dm_ij_cache[tx+208];
            double R_3_0_1_4 = ypq * R_4_0_0_4;
            double R_2_0_2_4 = ypq * R_3_0_1_4 + 1 * R_3_0_0_4;
            double R_1_0_3_4 = ypq * R_2_0_2_4 + 2 * R_2_0_1_4;
            double R_0_0_4_4 = ypq * R_1_0_3_4 + 3 * R_1_0_2_4;
            vj_kl += R_0_0_4_4 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_0_6 * dm_ij_cache[tx+272];
            double R_0_1_0_7 = xpq * R_1_0_0_7;
            vj_kl += R_0_1_0_7 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+320];
            double R_0_1_1_6 = xpq * R_1_0_1_6;
            vj_kl += R_0_1_1_6 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+352];
            double R_0_1_2_5 = xpq * R_1_0_2_5;
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+368];
            double R_0_1_3_4 = xpq * R_1_0_3_4;
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+416];
            double R_1_1_0_6 = xpq * R_2_0_0_6;
            double R_0_2_0_6 = xpq * R_1_1_0_6 + 1 * R_1_0_0_6;
            vj_kl += R_0_2_0_6 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+448];
            double R_1_1_1_5 = xpq * R_2_0_1_5;
            double R_0_2_1_5 = xpq * R_1_1_1_5 + 1 * R_1_0_1_5;
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+464];
            double R_1_1_2_4 = xpq * R_2_0_2_4;
            double R_0_2_2_4 = xpq * R_1_1_2_4 + 1 * R_1_0_2_4;
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+496];
            double R_2_1_0_5 = xpq * R_3_0_0_5;
            double R_1_2_0_5 = xpq * R_2_1_0_5 + 1 * R_2_0_0_5;
            double R_0_3_0_5 = xpq * R_1_2_0_5 + 2 * R_1_1_0_5;
            vj_kl += R_0_3_0_5 * dm_ij_cache[tx+512];
            double R_2_1_1_4 = xpq * R_3_0_1_4;
            double R_1_2_1_4 = xpq * R_2_1_1_4 + 1 * R_2_0_1_4;
            double R_0_3_1_4 = xpq * R_1_2_1_4 + 2 * R_1_1_1_4;
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+528];
            double R_3_1_0_4 = xpq * R_4_0_0_4;
            double R_2_2_0_4 = xpq * R_3_1_0_4 + 1 * R_3_0_0_4;
            double R_1_3_0_4 = xpq * R_2_2_0_4 + 2 * R_2_1_0_4;
            double R_0_4_0_4 = xpq * R_1_3_0_4 + 3 * R_1_2_0_4;
            vj_kl += R_0_4_0_4 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+448] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_2_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+208];
            double R_4_0_1_0 = ypq * gamma_inc[sq_id+5*256];
            double R_3_0_2_0 = ypq * R_4_0_1_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_3_0 = ypq * R_3_0_2_0 + 2 * R_3_0_1_0;
            double R_1_0_4_0 = ypq * R_2_0_3_0 + 3 * R_2_0_2_0;
            double R_0_0_5_0 = ypq * R_1_0_4_0 + 4 * R_1_0_3_0;
            vj_kl -= R_0_0_5_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+368];
            double R_0_1_4_0 = xpq * R_1_0_4_0;
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+464];
            double R_1_1_3_0 = xpq * R_2_0_3_0;
            double R_0_2_3_0 = xpq * R_1_1_3_0 + 1 * R_1_0_3_0;
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+512];
            double R_2_1_2_0 = xpq * R_3_0_2_0;
            double R_1_2_2_0 = xpq * R_2_1_2_0 + 1 * R_2_0_2_0;
            double R_0_3_2_0 = xpq * R_1_2_2_0 + 2 * R_1_1_2_0;
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+528];
            double R_3_1_1_0 = xpq * R_4_0_1_0;
            double R_2_2_1_0 = xpq * R_3_1_1_0 + 1 * R_3_0_1_0;
            double R_1_3_1_0 = xpq * R_2_2_1_0 + 2 * R_2_1_1_0;
            double R_0_4_1_0 = xpq * R_1_3_1_0 + 3 * R_1_2_1_0;
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+560] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+208];
            double R_4_0_1_1 = ypq * R_5_0_0_1;
            double R_3_0_2_1 = ypq * R_4_0_1_1 + 1 * R_4_0_0_1;
            double R_2_0_3_1 = ypq * R_3_0_2_1 + 2 * R_3_0_1_1;
            double R_1_0_4_1 = ypq * R_2_0_3_1 + 3 * R_2_0_2_1;
            double R_0_0_5_1 = ypq * R_1_0_4_1 + 4 * R_1_0_3_1;
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+368];
            double R_0_1_4_1 = xpq * R_1_0_4_1;
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+464];
            double R_1_1_3_1 = xpq * R_2_0_3_1;
            double R_0_2_3_1 = xpq * R_1_1_3_1 + 1 * R_1_0_3_1;
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+512];
            double R_2_1_2_1 = xpq * R_3_0_2_1;
            double R_1_2_2_1 = xpq * R_2_1_2_1 + 1 * R_2_0_2_1;
            double R_0_3_2_1 = xpq * R_1_2_2_1 + 2 * R_1_1_2_1;
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+528];
            double R_3_1_1_1 = xpq * R_4_0_1_1;
            double R_2_2_1_1 = xpq * R_3_1_1_1 + 1 * R_3_0_1_1;
            double R_1_3_1_1 = xpq * R_2_2_1_1 + 2 * R_2_1_1_1;
            double R_0_4_1_1 = xpq * R_1_3_1_1 + 3 * R_1_2_1_1;
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+672] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_6 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+208];
            double R_4_0_1_2 = ypq * R_5_0_0_2;
            double R_3_0_2_2 = ypq * R_4_0_1_2 + 1 * R_4_0_0_2;
            double R_2_0_3_2 = ypq * R_3_0_2_2 + 2 * R_3_0_1_2;
            double R_1_0_4_2 = ypq * R_2_0_3_2 + 3 * R_2_0_2_2;
            double R_0_0_5_2 = ypq * R_1_0_4_2 + 4 * R_1_0_3_2;
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+368];
            double R_0_1_4_2 = xpq * R_1_0_4_2;
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+464];
            double R_1_1_3_2 = xpq * R_2_0_3_2;
            double R_0_2_3_2 = xpq * R_1_1_3_2 + 1 * R_1_0_3_2;
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+496];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+512];
            double R_2_1_2_2 = xpq * R_3_0_2_2;
            double R_1_2_2_2 = xpq * R_2_1_2_2 + 1 * R_2_0_2_2;
            double R_0_3_2_2 = xpq * R_1_2_2_2 + 2 * R_1_1_2_2;
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+528];
            double R_3_1_1_2 = xpq * R_4_0_1_2;
            double R_2_2_1_2 = xpq * R_3_1_1_2 + 1 * R_3_0_1_2;
            double R_1_3_1_2 = xpq * R_2_2_1_2 + 2 * R_2_1_1_2;
            double R_0_4_1_2 = xpq * R_1_3_1_2 + 3 * R_1_2_1_2;
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+784] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_1_6 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_1_7 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_2_6 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_3_5 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_4_4 * dm_ij_cache[tx+208];
            double R_4_0_1_3 = ypq * R_5_0_0_3;
            double R_3_0_2_3 = ypq * R_4_0_1_3 + 1 * R_4_0_0_3;
            double R_2_0_3_3 = ypq * R_3_0_2_3 + 2 * R_3_0_1_3;
            double R_1_0_4_3 = ypq * R_2_0_3_3 + 3 * R_2_0_2_3;
            double R_0_0_5_3 = ypq * R_1_0_4_3 + 4 * R_1_0_3_3;
            vj_kl += R_0_0_5_3 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_1_6 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+368];
            double R_0_1_4_3 = xpq * R_1_0_4_3;
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+464];
            double R_1_1_3_3 = xpq * R_2_0_3_3;
            double R_0_2_3_3 = xpq * R_1_1_3_3 + 1 * R_1_0_3_3;
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+496];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+512];
            double R_2_1_2_3 = xpq * R_3_0_2_3;
            double R_1_2_2_3 = xpq * R_2_1_2_3 + 1 * R_2_0_2_3;
            double R_0_3_2_3 = xpq * R_1_2_2_3 + 2 * R_1_1_2_3;
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+528];
            double R_3_1_1_3 = xpq * R_4_0_1_3;
            double R_2_2_1_3 = xpq * R_3_1_1_3 + 1 * R_3_0_1_3;
            double R_1_3_1_3 = xpq * R_2_2_1_3 + 2 * R_2_1_1_3;
            double R_0_4_1_3 = xpq * R_1_3_1_3 + 3 * R_1_2_1_3;
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+896] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+208];
            double R_5_0_1_0 = ypq * gamma_inc[sq_id+6*256];
            double R_4_0_2_0 = ypq * R_5_0_1_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_3_0 = ypq * R_4_0_2_0 + 2 * R_4_0_1_0;
            double R_2_0_4_0 = ypq * R_3_0_3_0 + 3 * R_3_0_2_0;
            double R_1_0_5_0 = ypq * R_2_0_4_0 + 4 * R_2_0_3_0;
            double R_0_0_6_0 = ypq * R_1_0_5_0 + 5 * R_1_0_4_0;
            vj_kl += R_0_0_6_0 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+368];
            double R_0_1_5_0 = xpq * R_1_0_5_0;
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+464];
            double R_1_1_4_0 = xpq * R_2_0_4_0;
            double R_0_2_4_0 = xpq * R_1_1_4_0 + 1 * R_1_0_4_0;
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+496];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+512];
            double R_2_1_3_0 = xpq * R_3_0_3_0;
            double R_1_2_3_0 = xpq * R_2_1_3_0 + 1 * R_2_0_3_0;
            double R_0_3_3_0 = xpq * R_1_2_3_0 + 2 * R_1_1_3_0;
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+528];
            double R_3_1_2_0 = xpq * R_4_0_2_0;
            double R_2_2_2_0 = xpq * R_3_1_2_0 + 1 * R_3_0_2_0;
            double R_1_3_2_0 = xpq * R_2_2_2_0 + 2 * R_2_1_2_0;
            double R_0_4_2_0 = xpq * R_1_3_2_0 + 3 * R_1_2_2_0;
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1008] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+208];
            double R_5_0_1_1 = ypq * R_6_0_0_1;
            double R_4_0_2_1 = ypq * R_5_0_1_1 + 1 * R_5_0_0_1;
            double R_3_0_3_1 = ypq * R_4_0_2_1 + 2 * R_4_0_1_1;
            double R_2_0_4_1 = ypq * R_3_0_3_1 + 3 * R_3_0_2_1;
            double R_1_0_5_1 = ypq * R_2_0_4_1 + 4 * R_2_0_3_1;
            double R_0_0_6_1 = ypq * R_1_0_5_1 + 5 * R_1_0_4_1;
            vj_kl -= R_0_0_6_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+368];
            double R_0_1_5_1 = xpq * R_1_0_5_1;
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+464];
            double R_1_1_4_1 = xpq * R_2_0_4_1;
            double R_0_2_4_1 = xpq * R_1_1_4_1 + 1 * R_1_0_4_1;
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+512];
            double R_2_1_3_1 = xpq * R_3_0_3_1;
            double R_1_2_3_1 = xpq * R_2_1_3_1 + 1 * R_2_0_3_1;
            double R_0_3_3_1 = xpq * R_1_2_3_1 + 2 * R_1_1_3_1;
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+528];
            double R_3_1_2_1 = xpq * R_4_0_2_1;
            double R_2_2_2_1 = xpq * R_3_1_2_1 + 1 * R_3_0_2_1;
            double R_1_3_2_1 = xpq * R_2_2_2_1 + 2 * R_2_1_2_1;
            double R_0_4_2_1 = xpq * R_1_3_2_1 + 3 * R_1_2_2_1;
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1120] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_2_6 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_3_5 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_4_4 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_5_3 * dm_ij_cache[tx+208];
            double R_5_0_1_2 = ypq * R_6_0_0_2;
            double R_4_0_2_2 = ypq * R_5_0_1_2 + 1 * R_5_0_0_2;
            double R_3_0_3_2 = ypq * R_4_0_2_2 + 2 * R_4_0_1_2;
            double R_2_0_4_2 = ypq * R_3_0_3_2 + 3 * R_3_0_2_2;
            double R_1_0_5_2 = ypq * R_2_0_4_2 + 4 * R_2_0_3_2;
            double R_0_0_6_2 = ypq * R_1_0_5_2 + 5 * R_1_0_4_2;
            vj_kl += R_0_0_6_2 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+368];
            double R_0_1_5_2 = xpq * R_1_0_5_2;
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+464];
            double R_1_1_4_2 = xpq * R_2_0_4_2;
            double R_0_2_4_2 = xpq * R_1_1_4_2 + 1 * R_1_0_4_2;
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+496];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+512];
            double R_2_1_3_2 = xpq * R_3_0_3_2;
            double R_1_2_3_2 = xpq * R_2_1_3_2 + 1 * R_2_0_3_2;
            double R_0_3_3_2 = xpq * R_1_2_3_2 + 2 * R_1_1_3_2;
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+528];
            double R_3_1_2_2 = xpq * R_4_0_2_2;
            double R_2_2_2_2 = xpq * R_3_1_2_2 + 1 * R_3_0_2_2;
            double R_1_3_2_2 = xpq * R_2_2_2_2 + 2 * R_2_1_2_2;
            double R_0_4_2_2 = xpq * R_1_3_2_2 + 3 * R_1_2_2_2;
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1232] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_5_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_6_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_6_1 * dm_ij_cache[tx+208];
            double R_6_0_1_0 = ypq * gamma_inc[sq_id+7*256];
            double R_5_0_2_0 = ypq * R_6_0_1_0 + 1 * gamma_inc[sq_id+6*256];
            double R_4_0_3_0 = ypq * R_5_0_2_0 + 2 * R_5_0_1_0;
            double R_3_0_4_0 = ypq * R_4_0_3_0 + 3 * R_4_0_2_0;
            double R_2_0_5_0 = ypq * R_3_0_4_0 + 4 * R_3_0_3_0;
            double R_1_0_6_0 = ypq * R_2_0_5_0 + 5 * R_2_0_4_0;
            double R_0_0_7_0 = ypq * R_1_0_6_0 + 6 * R_1_0_5_0;
            vj_kl -= R_0_0_7_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+368];
            double R_0_1_6_0 = xpq * R_1_0_6_0;
            vj_kl -= R_0_1_6_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+464];
            double R_1_1_5_0 = xpq * R_2_0_5_0;
            double R_0_2_5_0 = xpq * R_1_1_5_0 + 1 * R_1_0_5_0;
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+512];
            double R_2_1_4_0 = xpq * R_3_0_4_0;
            double R_1_2_4_0 = xpq * R_2_1_4_0 + 1 * R_2_0_4_0;
            double R_0_3_4_0 = xpq * R_1_2_4_0 + 2 * R_1_1_4_0;
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+528];
            double R_3_1_3_0 = xpq * R_4_0_3_0;
            double R_2_2_3_0 = xpq * R_3_1_3_0 + 1 * R_3_0_3_0;
            double R_1_3_3_0 = xpq * R_2_2_3_0 + 2 * R_2_1_3_0;
            double R_0_4_3_0 = xpq * R_1_3_3_0 + 3 * R_1_2_3_0;
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1344] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_3_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_4_4 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_5_3 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_6_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_6_2 * dm_ij_cache[tx+208];
            double R_6_0_1_1 = ypq * R_7_0_0_1;
            double R_5_0_2_1 = ypq * R_6_0_1_1 + 1 * R_6_0_0_1;
            double R_4_0_3_1 = ypq * R_5_0_2_1 + 2 * R_5_0_1_1;
            double R_3_0_4_1 = ypq * R_4_0_3_1 + 3 * R_4_0_2_1;
            double R_2_0_5_1 = ypq * R_3_0_4_1 + 4 * R_3_0_3_1;
            double R_1_0_6_1 = ypq * R_2_0_5_1 + 5 * R_2_0_4_1;
            double R_0_0_7_1 = ypq * R_1_0_6_1 + 6 * R_1_0_5_1;
            vj_kl += R_0_0_7_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+368];
            double R_0_1_6_1 = xpq * R_1_0_6_1;
            vj_kl += R_0_1_6_1 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+464];
            double R_1_1_5_1 = xpq * R_2_0_5_1;
            double R_0_2_5_1 = xpq * R_1_1_5_1 + 1 * R_1_0_5_1;
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+512];
            double R_2_1_4_1 = xpq * R_3_0_4_1;
            double R_1_2_4_1 = xpq * R_2_1_4_1 + 1 * R_2_0_4_1;
            double R_0_3_4_1 = xpq * R_1_2_4_1 + 2 * R_1_1_4_1;
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+528];
            double R_3_1_3_1 = xpq * R_4_0_3_1;
            double R_2_2_3_1 = xpq * R_3_1_3_1 + 1 * R_3_0_3_1;
            double R_1_3_3_1 = xpq * R_2_2_3_1 + 2 * R_2_1_3_1;
            double R_0_4_3_1 = xpq * R_1_3_3_1 + 3 * R_1_2_3_1;
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1456] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_4_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_5_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_6_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_6_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_6_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_7_0 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_7_1 * dm_ij_cache[tx+208];
            double R_7_0_1_0 = ypq * gamma_inc[sq_id+8*256];
            double R_6_0_2_0 = ypq * R_7_0_1_0 + 1 * gamma_inc[sq_id+7*256];
            double R_5_0_3_0 = ypq * R_6_0_2_0 + 2 * R_6_0_1_0;
            double R_4_0_4_0 = ypq * R_5_0_3_0 + 3 * R_5_0_2_0;
            double R_3_0_5_0 = ypq * R_4_0_4_0 + 4 * R_4_0_3_0;
            double R_2_0_6_0 = ypq * R_3_0_5_0 + 5 * R_3_0_4_0;
            double R_1_0_7_0 = ypq * R_2_0_6_0 + 6 * R_2_0_5_0;
            double R_0_0_8_0 = ypq * R_1_0_7_0 + 7 * R_1_0_6_0;
            vj_kl += R_0_0_8_0 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_6_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_6_1 * dm_ij_cache[tx+368];
            double R_0_1_7_0 = xpq * R_1_0_7_0;
            vj_kl += R_0_1_7_0 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+464];
            double R_1_1_6_0 = xpq * R_2_0_6_0;
            double R_0_2_6_0 = xpq * R_1_1_6_0 + 1 * R_1_0_6_0;
            vj_kl += R_0_2_6_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+496];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+512];
            double R_2_1_5_0 = xpq * R_3_0_5_0;
            double R_1_2_5_0 = xpq * R_2_1_5_0 + 1 * R_2_0_5_0;
            double R_0_3_5_0 = xpq * R_1_2_5_0 + 2 * R_1_1_5_0;
            vj_kl += R_0_3_5_0 * dm_ij_cache[tx+528];
            double R_3_1_4_0 = xpq * R_4_0_4_0;
            double R_2_2_4_0 = xpq * R_3_1_4_0 + 1 * R_3_0_4_0;
            double R_1_3_4_0 = xpq * R_2_2_4_0 + 2 * R_2_1_4_0;
            double R_0_4_4_0 = xpq * R_1_3_4_0 + 3 * R_1_2_4_0;
            vj_kl += R_0_4_4_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1568] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_0_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+512];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+528];
            double R_4_1_0_0 = xpq * gamma_inc[sq_id+5*256];
            double R_3_2_0_0 = xpq * R_4_1_0_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_3_0_0 = xpq * R_3_2_0_0 + 2 * R_3_1_0_0;
            double R_1_4_0_0 = xpq * R_2_3_0_0 + 3 * R_2_2_0_0;
            double R_0_5_0_0 = xpq * R_1_4_0_0 + 4 * R_1_3_0_0;
            vj_kl -= R_0_5_0_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1680] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+288];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+384];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+400];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+416];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+432];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+448];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+464];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+480];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+512];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+528];
            double R_4_1_0_1 = xpq * R_5_0_0_1;
            double R_3_2_0_1 = xpq * R_4_1_0_1 + 1 * R_4_0_0_1;
            double R_2_3_0_1 = xpq * R_3_2_0_1 + 2 * R_3_1_0_1;
            double R_1_4_0_1 = xpq * R_2_3_0_1 + 3 * R_2_2_0_1;
            double R_0_5_0_1 = xpq * R_1_4_0_1 + 4 * R_1_3_0_1;
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1792] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_0_6 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+272];
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+288];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+304];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+384];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+400];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+416];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+432];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+464];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+480];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+496];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+512];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+528];
            double R_4_1_0_2 = xpq * R_5_0_0_2;
            double R_3_2_0_2 = xpq * R_4_1_0_2 + 1 * R_4_0_0_2;
            double R_2_3_0_2 = xpq * R_3_2_0_2 + 2 * R_3_1_0_2;
            double R_1_4_0_2 = xpq * R_2_3_0_2 + 3 * R_2_2_0_2;
            double R_0_5_0_2 = xpq * R_1_4_0_2 + 4 * R_1_3_0_2;
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1904] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_0_6 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_0_7 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_1_6 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+272];
            vj_kl += R_0_2_0_6 * dm_ij_cache[tx+288];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+304];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+384];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+400];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+416];
            vj_kl += R_0_3_0_5 * dm_ij_cache[tx+432];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+448];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+464];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+480];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+496];
            vj_kl += R_0_4_0_4 * dm_ij_cache[tx+512];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+528];
            double R_4_1_0_3 = xpq * R_5_0_0_3;
            double R_3_2_0_3 = xpq * R_4_1_0_3 + 1 * R_4_0_0_3;
            double R_2_3_0_3 = xpq * R_3_2_0_3 + 2 * R_3_1_0_3;
            double R_1_4_0_3 = xpq * R_2_3_0_3 + 3 * R_2_2_0_3;
            double R_0_5_0_3 = xpq * R_1_4_0_3 + 4 * R_1_3_0_3;
            vj_kl += R_0_5_0_3 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2016] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+288];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+304];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+384];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+464];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+496];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+512];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+528];
            double R_4_1_1_0 = xpq * R_5_0_1_0;
            double R_3_2_1_0 = xpq * R_4_1_1_0 + 1 * R_4_0_1_0;
            double R_2_3_1_0 = xpq * R_3_2_1_0 + 2 * R_3_1_1_0;
            double R_1_4_1_0 = xpq * R_2_3_1_0 + 3 * R_2_2_1_0;
            double R_0_5_1_0 = xpq * R_1_4_1_0 + 4 * R_1_3_1_0;
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2128] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+288];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+384];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+400];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+416];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+432];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+448];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+464];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+512];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+528];
            double R_4_1_1_1 = xpq * R_5_0_1_1;
            double R_3_2_1_1 = xpq * R_4_1_1_1 + 1 * R_4_0_1_1;
            double R_2_3_1_1 = xpq * R_3_2_1_1 + 2 * R_3_1_1_1;
            double R_1_4_1_1 = xpq * R_2_3_1_1 + 3 * R_2_2_1_1;
            double R_0_5_1_1 = xpq * R_1_4_1_1 + 4 * R_1_3_1_1;
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2240] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_1_6 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+272];
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+288];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+304];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+384];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+400];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+416];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+432];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+448];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+464];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+480];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+496];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+512];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+528];
            double R_4_1_1_2 = xpq * R_5_0_1_2;
            double R_3_2_1_2 = xpq * R_4_1_1_2 + 1 * R_4_0_1_2;
            double R_2_3_1_2 = xpq * R_3_2_1_2 + 2 * R_3_1_1_2;
            double R_1_4_1_2 = xpq * R_2_3_1_2 + 3 * R_2_2_1_2;
            double R_0_5_1_2 = xpq * R_1_4_1_2 + 4 * R_1_3_1_2;
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2352] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_6_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+512];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+528];
            double R_4_1_2_0 = xpq * R_5_0_2_0;
            double R_3_2_2_0 = xpq * R_4_1_2_0 + 1 * R_4_0_2_0;
            double R_2_3_2_0 = xpq * R_3_2_2_0 + 2 * R_3_1_2_0;
            double R_1_4_2_0 = xpq * R_2_3_2_0 + 3 * R_2_2_2_0;
            double R_0_5_2_0 = xpq * R_1_4_2_0 + 4 * R_1_3_2_0;
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2464] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_6_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+288];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+384];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+400];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+416];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+432];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+448];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+464];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+480];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+512];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+528];
            double R_4_1_2_1 = xpq * R_5_0_2_1;
            double R_3_2_2_1 = xpq * R_4_1_2_1 + 1 * R_4_0_2_1;
            double R_2_3_2_1 = xpq * R_3_2_2_1 + 2 * R_3_1_2_1;
            double R_1_4_2_1 = xpq * R_2_3_2_1 + 3 * R_2_2_2_1;
            double R_0_5_2_1 = xpq * R_1_4_2_1 + 4 * R_1_3_2_1;
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2576] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_6_0 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_6_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_7_0 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+288];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+304];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_6_0 * dm_ij_cache[tx+384];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+464];
            vj_kl += R_0_3_5_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+496];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+512];
            vj_kl += R_0_4_4_0 * dm_ij_cache[tx+528];
            double R_4_1_3_0 = xpq * R_5_0_3_0;
            double R_3_2_3_0 = xpq * R_4_1_3_0 + 1 * R_4_0_3_0;
            double R_2_3_3_0 = xpq * R_3_2_3_0 + 2 * R_3_1_3_0;
            double R_1_4_3_0 = xpq * R_2_3_3_0 + 3 * R_2_2_3_0;
            double R_0_5_3_0 = xpq * R_1_4_3_0 + 4 * R_1_3_3_0;
            vj_kl += R_0_5_3_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2688] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+224];
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+288];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+304];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+368];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+384];
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+464];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+496];
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+512];
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+528];
            double R_5_1_0_0 = xpq * gamma_inc[sq_id+6*256];
            double R_4_2_0_0 = xpq * R_5_1_0_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_3_0_0 = xpq * R_4_2_0_0 + 2 * R_4_1_0_0;
            double R_2_4_0_0 = xpq * R_3_3_0_0 + 3 * R_3_2_0_0;
            double R_1_5_0_0 = xpq * R_2_4_0_0 + 4 * R_2_3_0_0;
            double R_0_6_0_0 = xpq * R_1_5_0_0 + 5 * R_1_4_0_0;
            vj_kl += R_0_6_0_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2800] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+128];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+288];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+384];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+400];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+416];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+432];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+448];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+464];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+512];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+528];
            double R_5_1_0_1 = xpq * R_6_0_0_1;
            double R_4_2_0_1 = xpq * R_5_1_0_1 + 1 * R_5_0_0_1;
            double R_3_3_0_1 = xpq * R_4_2_0_1 + 2 * R_4_1_0_1;
            double R_2_4_0_1 = xpq * R_3_3_0_1 + 3 * R_3_2_0_1;
            double R_1_5_0_1 = xpq * R_2_4_0_1 + 4 * R_2_3_0_1;
            double R_0_6_0_1 = xpq * R_1_5_0_1 + 5 * R_1_4_0_1;
            vj_kl -= R_0_6_0_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2912] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_0_6 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+224];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_0_5 * dm_ij_cache[tx+288];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+304];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+320];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+336];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+352];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+368];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+384];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+400];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+416];
            vj_kl += R_0_4_0_4 * dm_ij_cache[tx+432];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+448];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+464];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+480];
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+496];
            vj_kl += R_0_5_0_3 * dm_ij_cache[tx+512];
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+528];
            double R_5_1_0_2 = xpq * R_6_0_0_2;
            double R_4_2_0_2 = xpq * R_5_1_0_2 + 1 * R_5_0_0_2;
            double R_3_3_0_2 = xpq * R_4_2_0_2 + 2 * R_4_1_0_2;
            double R_2_4_0_2 = xpq * R_3_3_0_2 + 3 * R_3_2_0_2;
            double R_1_5_0_2 = xpq * R_2_4_0_2 + 4 * R_2_3_0_2;
            double R_0_6_0_2 = xpq * R_1_5_0_2 + 5 * R_1_4_0_2;
            vj_kl += R_0_6_0_2 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3024] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+512];
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+528];
            double R_5_1_1_0 = xpq * R_6_0_1_0;
            double R_4_2_1_0 = xpq * R_5_1_1_0 + 1 * R_5_0_1_0;
            double R_3_3_1_0 = xpq * R_4_2_1_0 + 2 * R_4_1_1_0;
            double R_2_4_1_0 = xpq * R_3_3_1_0 + 3 * R_3_2_1_0;
            double R_1_5_1_0 = xpq * R_2_4_1_0 + 4 * R_2_3_1_0;
            double R_0_6_1_0 = xpq * R_1_5_1_0 + 5 * R_1_4_1_0;
            vj_kl -= R_0_6_1_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3136] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+288];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+336];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+384];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+400];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+416];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+432];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+448];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+464];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+480];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+512];
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+528];
            double R_5_1_1_1 = xpq * R_6_0_1_1;
            double R_4_2_1_1 = xpq * R_5_1_1_1 + 1 * R_5_0_1_1;
            double R_3_3_1_1 = xpq * R_4_2_1_1 + 2 * R_4_1_1_1;
            double R_2_4_1_1 = xpq * R_3_3_1_1 + 3 * R_3_2_1_1;
            double R_1_5_1_1 = xpq * R_2_4_1_1 + 4 * R_2_3_1_1;
            double R_0_6_1_1 = xpq * R_1_5_1_1 + 5 * R_1_4_1_1;
            vj_kl += R_0_6_1_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3248] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_6_0 * dm_ij_cache[tx+224];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+288];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+304];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+368];
            vj_kl += R_0_3_5_0 * dm_ij_cache[tx+384];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+464];
            vj_kl += R_0_4_4_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+496];
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+512];
            vj_kl += R_0_5_3_0 * dm_ij_cache[tx+528];
            double R_5_1_2_0 = xpq * R_6_0_2_0;
            double R_4_2_2_0 = xpq * R_5_1_2_0 + 1 * R_5_0_2_0;
            double R_3_3_2_0 = xpq * R_4_2_2_0 + 2 * R_4_1_2_0;
            double R_2_4_2_0 = xpq * R_3_3_2_0 + 3 * R_3_2_2_0;
            double R_1_5_2_0 = xpq * R_2_4_2_0 + 4 * R_2_3_2_0;
            double R_0_6_2_0 = xpq * R_1_5_2_0 + 5 * R_1_4_2_0;
            vj_kl += R_0_6_2_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3360] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_5_0_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_6_0_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_6_0_1 * dm_ij_cache[tx+512];
            vj_kl -= R_0_6_1_0 * dm_ij_cache[tx+528];
            double R_6_1_0_0 = xpq * gamma_inc[sq_id+7*256];
            double R_5_2_0_0 = xpq * R_6_1_0_0 + 1 * gamma_inc[sq_id+6*256];
            double R_4_3_0_0 = xpq * R_5_2_0_0 + 2 * R_5_1_0_0;
            double R_3_4_0_0 = xpq * R_4_3_0_0 + 3 * R_4_2_0_0;
            double R_2_5_0_0 = xpq * R_3_4_0_0 + 4 * R_3_3_0_0;
            double R_1_6_0_0 = xpq * R_2_5_0_0 + 5 * R_2_4_0_0;
            double R_0_7_0_0 = xpq * R_1_6_0_0 + 6 * R_1_5_0_0;
            vj_kl -= R_0_7_0_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3472] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_3_0_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+128];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+160];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+176];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_4_0_4 * dm_ij_cache[tx+288];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+336];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+384];
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+400];
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+416];
            vj_kl += R_0_5_0_3 * dm_ij_cache[tx+432];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+448];
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+464];
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+480];
            vj_kl += R_0_6_0_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_6_0_2 * dm_ij_cache[tx+512];
            vj_kl += R_0_6_1_1 * dm_ij_cache[tx+528];
            double R_6_1_0_1 = xpq * R_7_0_0_1;
            double R_5_2_0_1 = xpq * R_6_1_0_1 + 1 * R_6_0_0_1;
            double R_4_3_0_1 = xpq * R_5_2_0_1 + 2 * R_5_1_0_1;
            double R_3_4_0_1 = xpq * R_4_3_0_1 + 3 * R_4_2_0_1;
            double R_2_5_0_1 = xpq * R_3_4_0_1 + 4 * R_3_3_0_1;
            double R_1_6_0_1 = xpq * R_2_5_0_1 + 5 * R_2_4_0_1;
            double R_0_7_0_1 = xpq * R_1_6_0_1 + 6 * R_1_5_0_1;
            vj_kl += R_0_7_0_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3584] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+192];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_3_5_0 * dm_ij_cache[tx+224];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+288];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+304];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+368];
            vj_kl += R_0_4_4_0 * dm_ij_cache[tx+384];
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+464];
            vj_kl += R_0_5_3_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_6_1_0 * dm_ij_cache[tx+496];
            vj_kl += R_0_6_1_1 * dm_ij_cache[tx+512];
            vj_kl += R_0_6_2_0 * dm_ij_cache[tx+528];
            double R_6_1_1_0 = xpq * R_7_0_1_0;
            double R_5_2_1_0 = xpq * R_6_1_1_0 + 1 * R_6_0_1_0;
            double R_4_3_1_0 = xpq * R_5_2_1_0 + 2 * R_5_1_1_0;
            double R_3_4_1_0 = xpq * R_4_3_1_0 + 3 * R_4_2_1_0;
            double R_2_5_1_0 = xpq * R_3_4_1_0 + 4 * R_3_3_1_0;
            double R_1_6_1_0 = xpq * R_2_5_1_0 + 5 * R_2_4_1_0;
            double R_0_7_1_0 = xpq * R_1_6_1_0 + 6 * R_1_5_1_0;
            vj_kl += R_0_7_1_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3696] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_4_0_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+192];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_4_4_0 * dm_ij_cache[tx+224];
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_5_0_3 * dm_ij_cache[tx+288];
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+304];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+368];
            vj_kl += R_0_5_3_0 * dm_ij_cache[tx+384];
            vj_kl += R_0_6_0_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_6_0_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_6_0_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_6_1_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_6_1_1 * dm_ij_cache[tx+464];
            vj_kl += R_0_6_2_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_7_0_0 * dm_ij_cache[tx+496];
            vj_kl += R_0_7_0_1 * dm_ij_cache[tx+512];
            vj_kl += R_0_7_1_0 * dm_ij_cache[tx+528];
            double R_7_1_0_0 = xpq * gamma_inc[sq_id+8*256];
            double R_6_2_0_0 = xpq * R_7_1_0_0 + 1 * gamma_inc[sq_id+7*256];
            double R_5_3_0_0 = xpq * R_6_2_0_0 + 2 * R_6_1_0_0;
            double R_4_4_0_0 = xpq * R_5_3_0_0 + 3 * R_5_2_0_0;
            double R_3_5_0_0 = xpq * R_4_4_0_0 + 4 * R_4_3_0_0;
            double R_2_6_0_0 = xpq * R_3_5_0_0 + 5 * R_3_4_0_0;
            double R_1_7_0_0 = xpq * R_2_6_0_0 + 6 * R_2_5_0_0;
            double R_0_8_0_0 = xpq * R_1_7_0_0 + 7 * R_1_6_0_0;
            vj_kl += R_0_8_0_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3808] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_1 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_1_0 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_0_0 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_2 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_0_0_5 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_0_6 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_0_0_6 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_0_7 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_0_1_6 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_1_0_6 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_5 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_0_0_6 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_0_0_7 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_0_8 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_1_6 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_0_1_7 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_0_2_6 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_3_5 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_0_4_4 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_0_6 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_1_0_7 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_1_6 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_2_0_6 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_3_0_5 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_4_0_4 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+64] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_2_0 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+80] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+96] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_1_6 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+112] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_0_1_6 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_1_7 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_0_2_6 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_0_3_5 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_4_4 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_0_5_3 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_1_1_6 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+128] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_5_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_0_6_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+144] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_0_6_1 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+160] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_2_6 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_0_3_5 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_0_4_4 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_5_3 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_0_6_2 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+176] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_6_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_6_1 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_0_7_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_6_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+192] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_3_5 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_0_4_4 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_0_5_3 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_6_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_6_2 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_0_7_1 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_6_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+208] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_4_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_5_0 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_0_5_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_0_6_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_6_1 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_0_6_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_7_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_7_1 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_0_8_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_1_6_0 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_1_6_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_1_7_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_2_6_0 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_3_5_0 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_4_4_0 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+224] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_2_0_0 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+240] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+256] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_0_6 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+272] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_1_0_6 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_0_7 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_1_1_6 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_2_0_6 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_3_0_5 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_4_0_4 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_5_0_3 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+288] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+304] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+320] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_1_6 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+336] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_1_6_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+352] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_1_6_1 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+368] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_6_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_6_1 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_1_7_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_2_6_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_3_5_0 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_4_4_0 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_5_3_0 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+384] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_5_0_0 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_6_0_0 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+400] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_6_0_1 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+416] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_2_0_6 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_3_0_5 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_4_0_4 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_5_0_3 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_6_0_2 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+432] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_6_1_0 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+448] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_6_1_1 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+464] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_2_6_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_3_5_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_4_4_0 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_5_3_0 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_6_2_0 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+480] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_6_0_0 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_6_0_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_6_1_0 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_7_0_0 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+496] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_3_0_5 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_4_0_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_5_0_3 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_6_0_1 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_6_0_2 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_6_1_1 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_7_0_1 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+512] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_3_5_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_4_4_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_5_3_0 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_6_1_0 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_6_1_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_6_2_0 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_7_1_0 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+528] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+112];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+224];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_4_0_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+560];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+784];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+896];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+1120];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+1456];
            vj_ij += R_0_4_4_0 * dm_kl_cache[sq_kl+1568];
            vj_ij -= R_0_5_0_0 * dm_kl_cache[sq_kl+1680];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+1904];
            vj_ij += R_0_5_0_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+2128];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+2352];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+2464];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+2576];
            vj_ij += R_0_5_3_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_6_0_0 * dm_kl_cache[sq_kl+2800];
            vj_ij -= R_0_6_0_1 * dm_kl_cache[sq_kl+2912];
            vj_ij += R_0_6_0_2 * dm_kl_cache[sq_kl+3024];
            vj_ij -= R_0_6_1_0 * dm_kl_cache[sq_kl+3136];
            vj_ij += R_0_6_1_1 * dm_kl_cache[sq_kl+3248];
            vj_ij += R_0_6_2_0 * dm_kl_cache[sq_kl+3360];
            vj_ij -= R_0_7_0_0 * dm_kl_cache[sq_kl+3472];
            vj_ij += R_0_7_0_1 * dm_kl_cache[sq_kl+3584];
            vj_ij += R_0_7_1_0 * dm_kl_cache[sq_kl+3696];
            vj_ij += R_0_8_0_0 * dm_kl_cache[sq_kl+3808];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+544] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 35; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 245; n += 16) {
        int i = n / 7;
        int tile = n % 7;
        int task_kl = blockIdx.y * 112 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*112]);
        }
    }
}

// TILEX=25, TILEY=4,
__global__
void md_j_4_5(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 400;
    int task_kl0 = blockIdx.y * 64;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 2560;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 256;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 560;
    double *dm_ij_cache = vj_kl_cache + 3584;
    double *dm_kl_cache = dm_ij_cache + 560;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 320; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 3584; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 64; n += 256) {
        int task_kl = blockIdx.y * 64 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+64] = ykl;
            Rq_cache[n+128] = zkl;
            Rq_cache[n+192] = akl;
        }
    }

    for (int n = tx; n < 224; n += 16) {
        int i = n / 4;
        int tile = n % 4;
        int task_kl = blockIdx.y * 64 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*64] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 25; ++batch_ij) {
        int task_ij0 = blockIdx.x * 400 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 35; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 4; ++batch_kl) {
            int task_kl0 = blockIdx.y * 64 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+64];
            double zkl = Rq_cache[sq_kl+128];
            double akl = Rq_cache[sq_kl+192];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 9);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 9; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+32];
            double R_2_0_0_1 = zpq * gamma_inc[sq_id+3*256];
            double R_1_0_0_2 = zpq * R_2_0_0_1 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_0_3 = zpq * R_1_0_0_2 + 2 * R_1_0_0_1;
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+48];
            double R_3_0_0_1 = zpq * gamma_inc[sq_id+4*256];
            double R_2_0_0_2 = zpq * R_3_0_0_1 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_0_3 = zpq * R_2_0_0_2 + 2 * R_2_0_0_1;
            double R_0_0_0_4 = zpq * R_1_0_0_3 + 3 * R_1_0_0_2;
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+64];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+80];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+96];
            double R_0_0_1_2 = ypq * R_1_0_0_2;
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+112];
            double R_0_0_1_3 = ypq * R_1_0_0_3;
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+128];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+144];
            double R_1_0_1_1 = ypq * R_2_0_0_1;
            double R_0_0_2_1 = ypq * R_1_0_1_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+160];
            double R_1_0_1_2 = ypq * R_2_0_0_2;
            double R_0_0_2_2 = ypq * R_1_0_1_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+176];
            double R_2_0_1_0 = ypq * gamma_inc[sq_id+3*256];
            double R_1_0_2_0 = ypq * R_2_0_1_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_3_0 = ypq * R_1_0_2_0 + 2 * R_1_0_1_0;
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+192];
            double R_2_0_1_1 = ypq * R_3_0_0_1;
            double R_1_0_2_1 = ypq * R_2_0_1_1 + 1 * R_2_0_0_1;
            double R_0_0_3_1 = ypq * R_1_0_2_1 + 2 * R_1_0_1_1;
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+208];
            double R_3_0_1_0 = ypq * gamma_inc[sq_id+4*256];
            double R_2_0_2_0 = ypq * R_3_0_1_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_3_0 = ypq * R_2_0_2_0 + 2 * R_2_0_1_0;
            double R_0_0_4_0 = ypq * R_1_0_3_0 + 3 * R_1_0_2_0;
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+224];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+240];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+256];
            double R_0_1_0_2 = xpq * R_1_0_0_2;
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+272];
            double R_0_1_0_3 = xpq * R_1_0_0_3;
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+288];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+304];
            double R_0_1_1_1 = xpq * R_1_0_1_1;
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+320];
            double R_0_1_1_2 = xpq * R_1_0_1_2;
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+336];
            double R_0_1_2_0 = xpq * R_1_0_2_0;
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+352];
            double R_0_1_2_1 = xpq * R_1_0_2_1;
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+368];
            double R_0_1_3_0 = xpq * R_1_0_3_0;
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+384];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+400];
            double R_1_1_0_1 = xpq * R_2_0_0_1;
            double R_0_2_0_1 = xpq * R_1_1_0_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+416];
            double R_1_1_0_2 = xpq * R_2_0_0_2;
            double R_0_2_0_2 = xpq * R_1_1_0_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+432];
            double R_1_1_1_0 = xpq * R_2_0_1_0;
            double R_0_2_1_0 = xpq * R_1_1_1_0 + 1 * R_1_0_1_0;
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+448];
            double R_1_1_1_1 = xpq * R_2_0_1_1;
            double R_0_2_1_1 = xpq * R_1_1_1_1 + 1 * R_1_0_1_1;
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+464];
            double R_1_1_2_0 = xpq * R_2_0_2_0;
            double R_0_2_2_0 = xpq * R_1_1_2_0 + 1 * R_1_0_2_0;
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+480];
            double R_2_1_0_0 = xpq * gamma_inc[sq_id+3*256];
            double R_1_2_0_0 = xpq * R_2_1_0_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_3_0_0 = xpq * R_1_2_0_0 + 2 * R_1_1_0_0;
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+496];
            double R_2_1_0_1 = xpq * R_3_0_0_1;
            double R_1_2_0_1 = xpq * R_2_1_0_1 + 1 * R_2_0_0_1;
            double R_0_3_0_1 = xpq * R_1_2_0_1 + 2 * R_1_1_0_1;
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+512];
            double R_2_1_1_0 = xpq * R_3_0_1_0;
            double R_1_2_1_0 = xpq * R_2_1_1_0 + 1 * R_2_0_1_0;
            double R_0_3_1_0 = xpq * R_1_2_1_0 + 2 * R_1_1_1_0;
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+528];
            double R_3_1_0_0 = xpq * gamma_inc[sq_id+4*256];
            double R_2_2_0_0 = xpq * R_3_1_0_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_3_0_0 = xpq * R_2_2_0_0 + 2 * R_2_1_0_0;
            double R_0_4_0_0 = xpq * R_1_3_0_0 + 3 * R_1_2_0_0;
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+48];
            double R_4_0_0_1 = zpq * gamma_inc[sq_id+5*256];
            double R_3_0_0_2 = zpq * R_4_0_0_1 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_0_3 = zpq * R_3_0_0_2 + 2 * R_3_0_0_1;
            double R_1_0_0_4 = zpq * R_2_0_0_3 + 3 * R_2_0_0_2;
            double R_0_0_0_5 = zpq * R_1_0_0_4 + 4 * R_1_0_0_3;
            vj_kl -= R_0_0_0_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+112];
            double R_0_0_1_4 = ypq * R_1_0_0_4;
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+160];
            double R_1_0_1_3 = ypq * R_2_0_0_3;
            double R_0_0_2_3 = ypq * R_1_0_1_3 + 1 * R_1_0_0_3;
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+192];
            double R_2_0_1_2 = ypq * R_3_0_0_2;
            double R_1_0_2_2 = ypq * R_2_0_1_2 + 1 * R_2_0_0_2;
            double R_0_0_3_2 = ypq * R_1_0_2_2 + 2 * R_1_0_1_2;
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+208];
            double R_3_0_1_1 = ypq * R_4_0_0_1;
            double R_2_0_2_1 = ypq * R_3_0_1_1 + 1 * R_3_0_0_1;
            double R_1_0_3_1 = ypq * R_2_0_2_1 + 2 * R_2_0_1_1;
            double R_0_0_4_1 = ypq * R_1_0_3_1 + 3 * R_1_0_2_1;
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+272];
            double R_0_1_0_4 = xpq * R_1_0_0_4;
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+320];
            double R_0_1_1_3 = xpq * R_1_0_1_3;
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+352];
            double R_0_1_2_2 = xpq * R_1_0_2_2;
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+368];
            double R_0_1_3_1 = xpq * R_1_0_3_1;
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+416];
            double R_1_1_0_3 = xpq * R_2_0_0_3;
            double R_0_2_0_3 = xpq * R_1_1_0_3 + 1 * R_1_0_0_3;
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+448];
            double R_1_1_1_2 = xpq * R_2_0_1_2;
            double R_0_2_1_2 = xpq * R_1_1_1_2 + 1 * R_1_0_1_2;
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+464];
            double R_1_1_2_1 = xpq * R_2_0_2_1;
            double R_0_2_2_1 = xpq * R_1_1_2_1 + 1 * R_1_0_2_1;
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+496];
            double R_2_1_0_2 = xpq * R_3_0_0_2;
            double R_1_2_0_2 = xpq * R_2_1_0_2 + 1 * R_2_0_0_2;
            double R_0_3_0_2 = xpq * R_1_2_0_2 + 2 * R_1_1_0_2;
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+512];
            double R_2_1_1_1 = xpq * R_3_0_1_1;
            double R_1_2_1_1 = xpq * R_2_1_1_1 + 1 * R_2_0_1_1;
            double R_0_3_1_1 = xpq * R_1_2_1_1 + 2 * R_1_1_1_1;
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+528];
            double R_3_1_0_1 = xpq * R_4_0_0_1;
            double R_2_2_0_1 = xpq * R_3_1_0_1 + 1 * R_3_0_0_1;
            double R_1_3_0_1 = xpq * R_2_2_0_1 + 2 * R_2_1_0_1;
            double R_0_4_0_1 = xpq * R_1_3_0_1 + 3 * R_1_2_0_1;
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+64] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+48];
            double R_5_0_0_1 = zpq * gamma_inc[sq_id+6*256];
            double R_4_0_0_2 = zpq * R_5_0_0_1 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_0_3 = zpq * R_4_0_0_2 + 2 * R_4_0_0_1;
            double R_2_0_0_4 = zpq * R_3_0_0_3 + 3 * R_3_0_0_2;
            double R_1_0_0_5 = zpq * R_2_0_0_4 + 4 * R_2_0_0_3;
            double R_0_0_0_6 = zpq * R_1_0_0_5 + 5 * R_1_0_0_4;
            vj_kl += R_0_0_0_6 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+112];
            double R_0_0_1_5 = ypq * R_1_0_0_5;
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+160];
            double R_1_0_1_4 = ypq * R_2_0_0_4;
            double R_0_0_2_4 = ypq * R_1_0_1_4 + 1 * R_1_0_0_4;
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+192];
            double R_2_0_1_3 = ypq * R_3_0_0_3;
            double R_1_0_2_3 = ypq * R_2_0_1_3 + 1 * R_2_0_0_3;
            double R_0_0_3_3 = ypq * R_1_0_2_3 + 2 * R_1_0_1_3;
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+208];
            double R_3_0_1_2 = ypq * R_4_0_0_2;
            double R_2_0_2_2 = ypq * R_3_0_1_2 + 1 * R_3_0_0_2;
            double R_1_0_3_2 = ypq * R_2_0_2_2 + 2 * R_2_0_1_2;
            double R_0_0_4_2 = ypq * R_1_0_3_2 + 3 * R_1_0_2_2;
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+272];
            double R_0_1_0_5 = xpq * R_1_0_0_5;
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+320];
            double R_0_1_1_4 = xpq * R_1_0_1_4;
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+352];
            double R_0_1_2_3 = xpq * R_1_0_2_3;
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+368];
            double R_0_1_3_2 = xpq * R_1_0_3_2;
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+416];
            double R_1_1_0_4 = xpq * R_2_0_0_4;
            double R_0_2_0_4 = xpq * R_1_1_0_4 + 1 * R_1_0_0_4;
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+448];
            double R_1_1_1_3 = xpq * R_2_0_1_3;
            double R_0_2_1_3 = xpq * R_1_1_1_3 + 1 * R_1_0_1_3;
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+464];
            double R_1_1_2_2 = xpq * R_2_0_2_2;
            double R_0_2_2_2 = xpq * R_1_1_2_2 + 1 * R_1_0_2_2;
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+496];
            double R_2_1_0_3 = xpq * R_3_0_0_3;
            double R_1_2_0_3 = xpq * R_2_1_0_3 + 1 * R_2_0_0_3;
            double R_0_3_0_3 = xpq * R_1_2_0_3 + 2 * R_1_1_0_3;
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+512];
            double R_2_1_1_2 = xpq * R_3_0_1_2;
            double R_1_2_1_2 = xpq * R_2_1_1_2 + 1 * R_2_0_1_2;
            double R_0_3_1_2 = xpq * R_1_2_1_2 + 2 * R_1_1_1_2;
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+528];
            double R_3_1_0_2 = xpq * R_4_0_0_2;
            double R_2_2_0_2 = xpq * R_3_1_0_2 + 1 * R_3_0_0_2;
            double R_1_3_0_2 = xpq * R_2_2_0_2 + 2 * R_2_1_0_2;
            double R_0_4_0_2 = xpq * R_1_3_0_2 + 3 * R_1_2_0_2;
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+128] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_5 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_0_6 * dm_ij_cache[tx+48];
            double R_6_0_0_1 = zpq * gamma_inc[sq_id+7*256];
            double R_5_0_0_2 = zpq * R_6_0_0_1 + 1 * gamma_inc[sq_id+6*256];
            double R_4_0_0_3 = zpq * R_5_0_0_2 + 2 * R_5_0_0_1;
            double R_3_0_0_4 = zpq * R_4_0_0_3 + 3 * R_4_0_0_2;
            double R_2_0_0_5 = zpq * R_3_0_0_4 + 4 * R_3_0_0_3;
            double R_1_0_0_6 = zpq * R_2_0_0_5 + 5 * R_2_0_0_4;
            double R_0_0_0_7 = zpq * R_1_0_0_6 + 6 * R_1_0_0_5;
            vj_kl -= R_0_0_0_7 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+112];
            double R_0_0_1_6 = ypq * R_1_0_0_6;
            vj_kl -= R_0_0_1_6 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+160];
            double R_1_0_1_5 = ypq * R_2_0_0_5;
            double R_0_0_2_5 = ypq * R_1_0_1_5 + 1 * R_1_0_0_5;
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+192];
            double R_2_0_1_4 = ypq * R_3_0_0_4;
            double R_1_0_2_4 = ypq * R_2_0_1_4 + 1 * R_2_0_0_4;
            double R_0_0_3_4 = ypq * R_1_0_2_4 + 2 * R_1_0_1_4;
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+208];
            double R_3_0_1_3 = ypq * R_4_0_0_3;
            double R_2_0_2_3 = ypq * R_3_0_1_3 + 1 * R_3_0_0_3;
            double R_1_0_3_3 = ypq * R_2_0_2_3 + 2 * R_2_0_1_3;
            double R_0_0_4_3 = ypq * R_1_0_3_3 + 3 * R_1_0_2_3;
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+272];
            double R_0_1_0_6 = xpq * R_1_0_0_6;
            vj_kl -= R_0_1_0_6 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+320];
            double R_0_1_1_5 = xpq * R_1_0_1_5;
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+352];
            double R_0_1_2_4 = xpq * R_1_0_2_4;
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+368];
            double R_0_1_3_3 = xpq * R_1_0_3_3;
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+416];
            double R_1_1_0_5 = xpq * R_2_0_0_5;
            double R_0_2_0_5 = xpq * R_1_1_0_5 + 1 * R_1_0_0_5;
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+448];
            double R_1_1_1_4 = xpq * R_2_0_1_4;
            double R_0_2_1_4 = xpq * R_1_1_1_4 + 1 * R_1_0_1_4;
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+464];
            double R_1_1_2_3 = xpq * R_2_0_2_3;
            double R_0_2_2_3 = xpq * R_1_1_2_3 + 1 * R_1_0_2_3;
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+496];
            double R_2_1_0_4 = xpq * R_3_0_0_4;
            double R_1_2_0_4 = xpq * R_2_1_0_4 + 1 * R_2_0_0_4;
            double R_0_3_0_4 = xpq * R_1_2_0_4 + 2 * R_1_1_0_4;
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+512];
            double R_2_1_1_3 = xpq * R_3_0_1_3;
            double R_1_2_1_3 = xpq * R_2_1_1_3 + 1 * R_2_0_1_3;
            double R_0_3_1_3 = xpq * R_1_2_1_3 + 2 * R_1_1_1_3;
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+528];
            double R_3_1_0_3 = xpq * R_4_0_0_3;
            double R_2_2_0_3 = xpq * R_3_1_0_3 + 1 * R_3_0_0_3;
            double R_1_3_0_3 = xpq * R_2_2_0_3 + 2 * R_2_1_0_3;
            double R_0_4_0_3 = xpq * R_1_3_0_3 + 3 * R_1_2_0_3;
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+192] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_0_6 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_0_7 * dm_ij_cache[tx+48];
            double R_7_0_0_1 = zpq * gamma_inc[sq_id+8*256];
            double R_6_0_0_2 = zpq * R_7_0_0_1 + 1 * gamma_inc[sq_id+7*256];
            double R_5_0_0_3 = zpq * R_6_0_0_2 + 2 * R_6_0_0_1;
            double R_4_0_0_4 = zpq * R_5_0_0_3 + 3 * R_5_0_0_2;
            double R_3_0_0_5 = zpq * R_4_0_0_4 + 4 * R_4_0_0_3;
            double R_2_0_0_6 = zpq * R_3_0_0_5 + 5 * R_3_0_0_4;
            double R_1_0_0_7 = zpq * R_2_0_0_6 + 6 * R_2_0_0_5;
            double R_0_0_0_8 = zpq * R_1_0_0_7 + 7 * R_1_0_0_6;
            vj_kl += R_0_0_0_8 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_1_6 * dm_ij_cache[tx+112];
            double R_0_0_1_7 = ypq * R_1_0_0_7;
            vj_kl += R_0_0_1_7 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+160];
            double R_1_0_1_6 = ypq * R_2_0_0_6;
            double R_0_0_2_6 = ypq * R_1_0_1_6 + 1 * R_1_0_0_6;
            vj_kl += R_0_0_2_6 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+192];
            double R_2_0_1_5 = ypq * R_3_0_0_5;
            double R_1_0_2_5 = ypq * R_2_0_1_5 + 1 * R_2_0_0_5;
            double R_0_0_3_5 = ypq * R_1_0_2_5 + 2 * R_1_0_1_5;
            vj_kl += R_0_0_3_5 * dm_ij_cache[tx+208];
            double R_3_0_1_4 = ypq * R_4_0_0_4;
            double R_2_0_2_4 = ypq * R_3_0_1_4 + 1 * R_3_0_0_4;
            double R_1_0_3_4 = ypq * R_2_0_2_4 + 2 * R_2_0_1_4;
            double R_0_0_4_4 = ypq * R_1_0_3_4 + 3 * R_1_0_2_4;
            vj_kl += R_0_0_4_4 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_0_6 * dm_ij_cache[tx+272];
            double R_0_1_0_7 = xpq * R_1_0_0_7;
            vj_kl += R_0_1_0_7 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+320];
            double R_0_1_1_6 = xpq * R_1_0_1_6;
            vj_kl += R_0_1_1_6 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+352];
            double R_0_1_2_5 = xpq * R_1_0_2_5;
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+368];
            double R_0_1_3_4 = xpq * R_1_0_3_4;
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+416];
            double R_1_1_0_6 = xpq * R_2_0_0_6;
            double R_0_2_0_6 = xpq * R_1_1_0_6 + 1 * R_1_0_0_6;
            vj_kl += R_0_2_0_6 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+448];
            double R_1_1_1_5 = xpq * R_2_0_1_5;
            double R_0_2_1_5 = xpq * R_1_1_1_5 + 1 * R_1_0_1_5;
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+464];
            double R_1_1_2_4 = xpq * R_2_0_2_4;
            double R_0_2_2_4 = xpq * R_1_1_2_4 + 1 * R_1_0_2_4;
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+496];
            double R_2_1_0_5 = xpq * R_3_0_0_5;
            double R_1_2_0_5 = xpq * R_2_1_0_5 + 1 * R_2_0_0_5;
            double R_0_3_0_5 = xpq * R_1_2_0_5 + 2 * R_1_1_0_5;
            vj_kl += R_0_3_0_5 * dm_ij_cache[tx+512];
            double R_2_1_1_4 = xpq * R_3_0_1_4;
            double R_1_2_1_4 = xpq * R_2_1_1_4 + 1 * R_2_0_1_4;
            double R_0_3_1_4 = xpq * R_1_2_1_4 + 2 * R_1_1_1_4;
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+528];
            double R_3_1_0_4 = xpq * R_4_0_0_4;
            double R_2_2_0_4 = xpq * R_3_1_0_4 + 1 * R_3_0_0_4;
            double R_1_3_0_4 = xpq * R_2_2_0_4 + 2 * R_2_1_0_4;
            double R_0_4_0_4 = xpq * R_1_3_0_4 + 3 * R_1_2_0_4;
            vj_kl += R_0_4_0_4 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+256] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_5 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_6 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_7 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_0_8 * dm_ij_cache[tx+48];
            double R_8_0_0_1 = zpq * gamma_inc[sq_id+9*256];
            double R_7_0_0_2 = zpq * R_8_0_0_1 + 1 * gamma_inc[sq_id+8*256];
            double R_6_0_0_3 = zpq * R_7_0_0_2 + 2 * R_7_0_0_1;
            double R_5_0_0_4 = zpq * R_6_0_0_3 + 3 * R_6_0_0_2;
            double R_4_0_0_5 = zpq * R_5_0_0_4 + 4 * R_5_0_0_3;
            double R_3_0_0_6 = zpq * R_4_0_0_5 + 5 * R_4_0_0_4;
            double R_2_0_0_7 = zpq * R_3_0_0_6 + 6 * R_3_0_0_5;
            double R_1_0_0_8 = zpq * R_2_0_0_7 + 7 * R_2_0_0_6;
            double R_0_0_0_9 = zpq * R_1_0_0_8 + 8 * R_1_0_0_7;
            vj_kl -= R_0_0_0_9 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_1_6 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_1_7 * dm_ij_cache[tx+112];
            double R_0_0_1_8 = ypq * R_1_0_0_8;
            vj_kl -= R_0_0_1_8 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_2_6 * dm_ij_cache[tx+160];
            double R_1_0_1_7 = ypq * R_2_0_0_7;
            double R_0_0_2_7 = ypq * R_1_0_1_7 + 1 * R_1_0_0_7;
            vj_kl -= R_0_0_2_7 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_3_5 * dm_ij_cache[tx+192];
            double R_2_0_1_6 = ypq * R_3_0_0_6;
            double R_1_0_2_6 = ypq * R_2_0_1_6 + 1 * R_2_0_0_6;
            double R_0_0_3_6 = ypq * R_1_0_2_6 + 2 * R_1_0_1_6;
            vj_kl -= R_0_0_3_6 * dm_ij_cache[tx+208];
            double R_3_0_1_5 = ypq * R_4_0_0_5;
            double R_2_0_2_5 = ypq * R_3_0_1_5 + 1 * R_3_0_0_5;
            double R_1_0_3_5 = ypq * R_2_0_2_5 + 2 * R_2_0_1_5;
            double R_0_0_4_5 = ypq * R_1_0_3_5 + 3 * R_1_0_2_5;
            vj_kl -= R_0_0_4_5 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_0_6 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_0_7 * dm_ij_cache[tx+272];
            double R_0_1_0_8 = xpq * R_1_0_0_8;
            vj_kl -= R_0_1_0_8 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_1_6 * dm_ij_cache[tx+320];
            double R_0_1_1_7 = xpq * R_1_0_1_7;
            vj_kl -= R_0_1_1_7 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+352];
            double R_0_1_2_6 = xpq * R_1_0_2_6;
            vj_kl -= R_0_1_2_6 * dm_ij_cache[tx+368];
            double R_0_1_3_5 = xpq * R_1_0_3_5;
            vj_kl -= R_0_1_3_5 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_0_6 * dm_ij_cache[tx+416];
            double R_1_1_0_7 = xpq * R_2_0_0_7;
            double R_0_2_0_7 = xpq * R_1_1_0_7 + 1 * R_1_0_0_7;
            vj_kl -= R_0_2_0_7 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+448];
            double R_1_1_1_6 = xpq * R_2_0_1_6;
            double R_0_2_1_6 = xpq * R_1_1_1_6 + 1 * R_1_0_1_6;
            vj_kl -= R_0_2_1_6 * dm_ij_cache[tx+464];
            double R_1_1_2_5 = xpq * R_2_0_2_5;
            double R_0_2_2_5 = xpq * R_1_1_2_5 + 1 * R_1_0_2_5;
            vj_kl -= R_0_2_2_5 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_0_5 * dm_ij_cache[tx+496];
            double R_2_1_0_6 = xpq * R_3_0_0_6;
            double R_1_2_0_6 = xpq * R_2_1_0_6 + 1 * R_2_0_0_6;
            double R_0_3_0_6 = xpq * R_1_2_0_6 + 2 * R_1_1_0_6;
            vj_kl -= R_0_3_0_6 * dm_ij_cache[tx+512];
            double R_2_1_1_5 = xpq * R_3_0_1_5;
            double R_1_2_1_5 = xpq * R_2_1_1_5 + 1 * R_2_0_1_5;
            double R_0_3_1_5 = xpq * R_1_2_1_5 + 2 * R_1_1_1_5;
            vj_kl -= R_0_3_1_5 * dm_ij_cache[tx+528];
            double R_3_1_0_5 = xpq * R_4_0_0_5;
            double R_2_2_0_5 = xpq * R_3_1_0_5 + 1 * R_3_0_0_5;
            double R_1_3_0_5 = xpq * R_2_2_0_5 + 2 * R_2_1_0_5;
            double R_0_4_0_5 = xpq * R_1_3_0_5 + 3 * R_1_2_0_5;
            vj_kl -= R_0_4_0_5 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+320] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_2_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+208];
            double R_4_0_1_0 = ypq * gamma_inc[sq_id+5*256];
            double R_3_0_2_0 = ypq * R_4_0_1_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_3_0 = ypq * R_3_0_2_0 + 2 * R_3_0_1_0;
            double R_1_0_4_0 = ypq * R_2_0_3_0 + 3 * R_2_0_2_0;
            double R_0_0_5_0 = ypq * R_1_0_4_0 + 4 * R_1_0_3_0;
            vj_kl -= R_0_0_5_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+368];
            double R_0_1_4_0 = xpq * R_1_0_4_0;
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+464];
            double R_1_1_3_0 = xpq * R_2_0_3_0;
            double R_0_2_3_0 = xpq * R_1_1_3_0 + 1 * R_1_0_3_0;
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+512];
            double R_2_1_2_0 = xpq * R_3_0_2_0;
            double R_1_2_2_0 = xpq * R_2_1_2_0 + 1 * R_2_0_2_0;
            double R_0_3_2_0 = xpq * R_1_2_2_0 + 2 * R_1_1_2_0;
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+528];
            double R_3_1_1_0 = xpq * R_4_0_1_0;
            double R_2_2_1_0 = xpq * R_3_1_1_0 + 1 * R_3_0_1_0;
            double R_1_3_1_0 = xpq * R_2_2_1_0 + 2 * R_2_1_1_0;
            double R_0_4_1_0 = xpq * R_1_3_1_0 + 3 * R_1_2_1_0;
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+384] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+208];
            double R_4_0_1_1 = ypq * R_5_0_0_1;
            double R_3_0_2_1 = ypq * R_4_0_1_1 + 1 * R_4_0_0_1;
            double R_2_0_3_1 = ypq * R_3_0_2_1 + 2 * R_3_0_1_1;
            double R_1_0_4_1 = ypq * R_2_0_3_1 + 3 * R_2_0_2_1;
            double R_0_0_5_1 = ypq * R_1_0_4_1 + 4 * R_1_0_3_1;
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+368];
            double R_0_1_4_1 = xpq * R_1_0_4_1;
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+464];
            double R_1_1_3_1 = xpq * R_2_0_3_1;
            double R_0_2_3_1 = xpq * R_1_1_3_1 + 1 * R_1_0_3_1;
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+512];
            double R_2_1_2_1 = xpq * R_3_0_2_1;
            double R_1_2_2_1 = xpq * R_2_1_2_1 + 1 * R_2_0_2_1;
            double R_0_3_2_1 = xpq * R_1_2_2_1 + 2 * R_1_1_2_1;
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+528];
            double R_3_1_1_1 = xpq * R_4_0_1_1;
            double R_2_2_1_1 = xpq * R_3_1_1_1 + 1 * R_3_0_1_1;
            double R_1_3_1_1 = xpq * R_2_2_1_1 + 2 * R_2_1_1_1;
            double R_0_4_1_1 = xpq * R_1_3_1_1 + 3 * R_1_2_1_1;
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+448] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_6 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+208];
            double R_4_0_1_2 = ypq * R_5_0_0_2;
            double R_3_0_2_2 = ypq * R_4_0_1_2 + 1 * R_4_0_0_2;
            double R_2_0_3_2 = ypq * R_3_0_2_2 + 2 * R_3_0_1_2;
            double R_1_0_4_2 = ypq * R_2_0_3_2 + 3 * R_2_0_2_2;
            double R_0_0_5_2 = ypq * R_1_0_4_2 + 4 * R_1_0_3_2;
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+368];
            double R_0_1_4_2 = xpq * R_1_0_4_2;
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+464];
            double R_1_1_3_2 = xpq * R_2_0_3_2;
            double R_0_2_3_2 = xpq * R_1_1_3_2 + 1 * R_1_0_3_2;
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+496];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+512];
            double R_2_1_2_2 = xpq * R_3_0_2_2;
            double R_1_2_2_2 = xpq * R_2_1_2_2 + 1 * R_2_0_2_2;
            double R_0_3_2_2 = xpq * R_1_2_2_2 + 2 * R_1_1_2_2;
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+528];
            double R_3_1_1_2 = xpq * R_4_0_1_2;
            double R_2_2_1_2 = xpq * R_3_1_1_2 + 1 * R_3_0_1_2;
            double R_1_3_1_2 = xpq * R_2_2_1_2 + 2 * R_2_1_1_2;
            double R_0_4_1_2 = xpq * R_1_3_1_2 + 3 * R_1_2_1_2;
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+512] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_1_6 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_1_7 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_2_6 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_3_5 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_4_4 * dm_ij_cache[tx+208];
            double R_4_0_1_3 = ypq * R_5_0_0_3;
            double R_3_0_2_3 = ypq * R_4_0_1_3 + 1 * R_4_0_0_3;
            double R_2_0_3_3 = ypq * R_3_0_2_3 + 2 * R_3_0_1_3;
            double R_1_0_4_3 = ypq * R_2_0_3_3 + 3 * R_2_0_2_3;
            double R_0_0_5_3 = ypq * R_1_0_4_3 + 4 * R_1_0_3_3;
            vj_kl += R_0_0_5_3 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_1_6 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+368];
            double R_0_1_4_3 = xpq * R_1_0_4_3;
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+464];
            double R_1_1_3_3 = xpq * R_2_0_3_3;
            double R_0_2_3_3 = xpq * R_1_1_3_3 + 1 * R_1_0_3_3;
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+496];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+512];
            double R_2_1_2_3 = xpq * R_3_0_2_3;
            double R_1_2_2_3 = xpq * R_2_1_2_3 + 1 * R_2_0_2_3;
            double R_0_3_2_3 = xpq * R_1_2_2_3 + 2 * R_1_1_2_3;
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+528];
            double R_3_1_1_3 = xpq * R_4_0_1_3;
            double R_2_2_1_3 = xpq * R_3_1_1_3 + 1 * R_3_0_1_3;
            double R_1_3_1_3 = xpq * R_2_2_1_3 + 2 * R_2_1_1_3;
            double R_0_4_1_3 = xpq * R_1_3_1_3 + 3 * R_1_2_1_3;
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+576] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_6 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_7 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_8 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_6 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_2_7 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_3_5 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_3_6 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_4_4 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_4_5 * dm_ij_cache[tx+208];
            double R_4_0_1_4 = ypq * R_5_0_0_4;
            double R_3_0_2_4 = ypq * R_4_0_1_4 + 1 * R_4_0_0_4;
            double R_2_0_3_4 = ypq * R_3_0_2_4 + 2 * R_3_0_1_4;
            double R_1_0_4_4 = ypq * R_2_0_3_4 + 3 * R_2_0_2_4;
            double R_0_0_5_4 = ypq * R_1_0_4_4 + 4 * R_1_0_3_4;
            vj_kl -= R_0_0_5_4 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_1_6 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_1_7 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_2_6 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_3_5 * dm_ij_cache[tx+368];
            double R_0_1_4_4 = xpq * R_1_0_4_4;
            vj_kl -= R_0_1_4_4 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_1_6 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_2_5 * dm_ij_cache[tx+464];
            double R_1_1_3_4 = xpq * R_2_0_3_4;
            double R_0_2_3_4 = xpq * R_1_1_3_4 + 1 * R_1_0_3_4;
            vj_kl -= R_0_2_3_4 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+496];
            vj_kl -= R_0_3_1_5 * dm_ij_cache[tx+512];
            double R_2_1_2_4 = xpq * R_3_0_2_4;
            double R_1_2_2_4 = xpq * R_2_1_2_4 + 1 * R_2_0_2_4;
            double R_0_3_2_4 = xpq * R_1_2_2_4 + 2 * R_1_1_2_4;
            vj_kl -= R_0_3_2_4 * dm_ij_cache[tx+528];
            double R_3_1_1_4 = xpq * R_4_0_1_4;
            double R_2_2_1_4 = xpq * R_3_1_1_4 + 1 * R_3_0_1_4;
            double R_1_3_1_4 = xpq * R_2_2_1_4 + 2 * R_2_1_1_4;
            double R_0_4_1_4 = xpq * R_1_3_1_4 + 3 * R_1_2_1_4;
            vj_kl -= R_0_4_1_4 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+640] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+208];
            double R_5_0_1_0 = ypq * gamma_inc[sq_id+6*256];
            double R_4_0_2_0 = ypq * R_5_0_1_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_3_0 = ypq * R_4_0_2_0 + 2 * R_4_0_1_0;
            double R_2_0_4_0 = ypq * R_3_0_3_0 + 3 * R_3_0_2_0;
            double R_1_0_5_0 = ypq * R_2_0_4_0 + 4 * R_2_0_3_0;
            double R_0_0_6_0 = ypq * R_1_0_5_0 + 5 * R_1_0_4_0;
            vj_kl += R_0_0_6_0 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+368];
            double R_0_1_5_0 = xpq * R_1_0_5_0;
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+464];
            double R_1_1_4_0 = xpq * R_2_0_4_0;
            double R_0_2_4_0 = xpq * R_1_1_4_0 + 1 * R_1_0_4_0;
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+496];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+512];
            double R_2_1_3_0 = xpq * R_3_0_3_0;
            double R_1_2_3_0 = xpq * R_2_1_3_0 + 1 * R_2_0_3_0;
            double R_0_3_3_0 = xpq * R_1_2_3_0 + 2 * R_1_1_3_0;
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+528];
            double R_3_1_2_0 = xpq * R_4_0_2_0;
            double R_2_2_2_0 = xpq * R_3_1_2_0 + 1 * R_3_0_2_0;
            double R_1_3_2_0 = xpq * R_2_2_2_0 + 2 * R_2_1_2_0;
            double R_0_4_2_0 = xpq * R_1_3_2_0 + 3 * R_1_2_2_0;
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+704] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+208];
            double R_5_0_1_1 = ypq * R_6_0_0_1;
            double R_4_0_2_1 = ypq * R_5_0_1_1 + 1 * R_5_0_0_1;
            double R_3_0_3_1 = ypq * R_4_0_2_1 + 2 * R_4_0_1_1;
            double R_2_0_4_1 = ypq * R_3_0_3_1 + 3 * R_3_0_2_1;
            double R_1_0_5_1 = ypq * R_2_0_4_1 + 4 * R_2_0_3_1;
            double R_0_0_6_1 = ypq * R_1_0_5_1 + 5 * R_1_0_4_1;
            vj_kl -= R_0_0_6_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+368];
            double R_0_1_5_1 = xpq * R_1_0_5_1;
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+464];
            double R_1_1_4_1 = xpq * R_2_0_4_1;
            double R_0_2_4_1 = xpq * R_1_1_4_1 + 1 * R_1_0_4_1;
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+512];
            double R_2_1_3_1 = xpq * R_3_0_3_1;
            double R_1_2_3_1 = xpq * R_2_1_3_1 + 1 * R_2_0_3_1;
            double R_0_3_3_1 = xpq * R_1_2_3_1 + 2 * R_1_1_3_1;
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+528];
            double R_3_1_2_1 = xpq * R_4_0_2_1;
            double R_2_2_2_1 = xpq * R_3_1_2_1 + 1 * R_3_0_2_1;
            double R_1_3_2_1 = xpq * R_2_2_2_1 + 2 * R_2_1_2_1;
            double R_0_4_2_1 = xpq * R_1_3_2_1 + 3 * R_1_2_2_1;
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+768] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_2_6 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_3_5 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_4_4 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_5_3 * dm_ij_cache[tx+208];
            double R_5_0_1_2 = ypq * R_6_0_0_2;
            double R_4_0_2_2 = ypq * R_5_0_1_2 + 1 * R_5_0_0_2;
            double R_3_0_3_2 = ypq * R_4_0_2_2 + 2 * R_4_0_1_2;
            double R_2_0_4_2 = ypq * R_3_0_3_2 + 3 * R_3_0_2_2;
            double R_1_0_5_2 = ypq * R_2_0_4_2 + 4 * R_2_0_3_2;
            double R_0_0_6_2 = ypq * R_1_0_5_2 + 5 * R_1_0_4_2;
            vj_kl += R_0_0_6_2 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+368];
            double R_0_1_5_2 = xpq * R_1_0_5_2;
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+464];
            double R_1_1_4_2 = xpq * R_2_0_4_2;
            double R_0_2_4_2 = xpq * R_1_1_4_2 + 1 * R_1_0_4_2;
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+496];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+512];
            double R_2_1_3_2 = xpq * R_3_0_3_2;
            double R_1_2_3_2 = xpq * R_2_1_3_2 + 1 * R_2_0_3_2;
            double R_0_3_3_2 = xpq * R_1_2_3_2 + 2 * R_1_1_3_2;
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+528];
            double R_3_1_2_2 = xpq * R_4_0_2_2;
            double R_2_2_2_2 = xpq * R_3_1_2_2 + 1 * R_3_0_2_2;
            double R_1_3_2_2 = xpq * R_2_2_2_2 + 2 * R_2_1_2_2;
            double R_0_4_2_2 = xpq * R_1_3_2_2 + 3 * R_1_2_2_2;
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+832] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_2_6 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_2_7 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_3_5 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_3_6 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_4_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_4_5 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_5_3 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_5_4 * dm_ij_cache[tx+208];
            double R_5_0_1_3 = ypq * R_6_0_0_3;
            double R_4_0_2_3 = ypq * R_5_0_1_3 + 1 * R_5_0_0_3;
            double R_3_0_3_3 = ypq * R_4_0_2_3 + 2 * R_4_0_1_3;
            double R_2_0_4_3 = ypq * R_3_0_3_3 + 3 * R_3_0_2_3;
            double R_1_0_5_3 = ypq * R_2_0_4_3 + 4 * R_2_0_3_3;
            double R_0_0_6_3 = ypq * R_1_0_5_3 + 5 * R_1_0_4_3;
            vj_kl -= R_0_0_6_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_2_6 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_3_5 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_4_4 * dm_ij_cache[tx+368];
            double R_0_1_5_3 = xpq * R_1_0_5_3;
            vj_kl -= R_0_1_5_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_2_5 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_3_4 * dm_ij_cache[tx+464];
            double R_1_1_4_3 = xpq * R_2_0_4_3;
            double R_0_2_4_3 = xpq * R_1_1_4_3 + 1 * R_1_0_4_3;
            vj_kl -= R_0_2_4_3 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+496];
            vj_kl -= R_0_3_2_4 * dm_ij_cache[tx+512];
            double R_2_1_3_3 = xpq * R_3_0_3_3;
            double R_1_2_3_3 = xpq * R_2_1_3_3 + 1 * R_2_0_3_3;
            double R_0_3_3_3 = xpq * R_1_2_3_3 + 2 * R_1_1_3_3;
            vj_kl -= R_0_3_3_3 * dm_ij_cache[tx+528];
            double R_3_1_2_3 = xpq * R_4_0_2_3;
            double R_2_2_2_3 = xpq * R_3_1_2_3 + 1 * R_3_0_2_3;
            double R_1_3_2_3 = xpq * R_2_2_2_3 + 2 * R_2_1_2_3;
            double R_0_4_2_3 = xpq * R_1_3_2_3 + 3 * R_1_2_2_3;
            vj_kl -= R_0_4_2_3 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+896] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_5_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_6_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_6_1 * dm_ij_cache[tx+208];
            double R_6_0_1_0 = ypq * gamma_inc[sq_id+7*256];
            double R_5_0_2_0 = ypq * R_6_0_1_0 + 1 * gamma_inc[sq_id+6*256];
            double R_4_0_3_0 = ypq * R_5_0_2_0 + 2 * R_5_0_1_0;
            double R_3_0_4_0 = ypq * R_4_0_3_0 + 3 * R_4_0_2_0;
            double R_2_0_5_0 = ypq * R_3_0_4_0 + 4 * R_3_0_3_0;
            double R_1_0_6_0 = ypq * R_2_0_5_0 + 5 * R_2_0_4_0;
            double R_0_0_7_0 = ypq * R_1_0_6_0 + 6 * R_1_0_5_0;
            vj_kl -= R_0_0_7_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+368];
            double R_0_1_6_0 = xpq * R_1_0_6_0;
            vj_kl -= R_0_1_6_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+464];
            double R_1_1_5_0 = xpq * R_2_0_5_0;
            double R_0_2_5_0 = xpq * R_1_1_5_0 + 1 * R_1_0_5_0;
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+512];
            double R_2_1_4_0 = xpq * R_3_0_4_0;
            double R_1_2_4_0 = xpq * R_2_1_4_0 + 1 * R_2_0_4_0;
            double R_0_3_4_0 = xpq * R_1_2_4_0 + 2 * R_1_1_4_0;
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+528];
            double R_3_1_3_0 = xpq * R_4_0_3_0;
            double R_2_2_3_0 = xpq * R_3_1_3_0 + 1 * R_3_0_3_0;
            double R_1_3_3_0 = xpq * R_2_2_3_0 + 2 * R_2_1_3_0;
            double R_0_4_3_0 = xpq * R_1_3_3_0 + 3 * R_1_2_3_0;
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+960] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_3_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_4_4 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_5_3 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_6_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_6_2 * dm_ij_cache[tx+208];
            double R_6_0_1_1 = ypq * R_7_0_0_1;
            double R_5_0_2_1 = ypq * R_6_0_1_1 + 1 * R_6_0_0_1;
            double R_4_0_3_1 = ypq * R_5_0_2_1 + 2 * R_5_0_1_1;
            double R_3_0_4_1 = ypq * R_4_0_3_1 + 3 * R_4_0_2_1;
            double R_2_0_5_1 = ypq * R_3_0_4_1 + 4 * R_3_0_3_1;
            double R_1_0_6_1 = ypq * R_2_0_5_1 + 5 * R_2_0_4_1;
            double R_0_0_7_1 = ypq * R_1_0_6_1 + 6 * R_1_0_5_1;
            vj_kl += R_0_0_7_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+368];
            double R_0_1_6_1 = xpq * R_1_0_6_1;
            vj_kl += R_0_1_6_1 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+464];
            double R_1_1_5_1 = xpq * R_2_0_5_1;
            double R_0_2_5_1 = xpq * R_1_1_5_1 + 1 * R_1_0_5_1;
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+512];
            double R_2_1_4_1 = xpq * R_3_0_4_1;
            double R_1_2_4_1 = xpq * R_2_1_4_1 + 1 * R_2_0_4_1;
            double R_0_3_4_1 = xpq * R_1_2_4_1 + 2 * R_1_1_4_1;
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+528];
            double R_3_1_3_1 = xpq * R_4_0_3_1;
            double R_2_2_3_1 = xpq * R_3_1_3_1 + 1 * R_3_0_3_1;
            double R_1_3_3_1 = xpq * R_2_2_3_1 + 2 * R_2_1_3_1;
            double R_0_4_3_1 = xpq * R_1_3_3_1 + 3 * R_1_2_3_1;
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1024] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_3_5 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_3_6 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_4_4 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_4_5 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_5_3 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_5_4 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_6_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_6_3 * dm_ij_cache[tx+208];
            double R_6_0_1_2 = ypq * R_7_0_0_2;
            double R_5_0_2_2 = ypq * R_6_0_1_2 + 1 * R_6_0_0_2;
            double R_4_0_3_2 = ypq * R_5_0_2_2 + 2 * R_5_0_1_2;
            double R_3_0_4_2 = ypq * R_4_0_3_2 + 3 * R_4_0_2_2;
            double R_2_0_5_2 = ypq * R_3_0_4_2 + 4 * R_3_0_3_2;
            double R_1_0_6_2 = ypq * R_2_0_5_2 + 5 * R_2_0_4_2;
            double R_0_0_7_2 = ypq * R_1_0_6_2 + 6 * R_1_0_5_2;
            vj_kl -= R_0_0_7_2 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_3_5 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_4_4 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_5_3 * dm_ij_cache[tx+368];
            double R_0_1_6_2 = xpq * R_1_0_6_2;
            vj_kl -= R_0_1_6_2 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_3_4 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_4_3 * dm_ij_cache[tx+464];
            double R_1_1_5_2 = xpq * R_2_0_5_2;
            double R_0_2_5_2 = xpq * R_1_1_5_2 + 1 * R_1_0_5_2;
            vj_kl -= R_0_2_5_2 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+496];
            vj_kl -= R_0_3_3_3 * dm_ij_cache[tx+512];
            double R_2_1_4_2 = xpq * R_3_0_4_2;
            double R_1_2_4_2 = xpq * R_2_1_4_2 + 1 * R_2_0_4_2;
            double R_0_3_4_2 = xpq * R_1_2_4_2 + 2 * R_1_1_4_2;
            vj_kl -= R_0_3_4_2 * dm_ij_cache[tx+528];
            double R_3_1_3_2 = xpq * R_4_0_3_2;
            double R_2_2_3_2 = xpq * R_3_1_3_2 + 1 * R_3_0_3_2;
            double R_1_3_3_2 = xpq * R_2_2_3_2 + 2 * R_2_1_3_2;
            double R_0_4_3_2 = xpq * R_1_3_3_2 + 3 * R_1_2_3_2;
            vj_kl -= R_0_4_3_2 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1088] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_4_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_5_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_6_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_6_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_6_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_7_0 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_7_1 * dm_ij_cache[tx+208];
            double R_7_0_1_0 = ypq * gamma_inc[sq_id+8*256];
            double R_6_0_2_0 = ypq * R_7_0_1_0 + 1 * gamma_inc[sq_id+7*256];
            double R_5_0_3_0 = ypq * R_6_0_2_0 + 2 * R_6_0_1_0;
            double R_4_0_4_0 = ypq * R_5_0_3_0 + 3 * R_5_0_2_0;
            double R_3_0_5_0 = ypq * R_4_0_4_0 + 4 * R_4_0_3_0;
            double R_2_0_6_0 = ypq * R_3_0_5_0 + 5 * R_3_0_4_0;
            double R_1_0_7_0 = ypq * R_2_0_6_0 + 6 * R_2_0_5_0;
            double R_0_0_8_0 = ypq * R_1_0_7_0 + 7 * R_1_0_6_0;
            vj_kl += R_0_0_8_0 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_6_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_6_1 * dm_ij_cache[tx+368];
            double R_0_1_7_0 = xpq * R_1_0_7_0;
            vj_kl += R_0_1_7_0 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+464];
            double R_1_1_6_0 = xpq * R_2_0_6_0;
            double R_0_2_6_0 = xpq * R_1_1_6_0 + 1 * R_1_0_6_0;
            vj_kl += R_0_2_6_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+496];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+512];
            double R_2_1_5_0 = xpq * R_3_0_5_0;
            double R_1_2_5_0 = xpq * R_2_1_5_0 + 1 * R_2_0_5_0;
            double R_0_3_5_0 = xpq * R_1_2_5_0 + 2 * R_1_1_5_0;
            vj_kl += R_0_3_5_0 * dm_ij_cache[tx+528];
            double R_3_1_4_0 = xpq * R_4_0_4_0;
            double R_2_2_4_0 = xpq * R_3_1_4_0 + 1 * R_3_0_4_0;
            double R_1_3_4_0 = xpq * R_2_2_4_0 + 2 * R_2_1_4_0;
            double R_0_4_4_0 = xpq * R_1_3_4_0 + 3 * R_1_2_4_0;
            vj_kl += R_0_4_4_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1152] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_4_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_4_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_5_3 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_5_4 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_6_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_6_2 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_6_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_7_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_7_2 * dm_ij_cache[tx+208];
            double R_7_0_1_1 = ypq * R_8_0_0_1;
            double R_6_0_2_1 = ypq * R_7_0_1_1 + 1 * R_7_0_0_1;
            double R_5_0_3_1 = ypq * R_6_0_2_1 + 2 * R_6_0_1_1;
            double R_4_0_4_1 = ypq * R_5_0_3_1 + 3 * R_5_0_2_1;
            double R_3_0_5_1 = ypq * R_4_0_4_1 + 4 * R_4_0_3_1;
            double R_2_0_6_1 = ypq * R_3_0_5_1 + 5 * R_3_0_4_1;
            double R_1_0_7_1 = ypq * R_2_0_6_1 + 6 * R_2_0_5_1;
            double R_0_0_8_1 = ypq * R_1_0_7_1 + 7 * R_1_0_6_1;
            vj_kl -= R_0_0_8_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_4_4 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_5_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_6_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_6_2 * dm_ij_cache[tx+368];
            double R_0_1_7_1 = xpq * R_1_0_7_1;
            vj_kl -= R_0_1_7_1 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_4_3 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_5_2 * dm_ij_cache[tx+464];
            double R_1_1_6_1 = xpq * R_2_0_6_1;
            double R_0_2_6_1 = xpq * R_1_1_6_1 + 1 * R_1_0_6_1;
            vj_kl -= R_0_2_6_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_3_4_2 * dm_ij_cache[tx+512];
            double R_2_1_5_1 = xpq * R_3_0_5_1;
            double R_1_2_5_1 = xpq * R_2_1_5_1 + 1 * R_2_0_5_1;
            double R_0_3_5_1 = xpq * R_1_2_5_1 + 2 * R_1_1_5_1;
            vj_kl -= R_0_3_5_1 * dm_ij_cache[tx+528];
            double R_3_1_4_1 = xpq * R_4_0_4_1;
            double R_2_2_4_1 = xpq * R_3_1_4_1 + 1 * R_3_0_4_1;
            double R_1_3_4_1 = xpq * R_2_2_4_1 + 2 * R_2_1_4_1;
            double R_0_4_4_1 = xpq * R_1_3_4_1 + 3 * R_1_2_4_1;
            vj_kl -= R_0_4_4_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1216] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_5_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_5_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_5_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_6_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_6_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_6_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_6_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_7_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_7_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_7_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_8_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_8_1 * dm_ij_cache[tx+208];
            double R_8_0_1_0 = ypq * gamma_inc[sq_id+9*256];
            double R_7_0_2_0 = ypq * R_8_0_1_0 + 1 * gamma_inc[sq_id+8*256];
            double R_6_0_3_0 = ypq * R_7_0_2_0 + 2 * R_7_0_1_0;
            double R_5_0_4_0 = ypq * R_6_0_3_0 + 3 * R_6_0_2_0;
            double R_4_0_5_0 = ypq * R_5_0_4_0 + 4 * R_5_0_3_0;
            double R_3_0_6_0 = ypq * R_4_0_5_0 + 5 * R_4_0_4_0;
            double R_2_0_7_0 = ypq * R_3_0_6_0 + 6 * R_3_0_5_0;
            double R_1_0_8_0 = ypq * R_2_0_7_0 + 7 * R_2_0_6_0;
            double R_0_0_9_0 = ypq * R_1_0_8_0 + 8 * R_1_0_7_0;
            vj_kl -= R_0_0_9_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_5_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_6_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_6_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_6_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_7_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_7_1 * dm_ij_cache[tx+368];
            double R_0_1_8_0 = xpq * R_1_0_8_0;
            vj_kl -= R_0_1_8_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_5_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_6_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_6_1 * dm_ij_cache[tx+464];
            double R_1_1_7_0 = xpq * R_2_0_7_0;
            double R_0_2_7_0 = xpq * R_1_1_7_0 + 1 * R_1_0_7_0;
            vj_kl -= R_0_2_7_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_5_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_3_5_1 * dm_ij_cache[tx+512];
            double R_2_1_6_0 = xpq * R_3_0_6_0;
            double R_1_2_6_0 = xpq * R_2_1_6_0 + 1 * R_2_0_6_0;
            double R_0_3_6_0 = xpq * R_1_2_6_0 + 2 * R_1_1_6_0;
            vj_kl -= R_0_3_6_0 * dm_ij_cache[tx+528];
            double R_3_1_5_0 = xpq * R_4_0_5_0;
            double R_2_2_5_0 = xpq * R_3_1_5_0 + 1 * R_3_0_5_0;
            double R_1_3_5_0 = xpq * R_2_2_5_0 + 2 * R_2_1_5_0;
            double R_0_4_5_0 = xpq * R_1_3_5_0 + 3 * R_1_2_5_0;
            vj_kl -= R_0_4_5_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1280] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_0_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+512];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+528];
            double R_4_1_0_0 = xpq * gamma_inc[sq_id+5*256];
            double R_3_2_0_0 = xpq * R_4_1_0_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_3_0_0 = xpq * R_3_2_0_0 + 2 * R_3_1_0_0;
            double R_1_4_0_0 = xpq * R_2_3_0_0 + 3 * R_2_2_0_0;
            double R_0_5_0_0 = xpq * R_1_4_0_0 + 4 * R_1_3_0_0;
            vj_kl -= R_0_5_0_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1344] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+288];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+384];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+400];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+416];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+432];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+448];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+464];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+480];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+512];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+528];
            double R_4_1_0_1 = xpq * R_5_0_0_1;
            double R_3_2_0_1 = xpq * R_4_1_0_1 + 1 * R_4_0_0_1;
            double R_2_3_0_1 = xpq * R_3_2_0_1 + 2 * R_3_1_0_1;
            double R_1_4_0_1 = xpq * R_2_3_0_1 + 3 * R_2_2_0_1;
            double R_0_5_0_1 = xpq * R_1_4_0_1 + 4 * R_1_3_0_1;
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1408] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_0_6 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+272];
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+288];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+304];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+384];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+400];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+416];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+432];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+464];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+480];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+496];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+512];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+528];
            double R_4_1_0_2 = xpq * R_5_0_0_2;
            double R_3_2_0_2 = xpq * R_4_1_0_2 + 1 * R_4_0_0_2;
            double R_2_3_0_2 = xpq * R_3_2_0_2 + 2 * R_3_1_0_2;
            double R_1_4_0_2 = xpq * R_2_3_0_2 + 3 * R_2_2_0_2;
            double R_0_5_0_2 = xpq * R_1_4_0_2 + 4 * R_1_3_0_2;
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1472] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_0_6 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_0_7 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_1_6 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+272];
            vj_kl += R_0_2_0_6 * dm_ij_cache[tx+288];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+304];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+384];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+400];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+416];
            vj_kl += R_0_3_0_5 * dm_ij_cache[tx+432];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+448];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+464];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+480];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+496];
            vj_kl += R_0_4_0_4 * dm_ij_cache[tx+512];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+528];
            double R_4_1_0_3 = xpq * R_5_0_0_3;
            double R_3_2_0_3 = xpq * R_4_1_0_3 + 1 * R_4_0_0_3;
            double R_2_3_0_3 = xpq * R_3_2_0_3 + 2 * R_3_1_0_3;
            double R_1_4_0_3 = xpq * R_2_3_0_3 + 3 * R_2_2_0_3;
            double R_0_5_0_3 = xpq * R_1_4_0_3 + 4 * R_1_3_0_3;
            vj_kl += R_0_5_0_3 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1536] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_6 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_7 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_0_8 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_1_6 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_1_7 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_2_6 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_3_5 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_4_4 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_0_6 * dm_ij_cache[tx+272];
            vj_kl -= R_0_2_0_7 * dm_ij_cache[tx+288];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+304];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_1_6 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_2_5 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_3_4 * dm_ij_cache[tx+384];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+400];
            vj_kl -= R_0_3_0_5 * dm_ij_cache[tx+416];
            vj_kl -= R_0_3_0_6 * dm_ij_cache[tx+432];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+448];
            vj_kl -= R_0_3_1_5 * dm_ij_cache[tx+464];
            vj_kl -= R_0_3_2_4 * dm_ij_cache[tx+480];
            vj_kl -= R_0_4_0_4 * dm_ij_cache[tx+496];
            vj_kl -= R_0_4_0_5 * dm_ij_cache[tx+512];
            vj_kl -= R_0_4_1_4 * dm_ij_cache[tx+528];
            double R_4_1_0_4 = xpq * R_5_0_0_4;
            double R_3_2_0_4 = xpq * R_4_1_0_4 + 1 * R_4_0_0_4;
            double R_2_3_0_4 = xpq * R_3_2_0_4 + 2 * R_3_1_0_4;
            double R_1_4_0_4 = xpq * R_2_3_0_4 + 3 * R_2_2_0_4;
            double R_0_5_0_4 = xpq * R_1_4_0_4 + 4 * R_1_3_0_4;
            vj_kl -= R_0_5_0_4 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1600] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+288];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+304];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+384];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+464];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+496];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+512];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+528];
            double R_4_1_1_0 = xpq * R_5_0_1_0;
            double R_3_2_1_0 = xpq * R_4_1_1_0 + 1 * R_4_0_1_0;
            double R_2_3_1_0 = xpq * R_3_2_1_0 + 2 * R_3_1_1_0;
            double R_1_4_1_0 = xpq * R_2_3_1_0 + 3 * R_2_2_1_0;
            double R_0_5_1_0 = xpq * R_1_4_1_0 + 4 * R_1_3_1_0;
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1664] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+288];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+384];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+400];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+416];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+432];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+448];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+464];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+512];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+528];
            double R_4_1_1_1 = xpq * R_5_0_1_1;
            double R_3_2_1_1 = xpq * R_4_1_1_1 + 1 * R_4_0_1_1;
            double R_2_3_1_1 = xpq * R_3_2_1_1 + 2 * R_3_1_1_1;
            double R_1_4_1_1 = xpq * R_2_3_1_1 + 3 * R_2_2_1_1;
            double R_0_5_1_1 = xpq * R_1_4_1_1 + 4 * R_1_3_1_1;
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1728] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_1_6 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+272];
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+288];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+304];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+384];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+400];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+416];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+432];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+448];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+464];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+480];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+496];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+512];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+528];
            double R_4_1_1_2 = xpq * R_5_0_1_2;
            double R_3_2_1_2 = xpq * R_4_1_1_2 + 1 * R_4_0_1_2;
            double R_2_3_1_2 = xpq * R_3_2_1_2 + 2 * R_3_1_1_2;
            double R_1_4_1_2 = xpq * R_2_3_1_2 + 3 * R_2_2_1_2;
            double R_0_5_1_2 = xpq * R_1_4_1_2 + 4 * R_1_3_1_2;
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1792] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_1_6 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_1_7 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_2_6 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_3_5 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_4_4 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_5_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+272];
            vj_kl -= R_0_2_1_6 * dm_ij_cache[tx+288];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+304];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_2_5 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_3_4 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_4_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+400];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+416];
            vj_kl -= R_0_3_1_5 * dm_ij_cache[tx+432];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+448];
            vj_kl -= R_0_3_2_4 * dm_ij_cache[tx+464];
            vj_kl -= R_0_3_3_3 * dm_ij_cache[tx+480];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+496];
            vj_kl -= R_0_4_1_4 * dm_ij_cache[tx+512];
            vj_kl -= R_0_4_2_3 * dm_ij_cache[tx+528];
            double R_4_1_1_3 = xpq * R_5_0_1_3;
            double R_3_2_1_3 = xpq * R_4_1_1_3 + 1 * R_4_0_1_3;
            double R_2_3_1_3 = xpq * R_3_2_1_3 + 2 * R_3_1_1_3;
            double R_1_4_1_3 = xpq * R_2_3_1_3 + 3 * R_2_2_1_3;
            double R_0_5_1_3 = xpq * R_1_4_1_3 + 4 * R_1_3_1_3;
            vj_kl -= R_0_5_1_3 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1856] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_6_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+512];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+528];
            double R_4_1_2_0 = xpq * R_5_0_2_0;
            double R_3_2_2_0 = xpq * R_4_1_2_0 + 1 * R_4_0_2_0;
            double R_2_3_2_0 = xpq * R_3_2_2_0 + 2 * R_3_1_2_0;
            double R_1_4_2_0 = xpq * R_2_3_2_0 + 3 * R_2_2_2_0;
            double R_0_5_2_0 = xpq * R_1_4_2_0 + 4 * R_1_3_2_0;
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1920] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_6_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+288];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+384];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+400];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+416];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+432];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+448];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+464];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+480];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+512];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+528];
            double R_4_1_2_1 = xpq * R_5_0_2_1;
            double R_3_2_2_1 = xpq * R_4_1_2_1 + 1 * R_4_0_2_1;
            double R_2_3_2_1 = xpq * R_3_2_2_1 + 2 * R_3_1_2_1;
            double R_1_4_2_1 = xpq * R_2_3_2_1 + 3 * R_2_2_2_1;
            double R_0_5_2_1 = xpq * R_1_4_2_1 + 4 * R_1_3_2_1;
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1984] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_2_6 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_3_5 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_4_4 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_5_3 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_6_2 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+272];
            vj_kl -= R_0_2_2_5 * dm_ij_cache[tx+288];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+304];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_3_4 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_4_3 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_5_2 * dm_ij_cache[tx+384];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+400];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+416];
            vj_kl -= R_0_3_2_4 * dm_ij_cache[tx+432];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_3_3_3 * dm_ij_cache[tx+464];
            vj_kl -= R_0_3_4_2 * dm_ij_cache[tx+480];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+496];
            vj_kl -= R_0_4_2_3 * dm_ij_cache[tx+512];
            vj_kl -= R_0_4_3_2 * dm_ij_cache[tx+528];
            double R_4_1_2_2 = xpq * R_5_0_2_2;
            double R_3_2_2_2 = xpq * R_4_1_2_2 + 1 * R_4_0_2_2;
            double R_2_3_2_2 = xpq * R_3_2_2_2 + 2 * R_3_1_2_2;
            double R_1_4_2_2 = xpq * R_2_3_2_2 + 3 * R_2_2_2_2;
            double R_0_5_2_2 = xpq * R_1_4_2_2 + 4 * R_1_3_2_2;
            vj_kl -= R_0_5_2_2 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2048] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_6_0 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_6_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_7_0 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+288];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+304];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_6_0 * dm_ij_cache[tx+384];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+464];
            vj_kl += R_0_3_5_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+496];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+512];
            vj_kl += R_0_4_4_0 * dm_ij_cache[tx+528];
            double R_4_1_3_0 = xpq * R_5_0_3_0;
            double R_3_2_3_0 = xpq * R_4_1_3_0 + 1 * R_4_0_3_0;
            double R_2_3_3_0 = xpq * R_3_2_3_0 + 2 * R_3_1_3_0;
            double R_1_4_3_0 = xpq * R_2_3_3_0 + 3 * R_2_2_3_0;
            double R_0_5_3_0 = xpq * R_1_4_3_0 + 4 * R_1_3_3_0;
            vj_kl += R_0_5_3_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2112] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_3_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_4_4 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_5_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_6_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_6_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_7_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_2_3_4 * dm_ij_cache[tx+288];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_4_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_5_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_6_1 * dm_ij_cache[tx+384];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+400];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+416];
            vj_kl -= R_0_3_3_3 * dm_ij_cache[tx+432];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+448];
            vj_kl -= R_0_3_4_2 * dm_ij_cache[tx+464];
            vj_kl -= R_0_3_5_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_4_3_2 * dm_ij_cache[tx+512];
            vj_kl -= R_0_4_4_1 * dm_ij_cache[tx+528];
            double R_4_1_3_1 = xpq * R_5_0_3_1;
            double R_3_2_3_1 = xpq * R_4_1_3_1 + 1 * R_4_0_3_1;
            double R_2_3_3_1 = xpq * R_3_2_3_1 + 2 * R_3_1_3_1;
            double R_1_4_3_1 = xpq * R_2_3_3_1 + 3 * R_2_2_3_1;
            double R_0_5_3_1 = xpq * R_1_4_3_1 + 4 * R_1_3_3_1;
            vj_kl -= R_0_5_3_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2176] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_4_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_5_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_6_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_6_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_6_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_7_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_7_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_8_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_2_4_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_5_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_6_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_6_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_7_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_3_4_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_3_5_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_3_5_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_3_6_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_4_4_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_4_4_1 * dm_ij_cache[tx+512];
            vj_kl -= R_0_4_5_0 * dm_ij_cache[tx+528];
            double R_4_1_4_0 = xpq * R_5_0_4_0;
            double R_3_2_4_0 = xpq * R_4_1_4_0 + 1 * R_4_0_4_0;
            double R_2_3_4_0 = xpq * R_3_2_4_0 + 2 * R_3_1_4_0;
            double R_1_4_4_0 = xpq * R_2_3_4_0 + 3 * R_2_2_4_0;
            double R_0_5_4_0 = xpq * R_1_4_4_0 + 4 * R_1_3_4_0;
            vj_kl -= R_0_5_4_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2240] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+224];
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+288];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+304];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+368];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+384];
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+464];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+496];
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+512];
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+528];
            double R_5_1_0_0 = xpq * gamma_inc[sq_id+6*256];
            double R_4_2_0_0 = xpq * R_5_1_0_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_3_0_0 = xpq * R_4_2_0_0 + 2 * R_4_1_0_0;
            double R_2_4_0_0 = xpq * R_3_3_0_0 + 3 * R_3_2_0_0;
            double R_1_5_0_0 = xpq * R_2_4_0_0 + 4 * R_2_3_0_0;
            double R_0_6_0_0 = xpq * R_1_5_0_0 + 5 * R_1_4_0_0;
            vj_kl += R_0_6_0_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2304] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+128];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+288];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+384];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+400];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+416];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+432];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+448];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+464];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+512];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+528];
            double R_5_1_0_1 = xpq * R_6_0_0_1;
            double R_4_2_0_1 = xpq * R_5_1_0_1 + 1 * R_5_0_0_1;
            double R_3_3_0_1 = xpq * R_4_2_0_1 + 2 * R_4_1_0_1;
            double R_2_4_0_1 = xpq * R_3_3_0_1 + 3 * R_3_2_0_1;
            double R_1_5_0_1 = xpq * R_2_4_0_1 + 4 * R_2_3_0_1;
            double R_0_6_0_1 = xpq * R_1_5_0_1 + 5 * R_1_4_0_1;
            vj_kl -= R_0_6_0_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2368] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_0_6 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+224];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_0_5 * dm_ij_cache[tx+288];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+304];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+320];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+336];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+352];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+368];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+384];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+400];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+416];
            vj_kl += R_0_4_0_4 * dm_ij_cache[tx+432];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+448];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+464];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+480];
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+496];
            vj_kl += R_0_5_0_3 * dm_ij_cache[tx+512];
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+528];
            double R_5_1_0_2 = xpq * R_6_0_0_2;
            double R_4_2_0_2 = xpq * R_5_1_0_2 + 1 * R_5_0_0_2;
            double R_3_3_0_2 = xpq * R_4_2_0_2 + 2 * R_4_1_0_2;
            double R_2_4_0_2 = xpq * R_3_3_0_2 + 3 * R_3_2_0_2;
            double R_1_5_0_2 = xpq * R_2_4_0_2 + 4 * R_2_3_0_2;
            double R_0_6_0_2 = xpq * R_1_5_0_2 + 5 * R_1_4_0_2;
            vj_kl += R_0_6_0_2 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2432] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_0_6 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_0_7 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_1_6 * dm_ij_cache[tx+128];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_2_5 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_3_4 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_4_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_0_5 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_0_6 * dm_ij_cache[tx+288];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+304];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+320];
            vj_kl -= R_0_3_1_5 * dm_ij_cache[tx+336];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+352];
            vj_kl -= R_0_3_2_4 * dm_ij_cache[tx+368];
            vj_kl -= R_0_3_3_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+400];
            vj_kl -= R_0_4_0_4 * dm_ij_cache[tx+416];
            vj_kl -= R_0_4_0_5 * dm_ij_cache[tx+432];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+448];
            vj_kl -= R_0_4_1_4 * dm_ij_cache[tx+464];
            vj_kl -= R_0_4_2_3 * dm_ij_cache[tx+480];
            vj_kl -= R_0_5_0_3 * dm_ij_cache[tx+496];
            vj_kl -= R_0_5_0_4 * dm_ij_cache[tx+512];
            vj_kl -= R_0_5_1_3 * dm_ij_cache[tx+528];
            double R_5_1_0_3 = xpq * R_6_0_0_3;
            double R_4_2_0_3 = xpq * R_5_1_0_3 + 1 * R_5_0_0_3;
            double R_3_3_0_3 = xpq * R_4_2_0_3 + 2 * R_4_1_0_3;
            double R_2_4_0_3 = xpq * R_3_3_0_3 + 3 * R_3_2_0_3;
            double R_1_5_0_3 = xpq * R_2_4_0_3 + 4 * R_2_3_0_3;
            double R_0_6_0_3 = xpq * R_1_5_0_3 + 5 * R_1_4_0_3;
            vj_kl -= R_0_6_0_3 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2496] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+512];
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+528];
            double R_5_1_1_0 = xpq * R_6_0_1_0;
            double R_4_2_1_0 = xpq * R_5_1_1_0 + 1 * R_5_0_1_0;
            double R_3_3_1_0 = xpq * R_4_2_1_0 + 2 * R_4_1_1_0;
            double R_2_4_1_0 = xpq * R_3_3_1_0 + 3 * R_3_2_1_0;
            double R_1_5_1_0 = xpq * R_2_4_1_0 + 4 * R_2_3_1_0;
            double R_0_6_1_0 = xpq * R_1_5_1_0 + 5 * R_1_4_1_0;
            vj_kl -= R_0_6_1_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2560] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+288];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+336];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+384];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+400];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+416];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+432];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+448];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+464];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+480];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+512];
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+528];
            double R_5_1_1_1 = xpq * R_6_0_1_1;
            double R_4_2_1_1 = xpq * R_5_1_1_1 + 1 * R_5_0_1_1;
            double R_3_3_1_1 = xpq * R_4_2_1_1 + 2 * R_4_1_1_1;
            double R_2_4_1_1 = xpq * R_3_3_1_1 + 3 * R_3_2_1_1;
            double R_1_5_1_1 = xpq * R_2_4_1_1 + 4 * R_2_3_1_1;
            double R_0_6_1_1 = xpq * R_1_5_1_1 + 5 * R_1_4_1_1;
            vj_kl += R_0_6_1_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2624] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_1_6 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_2_5 * dm_ij_cache[tx+128];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_3_4 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_4_3 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_5_2 * dm_ij_cache[tx+224];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_1_5 * dm_ij_cache[tx+288];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+304];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+320];
            vj_kl -= R_0_3_2_4 * dm_ij_cache[tx+336];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+352];
            vj_kl -= R_0_3_3_3 * dm_ij_cache[tx+368];
            vj_kl -= R_0_3_4_2 * dm_ij_cache[tx+384];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+400];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+416];
            vj_kl -= R_0_4_1_4 * dm_ij_cache[tx+432];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_4_2_3 * dm_ij_cache[tx+464];
            vj_kl -= R_0_4_3_2 * dm_ij_cache[tx+480];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+496];
            vj_kl -= R_0_5_1_3 * dm_ij_cache[tx+512];
            vj_kl -= R_0_5_2_2 * dm_ij_cache[tx+528];
            double R_5_1_1_2 = xpq * R_6_0_1_2;
            double R_4_2_1_2 = xpq * R_5_1_1_2 + 1 * R_5_0_1_2;
            double R_3_3_1_2 = xpq * R_4_2_1_2 + 2 * R_4_1_1_2;
            double R_2_4_1_2 = xpq * R_3_3_1_2 + 3 * R_3_2_1_2;
            double R_1_5_1_2 = xpq * R_2_4_1_2 + 4 * R_2_3_1_2;
            double R_0_6_1_2 = xpq * R_1_5_1_2 + 5 * R_1_4_1_2;
            vj_kl -= R_0_6_1_2 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2688] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_6_0 * dm_ij_cache[tx+224];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+288];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+304];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+368];
            vj_kl += R_0_3_5_0 * dm_ij_cache[tx+384];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+464];
            vj_kl += R_0_4_4_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+496];
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+512];
            vj_kl += R_0_5_3_0 * dm_ij_cache[tx+528];
            double R_5_1_2_0 = xpq * R_6_0_2_0;
            double R_4_2_2_0 = xpq * R_5_1_2_0 + 1 * R_5_0_2_0;
            double R_3_3_2_0 = xpq * R_4_2_2_0 + 2 * R_4_1_2_0;
            double R_2_4_2_0 = xpq * R_3_3_2_0 + 3 * R_3_2_2_0;
            double R_1_5_2_0 = xpq * R_2_4_2_0 + 4 * R_2_3_2_0;
            double R_0_6_2_0 = xpq * R_1_5_2_0 + 5 * R_1_4_2_0;
            vj_kl += R_0_6_2_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2752] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_2_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_3_4 * dm_ij_cache[tx+128];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_4_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_5_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_6_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_2_4 * dm_ij_cache[tx+288];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_3_3_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_3_4_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_3_5_1 * dm_ij_cache[tx+384];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+400];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+416];
            vj_kl -= R_0_4_2_3 * dm_ij_cache[tx+432];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+448];
            vj_kl -= R_0_4_3_2 * dm_ij_cache[tx+464];
            vj_kl -= R_0_4_4_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_5_2_2 * dm_ij_cache[tx+512];
            vj_kl -= R_0_5_3_1 * dm_ij_cache[tx+528];
            double R_5_1_2_1 = xpq * R_6_0_2_1;
            double R_4_2_2_1 = xpq * R_5_1_2_1 + 1 * R_5_0_2_1;
            double R_3_3_2_1 = xpq * R_4_2_2_1 + 2 * R_4_1_2_1;
            double R_2_4_2_1 = xpq * R_3_3_2_1 + 3 * R_3_2_2_1;
            double R_1_5_2_1 = xpq * R_2_4_2_1 + 4 * R_2_3_2_1;
            double R_0_6_2_1 = xpq * R_1_5_2_1 + 5 * R_1_4_2_1;
            vj_kl -= R_0_6_2_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2816] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_3_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_4_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_5_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_6_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_6_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_7_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_3_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_3_4_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_3_5_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_3_5_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_3_6_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_4_3_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_4_4_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_4_4_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_4_5_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_5_3_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_5_3_1 * dm_ij_cache[tx+512];
            vj_kl -= R_0_5_4_0 * dm_ij_cache[tx+528];
            double R_5_1_3_0 = xpq * R_6_0_3_0;
            double R_4_2_3_0 = xpq * R_5_1_3_0 + 1 * R_5_0_3_0;
            double R_3_3_3_0 = xpq * R_4_2_3_0 + 2 * R_4_1_3_0;
            double R_2_4_3_0 = xpq * R_3_3_3_0 + 3 * R_3_2_3_0;
            double R_1_5_3_0 = xpq * R_2_4_3_0 + 4 * R_2_3_3_0;
            double R_0_6_3_0 = xpq * R_1_5_3_0 + 5 * R_1_4_3_0;
            vj_kl -= R_0_6_3_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2880] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_5_0_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_6_0_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_6_0_1 * dm_ij_cache[tx+512];
            vj_kl -= R_0_6_1_0 * dm_ij_cache[tx+528];
            double R_6_1_0_0 = xpq * gamma_inc[sq_id+7*256];
            double R_5_2_0_0 = xpq * R_6_1_0_0 + 1 * gamma_inc[sq_id+6*256];
            double R_4_3_0_0 = xpq * R_5_2_0_0 + 2 * R_5_1_0_0;
            double R_3_4_0_0 = xpq * R_4_3_0_0 + 3 * R_4_2_0_0;
            double R_2_5_0_0 = xpq * R_3_4_0_0 + 4 * R_3_3_0_0;
            double R_1_6_0_0 = xpq * R_2_5_0_0 + 5 * R_2_4_0_0;
            double R_0_7_0_0 = xpq * R_1_6_0_0 + 6 * R_1_5_0_0;
            vj_kl -= R_0_7_0_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2944] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_3_0_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+80];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+128];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+144];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+160];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+176];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_4_0_4 * dm_ij_cache[tx+288];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+336];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+384];
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+400];
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+416];
            vj_kl += R_0_5_0_3 * dm_ij_cache[tx+432];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+448];
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+464];
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+480];
            vj_kl += R_0_6_0_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_6_0_2 * dm_ij_cache[tx+512];
            vj_kl += R_0_6_1_1 * dm_ij_cache[tx+528];
            double R_6_1_0_1 = xpq * R_7_0_0_1;
            double R_5_2_0_1 = xpq * R_6_1_0_1 + 1 * R_6_0_0_1;
            double R_4_3_0_1 = xpq * R_5_2_0_1 + 2 * R_5_1_0_1;
            double R_3_4_0_1 = xpq * R_4_3_0_1 + 3 * R_4_2_0_1;
            double R_2_5_0_1 = xpq * R_3_4_0_1 + 4 * R_3_3_0_1;
            double R_1_6_0_1 = xpq * R_2_5_0_1 + 5 * R_2_4_0_1;
            double R_0_7_0_1 = xpq * R_1_6_0_1 + 6 * R_1_5_0_1;
            vj_kl += R_0_7_0_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3008] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_3_0_5 * dm_ij_cache[tx+48];
            vj_kl -= R_0_3_0_6 * dm_ij_cache[tx+64];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+80];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+112];
            vj_kl -= R_0_3_1_5 * dm_ij_cache[tx+128];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+160];
            vj_kl -= R_0_3_2_4 * dm_ij_cache[tx+176];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_3_3_3 * dm_ij_cache[tx+208];
            vj_kl -= R_0_3_4_2 * dm_ij_cache[tx+224];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_4_0_4 * dm_ij_cache[tx+272];
            vj_kl -= R_0_4_0_5 * dm_ij_cache[tx+288];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+304];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+320];
            vj_kl -= R_0_4_1_4 * dm_ij_cache[tx+336];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+352];
            vj_kl -= R_0_4_2_3 * dm_ij_cache[tx+368];
            vj_kl -= R_0_4_3_2 * dm_ij_cache[tx+384];
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+400];
            vj_kl -= R_0_5_0_3 * dm_ij_cache[tx+416];
            vj_kl -= R_0_5_0_4 * dm_ij_cache[tx+432];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_5_1_3 * dm_ij_cache[tx+464];
            vj_kl -= R_0_5_2_2 * dm_ij_cache[tx+480];
            vj_kl -= R_0_6_0_2 * dm_ij_cache[tx+496];
            vj_kl -= R_0_6_0_3 * dm_ij_cache[tx+512];
            vj_kl -= R_0_6_1_2 * dm_ij_cache[tx+528];
            double R_6_1_0_2 = xpq * R_7_0_0_2;
            double R_5_2_0_2 = xpq * R_6_1_0_2 + 1 * R_6_0_0_2;
            double R_4_3_0_2 = xpq * R_5_2_0_2 + 2 * R_5_1_0_2;
            double R_3_4_0_2 = xpq * R_4_3_0_2 + 3 * R_4_2_0_2;
            double R_2_5_0_2 = xpq * R_3_4_0_2 + 4 * R_3_3_0_2;
            double R_1_6_0_2 = xpq * R_2_5_0_2 + 5 * R_2_4_0_2;
            double R_0_7_0_2 = xpq * R_1_6_0_2 + 6 * R_1_5_0_2;
            vj_kl -= R_0_7_0_2 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3072] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+192];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_3_5_0 * dm_ij_cache[tx+224];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+288];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+304];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+368];
            vj_kl += R_0_4_4_0 * dm_ij_cache[tx+384];
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+464];
            vj_kl += R_0_5_3_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_6_1_0 * dm_ij_cache[tx+496];
            vj_kl += R_0_6_1_1 * dm_ij_cache[tx+512];
            vj_kl += R_0_6_2_0 * dm_ij_cache[tx+528];
            double R_6_1_1_0 = xpq * R_7_0_1_0;
            double R_5_2_1_0 = xpq * R_6_1_1_0 + 1 * R_6_0_1_0;
            double R_4_3_1_0 = xpq * R_5_2_1_0 + 2 * R_5_1_1_0;
            double R_3_4_1_0 = xpq * R_4_3_1_0 + 3 * R_4_2_1_0;
            double R_2_5_1_0 = xpq * R_3_4_1_0 + 4 * R_3_3_1_0;
            double R_1_6_1_0 = xpq * R_2_5_1_0 + 5 * R_2_4_1_0;
            double R_0_7_1_0 = xpq * R_1_6_1_0 + 6 * R_1_5_1_0;
            vj_kl += R_0_7_1_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3136] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_3_1_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+112];
            vj_kl -= R_0_3_2_4 * dm_ij_cache[tx+128];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+160];
            vj_kl -= R_0_3_3_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_3_4_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_3_5_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_4_1_4 * dm_ij_cache[tx+288];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_4_2_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_4_3_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_4_4_1 * dm_ij_cache[tx+384];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+400];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+416];
            vj_kl -= R_0_5_1_3 * dm_ij_cache[tx+432];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+448];
            vj_kl -= R_0_5_2_2 * dm_ij_cache[tx+464];
            vj_kl -= R_0_5_3_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_6_1_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_6_1_2 * dm_ij_cache[tx+512];
            vj_kl -= R_0_6_2_1 * dm_ij_cache[tx+528];
            double R_6_1_1_1 = xpq * R_7_0_1_1;
            double R_5_2_1_1 = xpq * R_6_1_1_1 + 1 * R_6_0_1_1;
            double R_4_3_1_1 = xpq * R_5_2_1_1 + 2 * R_5_1_1_1;
            double R_3_4_1_1 = xpq * R_4_3_1_1 + 3 * R_4_2_1_1;
            double R_2_5_1_1 = xpq * R_3_4_1_1 + 4 * R_3_3_1_1;
            double R_1_6_1_1 = xpq * R_2_5_1_1 + 5 * R_2_4_1_1;
            double R_0_7_1_1 = xpq * R_1_6_1_1 + 6 * R_1_5_1_1;
            vj_kl -= R_0_7_1_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3200] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_3_2_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_3_3_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_3_4_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_3_5_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_3_5_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_3_6_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_4_2_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_4_3_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_4_4_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_4_4_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_4_5_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_5_2_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_5_3_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_5_3_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_5_4_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_6_2_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_6_2_1 * dm_ij_cache[tx+512];
            vj_kl -= R_0_6_3_0 * dm_ij_cache[tx+528];
            double R_6_1_2_0 = xpq * R_7_0_2_0;
            double R_5_2_2_0 = xpq * R_6_1_2_0 + 1 * R_6_0_2_0;
            double R_4_3_2_0 = xpq * R_5_2_2_0 + 2 * R_5_1_2_0;
            double R_3_4_2_0 = xpq * R_4_3_2_0 + 3 * R_4_2_2_0;
            double R_2_5_2_0 = xpq * R_3_4_2_0 + 4 * R_3_3_2_0;
            double R_1_6_2_0 = xpq * R_2_5_2_0 + 5 * R_2_4_2_0;
            double R_0_7_2_0 = xpq * R_1_6_2_0 + 6 * R_1_5_2_0;
            vj_kl -= R_0_7_2_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3264] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_4_0_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+80];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+144];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+160];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+192];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_4_4_0 * dm_ij_cache[tx+224];
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_5_0_3 * dm_ij_cache[tx+288];
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+304];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+368];
            vj_kl += R_0_5_3_0 * dm_ij_cache[tx+384];
            vj_kl += R_0_6_0_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_6_0_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_6_0_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_6_1_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_6_1_1 * dm_ij_cache[tx+464];
            vj_kl += R_0_6_2_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_7_0_0 * dm_ij_cache[tx+496];
            vj_kl += R_0_7_0_1 * dm_ij_cache[tx+512];
            vj_kl += R_0_7_1_0 * dm_ij_cache[tx+528];
            double R_7_1_0_0 = xpq * gamma_inc[sq_id+8*256];
            double R_6_2_0_0 = xpq * R_7_1_0_0 + 1 * gamma_inc[sq_id+7*256];
            double R_5_3_0_0 = xpq * R_6_2_0_0 + 2 * R_6_1_0_0;
            double R_4_4_0_0 = xpq * R_5_3_0_0 + 3 * R_5_2_0_0;
            double R_3_5_0_0 = xpq * R_4_4_0_0 + 4 * R_4_3_0_0;
            double R_2_6_0_0 = xpq * R_3_5_0_0 + 5 * R_3_4_0_0;
            double R_1_7_0_0 = xpq * R_2_6_0_0 + 6 * R_2_5_0_0;
            double R_0_8_0_0 = xpq * R_1_7_0_0 + 7 * R_1_6_0_0;
            vj_kl += R_0_8_0_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3328] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_4_0_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_4_0_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+80];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+112];
            vj_kl -= R_0_4_1_4 * dm_ij_cache[tx+128];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+144];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+160];
            vj_kl -= R_0_4_2_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_4_3_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_4_4_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_5_0_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_5_0_4 * dm_ij_cache[tx+288];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_5_1_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_5_2_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_5_3_1 * dm_ij_cache[tx+384];
            vj_kl -= R_0_6_0_1 * dm_ij_cache[tx+400];
            vj_kl -= R_0_6_0_2 * dm_ij_cache[tx+416];
            vj_kl -= R_0_6_0_3 * dm_ij_cache[tx+432];
            vj_kl -= R_0_6_1_1 * dm_ij_cache[tx+448];
            vj_kl -= R_0_6_1_2 * dm_ij_cache[tx+464];
            vj_kl -= R_0_6_2_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_7_0_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_7_0_2 * dm_ij_cache[tx+512];
            vj_kl -= R_0_7_1_1 * dm_ij_cache[tx+528];
            double R_7_1_0_1 = xpq * R_8_0_0_1;
            double R_6_2_0_1 = xpq * R_7_1_0_1 + 1 * R_7_0_0_1;
            double R_5_3_0_1 = xpq * R_6_2_0_1 + 2 * R_6_1_0_1;
            double R_4_4_0_1 = xpq * R_5_3_0_1 + 3 * R_5_2_0_1;
            double R_3_5_0_1 = xpq * R_4_4_0_1 + 4 * R_4_3_0_1;
            double R_2_6_0_1 = xpq * R_3_5_0_1 + 5 * R_3_4_0_1;
            double R_1_7_0_1 = xpq * R_2_6_0_1 + 6 * R_2_5_0_1;
            double R_0_8_0_1 = xpq * R_1_7_0_1 + 7 * R_1_6_0_1;
            vj_kl -= R_0_8_0_1 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3392] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_4_1_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_4_2_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_4_3_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_4_4_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_4_4_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_4_5_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_5_1_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_5_2_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_5_3_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_5_3_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_5_4_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_6_1_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_6_1_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_6_1_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_6_2_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_6_2_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_6_3_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_7_1_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_7_1_1 * dm_ij_cache[tx+512];
            vj_kl -= R_0_7_2_0 * dm_ij_cache[tx+528];
            double R_7_1_1_0 = xpq * R_8_0_1_0;
            double R_6_2_1_0 = xpq * R_7_1_1_0 + 1 * R_7_0_1_0;
            double R_5_3_1_0 = xpq * R_6_2_1_0 + 2 * R_6_1_1_0;
            double R_4_4_1_0 = xpq * R_5_3_1_0 + 3 * R_5_2_1_0;
            double R_3_5_1_0 = xpq * R_4_4_1_0 + 4 * R_4_3_1_0;
            double R_2_6_1_0 = xpq * R_3_5_1_0 + 5 * R_3_4_1_0;
            double R_1_7_1_0 = xpq * R_2_6_1_0 + 6 * R_2_5_1_0;
            double R_0_8_1_0 = xpq * R_1_7_1_0 + 7 * R_1_6_1_0;
            vj_kl -= R_0_8_1_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3456] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_5_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_5_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_5_0_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+80];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_5_1_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+144];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+160];
            vj_kl -= R_0_5_2_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_5_3_0 * dm_ij_cache[tx+192];
            vj_kl -= R_0_5_3_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_5_4_0 * dm_ij_cache[tx+224];
            vj_kl -= R_0_6_0_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_6_0_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_6_0_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_6_0_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_6_1_0 * dm_ij_cache[tx+304];
            vj_kl -= R_0_6_1_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_6_1_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_6_2_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_6_2_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_6_3_0 * dm_ij_cache[tx+384];
            vj_kl -= R_0_7_0_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_7_0_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_7_0_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_7_1_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_7_1_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_7_2_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_8_0_0 * dm_ij_cache[tx+496];
            vj_kl -= R_0_8_0_1 * dm_ij_cache[tx+512];
            vj_kl -= R_0_8_1_0 * dm_ij_cache[tx+528];
            double R_8_1_0_0 = xpq * gamma_inc[sq_id+9*256];
            double R_7_2_0_0 = xpq * R_8_1_0_0 + 1 * gamma_inc[sq_id+8*256];
            double R_6_3_0_0 = xpq * R_7_2_0_0 + 2 * R_7_1_0_0;
            double R_5_4_0_0 = xpq * R_6_3_0_0 + 3 * R_6_2_0_0;
            double R_4_5_0_0 = xpq * R_5_4_0_0 + 4 * R_5_3_0_0;
            double R_3_6_0_0 = xpq * R_4_5_0_0 + 5 * R_4_4_0_0;
            double R_2_7_0_0 = xpq * R_3_6_0_0 + 6 * R_3_5_0_0;
            double R_1_8_0_0 = xpq * R_2_7_0_0 + 7 * R_2_6_0_0;
            double R_0_9_0_0 = xpq * R_1_8_0_0 + 8 * R_1_7_0_0;
            vj_kl -= R_0_9_0_0 * dm_ij_cache[tx+544];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3520] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_1 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_0_5 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_0_1_0 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_0_5_0 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_1_0_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_0_0 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_2 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_0_6 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_0_0_5 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_0_6 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_0_7 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_6 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_0_6 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_0_0_6 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_0_7 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_0_8 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_0_1_6 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_7 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_0_2_6 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_0_3_5 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_4_4 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_0_5_3 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_0_6 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_0_7 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_1_6 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_0_6 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_3_0_5 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_0_4 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_0_3 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_5 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_0_0_6 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_0_0_7 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_0_8 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_0_9 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_1_6 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_0_1_7 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_8 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_2_6 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_0_2_7 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_3_5 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_0_3_6 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_0_4_4 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_4_5 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_0_5_4 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_0_6 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_0_7 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_0_8 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_6 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_1_7 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_1_2_6 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_3_5 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_1_4_4 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_2_0_6 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_0_7 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_2_1_6 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_2_2_5 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_3_4 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_0_5 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_3_0_6 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_3_1_5 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_2_4 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_4_0_4 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_0_5 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_4_1_4 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_0_4 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+64] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_0_2_0 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_0_6_0 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+80] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_1_6 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_0_6_1 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+96] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_1_6 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_1_7 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_2_6 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_0_3_5 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_0_4_4 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_5_3 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_0_6_2 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_1_6 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+112] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_0_1_6 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_1_7 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_1_8 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_0_2_6 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_2_7 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_3_5 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_0_3_6 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_4_4 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_0_4_5 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_0_5_3 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_5_4 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_0_6_3 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_1_6 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_1_7 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_2_6 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_1_3_5 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_4_4 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_1_5_3 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_1_6 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_2_2_5 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_2_3_4 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_4_3 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_3_1_5 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_3_2_4 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_3_3 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_1_4 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_4_2_3 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_1_3 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+128] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_5_0 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_0_6_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_6_1 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_0_7_0 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_1_6_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+144] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_2_6 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_3_5 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_0_4_4 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_0_5_3 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_0_6_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_6_2 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_0_7_1 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_1_6_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+160] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_2_6 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_2_7 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_0_3_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_3_6 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_4_4 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_0_4_5 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_5_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_0_5_4 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_0_6_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_6_3 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_0_7_2 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_2_6 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_3_5 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_1_4_4 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_5_3 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_1_6_2 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_2_5 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_2_3_4 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_2_4_3 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_5_2 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_3_2_4 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_3_3_3 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_4_2 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_2_3 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_4_3_2 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_2_2 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+176] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_3_5 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_4_4 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_0_5_3 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_6_0 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_6_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_0_6_2 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_0_7_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_7_1 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_0_8_0 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_1_6_0 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_6_1 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_1_7_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_6_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_5_0 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_4_4_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_3_0 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+192] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_3_5 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_3_6 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_0_4_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_4_5 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_5_3 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_0_5_4 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_6_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_6_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_0_6_3 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_0_7_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_7_2 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_0_8_1 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_3_5 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_4_4 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_1_5_3 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_1_6_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_6_2 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_1_7_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_3_4 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_2_4_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_2_5_2 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_6_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_3_3_3 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_3_4_2 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_5_1 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_3_2 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_4_4_1 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_3_1 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+208] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_0_4_4 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_0_4_5 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_0_5_0 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_0_5_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_5_4 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_0_6_0 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_0_6_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_6_2 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_0_6_3 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_0_7_0 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_7_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_0_7_2 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_0_8_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_8_1 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_0_9_0 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_4_4 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_1_5_3 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_1_6_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_6_1 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_1_6_2 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_1_7_0 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_1_7_1 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_1_8_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_2_4_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_2_5_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_6_0 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_2_6_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_7_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_3_4_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_5_0 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_3_5_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_3_6_0 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_4_4_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_4_4_1 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_4_5_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_5_4_0 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+224] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_2_0_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_6_0_0 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+240] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_1_0_6 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_6_0_1 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+256] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_1_0_6 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_1_0_7 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_1_6 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_0_6 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_3_0_5 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_4_0_4 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_5_0_3 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_6_0_2 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+272] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_1_0_6 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_1_0_7 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_1_0_8 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_1_1_6 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_1_7 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_1_2_6 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_3_5 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_4_4 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_1_5_3 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_2_0_6 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_0_7 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_1_6 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_2_2_5 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_2_3_4 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_2_4_3 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_3_0_5 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_3_0_6 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_3_1_5 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_3_2_4 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_3_3 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_4_0_4 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_4_0_5 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_4_1_4 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_4_2_3 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_5_0_3 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_5_0_4 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_5_1_3 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_6_0_3 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+288] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_1_6_0 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_6_1_0 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+304] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_1_1_6 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_1_6_1 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_6_1_1 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+320] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_1_1_6 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_1_1_7 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_2_6 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_1_3_5 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_4_4 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_5_3 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_1_6_2 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_1_6 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_2_5 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_2_3_4 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_2_4_3 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_2_5_2 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_3_1_5 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_3_2_4 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_3_3_3 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_4_2 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_4_1_4 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_4_2_3 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_4_3_2 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_5_1_3 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_5_2_2 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_6_1_2 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+336] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_1_6_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_6_1 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_1_7_0 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_2_6_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_5_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_4_4_0 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_5_3_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_6_2_0 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+352] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_1_2_6 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_3_5 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_1_4_4 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_5_3 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_1_6_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_6_2 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_1_7_1 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_2_5 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_3_4 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_2_4_3 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_2_5_2 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_2_6_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_3_2_4 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_3_3_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_3_4_2 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_5_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_4_2_3 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_4_3_2 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_4_4_1 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_5_2_2 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_5_3_1 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_6_2_1 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+368] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_1_3_5 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_4_4 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_1_5_3 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_1_6_0 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_6_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_6_2 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_1_7_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_7_1 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_1_8_0 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_3_4 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_2_4_3 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_2_5_2 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_2_6_0 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_2_6_1 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_2_7_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_3_3_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_3_4_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_5_0 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_3_5_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_6_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_4_3_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_4_0 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_4_4_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_4_5_0 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_5_3_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_5_3_1 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_5_4_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_6_3_0 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+384] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_5_0_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_6_0_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_6_0_1 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_6_1_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_7_0_0 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+400] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_2_0_6 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_3_0_5 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_4_0_4 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_5_0_3 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_6_0_1 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_6_0_2 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_6_1_1 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_7_0_1 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+416] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_2_0_6 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_2_0_7 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_1_6 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_2_2_5 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_3_4 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_2_4_3 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_2_5_2 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_3_0_5 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_3_0_6 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_3_1_5 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_3_2_4 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_3_3_3 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_3_4_2 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_4_0_4 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_4_0_5 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_4_1_4 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_4_2_3 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_4_3_2 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_5_0_3 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_5_0_4 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_5_1_3 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_5_2_2 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_6_0_2 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_6_0_3 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_6_1_2 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_7_0_2 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+432] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_2_6_0 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_3_5_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_4_4_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_5_3_0 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_6_1_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_6_1_1 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_6_2_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_7_1_0 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+448] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_2_1_6 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_2_5 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_2_3_4 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_4_3 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_2_5_2 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_2_6_1 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_3_1_5 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_3_2_4 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_3_3_3 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_3_4_2 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_3_5_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_4_1_4 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_4_2_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_4_3_2 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_4_4_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_5_1_3 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_5_2_2 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_5_3_1 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_6_1_1 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_6_1_2 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_6_2_1 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_7_1_1 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+464] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_2_2_5 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_3_4 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_2_4_3 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_5_2 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_2_6_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_2_6_1 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_2_7_0 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_3_2_4 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_3_3_3 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_3_4_2 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_3_5_0 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_3_5_1 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_3_6_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_4_2_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_4_3_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_4_0 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_4_4_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_4_5_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_5_2_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_5_3_0 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_5_3_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_5_4_0 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_6_2_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_6_2_1 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_6_3_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_7_2_0 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+480] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_3_0_5 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_3_5_0 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_4_0_4 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_4_4_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_5_0_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_5_3_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_6_0_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_6_0_1 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_6_0_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_6_1_0 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_6_1_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_6_2_0 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_7_0_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_7_0_1 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_7_1_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_8_0_0 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+496] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_3_0_5 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_3_0_6 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_3_1_5 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_3_2_4 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_3_3 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_3_4_2 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_3_5_1 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_4_0_4 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_4_0_5 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_4_1_4 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_4_2_3 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_4_3_2 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_4_4_1 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_5_0_3 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_5_0_4 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_5_1_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_5_2_2 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_5_3_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_6_0_1 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_6_0_2 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_6_0_3 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_6_1_1 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_6_1_2 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_6_2_1 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_7_0_1 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_7_0_2 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_7_1_1 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_8_0_1 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+512] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_3_1_5 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_3_2_4 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_3_3_3 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_4_2 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_3_5_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_3_5_1 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_3_6_0 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_4_1_4 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_4_2_3 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_4_3_2 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_4_4_0 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_4_4_1 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_4_5_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_5_1_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_5_2_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_5_3_0 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_5_3_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_5_4_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_6_1_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_6_1_1 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_6_1_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_6_2_0 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_6_2_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_6_3_0 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_7_1_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_7_1_1 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_7_2_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_8_1_0 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+528] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+64];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+128];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+192];
            vj_ij += R_0_4_0_4 * dm_kl_cache[sq_kl+256];
            vj_ij -= R_0_4_0_5 * dm_kl_cache[sq_kl+320];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+384];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+448];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+512];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_4_1_4 * dm_kl_cache[sq_kl+640];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+704];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+832];
            vj_ij -= R_0_4_2_3 * dm_kl_cache[sq_kl+896];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_4_3_2 * dm_kl_cache[sq_kl+1088];
            vj_ij += R_0_4_4_0 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_4_4_1 * dm_kl_cache[sq_kl+1216];
            vj_ij -= R_0_4_5_0 * dm_kl_cache[sq_kl+1280];
            vj_ij -= R_0_5_0_0 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+1472];
            vj_ij += R_0_5_0_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_5_0_4 * dm_kl_cache[sq_kl+1600];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+1664];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+1792];
            vj_ij -= R_0_5_1_3 * dm_kl_cache[sq_kl+1856];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+1984];
            vj_ij -= R_0_5_2_2 * dm_kl_cache[sq_kl+2048];
            vj_ij += R_0_5_3_0 * dm_kl_cache[sq_kl+2112];
            vj_ij -= R_0_5_3_1 * dm_kl_cache[sq_kl+2176];
            vj_ij -= R_0_5_4_0 * dm_kl_cache[sq_kl+2240];
            vj_ij += R_0_6_0_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_6_0_1 * dm_kl_cache[sq_kl+2368];
            vj_ij += R_0_6_0_2 * dm_kl_cache[sq_kl+2432];
            vj_ij -= R_0_6_0_3 * dm_kl_cache[sq_kl+2496];
            vj_ij -= R_0_6_1_0 * dm_kl_cache[sq_kl+2560];
            vj_ij += R_0_6_1_1 * dm_kl_cache[sq_kl+2624];
            vj_ij -= R_0_6_1_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_6_2_0 * dm_kl_cache[sq_kl+2752];
            vj_ij -= R_0_6_2_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_6_3_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_7_0_0 * dm_kl_cache[sq_kl+2944];
            vj_ij += R_0_7_0_1 * dm_kl_cache[sq_kl+3008];
            vj_ij -= R_0_7_0_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_7_1_0 * dm_kl_cache[sq_kl+3136];
            vj_ij -= R_0_7_1_1 * dm_kl_cache[sq_kl+3200];
            vj_ij -= R_0_7_2_0 * dm_kl_cache[sq_kl+3264];
            vj_ij += R_0_8_0_0 * dm_kl_cache[sq_kl+3328];
            vj_ij -= R_0_8_0_1 * dm_kl_cache[sq_kl+3392];
            vj_ij -= R_0_8_1_0 * dm_kl_cache[sq_kl+3456];
            vj_ij -= R_0_9_0_0 * dm_kl_cache[sq_kl+3520];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+544] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 35; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 224; n += 16) {
        int i = n / 4;
        int tile = n % 4;
        int task_kl = blockIdx.y * 64 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*64]);
        }
    }
}

// TILEX=21, TILEY=32,
__global__
void md_j_5_0(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 336;
    int task_kl0 = blockIdx.y * 512;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 1536;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 2048;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 896;
    double *dm_ij_cache = vj_kl_cache + 512;
    double *dm_kl_cache = dm_ij_cache + 896;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 2112; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 512; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 512; n += 256) {
        int task_kl = blockIdx.y * 512 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+512] = ykl;
            Rq_cache[n+1024] = zkl;
            Rq_cache[n+1536] = akl;
        }
    }

    for (int n = tx; n < 32; n += 16) {
        int i = n / 32;
        int tile = n % 32;
        int task_kl = blockIdx.y * 512 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*512] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 21; ++batch_ij) {
        int task_ij0 = blockIdx.x * 336 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 56; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 32; ++batch_kl) {
            int task_kl0 = blockIdx.y * 512 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+512];
            double zkl = Rq_cache[sq_kl+1024];
            double akl = Rq_cache[sq_kl+1536];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 5);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 5; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+32];
            double R_2_0_0_1 = zpq * gamma_inc[sq_id+3*256];
            double R_1_0_0_2 = zpq * R_2_0_0_1 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_0_3 = zpq * R_1_0_0_2 + 2 * R_1_0_0_1;
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+48];
            double R_3_0_0_1 = zpq * gamma_inc[sq_id+4*256];
            double R_2_0_0_2 = zpq * R_3_0_0_1 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_0_3 = zpq * R_2_0_0_2 + 2 * R_2_0_0_1;
            double R_0_0_0_4 = zpq * R_1_0_0_3 + 3 * R_1_0_0_2;
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+64];
            double R_4_0_0_1 = zpq * gamma_inc[sq_id+5*256];
            double R_3_0_0_2 = zpq * R_4_0_0_1 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_0_3 = zpq * R_3_0_0_2 + 2 * R_3_0_0_1;
            double R_1_0_0_4 = zpq * R_2_0_0_3 + 3 * R_2_0_0_2;
            double R_0_0_0_5 = zpq * R_1_0_0_4 + 4 * R_1_0_0_3;
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+80];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+96];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+112];
            double R_0_0_1_2 = ypq * R_1_0_0_2;
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+128];
            double R_0_0_1_3 = ypq * R_1_0_0_3;
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+144];
            double R_0_0_1_4 = ypq * R_1_0_0_4;
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+160];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+176];
            double R_1_0_1_1 = ypq * R_2_0_0_1;
            double R_0_0_2_1 = ypq * R_1_0_1_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+192];
            double R_1_0_1_2 = ypq * R_2_0_0_2;
            double R_0_0_2_2 = ypq * R_1_0_1_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+208];
            double R_1_0_1_3 = ypq * R_2_0_0_3;
            double R_0_0_2_3 = ypq * R_1_0_1_3 + 1 * R_1_0_0_3;
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+224];
            double R_2_0_1_0 = ypq * gamma_inc[sq_id+3*256];
            double R_1_0_2_0 = ypq * R_2_0_1_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_3_0 = ypq * R_1_0_2_0 + 2 * R_1_0_1_0;
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+240];
            double R_2_0_1_1 = ypq * R_3_0_0_1;
            double R_1_0_2_1 = ypq * R_2_0_1_1 + 1 * R_2_0_0_1;
            double R_0_0_3_1 = ypq * R_1_0_2_1 + 2 * R_1_0_1_1;
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+256];
            double R_2_0_1_2 = ypq * R_3_0_0_2;
            double R_1_0_2_2 = ypq * R_2_0_1_2 + 1 * R_2_0_0_2;
            double R_0_0_3_2 = ypq * R_1_0_2_2 + 2 * R_1_0_1_2;
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+272];
            double R_3_0_1_0 = ypq * gamma_inc[sq_id+4*256];
            double R_2_0_2_0 = ypq * R_3_0_1_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_3_0 = ypq * R_2_0_2_0 + 2 * R_2_0_1_0;
            double R_0_0_4_0 = ypq * R_1_0_3_0 + 3 * R_1_0_2_0;
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+288];
            double R_3_0_1_1 = ypq * R_4_0_0_1;
            double R_2_0_2_1 = ypq * R_3_0_1_1 + 1 * R_3_0_0_1;
            double R_1_0_3_1 = ypq * R_2_0_2_1 + 2 * R_2_0_1_1;
            double R_0_0_4_1 = ypq * R_1_0_3_1 + 3 * R_1_0_2_1;
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+304];
            double R_4_0_1_0 = ypq * gamma_inc[sq_id+5*256];
            double R_3_0_2_0 = ypq * R_4_0_1_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_3_0 = ypq * R_3_0_2_0 + 2 * R_3_0_1_0;
            double R_1_0_4_0 = ypq * R_2_0_3_0 + 3 * R_2_0_2_0;
            double R_0_0_5_0 = ypq * R_1_0_4_0 + 4 * R_1_0_3_0;
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+320];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+336];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+352];
            double R_0_1_0_2 = xpq * R_1_0_0_2;
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+368];
            double R_0_1_0_3 = xpq * R_1_0_0_3;
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+384];
            double R_0_1_0_4 = xpq * R_1_0_0_4;
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+400];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+416];
            double R_0_1_1_1 = xpq * R_1_0_1_1;
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+432];
            double R_0_1_1_2 = xpq * R_1_0_1_2;
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+448];
            double R_0_1_1_3 = xpq * R_1_0_1_3;
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+464];
            double R_0_1_2_0 = xpq * R_1_0_2_0;
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+480];
            double R_0_1_2_1 = xpq * R_1_0_2_1;
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+496];
            double R_0_1_2_2 = xpq * R_1_0_2_2;
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+512];
            double R_0_1_3_0 = xpq * R_1_0_3_0;
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+528];
            double R_0_1_3_1 = xpq * R_1_0_3_1;
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+544];
            double R_0_1_4_0 = xpq * R_1_0_4_0;
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+560];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+576];
            double R_1_1_0_1 = xpq * R_2_0_0_1;
            double R_0_2_0_1 = xpq * R_1_1_0_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+592];
            double R_1_1_0_2 = xpq * R_2_0_0_2;
            double R_0_2_0_2 = xpq * R_1_1_0_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+608];
            double R_1_1_0_3 = xpq * R_2_0_0_3;
            double R_0_2_0_3 = xpq * R_1_1_0_3 + 1 * R_1_0_0_3;
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+624];
            double R_1_1_1_0 = xpq * R_2_0_1_0;
            double R_0_2_1_0 = xpq * R_1_1_1_0 + 1 * R_1_0_1_0;
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+640];
            double R_1_1_1_1 = xpq * R_2_0_1_1;
            double R_0_2_1_1 = xpq * R_1_1_1_1 + 1 * R_1_0_1_1;
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+656];
            double R_1_1_1_2 = xpq * R_2_0_1_2;
            double R_0_2_1_2 = xpq * R_1_1_1_2 + 1 * R_1_0_1_2;
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+672];
            double R_1_1_2_0 = xpq * R_2_0_2_0;
            double R_0_2_2_0 = xpq * R_1_1_2_0 + 1 * R_1_0_2_0;
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+688];
            double R_1_1_2_1 = xpq * R_2_0_2_1;
            double R_0_2_2_1 = xpq * R_1_1_2_1 + 1 * R_1_0_2_1;
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+704];
            double R_1_1_3_0 = xpq * R_2_0_3_0;
            double R_0_2_3_0 = xpq * R_1_1_3_0 + 1 * R_1_0_3_0;
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+720];
            double R_2_1_0_0 = xpq * gamma_inc[sq_id+3*256];
            double R_1_2_0_0 = xpq * R_2_1_0_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_3_0_0 = xpq * R_1_2_0_0 + 2 * R_1_1_0_0;
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+736];
            double R_2_1_0_1 = xpq * R_3_0_0_1;
            double R_1_2_0_1 = xpq * R_2_1_0_1 + 1 * R_2_0_0_1;
            double R_0_3_0_1 = xpq * R_1_2_0_1 + 2 * R_1_1_0_1;
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+752];
            double R_2_1_0_2 = xpq * R_3_0_0_2;
            double R_1_2_0_2 = xpq * R_2_1_0_2 + 1 * R_2_0_0_2;
            double R_0_3_0_2 = xpq * R_1_2_0_2 + 2 * R_1_1_0_2;
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+768];
            double R_2_1_1_0 = xpq * R_3_0_1_0;
            double R_1_2_1_0 = xpq * R_2_1_1_0 + 1 * R_2_0_1_0;
            double R_0_3_1_0 = xpq * R_1_2_1_0 + 2 * R_1_1_1_0;
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+784];
            double R_2_1_1_1 = xpq * R_3_0_1_1;
            double R_1_2_1_1 = xpq * R_2_1_1_1 + 1 * R_2_0_1_1;
            double R_0_3_1_1 = xpq * R_1_2_1_1 + 2 * R_1_1_1_1;
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+800];
            double R_2_1_2_0 = xpq * R_3_0_2_0;
            double R_1_2_2_0 = xpq * R_2_1_2_0 + 1 * R_2_0_2_0;
            double R_0_3_2_0 = xpq * R_1_2_2_0 + 2 * R_1_1_2_0;
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+816];
            double R_3_1_0_0 = xpq * gamma_inc[sq_id+4*256];
            double R_2_2_0_0 = xpq * R_3_1_0_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_3_0_0 = xpq * R_2_2_0_0 + 2 * R_2_1_0_0;
            double R_0_4_0_0 = xpq * R_1_3_0_0 + 3 * R_1_2_0_0;
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+832];
            double R_3_1_0_1 = xpq * R_4_0_0_1;
            double R_2_2_0_1 = xpq * R_3_1_0_1 + 1 * R_3_0_0_1;
            double R_1_3_0_1 = xpq * R_2_2_0_1 + 2 * R_2_1_0_1;
            double R_0_4_0_1 = xpq * R_1_3_0_1 + 3 * R_1_2_0_1;
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+848];
            double R_3_1_1_0 = xpq * R_4_0_1_0;
            double R_2_2_1_0 = xpq * R_3_1_1_0 + 1 * R_3_0_1_0;
            double R_1_3_1_0 = xpq * R_2_2_1_0 + 2 * R_2_1_1_0;
            double R_0_4_1_0 = xpq * R_1_3_1_0 + 3 * R_1_2_1_0;
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+864];
            double R_4_1_0_0 = xpq * gamma_inc[sq_id+5*256];
            double R_3_2_0_0 = xpq * R_4_1_0_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_3_0_0 = xpq * R_3_2_0_0 + 2 * R_3_1_0_0;
            double R_1_4_0_0 = xpq * R_2_3_0_0 + 3 * R_2_2_0_0;
            double R_0_5_0_0 = xpq * R_1_4_0_0 + 4 * R_1_3_0_0;
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+64] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+80] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+96] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+112] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+128] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+144] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+160] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+176] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+192] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+208] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+224] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+240] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+256] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+272] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+288] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+304] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+320] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+336] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+352] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+368] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+384] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+400] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+416] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+432] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+448] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+464] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+480] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+496] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+512] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+528] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+544] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+560] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+576] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+592] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+608] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+624] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+640] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+656] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+672] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+688] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+704] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+720] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+736] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+752] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+768] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+784] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+800] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+816] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+832] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+848] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+864] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+880] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 56; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 32; n += 16) {
        int i = n / 32;
        int tile = n % 32;
        int task_kl = blockIdx.y * 512 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*512]);
        }
    }
}

// TILEX=21, TILEY=32,
__global__
void md_j_5_1(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 336;
    int task_kl0 = blockIdx.y * 512;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 1792;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 2048;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 896;
    double *dm_ij_cache = vj_kl_cache + 2048;
    double *dm_kl_cache = dm_ij_cache + 896;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 2112; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 2048; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 512; n += 256) {
        int task_kl = blockIdx.y * 512 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+512] = ykl;
            Rq_cache[n+1024] = zkl;
            Rq_cache[n+1536] = akl;
        }
    }

    for (int n = tx; n < 128; n += 16) {
        int i = n / 32;
        int tile = n % 32;
        int task_kl = blockIdx.y * 512 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*512] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 21; ++batch_ij) {
        int task_ij0 = blockIdx.x * 336 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 56; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 32; ++batch_kl) {
            int task_kl0 = blockIdx.y * 512 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+512];
            double zkl = Rq_cache[sq_kl+1024];
            double akl = Rq_cache[sq_kl+1536];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 6);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 6; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+32];
            double R_2_0_0_1 = zpq * gamma_inc[sq_id+3*256];
            double R_1_0_0_2 = zpq * R_2_0_0_1 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_0_3 = zpq * R_1_0_0_2 + 2 * R_1_0_0_1;
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+48];
            double R_3_0_0_1 = zpq * gamma_inc[sq_id+4*256];
            double R_2_0_0_2 = zpq * R_3_0_0_1 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_0_3 = zpq * R_2_0_0_2 + 2 * R_2_0_0_1;
            double R_0_0_0_4 = zpq * R_1_0_0_3 + 3 * R_1_0_0_2;
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+64];
            double R_4_0_0_1 = zpq * gamma_inc[sq_id+5*256];
            double R_3_0_0_2 = zpq * R_4_0_0_1 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_0_3 = zpq * R_3_0_0_2 + 2 * R_3_0_0_1;
            double R_1_0_0_4 = zpq * R_2_0_0_3 + 3 * R_2_0_0_2;
            double R_0_0_0_5 = zpq * R_1_0_0_4 + 4 * R_1_0_0_3;
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+80];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+96];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+112];
            double R_0_0_1_2 = ypq * R_1_0_0_2;
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+128];
            double R_0_0_1_3 = ypq * R_1_0_0_3;
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+144];
            double R_0_0_1_4 = ypq * R_1_0_0_4;
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+160];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+176];
            double R_1_0_1_1 = ypq * R_2_0_0_1;
            double R_0_0_2_1 = ypq * R_1_0_1_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+192];
            double R_1_0_1_2 = ypq * R_2_0_0_2;
            double R_0_0_2_2 = ypq * R_1_0_1_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+208];
            double R_1_0_1_3 = ypq * R_2_0_0_3;
            double R_0_0_2_3 = ypq * R_1_0_1_3 + 1 * R_1_0_0_3;
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+224];
            double R_2_0_1_0 = ypq * gamma_inc[sq_id+3*256];
            double R_1_0_2_0 = ypq * R_2_0_1_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_3_0 = ypq * R_1_0_2_0 + 2 * R_1_0_1_0;
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+240];
            double R_2_0_1_1 = ypq * R_3_0_0_1;
            double R_1_0_2_1 = ypq * R_2_0_1_1 + 1 * R_2_0_0_1;
            double R_0_0_3_1 = ypq * R_1_0_2_1 + 2 * R_1_0_1_1;
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+256];
            double R_2_0_1_2 = ypq * R_3_0_0_2;
            double R_1_0_2_2 = ypq * R_2_0_1_2 + 1 * R_2_0_0_2;
            double R_0_0_3_2 = ypq * R_1_0_2_2 + 2 * R_1_0_1_2;
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+272];
            double R_3_0_1_0 = ypq * gamma_inc[sq_id+4*256];
            double R_2_0_2_0 = ypq * R_3_0_1_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_3_0 = ypq * R_2_0_2_0 + 2 * R_2_0_1_0;
            double R_0_0_4_0 = ypq * R_1_0_3_0 + 3 * R_1_0_2_0;
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+288];
            double R_3_0_1_1 = ypq * R_4_0_0_1;
            double R_2_0_2_1 = ypq * R_3_0_1_1 + 1 * R_3_0_0_1;
            double R_1_0_3_1 = ypq * R_2_0_2_1 + 2 * R_2_0_1_1;
            double R_0_0_4_1 = ypq * R_1_0_3_1 + 3 * R_1_0_2_1;
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+304];
            double R_4_0_1_0 = ypq * gamma_inc[sq_id+5*256];
            double R_3_0_2_0 = ypq * R_4_0_1_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_3_0 = ypq * R_3_0_2_0 + 2 * R_3_0_1_0;
            double R_1_0_4_0 = ypq * R_2_0_3_0 + 3 * R_2_0_2_0;
            double R_0_0_5_0 = ypq * R_1_0_4_0 + 4 * R_1_0_3_0;
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+320];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+336];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+352];
            double R_0_1_0_2 = xpq * R_1_0_0_2;
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+368];
            double R_0_1_0_3 = xpq * R_1_0_0_3;
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+384];
            double R_0_1_0_4 = xpq * R_1_0_0_4;
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+400];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+416];
            double R_0_1_1_1 = xpq * R_1_0_1_1;
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+432];
            double R_0_1_1_2 = xpq * R_1_0_1_2;
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+448];
            double R_0_1_1_3 = xpq * R_1_0_1_3;
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+464];
            double R_0_1_2_0 = xpq * R_1_0_2_0;
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+480];
            double R_0_1_2_1 = xpq * R_1_0_2_1;
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+496];
            double R_0_1_2_2 = xpq * R_1_0_2_2;
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+512];
            double R_0_1_3_0 = xpq * R_1_0_3_0;
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+528];
            double R_0_1_3_1 = xpq * R_1_0_3_1;
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+544];
            double R_0_1_4_0 = xpq * R_1_0_4_0;
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+560];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+576];
            double R_1_1_0_1 = xpq * R_2_0_0_1;
            double R_0_2_0_1 = xpq * R_1_1_0_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+592];
            double R_1_1_0_2 = xpq * R_2_0_0_2;
            double R_0_2_0_2 = xpq * R_1_1_0_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+608];
            double R_1_1_0_3 = xpq * R_2_0_0_3;
            double R_0_2_0_3 = xpq * R_1_1_0_3 + 1 * R_1_0_0_3;
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+624];
            double R_1_1_1_0 = xpq * R_2_0_1_0;
            double R_0_2_1_0 = xpq * R_1_1_1_0 + 1 * R_1_0_1_0;
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+640];
            double R_1_1_1_1 = xpq * R_2_0_1_1;
            double R_0_2_1_1 = xpq * R_1_1_1_1 + 1 * R_1_0_1_1;
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+656];
            double R_1_1_1_2 = xpq * R_2_0_1_2;
            double R_0_2_1_2 = xpq * R_1_1_1_2 + 1 * R_1_0_1_2;
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+672];
            double R_1_1_2_0 = xpq * R_2_0_2_0;
            double R_0_2_2_0 = xpq * R_1_1_2_0 + 1 * R_1_0_2_0;
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+688];
            double R_1_1_2_1 = xpq * R_2_0_2_1;
            double R_0_2_2_1 = xpq * R_1_1_2_1 + 1 * R_1_0_2_1;
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+704];
            double R_1_1_3_0 = xpq * R_2_0_3_0;
            double R_0_2_3_0 = xpq * R_1_1_3_0 + 1 * R_1_0_3_0;
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+720];
            double R_2_1_0_0 = xpq * gamma_inc[sq_id+3*256];
            double R_1_2_0_0 = xpq * R_2_1_0_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_3_0_0 = xpq * R_1_2_0_0 + 2 * R_1_1_0_0;
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+736];
            double R_2_1_0_1 = xpq * R_3_0_0_1;
            double R_1_2_0_1 = xpq * R_2_1_0_1 + 1 * R_2_0_0_1;
            double R_0_3_0_1 = xpq * R_1_2_0_1 + 2 * R_1_1_0_1;
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+752];
            double R_2_1_0_2 = xpq * R_3_0_0_2;
            double R_1_2_0_2 = xpq * R_2_1_0_2 + 1 * R_2_0_0_2;
            double R_0_3_0_2 = xpq * R_1_2_0_2 + 2 * R_1_1_0_2;
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+768];
            double R_2_1_1_0 = xpq * R_3_0_1_0;
            double R_1_2_1_0 = xpq * R_2_1_1_0 + 1 * R_2_0_1_0;
            double R_0_3_1_0 = xpq * R_1_2_1_0 + 2 * R_1_1_1_0;
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+784];
            double R_2_1_1_1 = xpq * R_3_0_1_1;
            double R_1_2_1_1 = xpq * R_2_1_1_1 + 1 * R_2_0_1_1;
            double R_0_3_1_1 = xpq * R_1_2_1_1 + 2 * R_1_1_1_1;
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+800];
            double R_2_1_2_0 = xpq * R_3_0_2_0;
            double R_1_2_2_0 = xpq * R_2_1_2_0 + 1 * R_2_0_2_0;
            double R_0_3_2_0 = xpq * R_1_2_2_0 + 2 * R_1_1_2_0;
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+816];
            double R_3_1_0_0 = xpq * gamma_inc[sq_id+4*256];
            double R_2_2_0_0 = xpq * R_3_1_0_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_3_0_0 = xpq * R_2_2_0_0 + 2 * R_2_1_0_0;
            double R_0_4_0_0 = xpq * R_1_3_0_0 + 3 * R_1_2_0_0;
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+832];
            double R_3_1_0_1 = xpq * R_4_0_0_1;
            double R_2_2_0_1 = xpq * R_3_1_0_1 + 1 * R_3_0_0_1;
            double R_1_3_0_1 = xpq * R_2_2_0_1 + 2 * R_2_1_0_1;
            double R_0_4_0_1 = xpq * R_1_3_0_1 + 3 * R_1_2_0_1;
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+848];
            double R_3_1_1_0 = xpq * R_4_0_1_0;
            double R_2_2_1_0 = xpq * R_3_1_1_0 + 1 * R_3_0_1_0;
            double R_1_3_1_0 = xpq * R_2_2_1_0 + 2 * R_2_1_1_0;
            double R_0_4_1_0 = xpq * R_1_3_1_0 + 3 * R_1_2_1_0;
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+864];
            double R_4_1_0_0 = xpq * gamma_inc[sq_id+5*256];
            double R_3_2_0_0 = xpq * R_4_1_0_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_3_0_0 = xpq * R_3_2_0_0 + 2 * R_3_1_0_0;
            double R_1_4_0_0 = xpq * R_2_3_0_0 + 3 * R_2_2_0_0;
            double R_0_5_0_0 = xpq * R_1_4_0_0 + 4 * R_1_3_0_0;
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_0_5 * dm_ij_cache[tx+64];
            double R_5_0_0_1 = zpq * gamma_inc[sq_id+6*256];
            double R_4_0_0_2 = zpq * R_5_0_0_1 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_0_3 = zpq * R_4_0_0_2 + 2 * R_4_0_0_1;
            double R_2_0_0_4 = zpq * R_3_0_0_3 + 3 * R_3_0_0_2;
            double R_1_0_0_5 = zpq * R_2_0_0_4 + 4 * R_2_0_0_3;
            double R_0_0_0_6 = zpq * R_1_0_0_5 + 5 * R_1_0_0_4;
            vj_kl -= R_0_0_0_6 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+144];
            double R_0_0_1_5 = ypq * R_1_0_0_5;
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+208];
            double R_1_0_1_4 = ypq * R_2_0_0_4;
            double R_0_0_2_4 = ypq * R_1_0_1_4 + 1 * R_1_0_0_4;
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+224];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+256];
            double R_2_0_1_3 = ypq * R_3_0_0_3;
            double R_1_0_2_3 = ypq * R_2_0_1_3 + 1 * R_2_0_0_3;
            double R_0_0_3_3 = ypq * R_1_0_2_3 + 2 * R_1_0_1_3;
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+288];
            double R_3_0_1_2 = ypq * R_4_0_0_2;
            double R_2_0_2_2 = ypq * R_3_0_1_2 + 1 * R_3_0_0_2;
            double R_1_0_3_2 = ypq * R_2_0_2_2 + 2 * R_2_0_1_2;
            double R_0_0_4_2 = ypq * R_1_0_3_2 + 3 * R_1_0_2_2;
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+304];
            double R_4_0_1_1 = ypq * R_5_0_0_1;
            double R_3_0_2_1 = ypq * R_4_0_1_1 + 1 * R_4_0_0_1;
            double R_2_0_3_1 = ypq * R_3_0_2_1 + 2 * R_3_0_1_1;
            double R_1_0_4_1 = ypq * R_2_0_3_1 + 3 * R_2_0_2_1;
            double R_0_0_5_1 = ypq * R_1_0_4_1 + 4 * R_1_0_3_1;
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+368];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+384];
            double R_0_1_0_5 = xpq * R_1_0_0_5;
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+400];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+448];
            double R_0_1_1_4 = xpq * R_1_0_1_4;
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+464];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+496];
            double R_0_1_2_3 = xpq * R_1_0_2_3;
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+512];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+528];
            double R_0_1_3_2 = xpq * R_1_0_3_2;
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+544];
            double R_0_1_4_1 = xpq * R_1_0_4_1;
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+560];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+576];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+592];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+608];
            double R_1_1_0_4 = xpq * R_2_0_0_4;
            double R_0_2_0_4 = xpq * R_1_1_0_4 + 1 * R_1_0_0_4;
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+624];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+640];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+656];
            double R_1_1_1_3 = xpq * R_2_0_1_3;
            double R_0_2_1_3 = xpq * R_1_1_1_3 + 1 * R_1_0_1_3;
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+672];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+688];
            double R_1_1_2_2 = xpq * R_2_0_2_2;
            double R_0_2_2_2 = xpq * R_1_1_2_2 + 1 * R_1_0_2_2;
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+704];
            double R_1_1_3_1 = xpq * R_2_0_3_1;
            double R_0_2_3_1 = xpq * R_1_1_3_1 + 1 * R_1_0_3_1;
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+720];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+736];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+752];
            double R_2_1_0_3 = xpq * R_3_0_0_3;
            double R_1_2_0_3 = xpq * R_2_1_0_3 + 1 * R_2_0_0_3;
            double R_0_3_0_3 = xpq * R_1_2_0_3 + 2 * R_1_1_0_3;
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+768];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+784];
            double R_2_1_1_2 = xpq * R_3_0_1_2;
            double R_1_2_1_2 = xpq * R_2_1_1_2 + 1 * R_2_0_1_2;
            double R_0_3_1_2 = xpq * R_1_2_1_2 + 2 * R_1_1_1_2;
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+800];
            double R_2_1_2_1 = xpq * R_3_0_2_1;
            double R_1_2_2_1 = xpq * R_2_1_2_1 + 1 * R_2_0_2_1;
            double R_0_3_2_1 = xpq * R_1_2_2_1 + 2 * R_1_1_2_1;
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+816];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+832];
            double R_3_1_0_2 = xpq * R_4_0_0_2;
            double R_2_2_0_2 = xpq * R_3_1_0_2 + 1 * R_3_0_0_2;
            double R_1_3_0_2 = xpq * R_2_2_0_2 + 2 * R_2_1_0_2;
            double R_0_4_0_2 = xpq * R_1_3_0_2 + 3 * R_1_2_0_2;
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+848];
            double R_3_1_1_1 = xpq * R_4_0_1_1;
            double R_2_2_1_1 = xpq * R_3_1_1_1 + 1 * R_3_0_1_1;
            double R_1_3_1_1 = xpq * R_2_2_1_1 + 2 * R_2_1_1_1;
            double R_0_4_1_1 = xpq * R_1_3_1_1 + 3 * R_1_2_1_1;
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+864];
            double R_4_1_0_1 = xpq * R_5_0_0_1;
            double R_3_2_0_1 = xpq * R_4_1_0_1 + 1 * R_4_0_0_1;
            double R_2_3_0_1 = xpq * R_3_2_0_1 + 2 * R_3_1_0_1;
            double R_1_4_0_1 = xpq * R_2_3_0_1 + 3 * R_2_2_0_1;
            double R_0_5_0_1 = xpq * R_1_4_0_1 + 4 * R_1_3_0_1;
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+512] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_2_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_0_5_0 * dm_ij_cache[tx+288];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+304];
            double R_5_0_1_0 = ypq * gamma_inc[sq_id+6*256];
            double R_4_0_2_0 = ypq * R_5_0_1_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_3_0 = ypq * R_4_0_2_0 + 2 * R_4_0_1_0;
            double R_2_0_4_0 = ypq * R_3_0_3_0 + 3 * R_3_0_2_0;
            double R_1_0_5_0 = ypq * R_2_0_4_0 + 4 * R_2_0_3_0;
            double R_0_0_6_0 = ypq * R_1_0_5_0 + 5 * R_1_0_4_0;
            vj_kl -= R_0_0_6_0 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+400];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+416];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+432];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+464];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+512];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+528];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+544];
            double R_0_1_5_0 = xpq * R_1_0_5_0;
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+560];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+576];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+592];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+608];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+624];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+640];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+656];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+672];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+688];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+704];
            double R_1_1_4_0 = xpq * R_2_0_4_0;
            double R_0_2_4_0 = xpq * R_1_1_4_0 + 1 * R_1_0_4_0;
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+720];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+736];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+752];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+768];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+784];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+800];
            double R_2_1_3_0 = xpq * R_3_0_3_0;
            double R_1_2_3_0 = xpq * R_2_1_3_0 + 1 * R_2_0_3_0;
            double R_0_3_3_0 = xpq * R_1_2_3_0 + 2 * R_1_1_3_0;
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+816];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+832];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+848];
            double R_3_1_2_0 = xpq * R_4_0_2_0;
            double R_2_2_2_0 = xpq * R_3_1_2_0 + 1 * R_3_0_2_0;
            double R_1_3_2_0 = xpq * R_2_2_2_0 + 2 * R_2_1_2_0;
            double R_0_4_2_0 = xpq * R_1_3_2_0 + 3 * R_1_2_2_0;
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+864];
            double R_4_1_1_0 = xpq * R_5_0_1_0;
            double R_3_2_1_0 = xpq * R_4_1_1_0 + 1 * R_4_0_1_0;
            double R_2_3_1_0 = xpq * R_3_2_1_0 + 2 * R_3_1_1_0;
            double R_1_4_1_0 = xpq * R_2_3_1_0 + 3 * R_2_2_1_0;
            double R_0_5_1_0 = xpq * R_1_4_1_0 + 4 * R_1_3_1_0;
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1024] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_0_0 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+464];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+512];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+528];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+544];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+560];
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+576];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+592];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+608];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+624];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+640];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+656];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+672];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+688];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+704];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+720];
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+736];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+752];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+768];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+784];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+800];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+816];
            vj_kl -= R_0_5_0_0 * dm_ij_cache[tx+832];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+848];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+864];
            double R_5_1_0_0 = xpq * gamma_inc[sq_id+6*256];
            double R_4_2_0_0 = xpq * R_5_1_0_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_3_0_0 = xpq * R_4_2_0_0 + 2 * R_4_1_0_0;
            double R_2_4_0_0 = xpq * R_3_3_0_0 + 3 * R_3_2_0_0;
            double R_1_5_0_0 = xpq * R_2_4_0_0 + 4 * R_2_3_0_0;
            double R_0_6_0_0 = xpq * R_1_5_0_0 + 5 * R_1_4_0_0;
            vj_kl -= R_0_6_0_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1536] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_1_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_0_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_5 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+64] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_6 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+80] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_2_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+96] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+112] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+128] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+144] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+160] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+176] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+192] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+208] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+224] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+240] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+256] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+272] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_5_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+288] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+304] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_6_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+320] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_0_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+336] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+352] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+368] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+384] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+400] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+416] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+432] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+448] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+464] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+480] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+496] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+512] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+528] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+544] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+560] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+576] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+592] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+608] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+624] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+640] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+656] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+672] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+688] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+704] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+720] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+736] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+752] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+768] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+784] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+800] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+816] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_5_0_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+832] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+848] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+864] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_6_0_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+880] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 56; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 128; n += 16) {
        int i = n / 32;
        int tile = n % 32;
        int task_kl = blockIdx.y * 512 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*512]);
        }
    }
}

// TILEX=21, TILEY=21,
__global__
void md_j_5_2(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 336;
    int task_kl0 = blockIdx.y * 336;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 2048;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 1344;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 896;
    double *dm_ij_cache = vj_kl_cache + 3360;
    double *dm_kl_cache = dm_ij_cache + 896;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 1408; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 3360; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 336; n += 256) {
        int task_kl = blockIdx.y * 336 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+336] = ykl;
            Rq_cache[n+672] = zkl;
            Rq_cache[n+1008] = akl;
        }
    }

    for (int n = tx; n < 210; n += 16) {
        int i = n / 21;
        int tile = n % 21;
        int task_kl = blockIdx.y * 336 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*336] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 21; ++batch_ij) {
        int task_ij0 = blockIdx.x * 336 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 56; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 21; ++batch_kl) {
            int task_kl0 = blockIdx.y * 336 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+336];
            double zkl = Rq_cache[sq_kl+672];
            double akl = Rq_cache[sq_kl+1008];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 7);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 7; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+32];
            double R_2_0_0_1 = zpq * gamma_inc[sq_id+3*256];
            double R_1_0_0_2 = zpq * R_2_0_0_1 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_0_3 = zpq * R_1_0_0_2 + 2 * R_1_0_0_1;
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+48];
            double R_3_0_0_1 = zpq * gamma_inc[sq_id+4*256];
            double R_2_0_0_2 = zpq * R_3_0_0_1 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_0_3 = zpq * R_2_0_0_2 + 2 * R_2_0_0_1;
            double R_0_0_0_4 = zpq * R_1_0_0_3 + 3 * R_1_0_0_2;
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+64];
            double R_4_0_0_1 = zpq * gamma_inc[sq_id+5*256];
            double R_3_0_0_2 = zpq * R_4_0_0_1 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_0_3 = zpq * R_3_0_0_2 + 2 * R_3_0_0_1;
            double R_1_0_0_4 = zpq * R_2_0_0_3 + 3 * R_2_0_0_2;
            double R_0_0_0_5 = zpq * R_1_0_0_4 + 4 * R_1_0_0_3;
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+80];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+96];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+112];
            double R_0_0_1_2 = ypq * R_1_0_0_2;
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+128];
            double R_0_0_1_3 = ypq * R_1_0_0_3;
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+144];
            double R_0_0_1_4 = ypq * R_1_0_0_4;
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+160];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+176];
            double R_1_0_1_1 = ypq * R_2_0_0_1;
            double R_0_0_2_1 = ypq * R_1_0_1_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+192];
            double R_1_0_1_2 = ypq * R_2_0_0_2;
            double R_0_0_2_2 = ypq * R_1_0_1_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+208];
            double R_1_0_1_3 = ypq * R_2_0_0_3;
            double R_0_0_2_3 = ypq * R_1_0_1_3 + 1 * R_1_0_0_3;
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+224];
            double R_2_0_1_0 = ypq * gamma_inc[sq_id+3*256];
            double R_1_0_2_0 = ypq * R_2_0_1_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_3_0 = ypq * R_1_0_2_0 + 2 * R_1_0_1_0;
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+240];
            double R_2_0_1_1 = ypq * R_3_0_0_1;
            double R_1_0_2_1 = ypq * R_2_0_1_1 + 1 * R_2_0_0_1;
            double R_0_0_3_1 = ypq * R_1_0_2_1 + 2 * R_1_0_1_1;
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+256];
            double R_2_0_1_2 = ypq * R_3_0_0_2;
            double R_1_0_2_2 = ypq * R_2_0_1_2 + 1 * R_2_0_0_2;
            double R_0_0_3_2 = ypq * R_1_0_2_2 + 2 * R_1_0_1_2;
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+272];
            double R_3_0_1_0 = ypq * gamma_inc[sq_id+4*256];
            double R_2_0_2_0 = ypq * R_3_0_1_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_3_0 = ypq * R_2_0_2_0 + 2 * R_2_0_1_0;
            double R_0_0_4_0 = ypq * R_1_0_3_0 + 3 * R_1_0_2_0;
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+288];
            double R_3_0_1_1 = ypq * R_4_0_0_1;
            double R_2_0_2_1 = ypq * R_3_0_1_1 + 1 * R_3_0_0_1;
            double R_1_0_3_1 = ypq * R_2_0_2_1 + 2 * R_2_0_1_1;
            double R_0_0_4_1 = ypq * R_1_0_3_1 + 3 * R_1_0_2_1;
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+304];
            double R_4_0_1_0 = ypq * gamma_inc[sq_id+5*256];
            double R_3_0_2_0 = ypq * R_4_0_1_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_3_0 = ypq * R_3_0_2_0 + 2 * R_3_0_1_0;
            double R_1_0_4_0 = ypq * R_2_0_3_0 + 3 * R_2_0_2_0;
            double R_0_0_5_0 = ypq * R_1_0_4_0 + 4 * R_1_0_3_0;
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+320];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+336];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+352];
            double R_0_1_0_2 = xpq * R_1_0_0_2;
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+368];
            double R_0_1_0_3 = xpq * R_1_0_0_3;
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+384];
            double R_0_1_0_4 = xpq * R_1_0_0_4;
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+400];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+416];
            double R_0_1_1_1 = xpq * R_1_0_1_1;
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+432];
            double R_0_1_1_2 = xpq * R_1_0_1_2;
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+448];
            double R_0_1_1_3 = xpq * R_1_0_1_3;
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+464];
            double R_0_1_2_0 = xpq * R_1_0_2_0;
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+480];
            double R_0_1_2_1 = xpq * R_1_0_2_1;
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+496];
            double R_0_1_2_2 = xpq * R_1_0_2_2;
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+512];
            double R_0_1_3_0 = xpq * R_1_0_3_0;
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+528];
            double R_0_1_3_1 = xpq * R_1_0_3_1;
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+544];
            double R_0_1_4_0 = xpq * R_1_0_4_0;
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+560];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+576];
            double R_1_1_0_1 = xpq * R_2_0_0_1;
            double R_0_2_0_1 = xpq * R_1_1_0_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+592];
            double R_1_1_0_2 = xpq * R_2_0_0_2;
            double R_0_2_0_2 = xpq * R_1_1_0_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+608];
            double R_1_1_0_3 = xpq * R_2_0_0_3;
            double R_0_2_0_3 = xpq * R_1_1_0_3 + 1 * R_1_0_0_3;
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+624];
            double R_1_1_1_0 = xpq * R_2_0_1_0;
            double R_0_2_1_0 = xpq * R_1_1_1_0 + 1 * R_1_0_1_0;
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+640];
            double R_1_1_1_1 = xpq * R_2_0_1_1;
            double R_0_2_1_1 = xpq * R_1_1_1_1 + 1 * R_1_0_1_1;
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+656];
            double R_1_1_1_2 = xpq * R_2_0_1_2;
            double R_0_2_1_2 = xpq * R_1_1_1_2 + 1 * R_1_0_1_2;
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+672];
            double R_1_1_2_0 = xpq * R_2_0_2_0;
            double R_0_2_2_0 = xpq * R_1_1_2_0 + 1 * R_1_0_2_0;
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+688];
            double R_1_1_2_1 = xpq * R_2_0_2_1;
            double R_0_2_2_1 = xpq * R_1_1_2_1 + 1 * R_1_0_2_1;
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+704];
            double R_1_1_3_0 = xpq * R_2_0_3_0;
            double R_0_2_3_0 = xpq * R_1_1_3_0 + 1 * R_1_0_3_0;
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+720];
            double R_2_1_0_0 = xpq * gamma_inc[sq_id+3*256];
            double R_1_2_0_0 = xpq * R_2_1_0_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_3_0_0 = xpq * R_1_2_0_0 + 2 * R_1_1_0_0;
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+736];
            double R_2_1_0_1 = xpq * R_3_0_0_1;
            double R_1_2_0_1 = xpq * R_2_1_0_1 + 1 * R_2_0_0_1;
            double R_0_3_0_1 = xpq * R_1_2_0_1 + 2 * R_1_1_0_1;
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+752];
            double R_2_1_0_2 = xpq * R_3_0_0_2;
            double R_1_2_0_2 = xpq * R_2_1_0_2 + 1 * R_2_0_0_2;
            double R_0_3_0_2 = xpq * R_1_2_0_2 + 2 * R_1_1_0_2;
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+768];
            double R_2_1_1_0 = xpq * R_3_0_1_0;
            double R_1_2_1_0 = xpq * R_2_1_1_0 + 1 * R_2_0_1_0;
            double R_0_3_1_0 = xpq * R_1_2_1_0 + 2 * R_1_1_1_0;
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+784];
            double R_2_1_1_1 = xpq * R_3_0_1_1;
            double R_1_2_1_1 = xpq * R_2_1_1_1 + 1 * R_2_0_1_1;
            double R_0_3_1_1 = xpq * R_1_2_1_1 + 2 * R_1_1_1_1;
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+800];
            double R_2_1_2_0 = xpq * R_3_0_2_0;
            double R_1_2_2_0 = xpq * R_2_1_2_0 + 1 * R_2_0_2_0;
            double R_0_3_2_0 = xpq * R_1_2_2_0 + 2 * R_1_1_2_0;
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+816];
            double R_3_1_0_0 = xpq * gamma_inc[sq_id+4*256];
            double R_2_2_0_0 = xpq * R_3_1_0_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_3_0_0 = xpq * R_2_2_0_0 + 2 * R_2_1_0_0;
            double R_0_4_0_0 = xpq * R_1_3_0_0 + 3 * R_1_2_0_0;
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+832];
            double R_3_1_0_1 = xpq * R_4_0_0_1;
            double R_2_2_0_1 = xpq * R_3_1_0_1 + 1 * R_3_0_0_1;
            double R_1_3_0_1 = xpq * R_2_2_0_1 + 2 * R_2_1_0_1;
            double R_0_4_0_1 = xpq * R_1_3_0_1 + 3 * R_1_2_0_1;
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+848];
            double R_3_1_1_0 = xpq * R_4_0_1_0;
            double R_2_2_1_0 = xpq * R_3_1_1_0 + 1 * R_3_0_1_0;
            double R_1_3_1_0 = xpq * R_2_2_1_0 + 2 * R_2_1_1_0;
            double R_0_4_1_0 = xpq * R_1_3_1_0 + 3 * R_1_2_1_0;
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+864];
            double R_4_1_0_0 = xpq * gamma_inc[sq_id+5*256];
            double R_3_2_0_0 = xpq * R_4_1_0_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_3_0_0 = xpq * R_3_2_0_0 + 2 * R_3_1_0_0;
            double R_1_4_0_0 = xpq * R_2_3_0_0 + 3 * R_2_2_0_0;
            double R_0_5_0_0 = xpq * R_1_4_0_0 + 4 * R_1_3_0_0;
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_0_5 * dm_ij_cache[tx+64];
            double R_5_0_0_1 = zpq * gamma_inc[sq_id+6*256];
            double R_4_0_0_2 = zpq * R_5_0_0_1 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_0_3 = zpq * R_4_0_0_2 + 2 * R_4_0_0_1;
            double R_2_0_0_4 = zpq * R_3_0_0_3 + 3 * R_3_0_0_2;
            double R_1_0_0_5 = zpq * R_2_0_0_4 + 4 * R_2_0_0_3;
            double R_0_0_0_6 = zpq * R_1_0_0_5 + 5 * R_1_0_0_4;
            vj_kl -= R_0_0_0_6 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+144];
            double R_0_0_1_5 = ypq * R_1_0_0_5;
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+208];
            double R_1_0_1_4 = ypq * R_2_0_0_4;
            double R_0_0_2_4 = ypq * R_1_0_1_4 + 1 * R_1_0_0_4;
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+224];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+256];
            double R_2_0_1_3 = ypq * R_3_0_0_3;
            double R_1_0_2_3 = ypq * R_2_0_1_3 + 1 * R_2_0_0_3;
            double R_0_0_3_3 = ypq * R_1_0_2_3 + 2 * R_1_0_1_3;
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+288];
            double R_3_0_1_2 = ypq * R_4_0_0_2;
            double R_2_0_2_2 = ypq * R_3_0_1_2 + 1 * R_3_0_0_2;
            double R_1_0_3_2 = ypq * R_2_0_2_2 + 2 * R_2_0_1_2;
            double R_0_0_4_2 = ypq * R_1_0_3_2 + 3 * R_1_0_2_2;
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+304];
            double R_4_0_1_1 = ypq * R_5_0_0_1;
            double R_3_0_2_1 = ypq * R_4_0_1_1 + 1 * R_4_0_0_1;
            double R_2_0_3_1 = ypq * R_3_0_2_1 + 2 * R_3_0_1_1;
            double R_1_0_4_1 = ypq * R_2_0_3_1 + 3 * R_2_0_2_1;
            double R_0_0_5_1 = ypq * R_1_0_4_1 + 4 * R_1_0_3_1;
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+368];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+384];
            double R_0_1_0_5 = xpq * R_1_0_0_5;
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+400];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+448];
            double R_0_1_1_4 = xpq * R_1_0_1_4;
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+464];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+496];
            double R_0_1_2_3 = xpq * R_1_0_2_3;
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+512];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+528];
            double R_0_1_3_2 = xpq * R_1_0_3_2;
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+544];
            double R_0_1_4_1 = xpq * R_1_0_4_1;
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+560];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+576];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+592];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+608];
            double R_1_1_0_4 = xpq * R_2_0_0_4;
            double R_0_2_0_4 = xpq * R_1_1_0_4 + 1 * R_1_0_0_4;
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+624];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+640];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+656];
            double R_1_1_1_3 = xpq * R_2_0_1_3;
            double R_0_2_1_3 = xpq * R_1_1_1_3 + 1 * R_1_0_1_3;
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+672];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+688];
            double R_1_1_2_2 = xpq * R_2_0_2_2;
            double R_0_2_2_2 = xpq * R_1_1_2_2 + 1 * R_1_0_2_2;
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+704];
            double R_1_1_3_1 = xpq * R_2_0_3_1;
            double R_0_2_3_1 = xpq * R_1_1_3_1 + 1 * R_1_0_3_1;
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+720];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+736];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+752];
            double R_2_1_0_3 = xpq * R_3_0_0_3;
            double R_1_2_0_3 = xpq * R_2_1_0_3 + 1 * R_2_0_0_3;
            double R_0_3_0_3 = xpq * R_1_2_0_3 + 2 * R_1_1_0_3;
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+768];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+784];
            double R_2_1_1_2 = xpq * R_3_0_1_2;
            double R_1_2_1_2 = xpq * R_2_1_1_2 + 1 * R_2_0_1_2;
            double R_0_3_1_2 = xpq * R_1_2_1_2 + 2 * R_1_1_1_2;
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+800];
            double R_2_1_2_1 = xpq * R_3_0_2_1;
            double R_1_2_2_1 = xpq * R_2_1_2_1 + 1 * R_2_0_2_1;
            double R_0_3_2_1 = xpq * R_1_2_2_1 + 2 * R_1_1_2_1;
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+816];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+832];
            double R_3_1_0_2 = xpq * R_4_0_0_2;
            double R_2_2_0_2 = xpq * R_3_1_0_2 + 1 * R_3_0_0_2;
            double R_1_3_0_2 = xpq * R_2_2_0_2 + 2 * R_2_1_0_2;
            double R_0_4_0_2 = xpq * R_1_3_0_2 + 3 * R_1_2_0_2;
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+848];
            double R_3_1_1_1 = xpq * R_4_0_1_1;
            double R_2_2_1_1 = xpq * R_3_1_1_1 + 1 * R_3_0_1_1;
            double R_1_3_1_1 = xpq * R_2_2_1_1 + 2 * R_2_1_1_1;
            double R_0_4_1_1 = xpq * R_1_3_1_1 + 3 * R_1_2_1_1;
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+864];
            double R_4_1_0_1 = xpq * R_5_0_0_1;
            double R_3_2_0_1 = xpq * R_4_1_0_1 + 1 * R_4_0_0_1;
            double R_2_3_0_1 = xpq * R_3_2_0_1 + 2 * R_3_1_0_1;
            double R_1_4_0_1 = xpq * R_2_3_0_1 + 3 * R_2_2_0_1;
            double R_0_5_0_1 = xpq * R_1_4_0_1 + 4 * R_1_3_0_1;
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+336] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_0_6 * dm_ij_cache[tx+64];
            double R_6_0_0_1 = zpq * gamma_inc[sq_id+7*256];
            double R_5_0_0_2 = zpq * R_6_0_0_1 + 1 * gamma_inc[sq_id+6*256];
            double R_4_0_0_3 = zpq * R_5_0_0_2 + 2 * R_5_0_0_1;
            double R_3_0_0_4 = zpq * R_4_0_0_3 + 3 * R_4_0_0_2;
            double R_2_0_0_5 = zpq * R_3_0_0_4 + 4 * R_3_0_0_3;
            double R_1_0_0_6 = zpq * R_2_0_0_5 + 5 * R_2_0_0_4;
            double R_0_0_0_7 = zpq * R_1_0_0_6 + 6 * R_1_0_0_5;
            vj_kl += R_0_0_0_7 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+144];
            double R_0_0_1_6 = ypq * R_1_0_0_6;
            vj_kl += R_0_0_1_6 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+208];
            double R_1_0_1_5 = ypq * R_2_0_0_5;
            double R_0_0_2_5 = ypq * R_1_0_1_5 + 1 * R_1_0_0_5;
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+224];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+256];
            double R_2_0_1_4 = ypq * R_3_0_0_4;
            double R_1_0_2_4 = ypq * R_2_0_1_4 + 1 * R_2_0_0_4;
            double R_0_0_3_4 = ypq * R_1_0_2_4 + 2 * R_1_0_1_4;
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+272];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+288];
            double R_3_0_1_3 = ypq * R_4_0_0_3;
            double R_2_0_2_3 = ypq * R_3_0_1_3 + 1 * R_3_0_0_3;
            double R_1_0_3_3 = ypq * R_2_0_2_3 + 2 * R_2_0_1_3;
            double R_0_0_4_3 = ypq * R_1_0_3_3 + 3 * R_1_0_2_3;
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+304];
            double R_4_0_1_2 = ypq * R_5_0_0_2;
            double R_3_0_2_2 = ypq * R_4_0_1_2 + 1 * R_4_0_0_2;
            double R_2_0_3_2 = ypq * R_3_0_2_2 + 2 * R_3_0_1_2;
            double R_1_0_4_2 = ypq * R_2_0_3_2 + 3 * R_2_0_2_2;
            double R_0_0_5_2 = ypq * R_1_0_4_2 + 4 * R_1_0_3_2;
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+368];
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+384];
            double R_0_1_0_6 = xpq * R_1_0_0_6;
            vj_kl += R_0_1_0_6 * dm_ij_cache[tx+400];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+416];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+432];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+448];
            double R_0_1_1_5 = xpq * R_1_0_1_5;
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+464];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+480];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+496];
            double R_0_1_2_4 = xpq * R_1_0_2_4;
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+512];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+528];
            double R_0_1_3_3 = xpq * R_1_0_3_3;
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+544];
            double R_0_1_4_2 = xpq * R_1_0_4_2;
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+560];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+576];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+592];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+608];
            double R_1_1_0_5 = xpq * R_2_0_0_5;
            double R_0_2_0_5 = xpq * R_1_1_0_5 + 1 * R_1_0_0_5;
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+624];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+640];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+656];
            double R_1_1_1_4 = xpq * R_2_0_1_4;
            double R_0_2_1_4 = xpq * R_1_1_1_4 + 1 * R_1_0_1_4;
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+672];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+688];
            double R_1_1_2_3 = xpq * R_2_0_2_3;
            double R_0_2_2_3 = xpq * R_1_1_2_3 + 1 * R_1_0_2_3;
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+704];
            double R_1_1_3_2 = xpq * R_2_0_3_2;
            double R_0_2_3_2 = xpq * R_1_1_3_2 + 1 * R_1_0_3_2;
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+720];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+736];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+752];
            double R_2_1_0_4 = xpq * R_3_0_0_4;
            double R_1_2_0_4 = xpq * R_2_1_0_4 + 1 * R_2_0_0_4;
            double R_0_3_0_4 = xpq * R_1_2_0_4 + 2 * R_1_1_0_4;
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+768];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+784];
            double R_2_1_1_3 = xpq * R_3_0_1_3;
            double R_1_2_1_3 = xpq * R_2_1_1_3 + 1 * R_2_0_1_3;
            double R_0_3_1_3 = xpq * R_1_2_1_3 + 2 * R_1_1_1_3;
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+800];
            double R_2_1_2_2 = xpq * R_3_0_2_2;
            double R_1_2_2_2 = xpq * R_2_1_2_2 + 1 * R_2_0_2_2;
            double R_0_3_2_2 = xpq * R_1_2_2_2 + 2 * R_1_1_2_2;
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+816];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+832];
            double R_3_1_0_3 = xpq * R_4_0_0_3;
            double R_2_2_0_3 = xpq * R_3_1_0_3 + 1 * R_3_0_0_3;
            double R_1_3_0_3 = xpq * R_2_2_0_3 + 2 * R_2_1_0_3;
            double R_0_4_0_3 = xpq * R_1_3_0_3 + 3 * R_1_2_0_3;
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+848];
            double R_3_1_1_2 = xpq * R_4_0_1_2;
            double R_2_2_1_2 = xpq * R_3_1_1_2 + 1 * R_3_0_1_2;
            double R_1_3_1_2 = xpq * R_2_2_1_2 + 2 * R_2_1_1_2;
            double R_0_4_1_2 = xpq * R_1_3_1_2 + 3 * R_1_2_1_2;
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+864];
            double R_4_1_0_2 = xpq * R_5_0_0_2;
            double R_3_2_0_2 = xpq * R_4_1_0_2 + 1 * R_4_0_0_2;
            double R_2_3_0_2 = xpq * R_3_2_0_2 + 2 * R_3_1_0_2;
            double R_1_4_0_2 = xpq * R_2_3_0_2 + 3 * R_2_2_0_2;
            double R_0_5_0_2 = xpq * R_1_4_0_2 + 4 * R_1_3_0_2;
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+672] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_2_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_0_5_0 * dm_ij_cache[tx+288];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+304];
            double R_5_0_1_0 = ypq * gamma_inc[sq_id+6*256];
            double R_4_0_2_0 = ypq * R_5_0_1_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_3_0 = ypq * R_4_0_2_0 + 2 * R_4_0_1_0;
            double R_2_0_4_0 = ypq * R_3_0_3_0 + 3 * R_3_0_2_0;
            double R_1_0_5_0 = ypq * R_2_0_4_0 + 4 * R_2_0_3_0;
            double R_0_0_6_0 = ypq * R_1_0_5_0 + 5 * R_1_0_4_0;
            vj_kl -= R_0_0_6_0 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+400];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+416];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+432];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+464];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+512];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+528];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+544];
            double R_0_1_5_0 = xpq * R_1_0_5_0;
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+560];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+576];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+592];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+608];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+624];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+640];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+656];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+672];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+688];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+704];
            double R_1_1_4_0 = xpq * R_2_0_4_0;
            double R_0_2_4_0 = xpq * R_1_1_4_0 + 1 * R_1_0_4_0;
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+720];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+736];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+752];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+768];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+784];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+800];
            double R_2_1_3_0 = xpq * R_3_0_3_0;
            double R_1_2_3_0 = xpq * R_2_1_3_0 + 1 * R_2_0_3_0;
            double R_0_3_3_0 = xpq * R_1_2_3_0 + 2 * R_1_1_3_0;
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+816];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+832];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+848];
            double R_3_1_2_0 = xpq * R_4_0_2_0;
            double R_2_2_2_0 = xpq * R_3_1_2_0 + 1 * R_3_0_2_0;
            double R_1_3_2_0 = xpq * R_2_2_2_0 + 2 * R_2_1_2_0;
            double R_0_4_2_0 = xpq * R_1_3_2_0 + 3 * R_1_2_2_0;
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+864];
            double R_4_1_1_0 = xpq * R_5_0_1_0;
            double R_3_2_1_0 = xpq * R_4_1_1_0 + 1 * R_4_0_1_0;
            double R_2_3_1_0 = xpq * R_3_2_1_0 + 2 * R_3_1_1_0;
            double R_1_4_1_0 = xpq * R_2_3_1_0 + 3 * R_2_2_1_0;
            double R_0_5_1_0 = xpq * R_1_4_1_0 + 4 * R_1_3_1_0;
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1008] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_1_6 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+208];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+224];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+288];
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+304];
            double R_5_0_1_1 = ypq * R_6_0_0_1;
            double R_4_0_2_1 = ypq * R_5_0_1_1 + 1 * R_5_0_0_1;
            double R_3_0_3_1 = ypq * R_4_0_2_1 + 2 * R_4_0_1_1;
            double R_2_0_4_1 = ypq * R_3_0_3_1 + 3 * R_3_0_2_1;
            double R_1_0_5_1 = ypq * R_2_0_4_1 + 4 * R_2_0_3_1;
            double R_0_0_6_1 = ypq * R_1_0_5_1 + 5 * R_1_0_4_1;
            vj_kl += R_0_0_6_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+368];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+384];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+400];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+448];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+464];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+480];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+496];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+512];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+528];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+544];
            double R_0_1_5_1 = xpq * R_1_0_5_1;
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+560];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+576];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+592];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+608];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+624];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+640];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+656];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+672];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+688];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+704];
            double R_1_1_4_1 = xpq * R_2_0_4_1;
            double R_0_2_4_1 = xpq * R_1_1_4_1 + 1 * R_1_0_4_1;
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+720];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+736];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+752];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+768];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+784];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+800];
            double R_2_1_3_1 = xpq * R_3_0_3_1;
            double R_1_2_3_1 = xpq * R_2_1_3_1 + 1 * R_2_0_3_1;
            double R_0_3_3_1 = xpq * R_1_2_3_1 + 2 * R_1_1_3_1;
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+816];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+832];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+848];
            double R_3_1_2_1 = xpq * R_4_0_2_1;
            double R_2_2_2_1 = xpq * R_3_1_2_1 + 1 * R_3_0_2_1;
            double R_1_3_2_1 = xpq * R_2_2_2_1 + 2 * R_2_1_2_1;
            double R_0_4_2_1 = xpq * R_1_3_2_1 + 3 * R_1_2_2_1;
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+864];
            double R_4_1_1_1 = xpq * R_5_0_1_1;
            double R_3_2_1_1 = xpq * R_4_1_1_1 + 1 * R_4_0_1_1;
            double R_2_3_1_1 = xpq * R_3_2_1_1 + 2 * R_3_1_1_1;
            double R_1_4_1_1 = xpq * R_2_3_1_1 + 3 * R_2_2_1_1;
            double R_0_5_1_1 = xpq * R_1_4_1_1 + 4 * R_1_3_1_1;
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1344] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+224];
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_0_6_0 * dm_ij_cache[tx+288];
            vj_kl += R_0_0_6_1 * dm_ij_cache[tx+304];
            double R_6_0_1_0 = ypq * gamma_inc[sq_id+7*256];
            double R_5_0_2_0 = ypq * R_6_0_1_0 + 1 * gamma_inc[sq_id+6*256];
            double R_4_0_3_0 = ypq * R_5_0_2_0 + 2 * R_5_0_1_0;
            double R_3_0_4_0 = ypq * R_4_0_3_0 + 3 * R_4_0_2_0;
            double R_2_0_5_0 = ypq * R_3_0_4_0 + 4 * R_3_0_3_0;
            double R_1_0_6_0 = ypq * R_2_0_5_0 + 5 * R_2_0_4_0;
            double R_0_0_7_0 = ypq * R_1_0_6_0 + 6 * R_1_0_5_0;
            vj_kl += R_0_0_7_0 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+384];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+400];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+416];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+432];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+448];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+464];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+512];
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+528];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+544];
            double R_0_1_6_0 = xpq * R_1_0_6_0;
            vj_kl += R_0_1_6_0 * dm_ij_cache[tx+560];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+576];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+592];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+608];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+624];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+640];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+656];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+672];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+688];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+704];
            double R_1_1_5_0 = xpq * R_2_0_5_0;
            double R_0_2_5_0 = xpq * R_1_1_5_0 + 1 * R_1_0_5_0;
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+720];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+736];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+752];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+768];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+784];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+800];
            double R_2_1_4_0 = xpq * R_3_0_4_0;
            double R_1_2_4_0 = xpq * R_2_1_4_0 + 1 * R_2_0_4_0;
            double R_0_3_4_0 = xpq * R_1_2_4_0 + 2 * R_1_1_4_0;
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+816];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+832];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+848];
            double R_3_1_3_0 = xpq * R_4_0_3_0;
            double R_2_2_3_0 = xpq * R_3_1_3_0 + 1 * R_3_0_3_0;
            double R_1_3_3_0 = xpq * R_2_2_3_0 + 2 * R_2_1_3_0;
            double R_0_4_3_0 = xpq * R_1_3_3_0 + 3 * R_1_2_3_0;
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+864];
            double R_4_1_2_0 = xpq * R_5_0_2_0;
            double R_3_2_2_0 = xpq * R_4_1_2_0 + 1 * R_4_0_2_0;
            double R_2_3_2_0 = xpq * R_3_2_2_0 + 2 * R_3_1_2_0;
            double R_1_4_2_0 = xpq * R_2_3_2_0 + 3 * R_2_2_2_0;
            double R_0_5_2_0 = xpq * R_1_4_2_0 + 4 * R_1_3_2_0;
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1680] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_0_0 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+464];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+512];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+528];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+544];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+560];
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+576];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+592];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+608];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+624];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+640];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+656];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+672];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+688];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+704];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+720];
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+736];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+752];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+768];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+784];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+800];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+816];
            vj_kl -= R_0_5_0_0 * dm_ij_cache[tx+832];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+848];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+864];
            double R_5_1_0_0 = xpq * gamma_inc[sq_id+6*256];
            double R_4_2_0_0 = xpq * R_5_1_0_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_3_0_0 = xpq * R_4_2_0_0 + 2 * R_4_1_0_0;
            double R_2_4_0_0 = xpq * R_3_3_0_0 + 3 * R_3_2_0_0;
            double R_1_5_0_0 = xpq * R_2_4_0_0 + 4 * R_2_3_0_0;
            double R_0_6_0_0 = xpq * R_1_5_0_0 + 5 * R_1_4_0_0;
            vj_kl -= R_0_6_0_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2016] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_0_6 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+464];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+480];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+496];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+512];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+528];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+544];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+560];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+576];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+592];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+608];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+624];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+640];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+656];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+672];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+688];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+704];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+720];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+736];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+752];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+768];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+784];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+800];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+816];
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+832];
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+848];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+864];
            double R_5_1_0_1 = xpq * R_6_0_0_1;
            double R_4_2_0_1 = xpq * R_5_1_0_1 + 1 * R_5_0_0_1;
            double R_3_3_0_1 = xpq * R_4_2_0_1 + 2 * R_4_1_0_1;
            double R_2_4_0_1 = xpq * R_3_3_0_1 + 3 * R_3_2_0_1;
            double R_1_5_0_1 = xpq * R_2_4_0_1 + 4 * R_2_3_0_1;
            double R_0_6_0_1 = xpq * R_1_5_0_1 + 5 * R_1_4_0_1;
            vj_kl += R_0_6_0_1 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2352] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_6_0 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+464];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+512];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+528];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+544];
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+560];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+576];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+592];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+608];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+624];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+640];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+656];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+672];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+688];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+704];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+720];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+736];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+752];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+768];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+784];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+800];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+816];
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+832];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+848];
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+864];
            double R_5_1_1_0 = xpq * R_6_0_1_0;
            double R_4_2_1_0 = xpq * R_5_1_1_0 + 1 * R_5_0_1_0;
            double R_3_3_1_0 = xpq * R_4_2_1_0 + 2 * R_4_1_1_0;
            double R_2_4_1_0 = xpq * R_3_3_1_0 + 3 * R_3_2_1_0;
            double R_1_5_1_0 = xpq * R_2_4_1_0 + 4 * R_2_3_1_0;
            double R_0_6_1_0 = xpq * R_1_5_1_0 + 5 * R_1_4_1_0;
            vj_kl += R_0_6_1_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2688] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+288];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+320];
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+336];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+384];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+400];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+416];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+432];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+448];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+464];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+512];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+528];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+544];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+560];
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+576];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+592];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+608];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+624];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+640];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+656];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+672];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+688];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+704];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+720];
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+736];
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+752];
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+768];
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+784];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+800];
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+816];
            vj_kl += R_0_6_0_0 * dm_ij_cache[tx+832];
            vj_kl += R_0_6_0_1 * dm_ij_cache[tx+848];
            vj_kl += R_0_6_1_0 * dm_ij_cache[tx+864];
            double R_6_1_0_0 = xpq * gamma_inc[sq_id+7*256];
            double R_5_2_0_0 = xpq * R_6_1_0_0 + 1 * gamma_inc[sq_id+6*256];
            double R_4_3_0_0 = xpq * R_5_2_0_0 + 2 * R_5_1_0_0;
            double R_3_4_0_0 = xpq * R_4_3_0_0 + 3 * R_4_2_0_0;
            double R_2_5_0_0 = xpq * R_3_4_0_0 + 4 * R_3_3_0_0;
            double R_1_6_0_0 = xpq * R_2_5_0_0 + 5 * R_2_4_0_0;
            double R_0_7_0_0 = xpq * R_1_6_0_0 + 6 * R_1_5_0_0;
            vj_kl += R_0_7_0_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3024] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_1 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_1_0 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_1_0_0 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_2 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_5 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_0_6 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+64] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_6 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_0_7 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_0_1_6 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_0_6 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+80] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_2_0 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+96] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+112] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+128] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+144] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_1_6 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+160] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+176] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+192] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+208] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+224] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+240] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+256] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+272] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_5_0 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_6_0 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+288] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_6_1 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+304] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_0_6_0 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_0_6_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_0_7_0 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_1_6_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+320] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_2_0_0 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+336] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+352] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+368] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+384] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_0_6 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+400] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+416] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+432] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+448] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+464] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+480] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+496] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+512] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+528] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+544] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_1_6_0 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+560] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+576] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+592] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+608] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+624] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+640] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+656] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+672] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+688] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+704] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+720] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+736] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+752] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+768] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+784] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+800] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+816] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_5_0_0 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_6_0_0 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+832] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_6_0_1 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+848] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_6_1_0 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+864] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+336];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+672];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+1008];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+1344];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+1680];
            vj_ij -= R_0_6_0_0 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_6_0_1 * dm_kl_cache[sq_kl+2352];
            vj_ij += R_0_6_1_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_7_0_0 * dm_kl_cache[sq_kl+3024];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+880] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 56; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 210; n += 16) {
        int i = n / 21;
        int tile = n % 21;
        int task_kl = blockIdx.y * 336 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*336]);
        }
    }
}

// TILEX=21, TILEY=11,
__global__
void md_j_5_3(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 336;
    int task_kl0 = blockIdx.y * 176;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 2304;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 704;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 896;
    double *dm_ij_cache = vj_kl_cache + 3520;
    double *dm_kl_cache = dm_ij_cache + 896;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 768; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 3520; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 176; n += 256) {
        int task_kl = blockIdx.y * 176 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+176] = ykl;
            Rq_cache[n+352] = zkl;
            Rq_cache[n+528] = akl;
        }
    }

    for (int n = tx; n < 220; n += 16) {
        int i = n / 11;
        int tile = n % 11;
        int task_kl = blockIdx.y * 176 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*176] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 21; ++batch_ij) {
        int task_ij0 = blockIdx.x * 336 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 56; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 11; ++batch_kl) {
            int task_kl0 = blockIdx.y * 176 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+176];
            double zkl = Rq_cache[sq_kl+352];
            double akl = Rq_cache[sq_kl+528];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 8);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 8; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+32];
            double R_2_0_0_1 = zpq * gamma_inc[sq_id+3*256];
            double R_1_0_0_2 = zpq * R_2_0_0_1 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_0_3 = zpq * R_1_0_0_2 + 2 * R_1_0_0_1;
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+48];
            double R_3_0_0_1 = zpq * gamma_inc[sq_id+4*256];
            double R_2_0_0_2 = zpq * R_3_0_0_1 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_0_3 = zpq * R_2_0_0_2 + 2 * R_2_0_0_1;
            double R_0_0_0_4 = zpq * R_1_0_0_3 + 3 * R_1_0_0_2;
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+64];
            double R_4_0_0_1 = zpq * gamma_inc[sq_id+5*256];
            double R_3_0_0_2 = zpq * R_4_0_0_1 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_0_3 = zpq * R_3_0_0_2 + 2 * R_3_0_0_1;
            double R_1_0_0_4 = zpq * R_2_0_0_3 + 3 * R_2_0_0_2;
            double R_0_0_0_5 = zpq * R_1_0_0_4 + 4 * R_1_0_0_3;
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+80];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+96];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+112];
            double R_0_0_1_2 = ypq * R_1_0_0_2;
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+128];
            double R_0_0_1_3 = ypq * R_1_0_0_3;
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+144];
            double R_0_0_1_4 = ypq * R_1_0_0_4;
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+160];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+176];
            double R_1_0_1_1 = ypq * R_2_0_0_1;
            double R_0_0_2_1 = ypq * R_1_0_1_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+192];
            double R_1_0_1_2 = ypq * R_2_0_0_2;
            double R_0_0_2_2 = ypq * R_1_0_1_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+208];
            double R_1_0_1_3 = ypq * R_2_0_0_3;
            double R_0_0_2_3 = ypq * R_1_0_1_3 + 1 * R_1_0_0_3;
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+224];
            double R_2_0_1_0 = ypq * gamma_inc[sq_id+3*256];
            double R_1_0_2_0 = ypq * R_2_0_1_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_3_0 = ypq * R_1_0_2_0 + 2 * R_1_0_1_0;
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+240];
            double R_2_0_1_1 = ypq * R_3_0_0_1;
            double R_1_0_2_1 = ypq * R_2_0_1_1 + 1 * R_2_0_0_1;
            double R_0_0_3_1 = ypq * R_1_0_2_1 + 2 * R_1_0_1_1;
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+256];
            double R_2_0_1_2 = ypq * R_3_0_0_2;
            double R_1_0_2_2 = ypq * R_2_0_1_2 + 1 * R_2_0_0_2;
            double R_0_0_3_2 = ypq * R_1_0_2_2 + 2 * R_1_0_1_2;
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+272];
            double R_3_0_1_0 = ypq * gamma_inc[sq_id+4*256];
            double R_2_0_2_0 = ypq * R_3_0_1_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_3_0 = ypq * R_2_0_2_0 + 2 * R_2_0_1_0;
            double R_0_0_4_0 = ypq * R_1_0_3_0 + 3 * R_1_0_2_0;
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+288];
            double R_3_0_1_1 = ypq * R_4_0_0_1;
            double R_2_0_2_1 = ypq * R_3_0_1_1 + 1 * R_3_0_0_1;
            double R_1_0_3_1 = ypq * R_2_0_2_1 + 2 * R_2_0_1_1;
            double R_0_0_4_1 = ypq * R_1_0_3_1 + 3 * R_1_0_2_1;
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+304];
            double R_4_0_1_0 = ypq * gamma_inc[sq_id+5*256];
            double R_3_0_2_0 = ypq * R_4_0_1_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_3_0 = ypq * R_3_0_2_0 + 2 * R_3_0_1_0;
            double R_1_0_4_0 = ypq * R_2_0_3_0 + 3 * R_2_0_2_0;
            double R_0_0_5_0 = ypq * R_1_0_4_0 + 4 * R_1_0_3_0;
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+320];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+336];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+352];
            double R_0_1_0_2 = xpq * R_1_0_0_2;
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+368];
            double R_0_1_0_3 = xpq * R_1_0_0_3;
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+384];
            double R_0_1_0_4 = xpq * R_1_0_0_4;
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+400];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+416];
            double R_0_1_1_1 = xpq * R_1_0_1_1;
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+432];
            double R_0_1_1_2 = xpq * R_1_0_1_2;
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+448];
            double R_0_1_1_3 = xpq * R_1_0_1_3;
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+464];
            double R_0_1_2_0 = xpq * R_1_0_2_0;
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+480];
            double R_0_1_2_1 = xpq * R_1_0_2_1;
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+496];
            double R_0_1_2_2 = xpq * R_1_0_2_2;
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+512];
            double R_0_1_3_0 = xpq * R_1_0_3_0;
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+528];
            double R_0_1_3_1 = xpq * R_1_0_3_1;
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+544];
            double R_0_1_4_0 = xpq * R_1_0_4_0;
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+560];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+576];
            double R_1_1_0_1 = xpq * R_2_0_0_1;
            double R_0_2_0_1 = xpq * R_1_1_0_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+592];
            double R_1_1_0_2 = xpq * R_2_0_0_2;
            double R_0_2_0_2 = xpq * R_1_1_0_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+608];
            double R_1_1_0_3 = xpq * R_2_0_0_3;
            double R_0_2_0_3 = xpq * R_1_1_0_3 + 1 * R_1_0_0_3;
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+624];
            double R_1_1_1_0 = xpq * R_2_0_1_0;
            double R_0_2_1_0 = xpq * R_1_1_1_0 + 1 * R_1_0_1_0;
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+640];
            double R_1_1_1_1 = xpq * R_2_0_1_1;
            double R_0_2_1_1 = xpq * R_1_1_1_1 + 1 * R_1_0_1_1;
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+656];
            double R_1_1_1_2 = xpq * R_2_0_1_2;
            double R_0_2_1_2 = xpq * R_1_1_1_2 + 1 * R_1_0_1_2;
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+672];
            double R_1_1_2_0 = xpq * R_2_0_2_0;
            double R_0_2_2_0 = xpq * R_1_1_2_0 + 1 * R_1_0_2_0;
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+688];
            double R_1_1_2_1 = xpq * R_2_0_2_1;
            double R_0_2_2_1 = xpq * R_1_1_2_1 + 1 * R_1_0_2_1;
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+704];
            double R_1_1_3_0 = xpq * R_2_0_3_0;
            double R_0_2_3_0 = xpq * R_1_1_3_0 + 1 * R_1_0_3_0;
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+720];
            double R_2_1_0_0 = xpq * gamma_inc[sq_id+3*256];
            double R_1_2_0_0 = xpq * R_2_1_0_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_3_0_0 = xpq * R_1_2_0_0 + 2 * R_1_1_0_0;
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+736];
            double R_2_1_0_1 = xpq * R_3_0_0_1;
            double R_1_2_0_1 = xpq * R_2_1_0_1 + 1 * R_2_0_0_1;
            double R_0_3_0_1 = xpq * R_1_2_0_1 + 2 * R_1_1_0_1;
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+752];
            double R_2_1_0_2 = xpq * R_3_0_0_2;
            double R_1_2_0_2 = xpq * R_2_1_0_2 + 1 * R_2_0_0_2;
            double R_0_3_0_2 = xpq * R_1_2_0_2 + 2 * R_1_1_0_2;
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+768];
            double R_2_1_1_0 = xpq * R_3_0_1_0;
            double R_1_2_1_0 = xpq * R_2_1_1_0 + 1 * R_2_0_1_0;
            double R_0_3_1_0 = xpq * R_1_2_1_0 + 2 * R_1_1_1_0;
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+784];
            double R_2_1_1_1 = xpq * R_3_0_1_1;
            double R_1_2_1_1 = xpq * R_2_1_1_1 + 1 * R_2_0_1_1;
            double R_0_3_1_1 = xpq * R_1_2_1_1 + 2 * R_1_1_1_1;
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+800];
            double R_2_1_2_0 = xpq * R_3_0_2_0;
            double R_1_2_2_0 = xpq * R_2_1_2_0 + 1 * R_2_0_2_0;
            double R_0_3_2_0 = xpq * R_1_2_2_0 + 2 * R_1_1_2_0;
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+816];
            double R_3_1_0_0 = xpq * gamma_inc[sq_id+4*256];
            double R_2_2_0_0 = xpq * R_3_1_0_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_3_0_0 = xpq * R_2_2_0_0 + 2 * R_2_1_0_0;
            double R_0_4_0_0 = xpq * R_1_3_0_0 + 3 * R_1_2_0_0;
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+832];
            double R_3_1_0_1 = xpq * R_4_0_0_1;
            double R_2_2_0_1 = xpq * R_3_1_0_1 + 1 * R_3_0_0_1;
            double R_1_3_0_1 = xpq * R_2_2_0_1 + 2 * R_2_1_0_1;
            double R_0_4_0_1 = xpq * R_1_3_0_1 + 3 * R_1_2_0_1;
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+848];
            double R_3_1_1_0 = xpq * R_4_0_1_0;
            double R_2_2_1_0 = xpq * R_3_1_1_0 + 1 * R_3_0_1_0;
            double R_1_3_1_0 = xpq * R_2_2_1_0 + 2 * R_2_1_1_0;
            double R_0_4_1_0 = xpq * R_1_3_1_0 + 3 * R_1_2_1_0;
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+864];
            double R_4_1_0_0 = xpq * gamma_inc[sq_id+5*256];
            double R_3_2_0_0 = xpq * R_4_1_0_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_3_0_0 = xpq * R_3_2_0_0 + 2 * R_3_1_0_0;
            double R_1_4_0_0 = xpq * R_2_3_0_0 + 3 * R_2_2_0_0;
            double R_0_5_0_0 = xpq * R_1_4_0_0 + 4 * R_1_3_0_0;
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_0_5 * dm_ij_cache[tx+64];
            double R_5_0_0_1 = zpq * gamma_inc[sq_id+6*256];
            double R_4_0_0_2 = zpq * R_5_0_0_1 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_0_3 = zpq * R_4_0_0_2 + 2 * R_4_0_0_1;
            double R_2_0_0_4 = zpq * R_3_0_0_3 + 3 * R_3_0_0_2;
            double R_1_0_0_5 = zpq * R_2_0_0_4 + 4 * R_2_0_0_3;
            double R_0_0_0_6 = zpq * R_1_0_0_5 + 5 * R_1_0_0_4;
            vj_kl -= R_0_0_0_6 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+144];
            double R_0_0_1_5 = ypq * R_1_0_0_5;
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+208];
            double R_1_0_1_4 = ypq * R_2_0_0_4;
            double R_0_0_2_4 = ypq * R_1_0_1_4 + 1 * R_1_0_0_4;
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+224];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+256];
            double R_2_0_1_3 = ypq * R_3_0_0_3;
            double R_1_0_2_3 = ypq * R_2_0_1_3 + 1 * R_2_0_0_3;
            double R_0_0_3_3 = ypq * R_1_0_2_3 + 2 * R_1_0_1_3;
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+288];
            double R_3_0_1_2 = ypq * R_4_0_0_2;
            double R_2_0_2_2 = ypq * R_3_0_1_2 + 1 * R_3_0_0_2;
            double R_1_0_3_2 = ypq * R_2_0_2_2 + 2 * R_2_0_1_2;
            double R_0_0_4_2 = ypq * R_1_0_3_2 + 3 * R_1_0_2_2;
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+304];
            double R_4_0_1_1 = ypq * R_5_0_0_1;
            double R_3_0_2_1 = ypq * R_4_0_1_1 + 1 * R_4_0_0_1;
            double R_2_0_3_1 = ypq * R_3_0_2_1 + 2 * R_3_0_1_1;
            double R_1_0_4_1 = ypq * R_2_0_3_1 + 3 * R_2_0_2_1;
            double R_0_0_5_1 = ypq * R_1_0_4_1 + 4 * R_1_0_3_1;
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+368];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+384];
            double R_0_1_0_5 = xpq * R_1_0_0_5;
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+400];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+448];
            double R_0_1_1_4 = xpq * R_1_0_1_4;
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+464];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+496];
            double R_0_1_2_3 = xpq * R_1_0_2_3;
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+512];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+528];
            double R_0_1_3_2 = xpq * R_1_0_3_2;
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+544];
            double R_0_1_4_1 = xpq * R_1_0_4_1;
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+560];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+576];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+592];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+608];
            double R_1_1_0_4 = xpq * R_2_0_0_4;
            double R_0_2_0_4 = xpq * R_1_1_0_4 + 1 * R_1_0_0_4;
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+624];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+640];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+656];
            double R_1_1_1_3 = xpq * R_2_0_1_3;
            double R_0_2_1_3 = xpq * R_1_1_1_3 + 1 * R_1_0_1_3;
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+672];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+688];
            double R_1_1_2_2 = xpq * R_2_0_2_2;
            double R_0_2_2_2 = xpq * R_1_1_2_2 + 1 * R_1_0_2_2;
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+704];
            double R_1_1_3_1 = xpq * R_2_0_3_1;
            double R_0_2_3_1 = xpq * R_1_1_3_1 + 1 * R_1_0_3_1;
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+720];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+736];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+752];
            double R_2_1_0_3 = xpq * R_3_0_0_3;
            double R_1_2_0_3 = xpq * R_2_1_0_3 + 1 * R_2_0_0_3;
            double R_0_3_0_3 = xpq * R_1_2_0_3 + 2 * R_1_1_0_3;
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+768];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+784];
            double R_2_1_1_2 = xpq * R_3_0_1_2;
            double R_1_2_1_2 = xpq * R_2_1_1_2 + 1 * R_2_0_1_2;
            double R_0_3_1_2 = xpq * R_1_2_1_2 + 2 * R_1_1_1_2;
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+800];
            double R_2_1_2_1 = xpq * R_3_0_2_1;
            double R_1_2_2_1 = xpq * R_2_1_2_1 + 1 * R_2_0_2_1;
            double R_0_3_2_1 = xpq * R_1_2_2_1 + 2 * R_1_1_2_1;
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+816];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+832];
            double R_3_1_0_2 = xpq * R_4_0_0_2;
            double R_2_2_0_2 = xpq * R_3_1_0_2 + 1 * R_3_0_0_2;
            double R_1_3_0_2 = xpq * R_2_2_0_2 + 2 * R_2_1_0_2;
            double R_0_4_0_2 = xpq * R_1_3_0_2 + 3 * R_1_2_0_2;
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+848];
            double R_3_1_1_1 = xpq * R_4_0_1_1;
            double R_2_2_1_1 = xpq * R_3_1_1_1 + 1 * R_3_0_1_1;
            double R_1_3_1_1 = xpq * R_2_2_1_1 + 2 * R_2_1_1_1;
            double R_0_4_1_1 = xpq * R_1_3_1_1 + 3 * R_1_2_1_1;
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+864];
            double R_4_1_0_1 = xpq * R_5_0_0_1;
            double R_3_2_0_1 = xpq * R_4_1_0_1 + 1 * R_4_0_0_1;
            double R_2_3_0_1 = xpq * R_3_2_0_1 + 2 * R_3_1_0_1;
            double R_1_4_0_1 = xpq * R_2_3_0_1 + 3 * R_2_2_0_1;
            double R_0_5_0_1 = xpq * R_1_4_0_1 + 4 * R_1_3_0_1;
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+176] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_0_6 * dm_ij_cache[tx+64];
            double R_6_0_0_1 = zpq * gamma_inc[sq_id+7*256];
            double R_5_0_0_2 = zpq * R_6_0_0_1 + 1 * gamma_inc[sq_id+6*256];
            double R_4_0_0_3 = zpq * R_5_0_0_2 + 2 * R_5_0_0_1;
            double R_3_0_0_4 = zpq * R_4_0_0_3 + 3 * R_4_0_0_2;
            double R_2_0_0_5 = zpq * R_3_0_0_4 + 4 * R_3_0_0_3;
            double R_1_0_0_6 = zpq * R_2_0_0_5 + 5 * R_2_0_0_4;
            double R_0_0_0_7 = zpq * R_1_0_0_6 + 6 * R_1_0_0_5;
            vj_kl += R_0_0_0_7 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+144];
            double R_0_0_1_6 = ypq * R_1_0_0_6;
            vj_kl += R_0_0_1_6 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+208];
            double R_1_0_1_5 = ypq * R_2_0_0_5;
            double R_0_0_2_5 = ypq * R_1_0_1_5 + 1 * R_1_0_0_5;
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+224];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+256];
            double R_2_0_1_4 = ypq * R_3_0_0_4;
            double R_1_0_2_4 = ypq * R_2_0_1_4 + 1 * R_2_0_0_4;
            double R_0_0_3_4 = ypq * R_1_0_2_4 + 2 * R_1_0_1_4;
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+272];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+288];
            double R_3_0_1_3 = ypq * R_4_0_0_3;
            double R_2_0_2_3 = ypq * R_3_0_1_3 + 1 * R_3_0_0_3;
            double R_1_0_3_3 = ypq * R_2_0_2_3 + 2 * R_2_0_1_3;
            double R_0_0_4_3 = ypq * R_1_0_3_3 + 3 * R_1_0_2_3;
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+304];
            double R_4_0_1_2 = ypq * R_5_0_0_2;
            double R_3_0_2_2 = ypq * R_4_0_1_2 + 1 * R_4_0_0_2;
            double R_2_0_3_2 = ypq * R_3_0_2_2 + 2 * R_3_0_1_2;
            double R_1_0_4_2 = ypq * R_2_0_3_2 + 3 * R_2_0_2_2;
            double R_0_0_5_2 = ypq * R_1_0_4_2 + 4 * R_1_0_3_2;
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+368];
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+384];
            double R_0_1_0_6 = xpq * R_1_0_0_6;
            vj_kl += R_0_1_0_6 * dm_ij_cache[tx+400];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+416];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+432];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+448];
            double R_0_1_1_5 = xpq * R_1_0_1_5;
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+464];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+480];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+496];
            double R_0_1_2_4 = xpq * R_1_0_2_4;
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+512];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+528];
            double R_0_1_3_3 = xpq * R_1_0_3_3;
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+544];
            double R_0_1_4_2 = xpq * R_1_0_4_2;
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+560];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+576];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+592];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+608];
            double R_1_1_0_5 = xpq * R_2_0_0_5;
            double R_0_2_0_5 = xpq * R_1_1_0_5 + 1 * R_1_0_0_5;
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+624];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+640];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+656];
            double R_1_1_1_4 = xpq * R_2_0_1_4;
            double R_0_2_1_4 = xpq * R_1_1_1_4 + 1 * R_1_0_1_4;
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+672];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+688];
            double R_1_1_2_3 = xpq * R_2_0_2_3;
            double R_0_2_2_3 = xpq * R_1_1_2_3 + 1 * R_1_0_2_3;
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+704];
            double R_1_1_3_2 = xpq * R_2_0_3_2;
            double R_0_2_3_2 = xpq * R_1_1_3_2 + 1 * R_1_0_3_2;
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+720];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+736];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+752];
            double R_2_1_0_4 = xpq * R_3_0_0_4;
            double R_1_2_0_4 = xpq * R_2_1_0_4 + 1 * R_2_0_0_4;
            double R_0_3_0_4 = xpq * R_1_2_0_4 + 2 * R_1_1_0_4;
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+768];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+784];
            double R_2_1_1_3 = xpq * R_3_0_1_3;
            double R_1_2_1_3 = xpq * R_2_1_1_3 + 1 * R_2_0_1_3;
            double R_0_3_1_3 = xpq * R_1_2_1_3 + 2 * R_1_1_1_3;
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+800];
            double R_2_1_2_2 = xpq * R_3_0_2_2;
            double R_1_2_2_2 = xpq * R_2_1_2_2 + 1 * R_2_0_2_2;
            double R_0_3_2_2 = xpq * R_1_2_2_2 + 2 * R_1_1_2_2;
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+816];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+832];
            double R_3_1_0_3 = xpq * R_4_0_0_3;
            double R_2_2_0_3 = xpq * R_3_1_0_3 + 1 * R_3_0_0_3;
            double R_1_3_0_3 = xpq * R_2_2_0_3 + 2 * R_2_1_0_3;
            double R_0_4_0_3 = xpq * R_1_3_0_3 + 3 * R_1_2_0_3;
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+848];
            double R_3_1_1_2 = xpq * R_4_0_1_2;
            double R_2_2_1_2 = xpq * R_3_1_1_2 + 1 * R_3_0_1_2;
            double R_1_3_1_2 = xpq * R_2_2_1_2 + 2 * R_2_1_1_2;
            double R_0_4_1_2 = xpq * R_1_3_1_2 + 3 * R_1_2_1_2;
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+864];
            double R_4_1_0_2 = xpq * R_5_0_0_2;
            double R_3_2_0_2 = xpq * R_4_1_0_2 + 1 * R_4_0_0_2;
            double R_2_3_0_2 = xpq * R_3_2_0_2 + 2 * R_3_1_0_2;
            double R_1_4_0_2 = xpq * R_2_3_0_2 + 3 * R_2_2_0_2;
            double R_0_5_0_2 = xpq * R_1_4_0_2 + 4 * R_1_3_0_2;
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+352] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_5 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_0_6 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_0_7 * dm_ij_cache[tx+64];
            double R_7_0_0_1 = zpq * gamma_inc[sq_id+8*256];
            double R_6_0_0_2 = zpq * R_7_0_0_1 + 1 * gamma_inc[sq_id+7*256];
            double R_5_0_0_3 = zpq * R_6_0_0_2 + 2 * R_6_0_0_1;
            double R_4_0_0_4 = zpq * R_5_0_0_3 + 3 * R_5_0_0_2;
            double R_3_0_0_5 = zpq * R_4_0_0_4 + 4 * R_4_0_0_3;
            double R_2_0_0_6 = zpq * R_3_0_0_5 + 5 * R_3_0_0_4;
            double R_1_0_0_7 = zpq * R_2_0_0_6 + 6 * R_2_0_0_5;
            double R_0_0_0_8 = zpq * R_1_0_0_7 + 7 * R_1_0_0_6;
            vj_kl -= R_0_0_0_8 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_1_6 * dm_ij_cache[tx+144];
            double R_0_0_1_7 = ypq * R_1_0_0_7;
            vj_kl -= R_0_0_1_7 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+208];
            double R_1_0_1_6 = ypq * R_2_0_0_6;
            double R_0_0_2_6 = ypq * R_1_0_1_6 + 1 * R_1_0_0_6;
            vj_kl -= R_0_0_2_6 * dm_ij_cache[tx+224];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+240];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+256];
            double R_2_0_1_5 = ypq * R_3_0_0_5;
            double R_1_0_2_5 = ypq * R_2_0_1_5 + 1 * R_2_0_0_5;
            double R_0_0_3_5 = ypq * R_1_0_2_5 + 2 * R_1_0_1_5;
            vj_kl -= R_0_0_3_5 * dm_ij_cache[tx+272];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+288];
            double R_3_0_1_4 = ypq * R_4_0_0_4;
            double R_2_0_2_4 = ypq * R_3_0_1_4 + 1 * R_3_0_0_4;
            double R_1_0_3_4 = ypq * R_2_0_2_4 + 2 * R_2_0_1_4;
            double R_0_0_4_4 = ypq * R_1_0_3_4 + 3 * R_1_0_2_4;
            vj_kl -= R_0_0_4_4 * dm_ij_cache[tx+304];
            double R_4_0_1_3 = ypq * R_5_0_0_3;
            double R_3_0_2_3 = ypq * R_4_0_1_3 + 1 * R_4_0_0_3;
            double R_2_0_3_3 = ypq * R_3_0_2_3 + 2 * R_3_0_1_3;
            double R_1_0_4_3 = ypq * R_2_0_3_3 + 3 * R_2_0_2_3;
            double R_0_0_5_3 = ypq * R_1_0_4_3 + 4 * R_1_0_3_3;
            vj_kl -= R_0_0_5_3 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+368];
            vj_kl -= R_0_1_0_6 * dm_ij_cache[tx+384];
            double R_0_1_0_7 = xpq * R_1_0_0_7;
            vj_kl -= R_0_1_0_7 * dm_ij_cache[tx+400];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+416];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+432];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+448];
            double R_0_1_1_6 = xpq * R_1_0_1_6;
            vj_kl -= R_0_1_1_6 * dm_ij_cache[tx+464];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+480];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+496];
            double R_0_1_2_5 = xpq * R_1_0_2_5;
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+512];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+528];
            double R_0_1_3_4 = xpq * R_1_0_3_4;
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+544];
            double R_0_1_4_3 = xpq * R_1_0_4_3;
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+560];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+576];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+592];
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+608];
            double R_1_1_0_6 = xpq * R_2_0_0_6;
            double R_0_2_0_6 = xpq * R_1_1_0_6 + 1 * R_1_0_0_6;
            vj_kl -= R_0_2_0_6 * dm_ij_cache[tx+624];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+640];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+656];
            double R_1_1_1_5 = xpq * R_2_0_1_5;
            double R_0_2_1_5 = xpq * R_1_1_1_5 + 1 * R_1_0_1_5;
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+672];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+688];
            double R_1_1_2_4 = xpq * R_2_0_2_4;
            double R_0_2_2_4 = xpq * R_1_1_2_4 + 1 * R_1_0_2_4;
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+704];
            double R_1_1_3_3 = xpq * R_2_0_3_3;
            double R_0_2_3_3 = xpq * R_1_1_3_3 + 1 * R_1_0_3_3;
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+720];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+736];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+752];
            double R_2_1_0_5 = xpq * R_3_0_0_5;
            double R_1_2_0_5 = xpq * R_2_1_0_5 + 1 * R_2_0_0_5;
            double R_0_3_0_5 = xpq * R_1_2_0_5 + 2 * R_1_1_0_5;
            vj_kl -= R_0_3_0_5 * dm_ij_cache[tx+768];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+784];
            double R_2_1_1_4 = xpq * R_3_0_1_4;
            double R_1_2_1_4 = xpq * R_2_1_1_4 + 1 * R_2_0_1_4;
            double R_0_3_1_4 = xpq * R_1_2_1_4 + 2 * R_1_1_1_4;
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+800];
            double R_2_1_2_3 = xpq * R_3_0_2_3;
            double R_1_2_2_3 = xpq * R_2_1_2_3 + 1 * R_2_0_2_3;
            double R_0_3_2_3 = xpq * R_1_2_2_3 + 2 * R_1_1_2_3;
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+816];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+832];
            double R_3_1_0_4 = xpq * R_4_0_0_4;
            double R_2_2_0_4 = xpq * R_3_1_0_4 + 1 * R_3_0_0_4;
            double R_1_3_0_4 = xpq * R_2_2_0_4 + 2 * R_2_1_0_4;
            double R_0_4_0_4 = xpq * R_1_3_0_4 + 3 * R_1_2_0_4;
            vj_kl -= R_0_4_0_4 * dm_ij_cache[tx+848];
            double R_3_1_1_3 = xpq * R_4_0_1_3;
            double R_2_2_1_3 = xpq * R_3_1_1_3 + 1 * R_3_0_1_3;
            double R_1_3_1_3 = xpq * R_2_2_1_3 + 2 * R_2_1_1_3;
            double R_0_4_1_3 = xpq * R_1_3_1_3 + 3 * R_1_2_1_3;
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+864];
            double R_4_1_0_3 = xpq * R_5_0_0_3;
            double R_3_2_0_3 = xpq * R_4_1_0_3 + 1 * R_4_0_0_3;
            double R_2_3_0_3 = xpq * R_3_2_0_3 + 2 * R_3_1_0_3;
            double R_1_4_0_3 = xpq * R_2_3_0_3 + 3 * R_2_2_0_3;
            double R_0_5_0_3 = xpq * R_1_4_0_3 + 4 * R_1_3_0_3;
            vj_kl -= R_0_5_0_3 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+528] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_2_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_0_5_0 * dm_ij_cache[tx+288];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+304];
            double R_5_0_1_0 = ypq * gamma_inc[sq_id+6*256];
            double R_4_0_2_0 = ypq * R_5_0_1_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_3_0 = ypq * R_4_0_2_0 + 2 * R_4_0_1_0;
            double R_2_0_4_0 = ypq * R_3_0_3_0 + 3 * R_3_0_2_0;
            double R_1_0_5_0 = ypq * R_2_0_4_0 + 4 * R_2_0_3_0;
            double R_0_0_6_0 = ypq * R_1_0_5_0 + 5 * R_1_0_4_0;
            vj_kl -= R_0_0_6_0 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+400];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+416];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+432];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+464];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+512];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+528];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+544];
            double R_0_1_5_0 = xpq * R_1_0_5_0;
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+560];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+576];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+592];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+608];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+624];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+640];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+656];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+672];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+688];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+704];
            double R_1_1_4_0 = xpq * R_2_0_4_0;
            double R_0_2_4_0 = xpq * R_1_1_4_0 + 1 * R_1_0_4_0;
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+720];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+736];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+752];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+768];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+784];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+800];
            double R_2_1_3_0 = xpq * R_3_0_3_0;
            double R_1_2_3_0 = xpq * R_2_1_3_0 + 1 * R_2_0_3_0;
            double R_0_3_3_0 = xpq * R_1_2_3_0 + 2 * R_1_1_3_0;
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+816];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+832];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+848];
            double R_3_1_2_0 = xpq * R_4_0_2_0;
            double R_2_2_2_0 = xpq * R_3_1_2_0 + 1 * R_3_0_2_0;
            double R_1_3_2_0 = xpq * R_2_2_2_0 + 2 * R_2_1_2_0;
            double R_0_4_2_0 = xpq * R_1_3_2_0 + 3 * R_1_2_2_0;
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+864];
            double R_4_1_1_0 = xpq * R_5_0_1_0;
            double R_3_2_1_0 = xpq * R_4_1_1_0 + 1 * R_4_0_1_0;
            double R_2_3_1_0 = xpq * R_3_2_1_0 + 2 * R_3_1_1_0;
            double R_1_4_1_0 = xpq * R_2_3_1_0 + 3 * R_2_2_1_0;
            double R_0_5_1_0 = xpq * R_1_4_1_0 + 4 * R_1_3_1_0;
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+704] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_1_6 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+208];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+224];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+288];
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+304];
            double R_5_0_1_1 = ypq * R_6_0_0_1;
            double R_4_0_2_1 = ypq * R_5_0_1_1 + 1 * R_5_0_0_1;
            double R_3_0_3_1 = ypq * R_4_0_2_1 + 2 * R_4_0_1_1;
            double R_2_0_4_1 = ypq * R_3_0_3_1 + 3 * R_3_0_2_1;
            double R_1_0_5_1 = ypq * R_2_0_4_1 + 4 * R_2_0_3_1;
            double R_0_0_6_1 = ypq * R_1_0_5_1 + 5 * R_1_0_4_1;
            vj_kl += R_0_0_6_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+368];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+384];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+400];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+448];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+464];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+480];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+496];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+512];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+528];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+544];
            double R_0_1_5_1 = xpq * R_1_0_5_1;
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+560];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+576];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+592];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+608];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+624];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+640];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+656];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+672];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+688];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+704];
            double R_1_1_4_1 = xpq * R_2_0_4_1;
            double R_0_2_4_1 = xpq * R_1_1_4_1 + 1 * R_1_0_4_1;
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+720];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+736];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+752];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+768];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+784];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+800];
            double R_2_1_3_1 = xpq * R_3_0_3_1;
            double R_1_2_3_1 = xpq * R_2_1_3_1 + 1 * R_2_0_3_1;
            double R_0_3_3_1 = xpq * R_1_2_3_1 + 2 * R_1_1_3_1;
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+816];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+832];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+848];
            double R_3_1_2_1 = xpq * R_4_0_2_1;
            double R_2_2_2_1 = xpq * R_3_1_2_1 + 1 * R_3_0_2_1;
            double R_1_3_2_1 = xpq * R_2_2_2_1 + 2 * R_2_1_2_1;
            double R_0_4_2_1 = xpq * R_1_3_2_1 + 3 * R_1_2_2_1;
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+864];
            double R_4_1_1_1 = xpq * R_5_0_1_1;
            double R_3_2_1_1 = xpq * R_4_1_1_1 + 1 * R_4_0_1_1;
            double R_2_3_1_1 = xpq * R_3_2_1_1 + 2 * R_3_1_1_1;
            double R_1_4_1_1 = xpq * R_2_3_1_1 + 3 * R_2_2_1_1;
            double R_0_5_1_1 = xpq * R_1_4_1_1 + 4 * R_1_3_1_1;
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+880] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_6 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_7 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_2_6 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+208];
            vj_kl -= R_0_0_3_5 * dm_ij_cache[tx+224];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_0_4_4 * dm_ij_cache[tx+272];
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+288];
            vj_kl -= R_0_0_5_3 * dm_ij_cache[tx+304];
            double R_5_0_1_2 = ypq * R_6_0_0_2;
            double R_4_0_2_2 = ypq * R_5_0_1_2 + 1 * R_5_0_0_2;
            double R_3_0_3_2 = ypq * R_4_0_2_2 + 2 * R_4_0_1_2;
            double R_2_0_4_2 = ypq * R_3_0_3_2 + 3 * R_3_0_2_2;
            double R_1_0_5_2 = ypq * R_2_0_4_2 + 4 * R_2_0_3_2;
            double R_0_0_6_2 = ypq * R_1_0_5_2 + 5 * R_1_0_4_2;
            vj_kl -= R_0_0_6_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+368];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+384];
            vj_kl -= R_0_1_1_6 * dm_ij_cache[tx+400];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+416];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+432];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+448];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+464];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+480];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+496];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+512];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+528];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+544];
            double R_0_1_5_2 = xpq * R_1_0_5_2;
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+560];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+576];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+592];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+608];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+624];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+640];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+656];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+672];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+688];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+704];
            double R_1_1_4_2 = xpq * R_2_0_4_2;
            double R_0_2_4_2 = xpq * R_1_1_4_2 + 1 * R_1_0_4_2;
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+720];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+736];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+752];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+768];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+784];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+800];
            double R_2_1_3_2 = xpq * R_3_0_3_2;
            double R_1_2_3_2 = xpq * R_2_1_3_2 + 1 * R_2_0_3_2;
            double R_0_3_3_2 = xpq * R_1_2_3_2 + 2 * R_1_1_3_2;
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+816];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+832];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+848];
            double R_3_1_2_2 = xpq * R_4_0_2_2;
            double R_2_2_2_2 = xpq * R_3_1_2_2 + 1 * R_3_0_2_2;
            double R_1_3_2_2 = xpq * R_2_2_2_2 + 2 * R_2_1_2_2;
            double R_0_4_2_2 = xpq * R_1_3_2_2 + 3 * R_1_2_2_2;
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+864];
            double R_4_1_1_2 = xpq * R_5_0_1_2;
            double R_3_2_1_2 = xpq * R_4_1_1_2 + 1 * R_4_0_1_2;
            double R_2_3_1_2 = xpq * R_3_2_1_2 + 2 * R_3_1_1_2;
            double R_1_4_1_2 = xpq * R_2_3_1_2 + 3 * R_2_2_1_2;
            double R_0_5_1_2 = xpq * R_1_4_1_2 + 4 * R_1_3_1_2;
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1056] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+224];
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_0_6_0 * dm_ij_cache[tx+288];
            vj_kl += R_0_0_6_1 * dm_ij_cache[tx+304];
            double R_6_0_1_0 = ypq * gamma_inc[sq_id+7*256];
            double R_5_0_2_0 = ypq * R_6_0_1_0 + 1 * gamma_inc[sq_id+6*256];
            double R_4_0_3_0 = ypq * R_5_0_2_0 + 2 * R_5_0_1_0;
            double R_3_0_4_0 = ypq * R_4_0_3_0 + 3 * R_4_0_2_0;
            double R_2_0_5_0 = ypq * R_3_0_4_0 + 4 * R_3_0_3_0;
            double R_1_0_6_0 = ypq * R_2_0_5_0 + 5 * R_2_0_4_0;
            double R_0_0_7_0 = ypq * R_1_0_6_0 + 6 * R_1_0_5_0;
            vj_kl += R_0_0_7_0 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+384];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+400];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+416];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+432];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+448];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+464];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+512];
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+528];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+544];
            double R_0_1_6_0 = xpq * R_1_0_6_0;
            vj_kl += R_0_1_6_0 * dm_ij_cache[tx+560];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+576];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+592];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+608];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+624];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+640];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+656];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+672];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+688];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+704];
            double R_1_1_5_0 = xpq * R_2_0_5_0;
            double R_0_2_5_0 = xpq * R_1_1_5_0 + 1 * R_1_0_5_0;
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+720];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+736];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+752];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+768];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+784];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+800];
            double R_2_1_4_0 = xpq * R_3_0_4_0;
            double R_1_2_4_0 = xpq * R_2_1_4_0 + 1 * R_2_0_4_0;
            double R_0_3_4_0 = xpq * R_1_2_4_0 + 2 * R_1_1_4_0;
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+816];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+832];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+848];
            double R_3_1_3_0 = xpq * R_4_0_3_0;
            double R_2_2_3_0 = xpq * R_3_1_3_0 + 1 * R_3_0_3_0;
            double R_1_3_3_0 = xpq * R_2_2_3_0 + 2 * R_2_1_3_0;
            double R_0_4_3_0 = xpq * R_1_3_3_0 + 3 * R_1_2_3_0;
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+864];
            double R_4_1_2_0 = xpq * R_5_0_2_0;
            double R_3_2_2_0 = xpq * R_4_1_2_0 + 1 * R_4_0_2_0;
            double R_2_3_2_0 = xpq * R_3_2_2_0 + 2 * R_3_1_2_0;
            double R_1_4_2_0 = xpq * R_2_3_2_0 + 3 * R_2_2_2_0;
            double R_0_5_2_0 = xpq * R_1_4_2_0 + 4 * R_1_3_2_0;
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1232] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_2_6 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_3_5 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+208];
            vj_kl -= R_0_0_4_4 * dm_ij_cache[tx+224];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_0_5_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_0_6_1 * dm_ij_cache[tx+288];
            vj_kl -= R_0_0_6_2 * dm_ij_cache[tx+304];
            double R_6_0_1_1 = ypq * R_7_0_0_1;
            double R_5_0_2_1 = ypq * R_6_0_1_1 + 1 * R_6_0_0_1;
            double R_4_0_3_1 = ypq * R_5_0_2_1 + 2 * R_5_0_1_1;
            double R_3_0_4_1 = ypq * R_4_0_3_1 + 3 * R_4_0_2_1;
            double R_2_0_5_1 = ypq * R_3_0_4_1 + 4 * R_3_0_3_1;
            double R_1_0_6_1 = ypq * R_2_0_5_1 + 5 * R_2_0_4_1;
            double R_0_0_7_1 = ypq * R_1_0_6_1 + 6 * R_1_0_5_1;
            vj_kl -= R_0_0_7_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+368];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+384];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+400];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+448];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+464];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+496];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+512];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+528];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+544];
            double R_0_1_6_1 = xpq * R_1_0_6_1;
            vj_kl -= R_0_1_6_1 * dm_ij_cache[tx+560];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+576];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+592];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+608];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+624];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+640];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+656];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+672];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+688];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+704];
            double R_1_1_5_1 = xpq * R_2_0_5_1;
            double R_0_2_5_1 = xpq * R_1_1_5_1 + 1 * R_1_0_5_1;
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+720];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+736];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+752];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+768];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+784];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+800];
            double R_2_1_4_1 = xpq * R_3_0_4_1;
            double R_1_2_4_1 = xpq * R_2_1_4_1 + 1 * R_2_0_4_1;
            double R_0_3_4_1 = xpq * R_1_2_4_1 + 2 * R_1_1_4_1;
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+816];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+832];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+848];
            double R_3_1_3_1 = xpq * R_4_0_3_1;
            double R_2_2_3_1 = xpq * R_3_1_3_1 + 1 * R_3_0_3_1;
            double R_1_3_3_1 = xpq * R_2_2_3_1 + 2 * R_2_1_3_1;
            double R_0_4_3_1 = xpq * R_1_3_3_1 + 3 * R_1_2_3_1;
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+864];
            double R_4_1_2_1 = xpq * R_5_0_2_1;
            double R_3_2_2_1 = xpq * R_4_1_2_1 + 1 * R_4_0_2_1;
            double R_2_3_2_1 = xpq * R_3_2_2_1 + 2 * R_3_1_2_1;
            double R_1_4_2_1 = xpq * R_2_3_2_1 + 3 * R_2_2_2_1;
            double R_0_5_2_1 = xpq * R_1_4_2_1 + 4 * R_1_3_2_1;
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1408] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_3_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_4_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_5_0 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_0_5_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_0_6_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_0_6_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_0_6_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_0_7_0 * dm_ij_cache[tx+288];
            vj_kl -= R_0_0_7_1 * dm_ij_cache[tx+304];
            double R_7_0_1_0 = ypq * gamma_inc[sq_id+8*256];
            double R_6_0_2_0 = ypq * R_7_0_1_0 + 1 * gamma_inc[sq_id+7*256];
            double R_5_0_3_0 = ypq * R_6_0_2_0 + 2 * R_6_0_1_0;
            double R_4_0_4_0 = ypq * R_5_0_3_0 + 3 * R_5_0_2_0;
            double R_3_0_5_0 = ypq * R_4_0_4_0 + 4 * R_4_0_3_0;
            double R_2_0_6_0 = ypq * R_3_0_5_0 + 5 * R_3_0_4_0;
            double R_1_0_7_0 = ypq * R_2_0_6_0 + 6 * R_2_0_5_0;
            double R_0_0_8_0 = ypq * R_1_0_7_0 + 7 * R_1_0_6_0;
            vj_kl -= R_0_0_8_0 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+400];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+416];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+432];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+464];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+512];
            vj_kl -= R_0_1_6_0 * dm_ij_cache[tx+528];
            vj_kl -= R_0_1_6_1 * dm_ij_cache[tx+544];
            double R_0_1_7_0 = xpq * R_1_0_7_0;
            vj_kl -= R_0_1_7_0 * dm_ij_cache[tx+560];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+576];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+592];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+608];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+624];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+640];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+656];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+672];
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+688];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+704];
            double R_1_1_6_0 = xpq * R_2_0_6_0;
            double R_0_2_6_0 = xpq * R_1_1_6_0 + 1 * R_1_0_6_0;
            vj_kl -= R_0_2_6_0 * dm_ij_cache[tx+720];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+736];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+752];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+768];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+784];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+800];
            double R_2_1_5_0 = xpq * R_3_0_5_0;
            double R_1_2_5_0 = xpq * R_2_1_5_0 + 1 * R_2_0_5_0;
            double R_0_3_5_0 = xpq * R_1_2_5_0 + 2 * R_1_1_5_0;
            vj_kl -= R_0_3_5_0 * dm_ij_cache[tx+816];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+832];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+848];
            double R_3_1_4_0 = xpq * R_4_0_4_0;
            double R_2_2_4_0 = xpq * R_3_1_4_0 + 1 * R_3_0_4_0;
            double R_1_3_4_0 = xpq * R_2_2_4_0 + 2 * R_2_1_4_0;
            double R_0_4_4_0 = xpq * R_1_3_4_0 + 3 * R_1_2_4_0;
            vj_kl -= R_0_4_4_0 * dm_ij_cache[tx+864];
            double R_4_1_3_0 = xpq * R_5_0_3_0;
            double R_3_2_3_0 = xpq * R_4_1_3_0 + 1 * R_4_0_3_0;
            double R_2_3_3_0 = xpq * R_3_2_3_0 + 2 * R_3_1_3_0;
            double R_1_4_3_0 = xpq * R_2_3_3_0 + 3 * R_2_2_3_0;
            double R_0_5_3_0 = xpq * R_1_4_3_0 + 4 * R_1_3_3_0;
            vj_kl -= R_0_5_3_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1584] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_0_0 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+464];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+512];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+528];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+544];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+560];
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+576];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+592];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+608];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+624];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+640];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+656];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+672];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+688];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+704];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+720];
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+736];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+752];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+768];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+784];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+800];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+816];
            vj_kl -= R_0_5_0_0 * dm_ij_cache[tx+832];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+848];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+864];
            double R_5_1_0_0 = xpq * gamma_inc[sq_id+6*256];
            double R_4_2_0_0 = xpq * R_5_1_0_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_3_0_0 = xpq * R_4_2_0_0 + 2 * R_4_1_0_0;
            double R_2_4_0_0 = xpq * R_3_3_0_0 + 3 * R_3_2_0_0;
            double R_1_5_0_0 = xpq * R_2_4_0_0 + 4 * R_2_3_0_0;
            double R_0_6_0_0 = xpq * R_1_5_0_0 + 5 * R_1_4_0_0;
            vj_kl -= R_0_6_0_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1760] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_0_6 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+464];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+480];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+496];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+512];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+528];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+544];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+560];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+576];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+592];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+608];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+624];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+640];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+656];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+672];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+688];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+704];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+720];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+736];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+752];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+768];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+784];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+800];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+816];
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+832];
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+848];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+864];
            double R_5_1_0_1 = xpq * R_6_0_0_1;
            double R_4_2_0_1 = xpq * R_5_1_0_1 + 1 * R_5_0_0_1;
            double R_3_3_0_1 = xpq * R_4_2_0_1 + 2 * R_4_1_0_1;
            double R_2_4_0_1 = xpq * R_3_3_0_1 + 3 * R_3_2_0_1;
            double R_1_5_0_1 = xpq * R_2_4_0_1 + 4 * R_2_3_0_1;
            double R_0_6_0_1 = xpq * R_1_5_0_1 + 5 * R_1_4_0_1;
            vj_kl += R_0_6_0_1 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1936] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_0_6 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_0_7 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_1_6 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_0_6 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+464];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+480];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+496];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+512];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+528];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+544];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+560];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+576];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+592];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+608];
            vj_kl -= R_0_3_0_5 * dm_ij_cache[tx+624];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+640];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+656];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+672];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+688];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+704];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+720];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+736];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+752];
            vj_kl -= R_0_4_0_4 * dm_ij_cache[tx+768];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+784];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+800];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+816];
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+832];
            vj_kl -= R_0_5_0_3 * dm_ij_cache[tx+848];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+864];
            double R_5_1_0_2 = xpq * R_6_0_0_2;
            double R_4_2_0_2 = xpq * R_5_1_0_2 + 1 * R_5_0_0_2;
            double R_3_3_0_2 = xpq * R_4_2_0_2 + 2 * R_4_1_0_2;
            double R_2_4_0_2 = xpq * R_3_3_0_2 + 3 * R_3_2_0_2;
            double R_1_5_0_2 = xpq * R_2_4_0_2 + 4 * R_2_3_0_2;
            double R_0_6_0_2 = xpq * R_1_5_0_2 + 5 * R_1_4_0_2;
            vj_kl -= R_0_6_0_2 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2112] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_6_0 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+464];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+512];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+528];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+544];
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+560];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+576];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+592];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+608];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+624];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+640];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+656];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+672];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+688];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+704];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+720];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+736];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+752];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+768];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+784];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+800];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+816];
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+832];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+848];
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+864];
            double R_5_1_1_0 = xpq * R_6_0_1_0;
            double R_4_2_1_0 = xpq * R_5_1_1_0 + 1 * R_5_0_1_0;
            double R_3_3_1_0 = xpq * R_4_2_1_0 + 2 * R_4_1_1_0;
            double R_2_4_1_0 = xpq * R_3_3_1_0 + 3 * R_3_2_1_0;
            double R_1_5_1_0 = xpq * R_2_4_1_0 + 4 * R_2_3_1_0;
            double R_0_6_1_0 = xpq * R_1_5_1_0 + 5 * R_1_4_1_0;
            vj_kl += R_0_6_1_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2288] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_1_6 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_6_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+464];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+496];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+512];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+528];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+544];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+560];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+576];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+592];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+608];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+624];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+640];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+656];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+672];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+688];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+704];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+720];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+736];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+752];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+768];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+784];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+800];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+816];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+832];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+848];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+864];
            double R_5_1_1_1 = xpq * R_6_0_1_1;
            double R_4_2_1_1 = xpq * R_5_1_1_1 + 1 * R_5_0_1_1;
            double R_3_3_1_1 = xpq * R_4_2_1_1 + 2 * R_4_1_1_1;
            double R_2_4_1_1 = xpq * R_3_3_1_1 + 3 * R_3_2_1_1;
            double R_1_5_1_1 = xpq * R_2_4_1_1 + 4 * R_2_3_1_1;
            double R_0_6_1_1 = xpq * R_1_5_1_1 + 5 * R_1_4_1_1;
            vj_kl -= R_0_6_1_1 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2464] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_6_0 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_6_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_7_0 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+464];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+512];
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+528];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+544];
            vj_kl -= R_0_2_6_0 * dm_ij_cache[tx+560];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+576];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+592];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+608];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+624];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+640];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+656];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+672];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+688];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+704];
            vj_kl -= R_0_3_5_0 * dm_ij_cache[tx+720];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+736];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+752];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+768];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+784];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+800];
            vj_kl -= R_0_4_4_0 * dm_ij_cache[tx+816];
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+832];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+848];
            vj_kl -= R_0_5_3_0 * dm_ij_cache[tx+864];
            double R_5_1_2_0 = xpq * R_6_0_2_0;
            double R_4_2_2_0 = xpq * R_5_1_2_0 + 1 * R_5_0_2_0;
            double R_3_3_2_0 = xpq * R_4_2_2_0 + 2 * R_4_1_2_0;
            double R_2_4_2_0 = xpq * R_3_3_2_0 + 3 * R_3_2_2_0;
            double R_1_5_2_0 = xpq * R_2_4_2_0 + 4 * R_2_3_2_0;
            double R_0_6_2_0 = xpq * R_1_5_2_0 + 5 * R_1_4_2_0;
            vj_kl -= R_0_6_2_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2640] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+288];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+320];
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+336];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+384];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+400];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+416];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+432];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+448];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+464];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+512];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+528];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+544];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+560];
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+576];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+592];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+608];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+624];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+640];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+656];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+672];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+688];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+704];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+720];
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+736];
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+752];
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+768];
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+784];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+800];
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+816];
            vj_kl += R_0_6_0_0 * dm_ij_cache[tx+832];
            vj_kl += R_0_6_0_1 * dm_ij_cache[tx+848];
            vj_kl += R_0_6_1_0 * dm_ij_cache[tx+864];
            double R_6_1_0_0 = xpq * gamma_inc[sq_id+7*256];
            double R_5_2_0_0 = xpq * R_6_1_0_0 + 1 * gamma_inc[sq_id+6*256];
            double R_4_3_0_0 = xpq * R_5_2_0_0 + 2 * R_5_1_0_0;
            double R_3_4_0_0 = xpq * R_4_3_0_0 + 3 * R_4_2_0_0;
            double R_2_5_0_0 = xpq * R_3_4_0_0 + 4 * R_3_3_0_0;
            double R_1_6_0_0 = xpq * R_2_5_0_0 + 5 * R_2_4_0_0;
            double R_0_7_0_0 = xpq * R_1_6_0_0 + 6 * R_1_5_0_0;
            vj_kl += R_0_7_0_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2816] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_0_6 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+288];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+304];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+336];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+352];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+368];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+384];
            vj_kl -= R_0_3_0_5 * dm_ij_cache[tx+400];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+448];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+464];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+496];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+512];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+528];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+544];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+560];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+576];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+592];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+608];
            vj_kl -= R_0_4_0_4 * dm_ij_cache[tx+624];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+640];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+656];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+672];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+688];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+704];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+720];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+736];
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+752];
            vj_kl -= R_0_5_0_3 * dm_ij_cache[tx+768];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+784];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+800];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+816];
            vj_kl -= R_0_6_0_1 * dm_ij_cache[tx+832];
            vj_kl -= R_0_6_0_2 * dm_ij_cache[tx+848];
            vj_kl -= R_0_6_1_1 * dm_ij_cache[tx+864];
            double R_6_1_0_1 = xpq * R_7_0_0_1;
            double R_5_2_0_1 = xpq * R_6_1_0_1 + 1 * R_6_0_0_1;
            double R_4_3_0_1 = xpq * R_5_2_0_1 + 2 * R_5_1_0_1;
            double R_3_4_0_1 = xpq * R_4_3_0_1 + 3 * R_4_2_0_1;
            double R_2_5_0_1 = xpq * R_3_4_0_1 + 4 * R_3_3_0_1;
            double R_1_6_0_1 = xpq * R_2_5_0_1 + 5 * R_2_4_0_1;
            double R_0_7_0_1 = xpq * R_1_6_0_1 + 6 * R_1_5_0_1;
            vj_kl -= R_0_7_0_1 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2992] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+288];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_2_6_0 * dm_ij_cache[tx+320];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+336];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+400];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+416];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+432];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+464];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+512];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+528];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+544];
            vj_kl -= R_0_3_5_0 * dm_ij_cache[tx+560];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+576];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+592];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+608];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+624];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+640];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+656];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+672];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+688];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+704];
            vj_kl -= R_0_4_4_0 * dm_ij_cache[tx+720];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+736];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+752];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+768];
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+784];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+800];
            vj_kl -= R_0_5_3_0 * dm_ij_cache[tx+816];
            vj_kl -= R_0_6_1_0 * dm_ij_cache[tx+832];
            vj_kl -= R_0_6_1_1 * dm_ij_cache[tx+848];
            vj_kl -= R_0_6_2_0 * dm_ij_cache[tx+864];
            double R_6_1_1_0 = xpq * R_7_0_1_0;
            double R_5_2_1_0 = xpq * R_6_1_1_0 + 1 * R_6_0_1_0;
            double R_4_3_1_0 = xpq * R_5_2_1_0 + 2 * R_5_1_1_0;
            double R_3_4_1_0 = xpq * R_4_3_1_0 + 3 * R_4_2_1_0;
            double R_2_5_1_0 = xpq * R_3_4_1_0 + 4 * R_3_3_1_0;
            double R_1_6_1_0 = xpq * R_2_5_1_0 + 5 * R_2_4_1_0;
            double R_0_7_1_0 = xpq * R_1_6_1_0 + 6 * R_1_5_1_0;
            vj_kl -= R_0_7_1_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3168] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_3_0_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+176];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+288];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_3_5_0 * dm_ij_cache[tx+320];
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+336];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_4_0_4 * dm_ij_cache[tx+400];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+416];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+432];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+464];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+512];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+528];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+544];
            vj_kl -= R_0_4_4_0 * dm_ij_cache[tx+560];
            vj_kl -= R_0_5_0_0 * dm_ij_cache[tx+576];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+592];
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+608];
            vj_kl -= R_0_5_0_3 * dm_ij_cache[tx+624];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+640];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+656];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+672];
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+688];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+704];
            vj_kl -= R_0_5_3_0 * dm_ij_cache[tx+720];
            vj_kl -= R_0_6_0_0 * dm_ij_cache[tx+736];
            vj_kl -= R_0_6_0_1 * dm_ij_cache[tx+752];
            vj_kl -= R_0_6_0_2 * dm_ij_cache[tx+768];
            vj_kl -= R_0_6_1_0 * dm_ij_cache[tx+784];
            vj_kl -= R_0_6_1_1 * dm_ij_cache[tx+800];
            vj_kl -= R_0_6_2_0 * dm_ij_cache[tx+816];
            vj_kl -= R_0_7_0_0 * dm_ij_cache[tx+832];
            vj_kl -= R_0_7_0_1 * dm_ij_cache[tx+848];
            vj_kl -= R_0_7_1_0 * dm_ij_cache[tx+864];
            double R_7_1_0_0 = xpq * gamma_inc[sq_id+8*256];
            double R_6_2_0_0 = xpq * R_7_1_0_0 + 1 * gamma_inc[sq_id+7*256];
            double R_5_3_0_0 = xpq * R_6_2_0_0 + 2 * R_6_1_0_0;
            double R_4_4_0_0 = xpq * R_5_3_0_0 + 3 * R_5_2_0_0;
            double R_3_5_0_0 = xpq * R_4_4_0_0 + 4 * R_4_3_0_0;
            double R_2_6_0_0 = xpq * R_3_5_0_0 + 5 * R_3_4_0_0;
            double R_1_7_0_0 = xpq * R_2_6_0_0 + 6 * R_2_5_0_0;
            double R_0_8_0_0 = xpq * R_1_7_0_0 + 7 * R_1_6_0_0;
            vj_kl -= R_0_8_0_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3344] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_0_1_0 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_0_0 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_2 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_0_5 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_0_6 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_5 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_0_6 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_0_7 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_0_1_6 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_1_0_6 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+64] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_6 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_0_7 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_0_8 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_1_6 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_0_1_7 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_2_6 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_3_5 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_1_0_6 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_1_0_7 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_1_6 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_0_6 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_3_0_5 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+80] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_0_2_0 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+96] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+112] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+128] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_1_6 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+144] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_1_6 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_1_7 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_0_2_6 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_3_5 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_4_4 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_1_1_6 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+160] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_5_0 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+176] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+192] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+208] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_2_6 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_0_3_5 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_4_4 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_5_3 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+224] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_6_0 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+240] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_6_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+256] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_3_5 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_0_4_4 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_5_3 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_6_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+272] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_0_5_0 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_0_6_0 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_6_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_7_0 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_6_0 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+288] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_4_4 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_0_5_3 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_0_6_1 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_6_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_7_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_6_1 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+304] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_0_5_3 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_0_6_0 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_0_6_1 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_0_6_2 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_0_7_0 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_0_7_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_0_8_0 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_6_0 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_1_6_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_1_7_0 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_2_6_0 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_3_5_0 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+320] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_0_0 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+336] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+352] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+368] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_1_0_6 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+384] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_1_0_6 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_1_0_7 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_1_1_6 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_2_0_6 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_0_5 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_4_0_4 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+400] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+416] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+432] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+448] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_1_1_6 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+464] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+480] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+496] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+512] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_6_0 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+528] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_6_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+544] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_1_6_0 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_1_6_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_1_7_0 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_2_6_0 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_3_5_0 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_4_4_0 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+560] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_5_0_0 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+576] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+592] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+608] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_2_0_6 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_3_0_5 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_4_0_4 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_5_0_3 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+624] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+640] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+656] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+672] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+688] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+704] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_2_6_0 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_3_5_0 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_4_4_0 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_5_3_0 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+720] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_6_0_0 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+736] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_6_0_1 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+752] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_3_0_5 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_4_0_4 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_5_0_3 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_6_0_2 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+768] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_6_1_0 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+784] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_6_1_1 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+800] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_3_5_0 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_4_4_0 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_5_3_0 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_6_2_0 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+816] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_5_0_0 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_6_0_0 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_6_0_1 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_6_1_0 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_7_0_0 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+832] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_4_0_4 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_5_0_3 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_6_0_1 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_6_0_2 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_6_1_1 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_7_0_1 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+848] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_4_4_0 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_5_3_0 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_6_1_0 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_6_1_1 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_6_2_0 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_7_1_0 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+864] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+176];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+352];
            vj_ij -= R_0_5_0_3 * dm_kl_cache[sq_kl+528];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+704];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+880];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+1056];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+1232];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+1408];
            vj_ij -= R_0_5_3_0 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_6_0_0 * dm_kl_cache[sq_kl+1760];
            vj_ij += R_0_6_0_1 * dm_kl_cache[sq_kl+1936];
            vj_ij -= R_0_6_0_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_6_1_0 * dm_kl_cache[sq_kl+2288];
            vj_ij -= R_0_6_1_1 * dm_kl_cache[sq_kl+2464];
            vj_ij -= R_0_6_2_0 * dm_kl_cache[sq_kl+2640];
            vj_ij += R_0_7_0_0 * dm_kl_cache[sq_kl+2816];
            vj_ij -= R_0_7_0_1 * dm_kl_cache[sq_kl+2992];
            vj_ij -= R_0_7_1_0 * dm_kl_cache[sq_kl+3168];
            vj_ij -= R_0_8_0_0 * dm_kl_cache[sq_kl+3344];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+880] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 56; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 220; n += 16) {
        int i = n / 11;
        int tile = n % 11;
        int task_kl = blockIdx.y * 176 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*176]);
        }
    }
}

// TILEX=21, TILEY=6,
__global__
void md_j_5_4(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 336;
    int task_kl0 = blockIdx.y * 96;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 2560;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 384;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 896;
    double *dm_ij_cache = vj_kl_cache + 3360;
    double *dm_kl_cache = dm_ij_cache + 896;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 448; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 3360; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 96; n += 256) {
        int task_kl = blockIdx.y * 96 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+96] = ykl;
            Rq_cache[n+192] = zkl;
            Rq_cache[n+288] = akl;
        }
    }

    for (int n = tx; n < 210; n += 16) {
        int i = n / 6;
        int tile = n % 6;
        int task_kl = blockIdx.y * 96 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*96] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 21; ++batch_ij) {
        int task_ij0 = blockIdx.x * 336 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 56; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 6; ++batch_kl) {
            int task_kl0 = blockIdx.y * 96 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+96];
            double zkl = Rq_cache[sq_kl+192];
            double akl = Rq_cache[sq_kl+288];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 9);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 9; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+32];
            double R_2_0_0_1 = zpq * gamma_inc[sq_id+3*256];
            double R_1_0_0_2 = zpq * R_2_0_0_1 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_0_3 = zpq * R_1_0_0_2 + 2 * R_1_0_0_1;
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+48];
            double R_3_0_0_1 = zpq * gamma_inc[sq_id+4*256];
            double R_2_0_0_2 = zpq * R_3_0_0_1 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_0_3 = zpq * R_2_0_0_2 + 2 * R_2_0_0_1;
            double R_0_0_0_4 = zpq * R_1_0_0_3 + 3 * R_1_0_0_2;
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+64];
            double R_4_0_0_1 = zpq * gamma_inc[sq_id+5*256];
            double R_3_0_0_2 = zpq * R_4_0_0_1 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_0_3 = zpq * R_3_0_0_2 + 2 * R_3_0_0_1;
            double R_1_0_0_4 = zpq * R_2_0_0_3 + 3 * R_2_0_0_2;
            double R_0_0_0_5 = zpq * R_1_0_0_4 + 4 * R_1_0_0_3;
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+80];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+96];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+112];
            double R_0_0_1_2 = ypq * R_1_0_0_2;
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+128];
            double R_0_0_1_3 = ypq * R_1_0_0_3;
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+144];
            double R_0_0_1_4 = ypq * R_1_0_0_4;
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+160];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+176];
            double R_1_0_1_1 = ypq * R_2_0_0_1;
            double R_0_0_2_1 = ypq * R_1_0_1_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+192];
            double R_1_0_1_2 = ypq * R_2_0_0_2;
            double R_0_0_2_2 = ypq * R_1_0_1_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+208];
            double R_1_0_1_3 = ypq * R_2_0_0_3;
            double R_0_0_2_3 = ypq * R_1_0_1_3 + 1 * R_1_0_0_3;
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+224];
            double R_2_0_1_0 = ypq * gamma_inc[sq_id+3*256];
            double R_1_0_2_0 = ypq * R_2_0_1_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_3_0 = ypq * R_1_0_2_0 + 2 * R_1_0_1_0;
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+240];
            double R_2_0_1_1 = ypq * R_3_0_0_1;
            double R_1_0_2_1 = ypq * R_2_0_1_1 + 1 * R_2_0_0_1;
            double R_0_0_3_1 = ypq * R_1_0_2_1 + 2 * R_1_0_1_1;
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+256];
            double R_2_0_1_2 = ypq * R_3_0_0_2;
            double R_1_0_2_2 = ypq * R_2_0_1_2 + 1 * R_2_0_0_2;
            double R_0_0_3_2 = ypq * R_1_0_2_2 + 2 * R_1_0_1_2;
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+272];
            double R_3_0_1_0 = ypq * gamma_inc[sq_id+4*256];
            double R_2_0_2_0 = ypq * R_3_0_1_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_3_0 = ypq * R_2_0_2_0 + 2 * R_2_0_1_0;
            double R_0_0_4_0 = ypq * R_1_0_3_0 + 3 * R_1_0_2_0;
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+288];
            double R_3_0_1_1 = ypq * R_4_0_0_1;
            double R_2_0_2_1 = ypq * R_3_0_1_1 + 1 * R_3_0_0_1;
            double R_1_0_3_1 = ypq * R_2_0_2_1 + 2 * R_2_0_1_1;
            double R_0_0_4_1 = ypq * R_1_0_3_1 + 3 * R_1_0_2_1;
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+304];
            double R_4_0_1_0 = ypq * gamma_inc[sq_id+5*256];
            double R_3_0_2_0 = ypq * R_4_0_1_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_3_0 = ypq * R_3_0_2_0 + 2 * R_3_0_1_0;
            double R_1_0_4_0 = ypq * R_2_0_3_0 + 3 * R_2_0_2_0;
            double R_0_0_5_0 = ypq * R_1_0_4_0 + 4 * R_1_0_3_0;
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+320];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+336];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+352];
            double R_0_1_0_2 = xpq * R_1_0_0_2;
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+368];
            double R_0_1_0_3 = xpq * R_1_0_0_3;
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+384];
            double R_0_1_0_4 = xpq * R_1_0_0_4;
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+400];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+416];
            double R_0_1_1_1 = xpq * R_1_0_1_1;
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+432];
            double R_0_1_1_2 = xpq * R_1_0_1_2;
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+448];
            double R_0_1_1_3 = xpq * R_1_0_1_3;
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+464];
            double R_0_1_2_0 = xpq * R_1_0_2_0;
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+480];
            double R_0_1_2_1 = xpq * R_1_0_2_1;
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+496];
            double R_0_1_2_2 = xpq * R_1_0_2_2;
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+512];
            double R_0_1_3_0 = xpq * R_1_0_3_0;
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+528];
            double R_0_1_3_1 = xpq * R_1_0_3_1;
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+544];
            double R_0_1_4_0 = xpq * R_1_0_4_0;
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+560];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+576];
            double R_1_1_0_1 = xpq * R_2_0_0_1;
            double R_0_2_0_1 = xpq * R_1_1_0_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+592];
            double R_1_1_0_2 = xpq * R_2_0_0_2;
            double R_0_2_0_2 = xpq * R_1_1_0_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+608];
            double R_1_1_0_3 = xpq * R_2_0_0_3;
            double R_0_2_0_3 = xpq * R_1_1_0_3 + 1 * R_1_0_0_3;
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+624];
            double R_1_1_1_0 = xpq * R_2_0_1_0;
            double R_0_2_1_0 = xpq * R_1_1_1_0 + 1 * R_1_0_1_0;
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+640];
            double R_1_1_1_1 = xpq * R_2_0_1_1;
            double R_0_2_1_1 = xpq * R_1_1_1_1 + 1 * R_1_0_1_1;
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+656];
            double R_1_1_1_2 = xpq * R_2_0_1_2;
            double R_0_2_1_2 = xpq * R_1_1_1_2 + 1 * R_1_0_1_2;
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+672];
            double R_1_1_2_0 = xpq * R_2_0_2_0;
            double R_0_2_2_0 = xpq * R_1_1_2_0 + 1 * R_1_0_2_0;
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+688];
            double R_1_1_2_1 = xpq * R_2_0_2_1;
            double R_0_2_2_1 = xpq * R_1_1_2_1 + 1 * R_1_0_2_1;
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+704];
            double R_1_1_3_0 = xpq * R_2_0_3_0;
            double R_0_2_3_0 = xpq * R_1_1_3_0 + 1 * R_1_0_3_0;
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+720];
            double R_2_1_0_0 = xpq * gamma_inc[sq_id+3*256];
            double R_1_2_0_0 = xpq * R_2_1_0_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_3_0_0 = xpq * R_1_2_0_0 + 2 * R_1_1_0_0;
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+736];
            double R_2_1_0_1 = xpq * R_3_0_0_1;
            double R_1_2_0_1 = xpq * R_2_1_0_1 + 1 * R_2_0_0_1;
            double R_0_3_0_1 = xpq * R_1_2_0_1 + 2 * R_1_1_0_1;
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+752];
            double R_2_1_0_2 = xpq * R_3_0_0_2;
            double R_1_2_0_2 = xpq * R_2_1_0_2 + 1 * R_2_0_0_2;
            double R_0_3_0_2 = xpq * R_1_2_0_2 + 2 * R_1_1_0_2;
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+768];
            double R_2_1_1_0 = xpq * R_3_0_1_0;
            double R_1_2_1_0 = xpq * R_2_1_1_0 + 1 * R_2_0_1_0;
            double R_0_3_1_0 = xpq * R_1_2_1_0 + 2 * R_1_1_1_0;
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+784];
            double R_2_1_1_1 = xpq * R_3_0_1_1;
            double R_1_2_1_1 = xpq * R_2_1_1_1 + 1 * R_2_0_1_1;
            double R_0_3_1_1 = xpq * R_1_2_1_1 + 2 * R_1_1_1_1;
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+800];
            double R_2_1_2_0 = xpq * R_3_0_2_0;
            double R_1_2_2_0 = xpq * R_2_1_2_0 + 1 * R_2_0_2_0;
            double R_0_3_2_0 = xpq * R_1_2_2_0 + 2 * R_1_1_2_0;
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+816];
            double R_3_1_0_0 = xpq * gamma_inc[sq_id+4*256];
            double R_2_2_0_0 = xpq * R_3_1_0_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_3_0_0 = xpq * R_2_2_0_0 + 2 * R_2_1_0_0;
            double R_0_4_0_0 = xpq * R_1_3_0_0 + 3 * R_1_2_0_0;
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+832];
            double R_3_1_0_1 = xpq * R_4_0_0_1;
            double R_2_2_0_1 = xpq * R_3_1_0_1 + 1 * R_3_0_0_1;
            double R_1_3_0_1 = xpq * R_2_2_0_1 + 2 * R_2_1_0_1;
            double R_0_4_0_1 = xpq * R_1_3_0_1 + 3 * R_1_2_0_1;
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+848];
            double R_3_1_1_0 = xpq * R_4_0_1_0;
            double R_2_2_1_0 = xpq * R_3_1_1_0 + 1 * R_3_0_1_0;
            double R_1_3_1_0 = xpq * R_2_2_1_0 + 2 * R_2_1_1_0;
            double R_0_4_1_0 = xpq * R_1_3_1_0 + 3 * R_1_2_1_0;
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+864];
            double R_4_1_0_0 = xpq * gamma_inc[sq_id+5*256];
            double R_3_2_0_0 = xpq * R_4_1_0_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_3_0_0 = xpq * R_3_2_0_0 + 2 * R_3_1_0_0;
            double R_1_4_0_0 = xpq * R_2_3_0_0 + 3 * R_2_2_0_0;
            double R_0_5_0_0 = xpq * R_1_4_0_0 + 4 * R_1_3_0_0;
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_0_5 * dm_ij_cache[tx+64];
            double R_5_0_0_1 = zpq * gamma_inc[sq_id+6*256];
            double R_4_0_0_2 = zpq * R_5_0_0_1 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_0_3 = zpq * R_4_0_0_2 + 2 * R_4_0_0_1;
            double R_2_0_0_4 = zpq * R_3_0_0_3 + 3 * R_3_0_0_2;
            double R_1_0_0_5 = zpq * R_2_0_0_4 + 4 * R_2_0_0_3;
            double R_0_0_0_6 = zpq * R_1_0_0_5 + 5 * R_1_0_0_4;
            vj_kl -= R_0_0_0_6 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+144];
            double R_0_0_1_5 = ypq * R_1_0_0_5;
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+208];
            double R_1_0_1_4 = ypq * R_2_0_0_4;
            double R_0_0_2_4 = ypq * R_1_0_1_4 + 1 * R_1_0_0_4;
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+224];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+256];
            double R_2_0_1_3 = ypq * R_3_0_0_3;
            double R_1_0_2_3 = ypq * R_2_0_1_3 + 1 * R_2_0_0_3;
            double R_0_0_3_3 = ypq * R_1_0_2_3 + 2 * R_1_0_1_3;
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+288];
            double R_3_0_1_2 = ypq * R_4_0_0_2;
            double R_2_0_2_2 = ypq * R_3_0_1_2 + 1 * R_3_0_0_2;
            double R_1_0_3_2 = ypq * R_2_0_2_2 + 2 * R_2_0_1_2;
            double R_0_0_4_2 = ypq * R_1_0_3_2 + 3 * R_1_0_2_2;
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+304];
            double R_4_0_1_1 = ypq * R_5_0_0_1;
            double R_3_0_2_1 = ypq * R_4_0_1_1 + 1 * R_4_0_0_1;
            double R_2_0_3_1 = ypq * R_3_0_2_1 + 2 * R_3_0_1_1;
            double R_1_0_4_1 = ypq * R_2_0_3_1 + 3 * R_2_0_2_1;
            double R_0_0_5_1 = ypq * R_1_0_4_1 + 4 * R_1_0_3_1;
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+368];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+384];
            double R_0_1_0_5 = xpq * R_1_0_0_5;
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+400];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+448];
            double R_0_1_1_4 = xpq * R_1_0_1_4;
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+464];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+496];
            double R_0_1_2_3 = xpq * R_1_0_2_3;
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+512];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+528];
            double R_0_1_3_2 = xpq * R_1_0_3_2;
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+544];
            double R_0_1_4_1 = xpq * R_1_0_4_1;
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+560];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+576];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+592];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+608];
            double R_1_1_0_4 = xpq * R_2_0_0_4;
            double R_0_2_0_4 = xpq * R_1_1_0_4 + 1 * R_1_0_0_4;
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+624];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+640];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+656];
            double R_1_1_1_3 = xpq * R_2_0_1_3;
            double R_0_2_1_3 = xpq * R_1_1_1_3 + 1 * R_1_0_1_3;
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+672];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+688];
            double R_1_1_2_2 = xpq * R_2_0_2_2;
            double R_0_2_2_2 = xpq * R_1_1_2_2 + 1 * R_1_0_2_2;
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+704];
            double R_1_1_3_1 = xpq * R_2_0_3_1;
            double R_0_2_3_1 = xpq * R_1_1_3_1 + 1 * R_1_0_3_1;
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+720];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+736];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+752];
            double R_2_1_0_3 = xpq * R_3_0_0_3;
            double R_1_2_0_3 = xpq * R_2_1_0_3 + 1 * R_2_0_0_3;
            double R_0_3_0_3 = xpq * R_1_2_0_3 + 2 * R_1_1_0_3;
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+768];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+784];
            double R_2_1_1_2 = xpq * R_3_0_1_2;
            double R_1_2_1_2 = xpq * R_2_1_1_2 + 1 * R_2_0_1_2;
            double R_0_3_1_2 = xpq * R_1_2_1_2 + 2 * R_1_1_1_2;
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+800];
            double R_2_1_2_1 = xpq * R_3_0_2_1;
            double R_1_2_2_1 = xpq * R_2_1_2_1 + 1 * R_2_0_2_1;
            double R_0_3_2_1 = xpq * R_1_2_2_1 + 2 * R_1_1_2_1;
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+816];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+832];
            double R_3_1_0_2 = xpq * R_4_0_0_2;
            double R_2_2_0_2 = xpq * R_3_1_0_2 + 1 * R_3_0_0_2;
            double R_1_3_0_2 = xpq * R_2_2_0_2 + 2 * R_2_1_0_2;
            double R_0_4_0_2 = xpq * R_1_3_0_2 + 3 * R_1_2_0_2;
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+848];
            double R_3_1_1_1 = xpq * R_4_0_1_1;
            double R_2_2_1_1 = xpq * R_3_1_1_1 + 1 * R_3_0_1_1;
            double R_1_3_1_1 = xpq * R_2_2_1_1 + 2 * R_2_1_1_1;
            double R_0_4_1_1 = xpq * R_1_3_1_1 + 3 * R_1_2_1_1;
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+864];
            double R_4_1_0_1 = xpq * R_5_0_0_1;
            double R_3_2_0_1 = xpq * R_4_1_0_1 + 1 * R_4_0_0_1;
            double R_2_3_0_1 = xpq * R_3_2_0_1 + 2 * R_3_1_0_1;
            double R_1_4_0_1 = xpq * R_2_3_0_1 + 3 * R_2_2_0_1;
            double R_0_5_0_1 = xpq * R_1_4_0_1 + 4 * R_1_3_0_1;
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+96] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_0_6 * dm_ij_cache[tx+64];
            double R_6_0_0_1 = zpq * gamma_inc[sq_id+7*256];
            double R_5_0_0_2 = zpq * R_6_0_0_1 + 1 * gamma_inc[sq_id+6*256];
            double R_4_0_0_3 = zpq * R_5_0_0_2 + 2 * R_5_0_0_1;
            double R_3_0_0_4 = zpq * R_4_0_0_3 + 3 * R_4_0_0_2;
            double R_2_0_0_5 = zpq * R_3_0_0_4 + 4 * R_3_0_0_3;
            double R_1_0_0_6 = zpq * R_2_0_0_5 + 5 * R_2_0_0_4;
            double R_0_0_0_7 = zpq * R_1_0_0_6 + 6 * R_1_0_0_5;
            vj_kl += R_0_0_0_7 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+144];
            double R_0_0_1_6 = ypq * R_1_0_0_6;
            vj_kl += R_0_0_1_6 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+208];
            double R_1_0_1_5 = ypq * R_2_0_0_5;
            double R_0_0_2_5 = ypq * R_1_0_1_5 + 1 * R_1_0_0_5;
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+224];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+256];
            double R_2_0_1_4 = ypq * R_3_0_0_4;
            double R_1_0_2_4 = ypq * R_2_0_1_4 + 1 * R_2_0_0_4;
            double R_0_0_3_4 = ypq * R_1_0_2_4 + 2 * R_1_0_1_4;
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+272];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+288];
            double R_3_0_1_3 = ypq * R_4_0_0_3;
            double R_2_0_2_3 = ypq * R_3_0_1_3 + 1 * R_3_0_0_3;
            double R_1_0_3_3 = ypq * R_2_0_2_3 + 2 * R_2_0_1_3;
            double R_0_0_4_3 = ypq * R_1_0_3_3 + 3 * R_1_0_2_3;
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+304];
            double R_4_0_1_2 = ypq * R_5_0_0_2;
            double R_3_0_2_2 = ypq * R_4_0_1_2 + 1 * R_4_0_0_2;
            double R_2_0_3_2 = ypq * R_3_0_2_2 + 2 * R_3_0_1_2;
            double R_1_0_4_2 = ypq * R_2_0_3_2 + 3 * R_2_0_2_2;
            double R_0_0_5_2 = ypq * R_1_0_4_2 + 4 * R_1_0_3_2;
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+368];
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+384];
            double R_0_1_0_6 = xpq * R_1_0_0_6;
            vj_kl += R_0_1_0_6 * dm_ij_cache[tx+400];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+416];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+432];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+448];
            double R_0_1_1_5 = xpq * R_1_0_1_5;
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+464];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+480];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+496];
            double R_0_1_2_4 = xpq * R_1_0_2_4;
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+512];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+528];
            double R_0_1_3_3 = xpq * R_1_0_3_3;
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+544];
            double R_0_1_4_2 = xpq * R_1_0_4_2;
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+560];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+576];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+592];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+608];
            double R_1_1_0_5 = xpq * R_2_0_0_5;
            double R_0_2_0_5 = xpq * R_1_1_0_5 + 1 * R_1_0_0_5;
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+624];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+640];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+656];
            double R_1_1_1_4 = xpq * R_2_0_1_4;
            double R_0_2_1_4 = xpq * R_1_1_1_4 + 1 * R_1_0_1_4;
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+672];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+688];
            double R_1_1_2_3 = xpq * R_2_0_2_3;
            double R_0_2_2_3 = xpq * R_1_1_2_3 + 1 * R_1_0_2_3;
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+704];
            double R_1_1_3_2 = xpq * R_2_0_3_2;
            double R_0_2_3_2 = xpq * R_1_1_3_2 + 1 * R_1_0_3_2;
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+720];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+736];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+752];
            double R_2_1_0_4 = xpq * R_3_0_0_4;
            double R_1_2_0_4 = xpq * R_2_1_0_4 + 1 * R_2_0_0_4;
            double R_0_3_0_4 = xpq * R_1_2_0_4 + 2 * R_1_1_0_4;
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+768];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+784];
            double R_2_1_1_3 = xpq * R_3_0_1_3;
            double R_1_2_1_3 = xpq * R_2_1_1_3 + 1 * R_2_0_1_3;
            double R_0_3_1_3 = xpq * R_1_2_1_3 + 2 * R_1_1_1_3;
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+800];
            double R_2_1_2_2 = xpq * R_3_0_2_2;
            double R_1_2_2_2 = xpq * R_2_1_2_2 + 1 * R_2_0_2_2;
            double R_0_3_2_2 = xpq * R_1_2_2_2 + 2 * R_1_1_2_2;
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+816];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+832];
            double R_3_1_0_3 = xpq * R_4_0_0_3;
            double R_2_2_0_3 = xpq * R_3_1_0_3 + 1 * R_3_0_0_3;
            double R_1_3_0_3 = xpq * R_2_2_0_3 + 2 * R_2_1_0_3;
            double R_0_4_0_3 = xpq * R_1_3_0_3 + 3 * R_1_2_0_3;
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+848];
            double R_3_1_1_2 = xpq * R_4_0_1_2;
            double R_2_2_1_2 = xpq * R_3_1_1_2 + 1 * R_3_0_1_2;
            double R_1_3_1_2 = xpq * R_2_2_1_2 + 2 * R_2_1_1_2;
            double R_0_4_1_2 = xpq * R_1_3_1_2 + 3 * R_1_2_1_2;
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+864];
            double R_4_1_0_2 = xpq * R_5_0_0_2;
            double R_3_2_0_2 = xpq * R_4_1_0_2 + 1 * R_4_0_0_2;
            double R_2_3_0_2 = xpq * R_3_2_0_2 + 2 * R_3_1_0_2;
            double R_1_4_0_2 = xpq * R_2_3_0_2 + 3 * R_2_2_0_2;
            double R_0_5_0_2 = xpq * R_1_4_0_2 + 4 * R_1_3_0_2;
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+192] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_5 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_0_6 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_0_7 * dm_ij_cache[tx+64];
            double R_7_0_0_1 = zpq * gamma_inc[sq_id+8*256];
            double R_6_0_0_2 = zpq * R_7_0_0_1 + 1 * gamma_inc[sq_id+7*256];
            double R_5_0_0_3 = zpq * R_6_0_0_2 + 2 * R_6_0_0_1;
            double R_4_0_0_4 = zpq * R_5_0_0_3 + 3 * R_5_0_0_2;
            double R_3_0_0_5 = zpq * R_4_0_0_4 + 4 * R_4_0_0_3;
            double R_2_0_0_6 = zpq * R_3_0_0_5 + 5 * R_3_0_0_4;
            double R_1_0_0_7 = zpq * R_2_0_0_6 + 6 * R_2_0_0_5;
            double R_0_0_0_8 = zpq * R_1_0_0_7 + 7 * R_1_0_0_6;
            vj_kl -= R_0_0_0_8 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_1_6 * dm_ij_cache[tx+144];
            double R_0_0_1_7 = ypq * R_1_0_0_7;
            vj_kl -= R_0_0_1_7 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+208];
            double R_1_0_1_6 = ypq * R_2_0_0_6;
            double R_0_0_2_6 = ypq * R_1_0_1_6 + 1 * R_1_0_0_6;
            vj_kl -= R_0_0_2_6 * dm_ij_cache[tx+224];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+240];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+256];
            double R_2_0_1_5 = ypq * R_3_0_0_5;
            double R_1_0_2_5 = ypq * R_2_0_1_5 + 1 * R_2_0_0_5;
            double R_0_0_3_5 = ypq * R_1_0_2_5 + 2 * R_1_0_1_5;
            vj_kl -= R_0_0_3_5 * dm_ij_cache[tx+272];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+288];
            double R_3_0_1_4 = ypq * R_4_0_0_4;
            double R_2_0_2_4 = ypq * R_3_0_1_4 + 1 * R_3_0_0_4;
            double R_1_0_3_4 = ypq * R_2_0_2_4 + 2 * R_2_0_1_4;
            double R_0_0_4_4 = ypq * R_1_0_3_4 + 3 * R_1_0_2_4;
            vj_kl -= R_0_0_4_4 * dm_ij_cache[tx+304];
            double R_4_0_1_3 = ypq * R_5_0_0_3;
            double R_3_0_2_3 = ypq * R_4_0_1_3 + 1 * R_4_0_0_3;
            double R_2_0_3_3 = ypq * R_3_0_2_3 + 2 * R_3_0_1_3;
            double R_1_0_4_3 = ypq * R_2_0_3_3 + 3 * R_2_0_2_3;
            double R_0_0_5_3 = ypq * R_1_0_4_3 + 4 * R_1_0_3_3;
            vj_kl -= R_0_0_5_3 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+368];
            vj_kl -= R_0_1_0_6 * dm_ij_cache[tx+384];
            double R_0_1_0_7 = xpq * R_1_0_0_7;
            vj_kl -= R_0_1_0_7 * dm_ij_cache[tx+400];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+416];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+432];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+448];
            double R_0_1_1_6 = xpq * R_1_0_1_6;
            vj_kl -= R_0_1_1_6 * dm_ij_cache[tx+464];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+480];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+496];
            double R_0_1_2_5 = xpq * R_1_0_2_5;
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+512];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+528];
            double R_0_1_3_4 = xpq * R_1_0_3_4;
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+544];
            double R_0_1_4_3 = xpq * R_1_0_4_3;
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+560];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+576];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+592];
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+608];
            double R_1_1_0_6 = xpq * R_2_0_0_6;
            double R_0_2_0_6 = xpq * R_1_1_0_6 + 1 * R_1_0_0_6;
            vj_kl -= R_0_2_0_6 * dm_ij_cache[tx+624];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+640];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+656];
            double R_1_1_1_5 = xpq * R_2_0_1_5;
            double R_0_2_1_5 = xpq * R_1_1_1_5 + 1 * R_1_0_1_5;
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+672];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+688];
            double R_1_1_2_4 = xpq * R_2_0_2_4;
            double R_0_2_2_4 = xpq * R_1_1_2_4 + 1 * R_1_0_2_4;
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+704];
            double R_1_1_3_3 = xpq * R_2_0_3_3;
            double R_0_2_3_3 = xpq * R_1_1_3_3 + 1 * R_1_0_3_3;
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+720];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+736];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+752];
            double R_2_1_0_5 = xpq * R_3_0_0_5;
            double R_1_2_0_5 = xpq * R_2_1_0_5 + 1 * R_2_0_0_5;
            double R_0_3_0_5 = xpq * R_1_2_0_5 + 2 * R_1_1_0_5;
            vj_kl -= R_0_3_0_5 * dm_ij_cache[tx+768];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+784];
            double R_2_1_1_4 = xpq * R_3_0_1_4;
            double R_1_2_1_4 = xpq * R_2_1_1_4 + 1 * R_2_0_1_4;
            double R_0_3_1_4 = xpq * R_1_2_1_4 + 2 * R_1_1_1_4;
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+800];
            double R_2_1_2_3 = xpq * R_3_0_2_3;
            double R_1_2_2_3 = xpq * R_2_1_2_3 + 1 * R_2_0_2_3;
            double R_0_3_2_3 = xpq * R_1_2_2_3 + 2 * R_1_1_2_3;
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+816];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+832];
            double R_3_1_0_4 = xpq * R_4_0_0_4;
            double R_2_2_0_4 = xpq * R_3_1_0_4 + 1 * R_3_0_0_4;
            double R_1_3_0_4 = xpq * R_2_2_0_4 + 2 * R_2_1_0_4;
            double R_0_4_0_4 = xpq * R_1_3_0_4 + 3 * R_1_2_0_4;
            vj_kl -= R_0_4_0_4 * dm_ij_cache[tx+848];
            double R_3_1_1_3 = xpq * R_4_0_1_3;
            double R_2_2_1_3 = xpq * R_3_1_1_3 + 1 * R_3_0_1_3;
            double R_1_3_1_3 = xpq * R_2_2_1_3 + 2 * R_2_1_1_3;
            double R_0_4_1_3 = xpq * R_1_3_1_3 + 3 * R_1_2_1_3;
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+864];
            double R_4_1_0_3 = xpq * R_5_0_0_3;
            double R_3_2_0_3 = xpq * R_4_1_0_3 + 1 * R_4_0_0_3;
            double R_2_3_0_3 = xpq * R_3_2_0_3 + 2 * R_3_1_0_3;
            double R_1_4_0_3 = xpq * R_2_3_0_3 + 3 * R_2_2_0_3;
            double R_0_5_0_3 = xpq * R_1_4_0_3 + 4 * R_1_3_0_3;
            vj_kl -= R_0_5_0_3 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+288] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_0_6 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_0_7 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_0_8 * dm_ij_cache[tx+64];
            double R_8_0_0_1 = zpq * gamma_inc[sq_id+9*256];
            double R_7_0_0_2 = zpq * R_8_0_0_1 + 1 * gamma_inc[sq_id+8*256];
            double R_6_0_0_3 = zpq * R_7_0_0_2 + 2 * R_7_0_0_1;
            double R_5_0_0_4 = zpq * R_6_0_0_3 + 3 * R_6_0_0_2;
            double R_4_0_0_5 = zpq * R_5_0_0_4 + 4 * R_5_0_0_3;
            double R_3_0_0_6 = zpq * R_4_0_0_5 + 5 * R_4_0_0_4;
            double R_2_0_0_7 = zpq * R_3_0_0_6 + 6 * R_3_0_0_5;
            double R_1_0_0_8 = zpq * R_2_0_0_7 + 7 * R_2_0_0_6;
            double R_0_0_0_9 = zpq * R_1_0_0_8 + 8 * R_1_0_0_7;
            vj_kl += R_0_0_0_9 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_1_6 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_1_7 * dm_ij_cache[tx+144];
            double R_0_0_1_8 = ypq * R_1_0_0_8;
            vj_kl += R_0_0_1_8 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_2_6 * dm_ij_cache[tx+208];
            double R_1_0_1_7 = ypq * R_2_0_0_7;
            double R_0_0_2_7 = ypq * R_1_0_1_7 + 1 * R_1_0_0_7;
            vj_kl += R_0_0_2_7 * dm_ij_cache[tx+224];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+240];
            vj_kl += R_0_0_3_5 * dm_ij_cache[tx+256];
            double R_2_0_1_6 = ypq * R_3_0_0_6;
            double R_1_0_2_6 = ypq * R_2_0_1_6 + 1 * R_2_0_0_6;
            double R_0_0_3_6 = ypq * R_1_0_2_6 + 2 * R_1_0_1_6;
            vj_kl += R_0_0_3_6 * dm_ij_cache[tx+272];
            vj_kl += R_0_0_4_4 * dm_ij_cache[tx+288];
            double R_3_0_1_5 = ypq * R_4_0_0_5;
            double R_2_0_2_5 = ypq * R_3_0_1_5 + 1 * R_3_0_0_5;
            double R_1_0_3_5 = ypq * R_2_0_2_5 + 2 * R_2_0_1_5;
            double R_0_0_4_5 = ypq * R_1_0_3_5 + 3 * R_1_0_2_5;
            vj_kl += R_0_0_4_5 * dm_ij_cache[tx+304];
            double R_4_0_1_4 = ypq * R_5_0_0_4;
            double R_3_0_2_4 = ypq * R_4_0_1_4 + 1 * R_4_0_0_4;
            double R_2_0_3_4 = ypq * R_3_0_2_4 + 2 * R_3_0_1_4;
            double R_1_0_4_4 = ypq * R_2_0_3_4 + 3 * R_2_0_2_4;
            double R_0_0_5_4 = ypq * R_1_0_4_4 + 4 * R_1_0_3_4;
            vj_kl += R_0_0_5_4 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_0_6 * dm_ij_cache[tx+368];
            vj_kl += R_0_1_0_7 * dm_ij_cache[tx+384];
            double R_0_1_0_8 = xpq * R_1_0_0_8;
            vj_kl += R_0_1_0_8 * dm_ij_cache[tx+400];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+416];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+432];
            vj_kl += R_0_1_1_6 * dm_ij_cache[tx+448];
            double R_0_1_1_7 = xpq * R_1_0_1_7;
            vj_kl += R_0_1_1_7 * dm_ij_cache[tx+464];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+480];
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+496];
            double R_0_1_2_6 = xpq * R_1_0_2_6;
            vj_kl += R_0_1_2_6 * dm_ij_cache[tx+512];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+528];
            double R_0_1_3_5 = xpq * R_1_0_3_5;
            vj_kl += R_0_1_3_5 * dm_ij_cache[tx+544];
            double R_0_1_4_4 = xpq * R_1_0_4_4;
            vj_kl += R_0_1_4_4 * dm_ij_cache[tx+560];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+576];
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+592];
            vj_kl += R_0_2_0_6 * dm_ij_cache[tx+608];
            double R_1_1_0_7 = xpq * R_2_0_0_7;
            double R_0_2_0_7 = xpq * R_1_1_0_7 + 1 * R_1_0_0_7;
            vj_kl += R_0_2_0_7 * dm_ij_cache[tx+624];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+640];
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+656];
            double R_1_1_1_6 = xpq * R_2_0_1_6;
            double R_0_2_1_6 = xpq * R_1_1_1_6 + 1 * R_1_0_1_6;
            vj_kl += R_0_2_1_6 * dm_ij_cache[tx+672];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+688];
            double R_1_1_2_5 = xpq * R_2_0_2_5;
            double R_0_2_2_5 = xpq * R_1_1_2_5 + 1 * R_1_0_2_5;
            vj_kl += R_0_2_2_5 * dm_ij_cache[tx+704];
            double R_1_1_3_4 = xpq * R_2_0_3_4;
            double R_0_2_3_4 = xpq * R_1_1_3_4 + 1 * R_1_0_3_4;
            vj_kl += R_0_2_3_4 * dm_ij_cache[tx+720];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+736];
            vj_kl += R_0_3_0_5 * dm_ij_cache[tx+752];
            double R_2_1_0_6 = xpq * R_3_0_0_6;
            double R_1_2_0_6 = xpq * R_2_1_0_6 + 1 * R_2_0_0_6;
            double R_0_3_0_6 = xpq * R_1_2_0_6 + 2 * R_1_1_0_6;
            vj_kl += R_0_3_0_6 * dm_ij_cache[tx+768];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+784];
            double R_2_1_1_5 = xpq * R_3_0_1_5;
            double R_1_2_1_5 = xpq * R_2_1_1_5 + 1 * R_2_0_1_5;
            double R_0_3_1_5 = xpq * R_1_2_1_5 + 2 * R_1_1_1_5;
            vj_kl += R_0_3_1_5 * dm_ij_cache[tx+800];
            double R_2_1_2_4 = xpq * R_3_0_2_4;
            double R_1_2_2_4 = xpq * R_2_1_2_4 + 1 * R_2_0_2_4;
            double R_0_3_2_4 = xpq * R_1_2_2_4 + 2 * R_1_1_2_4;
            vj_kl += R_0_3_2_4 * dm_ij_cache[tx+816];
            vj_kl += R_0_4_0_4 * dm_ij_cache[tx+832];
            double R_3_1_0_5 = xpq * R_4_0_0_5;
            double R_2_2_0_5 = xpq * R_3_1_0_5 + 1 * R_3_0_0_5;
            double R_1_3_0_5 = xpq * R_2_2_0_5 + 2 * R_2_1_0_5;
            double R_0_4_0_5 = xpq * R_1_3_0_5 + 3 * R_1_2_0_5;
            vj_kl += R_0_4_0_5 * dm_ij_cache[tx+848];
            double R_3_1_1_4 = xpq * R_4_0_1_4;
            double R_2_2_1_4 = xpq * R_3_1_1_4 + 1 * R_3_0_1_4;
            double R_1_3_1_4 = xpq * R_2_2_1_4 + 2 * R_2_1_1_4;
            double R_0_4_1_4 = xpq * R_1_3_1_4 + 3 * R_1_2_1_4;
            vj_kl += R_0_4_1_4 * dm_ij_cache[tx+864];
            double R_4_1_0_4 = xpq * R_5_0_0_4;
            double R_3_2_0_4 = xpq * R_4_1_0_4 + 1 * R_4_0_0_4;
            double R_2_3_0_4 = xpq * R_3_2_0_4 + 2 * R_3_1_0_4;
            double R_1_4_0_4 = xpq * R_2_3_0_4 + 3 * R_2_2_0_4;
            double R_0_5_0_4 = xpq * R_1_4_0_4 + 4 * R_1_3_0_4;
            vj_kl += R_0_5_0_4 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+384] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_2_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_0_5_0 * dm_ij_cache[tx+288];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+304];
            double R_5_0_1_0 = ypq * gamma_inc[sq_id+6*256];
            double R_4_0_2_0 = ypq * R_5_0_1_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_3_0 = ypq * R_4_0_2_0 + 2 * R_4_0_1_0;
            double R_2_0_4_0 = ypq * R_3_0_3_0 + 3 * R_3_0_2_0;
            double R_1_0_5_0 = ypq * R_2_0_4_0 + 4 * R_2_0_3_0;
            double R_0_0_6_0 = ypq * R_1_0_5_0 + 5 * R_1_0_4_0;
            vj_kl -= R_0_0_6_0 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+400];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+416];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+432];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+464];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+512];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+528];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+544];
            double R_0_1_5_0 = xpq * R_1_0_5_0;
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+560];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+576];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+592];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+608];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+624];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+640];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+656];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+672];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+688];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+704];
            double R_1_1_4_0 = xpq * R_2_0_4_0;
            double R_0_2_4_0 = xpq * R_1_1_4_0 + 1 * R_1_0_4_0;
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+720];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+736];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+752];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+768];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+784];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+800];
            double R_2_1_3_0 = xpq * R_3_0_3_0;
            double R_1_2_3_0 = xpq * R_2_1_3_0 + 1 * R_2_0_3_0;
            double R_0_3_3_0 = xpq * R_1_2_3_0 + 2 * R_1_1_3_0;
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+816];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+832];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+848];
            double R_3_1_2_0 = xpq * R_4_0_2_0;
            double R_2_2_2_0 = xpq * R_3_1_2_0 + 1 * R_3_0_2_0;
            double R_1_3_2_0 = xpq * R_2_2_2_0 + 2 * R_2_1_2_0;
            double R_0_4_2_0 = xpq * R_1_3_2_0 + 3 * R_1_2_2_0;
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+864];
            double R_4_1_1_0 = xpq * R_5_0_1_0;
            double R_3_2_1_0 = xpq * R_4_1_1_0 + 1 * R_4_0_1_0;
            double R_2_3_1_0 = xpq * R_3_2_1_0 + 2 * R_3_1_1_0;
            double R_1_4_1_0 = xpq * R_2_3_1_0 + 3 * R_2_2_1_0;
            double R_0_5_1_0 = xpq * R_1_4_1_0 + 4 * R_1_3_1_0;
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+480] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_1_6 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+208];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+224];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+288];
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+304];
            double R_5_0_1_1 = ypq * R_6_0_0_1;
            double R_4_0_2_1 = ypq * R_5_0_1_1 + 1 * R_5_0_0_1;
            double R_3_0_3_1 = ypq * R_4_0_2_1 + 2 * R_4_0_1_1;
            double R_2_0_4_1 = ypq * R_3_0_3_1 + 3 * R_3_0_2_1;
            double R_1_0_5_1 = ypq * R_2_0_4_1 + 4 * R_2_0_3_1;
            double R_0_0_6_1 = ypq * R_1_0_5_1 + 5 * R_1_0_4_1;
            vj_kl += R_0_0_6_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+368];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+384];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+400];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+448];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+464];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+480];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+496];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+512];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+528];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+544];
            double R_0_1_5_1 = xpq * R_1_0_5_1;
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+560];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+576];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+592];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+608];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+624];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+640];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+656];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+672];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+688];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+704];
            double R_1_1_4_1 = xpq * R_2_0_4_1;
            double R_0_2_4_1 = xpq * R_1_1_4_1 + 1 * R_1_0_4_1;
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+720];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+736];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+752];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+768];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+784];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+800];
            double R_2_1_3_1 = xpq * R_3_0_3_1;
            double R_1_2_3_1 = xpq * R_2_1_3_1 + 1 * R_2_0_3_1;
            double R_0_3_3_1 = xpq * R_1_2_3_1 + 2 * R_1_1_3_1;
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+816];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+832];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+848];
            double R_3_1_2_1 = xpq * R_4_0_2_1;
            double R_2_2_2_1 = xpq * R_3_1_2_1 + 1 * R_3_0_2_1;
            double R_1_3_2_1 = xpq * R_2_2_2_1 + 2 * R_2_1_2_1;
            double R_0_4_2_1 = xpq * R_1_3_2_1 + 3 * R_1_2_2_1;
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+864];
            double R_4_1_1_1 = xpq * R_5_0_1_1;
            double R_3_2_1_1 = xpq * R_4_1_1_1 + 1 * R_4_0_1_1;
            double R_2_3_1_1 = xpq * R_3_2_1_1 + 2 * R_3_1_1_1;
            double R_1_4_1_1 = xpq * R_2_3_1_1 + 3 * R_2_2_1_1;
            double R_0_5_1_1 = xpq * R_1_4_1_1 + 4 * R_1_3_1_1;
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+576] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_6 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_7 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_2_6 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+208];
            vj_kl -= R_0_0_3_5 * dm_ij_cache[tx+224];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_0_4_4 * dm_ij_cache[tx+272];
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+288];
            vj_kl -= R_0_0_5_3 * dm_ij_cache[tx+304];
            double R_5_0_1_2 = ypq * R_6_0_0_2;
            double R_4_0_2_2 = ypq * R_5_0_1_2 + 1 * R_5_0_0_2;
            double R_3_0_3_2 = ypq * R_4_0_2_2 + 2 * R_4_0_1_2;
            double R_2_0_4_2 = ypq * R_3_0_3_2 + 3 * R_3_0_2_2;
            double R_1_0_5_2 = ypq * R_2_0_4_2 + 4 * R_2_0_3_2;
            double R_0_0_6_2 = ypq * R_1_0_5_2 + 5 * R_1_0_4_2;
            vj_kl -= R_0_0_6_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+368];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+384];
            vj_kl -= R_0_1_1_6 * dm_ij_cache[tx+400];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+416];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+432];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+448];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+464];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+480];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+496];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+512];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+528];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+544];
            double R_0_1_5_2 = xpq * R_1_0_5_2;
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+560];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+576];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+592];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+608];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+624];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+640];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+656];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+672];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+688];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+704];
            double R_1_1_4_2 = xpq * R_2_0_4_2;
            double R_0_2_4_2 = xpq * R_1_1_4_2 + 1 * R_1_0_4_2;
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+720];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+736];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+752];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+768];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+784];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+800];
            double R_2_1_3_2 = xpq * R_3_0_3_2;
            double R_1_2_3_2 = xpq * R_2_1_3_2 + 1 * R_2_0_3_2;
            double R_0_3_3_2 = xpq * R_1_2_3_2 + 2 * R_1_1_3_2;
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+816];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+832];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+848];
            double R_3_1_2_2 = xpq * R_4_0_2_2;
            double R_2_2_2_2 = xpq * R_3_1_2_2 + 1 * R_3_0_2_2;
            double R_1_3_2_2 = xpq * R_2_2_2_2 + 2 * R_2_1_2_2;
            double R_0_4_2_2 = xpq * R_1_3_2_2 + 3 * R_1_2_2_2;
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+864];
            double R_4_1_1_2 = xpq * R_5_0_1_2;
            double R_3_2_1_2 = xpq * R_4_1_1_2 + 1 * R_4_0_1_2;
            double R_2_3_1_2 = xpq * R_3_2_1_2 + 2 * R_3_1_1_2;
            double R_1_4_1_2 = xpq * R_2_3_1_2 + 3 * R_2_2_1_2;
            double R_0_5_1_2 = xpq * R_1_4_1_2 + 4 * R_1_3_1_2;
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+672] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_1_6 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_1_7 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_1_8 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_2_6 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_2_7 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_3_5 * dm_ij_cache[tx+208];
            vj_kl += R_0_0_3_6 * dm_ij_cache[tx+224];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+240];
            vj_kl += R_0_0_4_4 * dm_ij_cache[tx+256];
            vj_kl += R_0_0_4_5 * dm_ij_cache[tx+272];
            vj_kl += R_0_0_5_3 * dm_ij_cache[tx+288];
            vj_kl += R_0_0_5_4 * dm_ij_cache[tx+304];
            double R_5_0_1_3 = ypq * R_6_0_0_3;
            double R_4_0_2_3 = ypq * R_5_0_1_3 + 1 * R_5_0_0_3;
            double R_3_0_3_3 = ypq * R_4_0_2_3 + 2 * R_4_0_1_3;
            double R_2_0_4_3 = ypq * R_3_0_3_3 + 3 * R_3_0_2_3;
            double R_1_0_5_3 = ypq * R_2_0_4_3 + 4 * R_2_0_3_3;
            double R_0_0_6_3 = ypq * R_1_0_5_3 + 5 * R_1_0_4_3;
            vj_kl += R_0_0_6_3 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+368];
            vj_kl += R_0_1_1_6 * dm_ij_cache[tx+384];
            vj_kl += R_0_1_1_7 * dm_ij_cache[tx+400];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+416];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+432];
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+448];
            vj_kl += R_0_1_2_6 * dm_ij_cache[tx+464];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+480];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+496];
            vj_kl += R_0_1_3_5 * dm_ij_cache[tx+512];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+528];
            vj_kl += R_0_1_4_4 * dm_ij_cache[tx+544];
            double R_0_1_5_3 = xpq * R_1_0_5_3;
            vj_kl += R_0_1_5_3 * dm_ij_cache[tx+560];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+576];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+592];
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+608];
            vj_kl += R_0_2_1_6 * dm_ij_cache[tx+624];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+640];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+656];
            vj_kl += R_0_2_2_5 * dm_ij_cache[tx+672];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+688];
            vj_kl += R_0_2_3_4 * dm_ij_cache[tx+704];
            double R_1_1_4_3 = xpq * R_2_0_4_3;
            double R_0_2_4_3 = xpq * R_1_1_4_3 + 1 * R_1_0_4_3;
            vj_kl += R_0_2_4_3 * dm_ij_cache[tx+720];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+736];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+752];
            vj_kl += R_0_3_1_5 * dm_ij_cache[tx+768];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+784];
            vj_kl += R_0_3_2_4 * dm_ij_cache[tx+800];
            double R_2_1_3_3 = xpq * R_3_0_3_3;
            double R_1_2_3_3 = xpq * R_2_1_3_3 + 1 * R_2_0_3_3;
            double R_0_3_3_3 = xpq * R_1_2_3_3 + 2 * R_1_1_3_3;
            vj_kl += R_0_3_3_3 * dm_ij_cache[tx+816];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+832];
            vj_kl += R_0_4_1_4 * dm_ij_cache[tx+848];
            double R_3_1_2_3 = xpq * R_4_0_2_3;
            double R_2_2_2_3 = xpq * R_3_1_2_3 + 1 * R_3_0_2_3;
            double R_1_3_2_3 = xpq * R_2_2_2_3 + 2 * R_2_1_2_3;
            double R_0_4_2_3 = xpq * R_1_3_2_3 + 3 * R_1_2_2_3;
            vj_kl += R_0_4_2_3 * dm_ij_cache[tx+864];
            double R_4_1_1_3 = xpq * R_5_0_1_3;
            double R_3_2_1_3 = xpq * R_4_1_1_3 + 1 * R_4_0_1_3;
            double R_2_3_1_3 = xpq * R_3_2_1_3 + 2 * R_3_1_1_3;
            double R_1_4_1_3 = xpq * R_2_3_1_3 + 3 * R_2_2_1_3;
            double R_0_5_1_3 = xpq * R_1_4_1_3 + 4 * R_1_3_1_3;
            vj_kl += R_0_5_1_3 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+768] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+224];
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_0_6_0 * dm_ij_cache[tx+288];
            vj_kl += R_0_0_6_1 * dm_ij_cache[tx+304];
            double R_6_0_1_0 = ypq * gamma_inc[sq_id+7*256];
            double R_5_0_2_0 = ypq * R_6_0_1_0 + 1 * gamma_inc[sq_id+6*256];
            double R_4_0_3_0 = ypq * R_5_0_2_0 + 2 * R_5_0_1_0;
            double R_3_0_4_0 = ypq * R_4_0_3_0 + 3 * R_4_0_2_0;
            double R_2_0_5_0 = ypq * R_3_0_4_0 + 4 * R_3_0_3_0;
            double R_1_0_6_0 = ypq * R_2_0_5_0 + 5 * R_2_0_4_0;
            double R_0_0_7_0 = ypq * R_1_0_6_0 + 6 * R_1_0_5_0;
            vj_kl += R_0_0_7_0 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+384];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+400];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+416];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+432];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+448];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+464];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+512];
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+528];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+544];
            double R_0_1_6_0 = xpq * R_1_0_6_0;
            vj_kl += R_0_1_6_0 * dm_ij_cache[tx+560];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+576];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+592];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+608];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+624];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+640];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+656];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+672];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+688];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+704];
            double R_1_1_5_0 = xpq * R_2_0_5_0;
            double R_0_2_5_0 = xpq * R_1_1_5_0 + 1 * R_1_0_5_0;
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+720];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+736];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+752];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+768];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+784];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+800];
            double R_2_1_4_0 = xpq * R_3_0_4_0;
            double R_1_2_4_0 = xpq * R_2_1_4_0 + 1 * R_2_0_4_0;
            double R_0_3_4_0 = xpq * R_1_2_4_0 + 2 * R_1_1_4_0;
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+816];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+832];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+848];
            double R_3_1_3_0 = xpq * R_4_0_3_0;
            double R_2_2_3_0 = xpq * R_3_1_3_0 + 1 * R_3_0_3_0;
            double R_1_3_3_0 = xpq * R_2_2_3_0 + 2 * R_2_1_3_0;
            double R_0_4_3_0 = xpq * R_1_3_3_0 + 3 * R_1_2_3_0;
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+864];
            double R_4_1_2_0 = xpq * R_5_0_2_0;
            double R_3_2_2_0 = xpq * R_4_1_2_0 + 1 * R_4_0_2_0;
            double R_2_3_2_0 = xpq * R_3_2_2_0 + 2 * R_3_1_2_0;
            double R_1_4_2_0 = xpq * R_2_3_2_0 + 3 * R_2_2_2_0;
            double R_0_5_2_0 = xpq * R_1_4_2_0 + 4 * R_1_3_2_0;
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+864] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_2_6 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_3_5 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+208];
            vj_kl -= R_0_0_4_4 * dm_ij_cache[tx+224];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_0_5_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_0_6_1 * dm_ij_cache[tx+288];
            vj_kl -= R_0_0_6_2 * dm_ij_cache[tx+304];
            double R_6_0_1_1 = ypq * R_7_0_0_1;
            double R_5_0_2_1 = ypq * R_6_0_1_1 + 1 * R_6_0_0_1;
            double R_4_0_3_1 = ypq * R_5_0_2_1 + 2 * R_5_0_1_1;
            double R_3_0_4_1 = ypq * R_4_0_3_1 + 3 * R_4_0_2_1;
            double R_2_0_5_1 = ypq * R_3_0_4_1 + 4 * R_3_0_3_1;
            double R_1_0_6_1 = ypq * R_2_0_5_1 + 5 * R_2_0_4_1;
            double R_0_0_7_1 = ypq * R_1_0_6_1 + 6 * R_1_0_5_1;
            vj_kl -= R_0_0_7_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+368];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+384];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+400];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+448];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+464];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+496];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+512];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+528];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+544];
            double R_0_1_6_1 = xpq * R_1_0_6_1;
            vj_kl -= R_0_1_6_1 * dm_ij_cache[tx+560];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+576];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+592];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+608];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+624];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+640];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+656];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+672];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+688];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+704];
            double R_1_1_5_1 = xpq * R_2_0_5_1;
            double R_0_2_5_1 = xpq * R_1_1_5_1 + 1 * R_1_0_5_1;
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+720];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+736];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+752];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+768];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+784];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+800];
            double R_2_1_4_1 = xpq * R_3_0_4_1;
            double R_1_2_4_1 = xpq * R_2_1_4_1 + 1 * R_2_0_4_1;
            double R_0_3_4_1 = xpq * R_1_2_4_1 + 2 * R_1_1_4_1;
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+816];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+832];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+848];
            double R_3_1_3_1 = xpq * R_4_0_3_1;
            double R_2_2_3_1 = xpq * R_3_1_3_1 + 1 * R_3_0_3_1;
            double R_1_3_3_1 = xpq * R_2_2_3_1 + 2 * R_2_1_3_1;
            double R_0_4_3_1 = xpq * R_1_3_3_1 + 3 * R_1_2_3_1;
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+864];
            double R_4_1_2_1 = xpq * R_5_0_2_1;
            double R_3_2_2_1 = xpq * R_4_1_2_1 + 1 * R_4_0_2_1;
            double R_2_3_2_1 = xpq * R_3_2_2_1 + 2 * R_3_1_2_1;
            double R_1_4_2_1 = xpq * R_2_3_2_1 + 3 * R_2_2_2_1;
            double R_0_5_2_1 = xpq * R_1_4_2_1 + 4 * R_1_3_2_1;
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+960] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_2_6 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_2_7 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_3_5 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_3_6 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_4_4 * dm_ij_cache[tx+208];
            vj_kl += R_0_0_4_5 * dm_ij_cache[tx+224];
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_0_5_3 * dm_ij_cache[tx+256];
            vj_kl += R_0_0_5_4 * dm_ij_cache[tx+272];
            vj_kl += R_0_0_6_2 * dm_ij_cache[tx+288];
            vj_kl += R_0_0_6_3 * dm_ij_cache[tx+304];
            double R_6_0_1_2 = ypq * R_7_0_0_2;
            double R_5_0_2_2 = ypq * R_6_0_1_2 + 1 * R_6_0_0_2;
            double R_4_0_3_2 = ypq * R_5_0_2_2 + 2 * R_5_0_1_2;
            double R_3_0_4_2 = ypq * R_4_0_3_2 + 3 * R_4_0_2_2;
            double R_2_0_5_2 = ypq * R_3_0_4_2 + 4 * R_3_0_3_2;
            double R_1_0_6_2 = ypq * R_2_0_5_2 + 5 * R_2_0_4_2;
            double R_0_0_7_2 = ypq * R_1_0_6_2 + 6 * R_1_0_5_2;
            vj_kl += R_0_0_7_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+368];
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+384];
            vj_kl += R_0_1_2_6 * dm_ij_cache[tx+400];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+416];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+432];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+448];
            vj_kl += R_0_1_3_5 * dm_ij_cache[tx+464];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+480];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+496];
            vj_kl += R_0_1_4_4 * dm_ij_cache[tx+512];
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+528];
            vj_kl += R_0_1_5_3 * dm_ij_cache[tx+544];
            double R_0_1_6_2 = xpq * R_1_0_6_2;
            vj_kl += R_0_1_6_2 * dm_ij_cache[tx+560];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+576];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+592];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+608];
            vj_kl += R_0_2_2_5 * dm_ij_cache[tx+624];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+640];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+656];
            vj_kl += R_0_2_3_4 * dm_ij_cache[tx+672];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+688];
            vj_kl += R_0_2_4_3 * dm_ij_cache[tx+704];
            double R_1_1_5_2 = xpq * R_2_0_5_2;
            double R_0_2_5_2 = xpq * R_1_1_5_2 + 1 * R_1_0_5_2;
            vj_kl += R_0_2_5_2 * dm_ij_cache[tx+720];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+736];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+752];
            vj_kl += R_0_3_2_4 * dm_ij_cache[tx+768];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+784];
            vj_kl += R_0_3_3_3 * dm_ij_cache[tx+800];
            double R_2_1_4_2 = xpq * R_3_0_4_2;
            double R_1_2_4_2 = xpq * R_2_1_4_2 + 1 * R_2_0_4_2;
            double R_0_3_4_2 = xpq * R_1_2_4_2 + 2 * R_1_1_4_2;
            vj_kl += R_0_3_4_2 * dm_ij_cache[tx+816];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+832];
            vj_kl += R_0_4_2_3 * dm_ij_cache[tx+848];
            double R_3_1_3_2 = xpq * R_4_0_3_2;
            double R_2_2_3_2 = xpq * R_3_1_3_2 + 1 * R_3_0_3_2;
            double R_1_3_3_2 = xpq * R_2_2_3_2 + 2 * R_2_1_3_2;
            double R_0_4_3_2 = xpq * R_1_3_3_2 + 3 * R_1_2_3_2;
            vj_kl += R_0_4_3_2 * dm_ij_cache[tx+864];
            double R_4_1_2_2 = xpq * R_5_0_2_2;
            double R_3_2_2_2 = xpq * R_4_1_2_2 + 1 * R_4_0_2_2;
            double R_2_3_2_2 = xpq * R_3_2_2_2 + 2 * R_3_1_2_2;
            double R_1_4_2_2 = xpq * R_2_3_2_2 + 3 * R_2_2_2_2;
            double R_0_5_2_2 = xpq * R_1_4_2_2 + 4 * R_1_3_2_2;
            vj_kl += R_0_5_2_2 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1056] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_3_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_4_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_5_0 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_0_5_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_0_6_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_0_6_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_0_6_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_0_7_0 * dm_ij_cache[tx+288];
            vj_kl -= R_0_0_7_1 * dm_ij_cache[tx+304];
            double R_7_0_1_0 = ypq * gamma_inc[sq_id+8*256];
            double R_6_0_2_0 = ypq * R_7_0_1_0 + 1 * gamma_inc[sq_id+7*256];
            double R_5_0_3_0 = ypq * R_6_0_2_0 + 2 * R_6_0_1_0;
            double R_4_0_4_0 = ypq * R_5_0_3_0 + 3 * R_5_0_2_0;
            double R_3_0_5_0 = ypq * R_4_0_4_0 + 4 * R_4_0_3_0;
            double R_2_0_6_0 = ypq * R_3_0_5_0 + 5 * R_3_0_4_0;
            double R_1_0_7_0 = ypq * R_2_0_6_0 + 6 * R_2_0_5_0;
            double R_0_0_8_0 = ypq * R_1_0_7_0 + 7 * R_1_0_6_0;
            vj_kl -= R_0_0_8_0 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+400];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+416];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+432];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+464];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+512];
            vj_kl -= R_0_1_6_0 * dm_ij_cache[tx+528];
            vj_kl -= R_0_1_6_1 * dm_ij_cache[tx+544];
            double R_0_1_7_0 = xpq * R_1_0_7_0;
            vj_kl -= R_0_1_7_0 * dm_ij_cache[tx+560];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+576];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+592];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+608];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+624];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+640];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+656];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+672];
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+688];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+704];
            double R_1_1_6_0 = xpq * R_2_0_6_0;
            double R_0_2_6_0 = xpq * R_1_1_6_0 + 1 * R_1_0_6_0;
            vj_kl -= R_0_2_6_0 * dm_ij_cache[tx+720];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+736];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+752];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+768];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+784];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+800];
            double R_2_1_5_0 = xpq * R_3_0_5_0;
            double R_1_2_5_0 = xpq * R_2_1_5_0 + 1 * R_2_0_5_0;
            double R_0_3_5_0 = xpq * R_1_2_5_0 + 2 * R_1_1_5_0;
            vj_kl -= R_0_3_5_0 * dm_ij_cache[tx+816];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+832];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+848];
            double R_3_1_4_0 = xpq * R_4_0_4_0;
            double R_2_2_4_0 = xpq * R_3_1_4_0 + 1 * R_3_0_4_0;
            double R_1_3_4_0 = xpq * R_2_2_4_0 + 2 * R_2_1_4_0;
            double R_0_4_4_0 = xpq * R_1_3_4_0 + 3 * R_1_2_4_0;
            vj_kl -= R_0_4_4_0 * dm_ij_cache[tx+864];
            double R_4_1_3_0 = xpq * R_5_0_3_0;
            double R_3_2_3_0 = xpq * R_4_1_3_0 + 1 * R_4_0_3_0;
            double R_2_3_3_0 = xpq * R_3_2_3_0 + 2 * R_3_1_3_0;
            double R_1_4_3_0 = xpq * R_2_3_3_0 + 3 * R_2_2_3_0;
            double R_0_5_3_0 = xpq * R_1_4_3_0 + 4 * R_1_3_3_0;
            vj_kl -= R_0_5_3_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1152] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_3_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_3_6 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_4_4 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_4_5 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_5_3 * dm_ij_cache[tx+208];
            vj_kl += R_0_0_5_4 * dm_ij_cache[tx+224];
            vj_kl += R_0_0_6_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_0_6_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_0_6_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_0_7_1 * dm_ij_cache[tx+288];
            vj_kl += R_0_0_7_2 * dm_ij_cache[tx+304];
            double R_7_0_1_1 = ypq * R_8_0_0_1;
            double R_6_0_2_1 = ypq * R_7_0_1_1 + 1 * R_7_0_0_1;
            double R_5_0_3_1 = ypq * R_6_0_2_1 + 2 * R_6_0_1_1;
            double R_4_0_4_1 = ypq * R_5_0_3_1 + 3 * R_5_0_2_1;
            double R_3_0_5_1 = ypq * R_4_0_4_1 + 4 * R_4_0_3_1;
            double R_2_0_6_1 = ypq * R_3_0_5_1 + 5 * R_3_0_4_1;
            double R_1_0_7_1 = ypq * R_2_0_6_1 + 6 * R_2_0_5_1;
            double R_0_0_8_1 = ypq * R_1_0_7_1 + 7 * R_1_0_6_1;
            vj_kl += R_0_0_8_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+368];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+384];
            vj_kl += R_0_1_3_5 * dm_ij_cache[tx+400];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+448];
            vj_kl += R_0_1_4_4 * dm_ij_cache[tx+464];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+480];
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+496];
            vj_kl += R_0_1_5_3 * dm_ij_cache[tx+512];
            vj_kl += R_0_1_6_1 * dm_ij_cache[tx+528];
            vj_kl += R_0_1_6_2 * dm_ij_cache[tx+544];
            double R_0_1_7_1 = xpq * R_1_0_7_1;
            vj_kl += R_0_1_7_1 * dm_ij_cache[tx+560];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+576];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+592];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+608];
            vj_kl += R_0_2_3_4 * dm_ij_cache[tx+624];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+640];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+656];
            vj_kl += R_0_2_4_3 * dm_ij_cache[tx+672];
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+688];
            vj_kl += R_0_2_5_2 * dm_ij_cache[tx+704];
            double R_1_1_6_1 = xpq * R_2_0_6_1;
            double R_0_2_6_1 = xpq * R_1_1_6_1 + 1 * R_1_0_6_1;
            vj_kl += R_0_2_6_1 * dm_ij_cache[tx+720];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+736];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+752];
            vj_kl += R_0_3_3_3 * dm_ij_cache[tx+768];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+784];
            vj_kl += R_0_3_4_2 * dm_ij_cache[tx+800];
            double R_2_1_5_1 = xpq * R_3_0_5_1;
            double R_1_2_5_1 = xpq * R_2_1_5_1 + 1 * R_2_0_5_1;
            double R_0_3_5_1 = xpq * R_1_2_5_1 + 2 * R_1_1_5_1;
            vj_kl += R_0_3_5_1 * dm_ij_cache[tx+816];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+832];
            vj_kl += R_0_4_3_2 * dm_ij_cache[tx+848];
            double R_3_1_4_1 = xpq * R_4_0_4_1;
            double R_2_2_4_1 = xpq * R_3_1_4_1 + 1 * R_3_0_4_1;
            double R_1_3_4_1 = xpq * R_2_2_4_1 + 2 * R_2_1_4_1;
            double R_0_4_4_1 = xpq * R_1_3_4_1 + 3 * R_1_2_4_1;
            vj_kl += R_0_4_4_1 * dm_ij_cache[tx+864];
            double R_4_1_3_1 = xpq * R_5_0_3_1;
            double R_3_2_3_1 = xpq * R_4_1_3_1 + 1 * R_4_0_3_1;
            double R_2_3_3_1 = xpq * R_3_2_3_1 + 2 * R_3_1_3_1;
            double R_1_4_3_1 = xpq * R_2_3_3_1 + 3 * R_2_2_3_1;
            double R_0_5_3_1 = xpq * R_1_4_3_1 + 4 * R_1_3_3_1;
            vj_kl += R_0_5_3_1 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1248] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_4_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_4_5 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_5_3 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_5_4 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_6_0 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_6_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_6_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_0_6_3 * dm_ij_cache[tx+224];
            vj_kl += R_0_0_7_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_0_7_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_0_7_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_0_8_0 * dm_ij_cache[tx+288];
            vj_kl += R_0_0_8_1 * dm_ij_cache[tx+304];
            double R_8_0_1_0 = ypq * gamma_inc[sq_id+9*256];
            double R_7_0_2_0 = ypq * R_8_0_1_0 + 1 * gamma_inc[sq_id+8*256];
            double R_6_0_3_0 = ypq * R_7_0_2_0 + 2 * R_7_0_1_0;
            double R_5_0_4_0 = ypq * R_6_0_3_0 + 3 * R_6_0_2_0;
            double R_4_0_5_0 = ypq * R_5_0_4_0 + 4 * R_5_0_3_0;
            double R_3_0_6_0 = ypq * R_4_0_5_0 + 5 * R_4_0_4_0;
            double R_2_0_7_0 = ypq * R_3_0_6_0 + 6 * R_3_0_5_0;
            double R_1_0_8_0 = ypq * R_2_0_7_0 + 7 * R_2_0_6_0;
            double R_0_0_9_0 = ypq * R_1_0_8_0 + 8 * R_1_0_7_0;
            vj_kl += R_0_0_9_0 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+384];
            vj_kl += R_0_1_4_4 * dm_ij_cache[tx+400];
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+416];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+432];
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+448];
            vj_kl += R_0_1_5_3 * dm_ij_cache[tx+464];
            vj_kl += R_0_1_6_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_1_6_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_1_6_2 * dm_ij_cache[tx+512];
            vj_kl += R_0_1_7_0 * dm_ij_cache[tx+528];
            vj_kl += R_0_1_7_1 * dm_ij_cache[tx+544];
            double R_0_1_8_0 = xpq * R_1_0_8_0;
            vj_kl += R_0_1_8_0 * dm_ij_cache[tx+560];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+576];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+592];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+608];
            vj_kl += R_0_2_4_3 * dm_ij_cache[tx+624];
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+640];
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+656];
            vj_kl += R_0_2_5_2 * dm_ij_cache[tx+672];
            vj_kl += R_0_2_6_0 * dm_ij_cache[tx+688];
            vj_kl += R_0_2_6_1 * dm_ij_cache[tx+704];
            double R_1_1_7_0 = xpq * R_2_0_7_0;
            double R_0_2_7_0 = xpq * R_1_1_7_0 + 1 * R_1_0_7_0;
            vj_kl += R_0_2_7_0 * dm_ij_cache[tx+720];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+736];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+752];
            vj_kl += R_0_3_4_2 * dm_ij_cache[tx+768];
            vj_kl += R_0_3_5_0 * dm_ij_cache[tx+784];
            vj_kl += R_0_3_5_1 * dm_ij_cache[tx+800];
            double R_2_1_6_0 = xpq * R_3_0_6_0;
            double R_1_2_6_0 = xpq * R_2_1_6_0 + 1 * R_2_0_6_0;
            double R_0_3_6_0 = xpq * R_1_2_6_0 + 2 * R_1_1_6_0;
            vj_kl += R_0_3_6_0 * dm_ij_cache[tx+816];
            vj_kl += R_0_4_4_0 * dm_ij_cache[tx+832];
            vj_kl += R_0_4_4_1 * dm_ij_cache[tx+848];
            double R_3_1_5_0 = xpq * R_4_0_5_0;
            double R_2_2_5_0 = xpq * R_3_1_5_0 + 1 * R_3_0_5_0;
            double R_1_3_5_0 = xpq * R_2_2_5_0 + 2 * R_2_1_5_0;
            double R_0_4_5_0 = xpq * R_1_3_5_0 + 3 * R_1_2_5_0;
            vj_kl += R_0_4_5_0 * dm_ij_cache[tx+864];
            double R_4_1_4_0 = xpq * R_5_0_4_0;
            double R_3_2_4_0 = xpq * R_4_1_4_0 + 1 * R_4_0_4_0;
            double R_2_3_4_0 = xpq * R_3_2_4_0 + 2 * R_3_1_4_0;
            double R_1_4_4_0 = xpq * R_2_3_4_0 + 3 * R_2_2_4_0;
            double R_0_5_4_0 = xpq * R_1_4_4_0 + 4 * R_1_3_4_0;
            vj_kl += R_0_5_4_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1344] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_0_0 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+464];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+512];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+528];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+544];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+560];
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+576];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+592];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+608];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+624];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+640];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+656];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+672];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+688];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+704];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+720];
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+736];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+752];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+768];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+784];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+800];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+816];
            vj_kl -= R_0_5_0_0 * dm_ij_cache[tx+832];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+848];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+864];
            double R_5_1_0_0 = xpq * gamma_inc[sq_id+6*256];
            double R_4_2_0_0 = xpq * R_5_1_0_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_3_0_0 = xpq * R_4_2_0_0 + 2 * R_4_1_0_0;
            double R_2_4_0_0 = xpq * R_3_3_0_0 + 3 * R_3_2_0_0;
            double R_1_5_0_0 = xpq * R_2_4_0_0 + 4 * R_2_3_0_0;
            double R_0_6_0_0 = xpq * R_1_5_0_0 + 5 * R_1_4_0_0;
            vj_kl -= R_0_6_0_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1440] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_0_6 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+464];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+480];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+496];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+512];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+528];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+544];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+560];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+576];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+592];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+608];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+624];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+640];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+656];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+672];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+688];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+704];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+720];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+736];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+752];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+768];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+784];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+800];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+816];
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+832];
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+848];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+864];
            double R_5_1_0_1 = xpq * R_6_0_0_1;
            double R_4_2_0_1 = xpq * R_5_1_0_1 + 1 * R_5_0_0_1;
            double R_3_3_0_1 = xpq * R_4_2_0_1 + 2 * R_4_1_0_1;
            double R_2_4_0_1 = xpq * R_3_3_0_1 + 3 * R_3_2_0_1;
            double R_1_5_0_1 = xpq * R_2_4_0_1 + 4 * R_2_3_0_1;
            double R_0_6_0_1 = xpq * R_1_5_0_1 + 5 * R_1_4_0_1;
            vj_kl += R_0_6_0_1 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1536] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_0_6 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_0_7 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_1_6 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_0_6 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+464];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+480];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+496];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+512];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+528];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+544];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+560];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+576];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+592];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+608];
            vj_kl -= R_0_3_0_5 * dm_ij_cache[tx+624];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+640];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+656];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+672];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+688];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+704];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+720];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+736];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+752];
            vj_kl -= R_0_4_0_4 * dm_ij_cache[tx+768];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+784];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+800];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+816];
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+832];
            vj_kl -= R_0_5_0_3 * dm_ij_cache[tx+848];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+864];
            double R_5_1_0_2 = xpq * R_6_0_0_2;
            double R_4_2_0_2 = xpq * R_5_1_0_2 + 1 * R_5_0_0_2;
            double R_3_3_0_2 = xpq * R_4_2_0_2 + 2 * R_4_1_0_2;
            double R_2_4_0_2 = xpq * R_3_3_0_2 + 3 * R_3_2_0_2;
            double R_1_5_0_2 = xpq * R_2_4_0_2 + 4 * R_2_3_0_2;
            double R_0_6_0_2 = xpq * R_1_5_0_2 + 5 * R_1_4_0_2;
            vj_kl -= R_0_6_0_2 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1632] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_0_6 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_0_7 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_0_8 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_1_6 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_1_7 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_2_6 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_3_5 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_4_4 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_5_3 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_0_6 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_0_7 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_1_6 * dm_ij_cache[tx+464];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+480];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+496];
            vj_kl += R_0_2_2_5 * dm_ij_cache[tx+512];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+528];
            vj_kl += R_0_2_3_4 * dm_ij_cache[tx+544];
            vj_kl += R_0_2_4_3 * dm_ij_cache[tx+560];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+576];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+592];
            vj_kl += R_0_3_0_5 * dm_ij_cache[tx+608];
            vj_kl += R_0_3_0_6 * dm_ij_cache[tx+624];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+640];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+656];
            vj_kl += R_0_3_1_5 * dm_ij_cache[tx+672];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+688];
            vj_kl += R_0_3_2_4 * dm_ij_cache[tx+704];
            vj_kl += R_0_3_3_3 * dm_ij_cache[tx+720];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+736];
            vj_kl += R_0_4_0_4 * dm_ij_cache[tx+752];
            vj_kl += R_0_4_0_5 * dm_ij_cache[tx+768];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+784];
            vj_kl += R_0_4_1_4 * dm_ij_cache[tx+800];
            vj_kl += R_0_4_2_3 * dm_ij_cache[tx+816];
            vj_kl += R_0_5_0_3 * dm_ij_cache[tx+832];
            vj_kl += R_0_5_0_4 * dm_ij_cache[tx+848];
            vj_kl += R_0_5_1_3 * dm_ij_cache[tx+864];
            double R_5_1_0_3 = xpq * R_6_0_0_3;
            double R_4_2_0_3 = xpq * R_5_1_0_3 + 1 * R_5_0_0_3;
            double R_3_3_0_3 = xpq * R_4_2_0_3 + 2 * R_4_1_0_3;
            double R_2_4_0_3 = xpq * R_3_3_0_3 + 3 * R_3_2_0_3;
            double R_1_5_0_3 = xpq * R_2_4_0_3 + 4 * R_2_3_0_3;
            double R_0_6_0_3 = xpq * R_1_5_0_3 + 5 * R_1_4_0_3;
            vj_kl += R_0_6_0_3 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1728] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_6_0 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+464];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+512];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+528];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+544];
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+560];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+576];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+592];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+608];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+624];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+640];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+656];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+672];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+688];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+704];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+720];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+736];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+752];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+768];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+784];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+800];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+816];
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+832];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+848];
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+864];
            double R_5_1_1_0 = xpq * R_6_0_1_0;
            double R_4_2_1_0 = xpq * R_5_1_1_0 + 1 * R_5_0_1_0;
            double R_3_3_1_0 = xpq * R_4_2_1_0 + 2 * R_4_1_1_0;
            double R_2_4_1_0 = xpq * R_3_3_1_0 + 3 * R_3_2_1_0;
            double R_1_5_1_0 = xpq * R_2_4_1_0 + 4 * R_2_3_1_0;
            double R_0_6_1_0 = xpq * R_1_5_1_0 + 5 * R_1_4_1_0;
            vj_kl += R_0_6_1_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1824] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_1_6 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_6_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+464];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+496];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+512];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+528];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+544];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+560];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+576];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+592];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+608];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+624];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+640];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+656];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+672];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+688];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+704];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+720];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+736];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+752];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+768];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+784];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+800];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+816];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+832];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+848];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+864];
            double R_5_1_1_1 = xpq * R_6_0_1_1;
            double R_4_2_1_1 = xpq * R_5_1_1_1 + 1 * R_5_0_1_1;
            double R_3_3_1_1 = xpq * R_4_2_1_1 + 2 * R_4_1_1_1;
            double R_2_4_1_1 = xpq * R_3_3_1_1 + 3 * R_3_2_1_1;
            double R_1_5_1_1 = xpq * R_2_4_1_1 + 4 * R_2_3_1_1;
            double R_0_6_1_1 = xpq * R_1_5_1_1 + 5 * R_1_4_1_1;
            vj_kl -= R_0_6_1_1 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1920] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_1_6 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_1_7 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_2_6 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_3_5 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_4_4 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_5_3 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_6_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_1_6 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_2_5 * dm_ij_cache[tx+464];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+480];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+496];
            vj_kl += R_0_2_3_4 * dm_ij_cache[tx+512];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+528];
            vj_kl += R_0_2_4_3 * dm_ij_cache[tx+544];
            vj_kl += R_0_2_5_2 * dm_ij_cache[tx+560];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+576];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+592];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+608];
            vj_kl += R_0_3_1_5 * dm_ij_cache[tx+624];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+640];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+656];
            vj_kl += R_0_3_2_4 * dm_ij_cache[tx+672];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+688];
            vj_kl += R_0_3_3_3 * dm_ij_cache[tx+704];
            vj_kl += R_0_3_4_2 * dm_ij_cache[tx+720];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+736];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+752];
            vj_kl += R_0_4_1_4 * dm_ij_cache[tx+768];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+784];
            vj_kl += R_0_4_2_3 * dm_ij_cache[tx+800];
            vj_kl += R_0_4_3_2 * dm_ij_cache[tx+816];
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+832];
            vj_kl += R_0_5_1_3 * dm_ij_cache[tx+848];
            vj_kl += R_0_5_2_2 * dm_ij_cache[tx+864];
            double R_5_1_1_2 = xpq * R_6_0_1_2;
            double R_4_2_1_2 = xpq * R_5_1_1_2 + 1 * R_5_0_1_2;
            double R_3_3_1_2 = xpq * R_4_2_1_2 + 2 * R_4_1_1_2;
            double R_2_4_1_2 = xpq * R_3_3_1_2 + 3 * R_3_2_1_2;
            double R_1_5_1_2 = xpq * R_2_4_1_2 + 4 * R_2_3_1_2;
            double R_0_6_1_2 = xpq * R_1_5_1_2 + 5 * R_1_4_1_2;
            vj_kl += R_0_6_1_2 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2016] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_6_0 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_6_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_7_0 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+464];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+512];
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+528];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+544];
            vj_kl -= R_0_2_6_0 * dm_ij_cache[tx+560];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+576];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+592];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+608];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+624];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+640];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+656];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+672];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+688];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+704];
            vj_kl -= R_0_3_5_0 * dm_ij_cache[tx+720];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+736];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+752];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+768];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+784];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+800];
            vj_kl -= R_0_4_4_0 * dm_ij_cache[tx+816];
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+832];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+848];
            vj_kl -= R_0_5_3_0 * dm_ij_cache[tx+864];
            double R_5_1_2_0 = xpq * R_6_0_2_0;
            double R_4_2_2_0 = xpq * R_5_1_2_0 + 1 * R_5_0_2_0;
            double R_3_3_2_0 = xpq * R_4_2_2_0 + 2 * R_4_1_2_0;
            double R_2_4_2_0 = xpq * R_3_3_2_0 + 3 * R_3_2_2_0;
            double R_1_5_2_0 = xpq * R_2_4_2_0 + 4 * R_2_3_2_0;
            double R_0_6_2_0 = xpq * R_1_5_2_0 + 5 * R_1_4_2_0;
            vj_kl -= R_0_6_2_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2112] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_2_6 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_3_5 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_4_4 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_5_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_6_1 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_6_2 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_7_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_2_5 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_3_4 * dm_ij_cache[tx+464];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+480];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+496];
            vj_kl += R_0_2_4_3 * dm_ij_cache[tx+512];
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+528];
            vj_kl += R_0_2_5_2 * dm_ij_cache[tx+544];
            vj_kl += R_0_2_6_1 * dm_ij_cache[tx+560];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+576];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+592];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+608];
            vj_kl += R_0_3_2_4 * dm_ij_cache[tx+624];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+640];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+656];
            vj_kl += R_0_3_3_3 * dm_ij_cache[tx+672];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+688];
            vj_kl += R_0_3_4_2 * dm_ij_cache[tx+704];
            vj_kl += R_0_3_5_1 * dm_ij_cache[tx+720];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+736];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+752];
            vj_kl += R_0_4_2_3 * dm_ij_cache[tx+768];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+784];
            vj_kl += R_0_4_3_2 * dm_ij_cache[tx+800];
            vj_kl += R_0_4_4_1 * dm_ij_cache[tx+816];
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+832];
            vj_kl += R_0_5_2_2 * dm_ij_cache[tx+848];
            vj_kl += R_0_5_3_1 * dm_ij_cache[tx+864];
            double R_5_1_2_1 = xpq * R_6_0_2_1;
            double R_4_2_2_1 = xpq * R_5_1_2_1 + 1 * R_5_0_2_1;
            double R_3_3_2_1 = xpq * R_4_2_2_1 + 2 * R_4_1_2_1;
            double R_2_4_2_1 = xpq * R_3_3_2_1 + 3 * R_3_2_2_1;
            double R_1_5_2_1 = xpq * R_2_4_2_1 + 4 * R_2_3_2_1;
            double R_0_6_2_1 = xpq * R_1_5_2_1 + 5 * R_1_4_2_1;
            vj_kl += R_0_6_2_1 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2208] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_3_5 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_4_4 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_5_3 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_6_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_6_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_6_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_7_0 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_7_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_8_0 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_3_4 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_4_3 * dm_ij_cache[tx+464];
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_2_5_2 * dm_ij_cache[tx+512];
            vj_kl += R_0_2_6_0 * dm_ij_cache[tx+528];
            vj_kl += R_0_2_6_1 * dm_ij_cache[tx+544];
            vj_kl += R_0_2_7_0 * dm_ij_cache[tx+560];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+576];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+592];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+608];
            vj_kl += R_0_3_3_3 * dm_ij_cache[tx+624];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+640];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+656];
            vj_kl += R_0_3_4_2 * dm_ij_cache[tx+672];
            vj_kl += R_0_3_5_0 * dm_ij_cache[tx+688];
            vj_kl += R_0_3_5_1 * dm_ij_cache[tx+704];
            vj_kl += R_0_3_6_0 * dm_ij_cache[tx+720];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+736];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+752];
            vj_kl += R_0_4_3_2 * dm_ij_cache[tx+768];
            vj_kl += R_0_4_4_0 * dm_ij_cache[tx+784];
            vj_kl += R_0_4_4_1 * dm_ij_cache[tx+800];
            vj_kl += R_0_4_5_0 * dm_ij_cache[tx+816];
            vj_kl += R_0_5_3_0 * dm_ij_cache[tx+832];
            vj_kl += R_0_5_3_1 * dm_ij_cache[tx+848];
            vj_kl += R_0_5_4_0 * dm_ij_cache[tx+864];
            double R_5_1_3_0 = xpq * R_6_0_3_0;
            double R_4_2_3_0 = xpq * R_5_1_3_0 + 1 * R_5_0_3_0;
            double R_3_3_3_0 = xpq * R_4_2_3_0 + 2 * R_4_1_3_0;
            double R_2_4_3_0 = xpq * R_3_3_3_0 + 3 * R_3_2_3_0;
            double R_1_5_3_0 = xpq * R_2_4_3_0 + 4 * R_2_3_3_0;
            double R_0_6_3_0 = xpq * R_1_5_3_0 + 5 * R_1_4_3_0;
            vj_kl += R_0_6_3_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2304] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+288];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+320];
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+336];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+384];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+400];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+416];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+432];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+448];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+464];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+512];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+528];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+544];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+560];
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+576];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+592];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+608];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+624];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+640];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+656];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+672];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+688];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+704];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+720];
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+736];
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+752];
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+768];
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+784];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+800];
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+816];
            vj_kl += R_0_6_0_0 * dm_ij_cache[tx+832];
            vj_kl += R_0_6_0_1 * dm_ij_cache[tx+848];
            vj_kl += R_0_6_1_0 * dm_ij_cache[tx+864];
            double R_6_1_0_0 = xpq * gamma_inc[sq_id+7*256];
            double R_5_2_0_0 = xpq * R_6_1_0_0 + 1 * gamma_inc[sq_id+6*256];
            double R_4_3_0_0 = xpq * R_5_2_0_0 + 2 * R_5_1_0_0;
            double R_3_4_0_0 = xpq * R_4_3_0_0 + 3 * R_4_2_0_0;
            double R_2_5_0_0 = xpq * R_3_4_0_0 + 4 * R_3_3_0_0;
            double R_1_6_0_0 = xpq * R_2_5_0_0 + 5 * R_2_4_0_0;
            double R_0_7_0_0 = xpq * R_1_6_0_0 + 6 * R_1_5_0_0;
            vj_kl += R_0_7_0_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2400] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_0_6 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+272];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+288];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+304];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+320];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+336];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+352];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+368];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+384];
            vj_kl -= R_0_3_0_5 * dm_ij_cache[tx+400];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+448];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+464];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+496];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+512];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+528];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+544];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+560];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+576];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+592];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+608];
            vj_kl -= R_0_4_0_4 * dm_ij_cache[tx+624];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+640];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+656];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+672];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+688];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+704];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+720];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+736];
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+752];
            vj_kl -= R_0_5_0_3 * dm_ij_cache[tx+768];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+784];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+800];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+816];
            vj_kl -= R_0_6_0_1 * dm_ij_cache[tx+832];
            vj_kl -= R_0_6_0_2 * dm_ij_cache[tx+848];
            vj_kl -= R_0_6_1_1 * dm_ij_cache[tx+864];
            double R_6_1_0_1 = xpq * R_7_0_0_1;
            double R_5_2_0_1 = xpq * R_6_1_0_1 + 1 * R_6_0_0_1;
            double R_4_3_0_1 = xpq * R_5_2_0_1 + 2 * R_5_1_0_1;
            double R_3_4_0_1 = xpq * R_4_3_0_1 + 3 * R_4_2_0_1;
            double R_2_5_0_1 = xpq * R_3_4_0_1 + 4 * R_3_3_0_1;
            double R_1_6_0_1 = xpq * R_2_5_0_1 + 5 * R_2_4_0_1;
            double R_0_7_0_1 = xpq * R_1_6_0_1 + 6 * R_1_5_0_1;
            vj_kl -= R_0_7_0_1 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2496] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_0_6 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_0_7 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_1_6 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_2_5 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_3_4 * dm_ij_cache[tx+272];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+288];
            vj_kl += R_0_2_4_3 * dm_ij_cache[tx+304];
            vj_kl += R_0_2_5_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+336];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+352];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+368];
            vj_kl += R_0_3_0_5 * dm_ij_cache[tx+384];
            vj_kl += R_0_3_0_6 * dm_ij_cache[tx+400];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+416];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+432];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+448];
            vj_kl += R_0_3_1_5 * dm_ij_cache[tx+464];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+496];
            vj_kl += R_0_3_2_4 * dm_ij_cache[tx+512];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+528];
            vj_kl += R_0_3_3_3 * dm_ij_cache[tx+544];
            vj_kl += R_0_3_4_2 * dm_ij_cache[tx+560];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+576];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+592];
            vj_kl += R_0_4_0_4 * dm_ij_cache[tx+608];
            vj_kl += R_0_4_0_5 * dm_ij_cache[tx+624];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+640];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+656];
            vj_kl += R_0_4_1_4 * dm_ij_cache[tx+672];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+688];
            vj_kl += R_0_4_2_3 * dm_ij_cache[tx+704];
            vj_kl += R_0_4_3_2 * dm_ij_cache[tx+720];
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+736];
            vj_kl += R_0_5_0_3 * dm_ij_cache[tx+752];
            vj_kl += R_0_5_0_4 * dm_ij_cache[tx+768];
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+784];
            vj_kl += R_0_5_1_3 * dm_ij_cache[tx+800];
            vj_kl += R_0_5_2_2 * dm_ij_cache[tx+816];
            vj_kl += R_0_6_0_2 * dm_ij_cache[tx+832];
            vj_kl += R_0_6_0_3 * dm_ij_cache[tx+848];
            vj_kl += R_0_6_1_2 * dm_ij_cache[tx+864];
            double R_6_1_0_2 = xpq * R_7_0_0_2;
            double R_5_2_0_2 = xpq * R_6_1_0_2 + 1 * R_6_0_0_2;
            double R_4_3_0_2 = xpq * R_5_2_0_2 + 2 * R_5_1_0_2;
            double R_3_4_0_2 = xpq * R_4_3_0_2 + 3 * R_4_2_0_2;
            double R_2_5_0_2 = xpq * R_3_4_0_2 + 4 * R_3_3_0_2;
            double R_1_6_0_2 = xpq * R_2_5_0_2 + 5 * R_2_4_0_2;
            double R_0_7_0_2 = xpq * R_1_6_0_2 + 6 * R_1_5_0_2;
            vj_kl += R_0_7_0_2 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2592] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+288];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_2_6_0 * dm_ij_cache[tx+320];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+336];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+400];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+416];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+432];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+464];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+512];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+528];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+544];
            vj_kl -= R_0_3_5_0 * dm_ij_cache[tx+560];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+576];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+592];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+608];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+624];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+640];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+656];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+672];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+688];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+704];
            vj_kl -= R_0_4_4_0 * dm_ij_cache[tx+720];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+736];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+752];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+768];
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+784];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+800];
            vj_kl -= R_0_5_3_0 * dm_ij_cache[tx+816];
            vj_kl -= R_0_6_1_0 * dm_ij_cache[tx+832];
            vj_kl -= R_0_6_1_1 * dm_ij_cache[tx+848];
            vj_kl -= R_0_6_2_0 * dm_ij_cache[tx+864];
            double R_6_1_1_0 = xpq * R_7_0_1_0;
            double R_5_2_1_0 = xpq * R_6_1_1_0 + 1 * R_6_0_1_0;
            double R_4_3_1_0 = xpq * R_5_2_1_0 + 2 * R_5_1_1_0;
            double R_3_4_1_0 = xpq * R_4_3_1_0 + 3 * R_4_2_1_0;
            double R_2_5_1_0 = xpq * R_3_4_1_0 + 4 * R_3_3_1_0;
            double R_1_6_1_0 = xpq * R_2_5_1_0 + 5 * R_2_4_1_0;
            double R_0_7_1_0 = xpq * R_1_6_1_0 + 6 * R_1_5_1_0;
            vj_kl -= R_0_7_1_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2688] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_1_6 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_2_5 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_3_4 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_4_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+288];
            vj_kl += R_0_2_5_2 * dm_ij_cache[tx+304];
            vj_kl += R_0_2_6_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+336];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+352];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+368];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+384];
            vj_kl += R_0_3_1_5 * dm_ij_cache[tx+400];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+448];
            vj_kl += R_0_3_2_4 * dm_ij_cache[tx+464];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+496];
            vj_kl += R_0_3_3_3 * dm_ij_cache[tx+512];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+528];
            vj_kl += R_0_3_4_2 * dm_ij_cache[tx+544];
            vj_kl += R_0_3_5_1 * dm_ij_cache[tx+560];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+576];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+592];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+608];
            vj_kl += R_0_4_1_4 * dm_ij_cache[tx+624];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+640];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+656];
            vj_kl += R_0_4_2_3 * dm_ij_cache[tx+672];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+688];
            vj_kl += R_0_4_3_2 * dm_ij_cache[tx+704];
            vj_kl += R_0_4_4_1 * dm_ij_cache[tx+720];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+736];
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+752];
            vj_kl += R_0_5_1_3 * dm_ij_cache[tx+768];
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+784];
            vj_kl += R_0_5_2_2 * dm_ij_cache[tx+800];
            vj_kl += R_0_5_3_1 * dm_ij_cache[tx+816];
            vj_kl += R_0_6_1_1 * dm_ij_cache[tx+832];
            vj_kl += R_0_6_1_2 * dm_ij_cache[tx+848];
            vj_kl += R_0_6_2_1 * dm_ij_cache[tx+864];
            double R_6_1_1_1 = xpq * R_7_0_1_1;
            double R_5_2_1_1 = xpq * R_6_1_1_1 + 1 * R_6_0_1_1;
            double R_4_3_1_1 = xpq * R_5_2_1_1 + 2 * R_5_1_1_1;
            double R_3_4_1_1 = xpq * R_4_3_1_1 + 3 * R_4_2_1_1;
            double R_2_5_1_1 = xpq * R_3_4_1_1 + 4 * R_3_3_1_1;
            double R_1_6_1_1 = xpq * R_2_5_1_1 + 5 * R_2_4_1_1;
            double R_0_7_1_1 = xpq * R_1_6_1_1 + 6 * R_1_5_1_1;
            vj_kl += R_0_7_1_1 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2784] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_2_5 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_3_4 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_4_3 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_5_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_2_6_0 * dm_ij_cache[tx+288];
            vj_kl += R_0_2_6_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_2_7_0 * dm_ij_cache[tx+320];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+336];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+384];
            vj_kl += R_0_3_2_4 * dm_ij_cache[tx+400];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+416];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+432];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+448];
            vj_kl += R_0_3_3_3 * dm_ij_cache[tx+464];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_3_4_2 * dm_ij_cache[tx+512];
            vj_kl += R_0_3_5_0 * dm_ij_cache[tx+528];
            vj_kl += R_0_3_5_1 * dm_ij_cache[tx+544];
            vj_kl += R_0_3_6_0 * dm_ij_cache[tx+560];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+576];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+592];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+608];
            vj_kl += R_0_4_2_3 * dm_ij_cache[tx+624];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+640];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+656];
            vj_kl += R_0_4_3_2 * dm_ij_cache[tx+672];
            vj_kl += R_0_4_4_0 * dm_ij_cache[tx+688];
            vj_kl += R_0_4_4_1 * dm_ij_cache[tx+704];
            vj_kl += R_0_4_5_0 * dm_ij_cache[tx+720];
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+736];
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+752];
            vj_kl += R_0_5_2_2 * dm_ij_cache[tx+768];
            vj_kl += R_0_5_3_0 * dm_ij_cache[tx+784];
            vj_kl += R_0_5_3_1 * dm_ij_cache[tx+800];
            vj_kl += R_0_5_4_0 * dm_ij_cache[tx+816];
            vj_kl += R_0_6_2_0 * dm_ij_cache[tx+832];
            vj_kl += R_0_6_2_1 * dm_ij_cache[tx+848];
            vj_kl += R_0_6_3_0 * dm_ij_cache[tx+864];
            double R_6_1_2_0 = xpq * R_7_0_2_0;
            double R_5_2_2_0 = xpq * R_6_1_2_0 + 1 * R_6_0_2_0;
            double R_4_3_2_0 = xpq * R_5_2_2_0 + 2 * R_5_1_2_0;
            double R_3_4_2_0 = xpq * R_4_3_2_0 + 3 * R_4_2_2_0;
            double R_2_5_2_0 = xpq * R_3_4_2_0 + 4 * R_3_3_2_0;
            double R_1_6_2_0 = xpq * R_2_5_2_0 + 5 * R_2_4_2_0;
            double R_0_7_2_0 = xpq * R_1_6_2_0 + 6 * R_1_5_2_0;
            vj_kl += R_0_7_2_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2880] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_3_0_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+96];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+176];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+192];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+288];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_3_5_0 * dm_ij_cache[tx+320];
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+336];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_4_0_4 * dm_ij_cache[tx+400];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+416];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+432];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+464];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+480];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+496];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+512];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+528];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+544];
            vj_kl -= R_0_4_4_0 * dm_ij_cache[tx+560];
            vj_kl -= R_0_5_0_0 * dm_ij_cache[tx+576];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+592];
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+608];
            vj_kl -= R_0_5_0_3 * dm_ij_cache[tx+624];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+640];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+656];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+672];
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+688];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+704];
            vj_kl -= R_0_5_3_0 * dm_ij_cache[tx+720];
            vj_kl -= R_0_6_0_0 * dm_ij_cache[tx+736];
            vj_kl -= R_0_6_0_1 * dm_ij_cache[tx+752];
            vj_kl -= R_0_6_0_2 * dm_ij_cache[tx+768];
            vj_kl -= R_0_6_1_0 * dm_ij_cache[tx+784];
            vj_kl -= R_0_6_1_1 * dm_ij_cache[tx+800];
            vj_kl -= R_0_6_2_0 * dm_ij_cache[tx+816];
            vj_kl -= R_0_7_0_0 * dm_ij_cache[tx+832];
            vj_kl -= R_0_7_0_1 * dm_ij_cache[tx+848];
            vj_kl -= R_0_7_1_0 * dm_ij_cache[tx+864];
            double R_7_1_0_0 = xpq * gamma_inc[sq_id+8*256];
            double R_6_2_0_0 = xpq * R_7_1_0_0 + 1 * gamma_inc[sq_id+7*256];
            double R_5_3_0_0 = xpq * R_6_2_0_0 + 2 * R_6_1_0_0;
            double R_4_4_0_0 = xpq * R_5_3_0_0 + 3 * R_5_2_0_0;
            double R_3_5_0_0 = xpq * R_4_4_0_0 + 4 * R_4_3_0_0;
            double R_2_6_0_0 = xpq * R_3_5_0_0 + 5 * R_3_4_0_0;
            double R_1_7_0_0 = xpq * R_2_6_0_0 + 6 * R_2_5_0_0;
            double R_0_8_0_0 = xpq * R_1_7_0_0 + 7 * R_1_6_0_0;
            vj_kl -= R_0_8_0_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2976] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_3_0_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_3_0_6 * dm_ij_cache[tx+80];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+96];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+144];
            vj_kl += R_0_3_1_5 * dm_ij_cache[tx+160];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+176];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+192];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+208];
            vj_kl += R_0_3_2_4 * dm_ij_cache[tx+224];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_3_3 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+288];
            vj_kl += R_0_3_4_2 * dm_ij_cache[tx+304];
            vj_kl += R_0_3_5_1 * dm_ij_cache[tx+320];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+336];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+352];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+368];
            vj_kl += R_0_4_0_4 * dm_ij_cache[tx+384];
            vj_kl += R_0_4_0_5 * dm_ij_cache[tx+400];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+448];
            vj_kl += R_0_4_1_4 * dm_ij_cache[tx+464];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+480];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+496];
            vj_kl += R_0_4_2_3 * dm_ij_cache[tx+512];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+528];
            vj_kl += R_0_4_3_2 * dm_ij_cache[tx+544];
            vj_kl += R_0_4_4_1 * dm_ij_cache[tx+560];
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+576];
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+592];
            vj_kl += R_0_5_0_3 * dm_ij_cache[tx+608];
            vj_kl += R_0_5_0_4 * dm_ij_cache[tx+624];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+640];
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+656];
            vj_kl += R_0_5_1_3 * dm_ij_cache[tx+672];
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+688];
            vj_kl += R_0_5_2_2 * dm_ij_cache[tx+704];
            vj_kl += R_0_5_3_1 * dm_ij_cache[tx+720];
            vj_kl += R_0_6_0_1 * dm_ij_cache[tx+736];
            vj_kl += R_0_6_0_2 * dm_ij_cache[tx+752];
            vj_kl += R_0_6_0_3 * dm_ij_cache[tx+768];
            vj_kl += R_0_6_1_1 * dm_ij_cache[tx+784];
            vj_kl += R_0_6_1_2 * dm_ij_cache[tx+800];
            vj_kl += R_0_6_2_1 * dm_ij_cache[tx+816];
            vj_kl += R_0_7_0_1 * dm_ij_cache[tx+832];
            vj_kl += R_0_7_0_2 * dm_ij_cache[tx+848];
            vj_kl += R_0_7_1_1 * dm_ij_cache[tx+864];
            double R_7_1_0_1 = xpq * R_8_0_0_1;
            double R_6_2_0_1 = xpq * R_7_1_0_1 + 1 * R_7_0_0_1;
            double R_5_3_0_1 = xpq * R_6_2_0_1 + 2 * R_6_1_0_1;
            double R_4_4_0_1 = xpq * R_5_3_0_1 + 3 * R_5_2_0_1;
            double R_3_5_0_1 = xpq * R_4_4_0_1 + 4 * R_4_3_0_1;
            double R_2_6_0_1 = xpq * R_3_5_0_1 + 5 * R_3_4_0_1;
            double R_1_7_0_1 = xpq * R_2_6_0_1 + 6 * R_2_5_0_1;
            double R_0_8_0_1 = xpq * R_1_7_0_1 + 7 * R_1_6_0_1;
            vj_kl += R_0_8_0_1 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3072] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_3_1_5 * dm_ij_cache[tx+80];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+144];
            vj_kl += R_0_3_2_4 * dm_ij_cache[tx+160];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+176];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_3_3_3 * dm_ij_cache[tx+224];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_3_4_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_3_5_0 * dm_ij_cache[tx+288];
            vj_kl += R_0_3_5_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_3_6_0 * dm_ij_cache[tx+320];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+336];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+384];
            vj_kl += R_0_4_1_4 * dm_ij_cache[tx+400];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+416];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+432];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+448];
            vj_kl += R_0_4_2_3 * dm_ij_cache[tx+464];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_4_3_2 * dm_ij_cache[tx+512];
            vj_kl += R_0_4_4_0 * dm_ij_cache[tx+528];
            vj_kl += R_0_4_4_1 * dm_ij_cache[tx+544];
            vj_kl += R_0_4_5_0 * dm_ij_cache[tx+560];
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+576];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+592];
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+608];
            vj_kl += R_0_5_1_3 * dm_ij_cache[tx+624];
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+640];
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+656];
            vj_kl += R_0_5_2_2 * dm_ij_cache[tx+672];
            vj_kl += R_0_5_3_0 * dm_ij_cache[tx+688];
            vj_kl += R_0_5_3_1 * dm_ij_cache[tx+704];
            vj_kl += R_0_5_4_0 * dm_ij_cache[tx+720];
            vj_kl += R_0_6_1_0 * dm_ij_cache[tx+736];
            vj_kl += R_0_6_1_1 * dm_ij_cache[tx+752];
            vj_kl += R_0_6_1_2 * dm_ij_cache[tx+768];
            vj_kl += R_0_6_2_0 * dm_ij_cache[tx+784];
            vj_kl += R_0_6_2_1 * dm_ij_cache[tx+800];
            vj_kl += R_0_6_3_0 * dm_ij_cache[tx+816];
            vj_kl += R_0_7_1_0 * dm_ij_cache[tx+832];
            vj_kl += R_0_7_1_1 * dm_ij_cache[tx+848];
            vj_kl += R_0_7_2_0 * dm_ij_cache[tx+864];
            double R_7_1_1_0 = xpq * R_8_0_1_0;
            double R_6_2_1_0 = xpq * R_7_1_1_0 + 1 * R_7_0_1_0;
            double R_5_3_1_0 = xpq * R_6_2_1_0 + 2 * R_6_1_1_0;
            double R_4_4_1_0 = xpq * R_5_3_1_0 + 3 * R_5_2_1_0;
            double R_3_5_1_0 = xpq * R_4_4_1_0 + 4 * R_4_3_1_0;
            double R_2_6_1_0 = xpq * R_3_5_1_0 + 5 * R_3_4_1_0;
            double R_1_7_1_0 = xpq * R_2_6_1_0 + 6 * R_2_5_1_0;
            double R_0_8_1_0 = xpq * R_1_7_1_0 + 7 * R_1_6_1_0;
            vj_kl += R_0_8_1_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3168] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_4_0_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_4_0_5 * dm_ij_cache[tx+80];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+96];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+144];
            vj_kl += R_0_4_1_4 * dm_ij_cache[tx+160];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+176];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+192];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_4_2_3 * dm_ij_cache[tx+224];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+240];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+256];
            vj_kl += R_0_4_3_2 * dm_ij_cache[tx+272];
            vj_kl += R_0_4_4_0 * dm_ij_cache[tx+288];
            vj_kl += R_0_4_4_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_4_5_0 * dm_ij_cache[tx+320];
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+336];
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_5_0_3 * dm_ij_cache[tx+384];
            vj_kl += R_0_5_0_4 * dm_ij_cache[tx+400];
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+416];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+432];
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+448];
            vj_kl += R_0_5_1_3 * dm_ij_cache[tx+464];
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+480];
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+496];
            vj_kl += R_0_5_2_2 * dm_ij_cache[tx+512];
            vj_kl += R_0_5_3_0 * dm_ij_cache[tx+528];
            vj_kl += R_0_5_3_1 * dm_ij_cache[tx+544];
            vj_kl += R_0_5_4_0 * dm_ij_cache[tx+560];
            vj_kl += R_0_6_0_0 * dm_ij_cache[tx+576];
            vj_kl += R_0_6_0_1 * dm_ij_cache[tx+592];
            vj_kl += R_0_6_0_2 * dm_ij_cache[tx+608];
            vj_kl += R_0_6_0_3 * dm_ij_cache[tx+624];
            vj_kl += R_0_6_1_0 * dm_ij_cache[tx+640];
            vj_kl += R_0_6_1_1 * dm_ij_cache[tx+656];
            vj_kl += R_0_6_1_2 * dm_ij_cache[tx+672];
            vj_kl += R_0_6_2_0 * dm_ij_cache[tx+688];
            vj_kl += R_0_6_2_1 * dm_ij_cache[tx+704];
            vj_kl += R_0_6_3_0 * dm_ij_cache[tx+720];
            vj_kl += R_0_7_0_0 * dm_ij_cache[tx+736];
            vj_kl += R_0_7_0_1 * dm_ij_cache[tx+752];
            vj_kl += R_0_7_0_2 * dm_ij_cache[tx+768];
            vj_kl += R_0_7_1_0 * dm_ij_cache[tx+784];
            vj_kl += R_0_7_1_1 * dm_ij_cache[tx+800];
            vj_kl += R_0_7_2_0 * dm_ij_cache[tx+816];
            vj_kl += R_0_8_0_0 * dm_ij_cache[tx+832];
            vj_kl += R_0_8_0_1 * dm_ij_cache[tx+848];
            vj_kl += R_0_8_1_0 * dm_ij_cache[tx+864];
            double R_8_1_0_0 = xpq * gamma_inc[sq_id+9*256];
            double R_7_2_0_0 = xpq * R_8_1_0_0 + 1 * gamma_inc[sq_id+8*256];
            double R_6_3_0_0 = xpq * R_7_2_0_0 + 2 * R_7_1_0_0;
            double R_5_4_0_0 = xpq * R_6_3_0_0 + 3 * R_6_2_0_0;
            double R_4_5_0_0 = xpq * R_5_4_0_0 + 4 * R_5_3_0_0;
            double R_3_6_0_0 = xpq * R_4_5_0_0 + 5 * R_4_4_0_0;
            double R_2_7_0_0 = xpq * R_3_6_0_0 + 6 * R_3_5_0_0;
            double R_1_8_0_0 = xpq * R_2_7_0_0 + 7 * R_2_6_0_0;
            double R_0_9_0_0 = xpq * R_1_8_0_0 + 8 * R_1_7_0_0;
            vj_kl += R_0_9_0_0 * dm_ij_cache[tx+880];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+3264] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_1 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_1_0 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_0_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_2 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_0_0_5 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_0_6 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_0_0_6 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_0_7 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_0_1_6 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_1_0_6 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_5 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_0_0_6 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_0_0_7 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_0_8 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_6 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_0_1_7 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_2_6 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_3_5 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_4_4 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_0_6 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_1_0_7 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_1_6 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_0_6 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_3_0_5 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_4_0_4 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+64] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_6 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_0_0_7 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_0_0_8 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_0_9 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_0_1_6 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_7 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_0_1_8 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_0_2_6 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_2_7 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_0_3_5 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_3_6 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_4_5 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_0_6 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_0_7 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_1_0_8 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_1_1_6 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_1_7 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_2_6 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_3_5 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_2_0_6 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_0_7 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_1_6 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_2_2_5 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_0_5 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_3_0_6 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_1_5 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_4_0_5 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+80] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_2_0 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+96] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+112] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_1_6 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+128] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_0_1_6 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_1_7 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_0_2_6 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_3_5 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_4_4 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_5_3 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_1_1_6 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+144] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_0_1_6 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_0_1_7 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_1_8 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_2_6 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_0_2_7 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_0_3_5 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_3_6 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_0_4_4 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_4_5 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_5_4 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_1_6 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_1_1_7 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_2_6 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_3_5 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_4_4 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_1_6 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_2_5 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_2_3_4 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_3_1_5 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_2_4 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_4_1_4 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+160] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_0_5_0 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_6_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+176] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_6_1 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+192] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_2_6 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_0_3_5 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_4_4 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_5_3 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_6_2 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+208] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_0_2_6 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_2_7 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_3_5 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_0_3_6 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_0_4_4 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_4_5 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_0_5_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_5_4 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_6_3 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_1_2_6 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_3_5 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_4_4 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_5_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_2_5 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_3_4 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_2_4_3 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_3_2_4 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_3_3 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_4_2_3 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+224] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_0_6_0 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_6_1 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_7_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_6_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+240] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_3_5 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_0_4_4 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_5_3 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_0_6_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_6_2 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_7_1 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_6_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+256] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_0_3_5 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_3_6 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_4_4 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_0_4_5 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_0_5_3 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_5_4 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_0_6_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_6_3 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_7_2 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_1_3_5 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_4_4 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_5_3 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_6_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_3_4 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_4_3 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_2_5_2 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_3_3_3 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_4_2 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_4_3_2 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+272] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_4_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_5_0 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_0_5_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_6_0 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_0_6_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_6_2 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_0_7_0 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_7_1 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_8_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_6_0 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_6_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_7_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_2_6_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_5_0 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_4_4_0 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+288] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_0_4_4 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_4_5 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_5_3 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_0_5_4 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_6_1 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_0_6_2 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_6_3 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_0_7_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_7_2 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_8_1 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_1_4_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_5_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_6_1 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_6_2 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_7_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_4_3 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_5_2 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_2_6_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_3_4_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_5_1 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_4_4_1 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+304] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_0_5_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_5_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_0_6_0 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_0_6_1 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_6_2 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_0_6_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_0_7_0 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_0_7_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_0_7_2 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_0_8_0 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_8_1 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_0_9_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_1_5_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_6_0 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_1_6_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_1_6_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_7_0 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_1_7_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_1_8_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_2_5_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_2_6_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_2_6_1 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_2_7_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_3_5_0 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_3_5_1 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_3_6_0 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_4_5_0 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+320] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_2_0_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+336] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+352] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_0_6 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+368] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_1_0_6 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_0_7 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_1_1_6 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_2_0_6 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_3_0_5 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_4_0_4 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_5_0_3 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+384] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_1_0_6 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_1_0_7 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_0_8 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_1_6 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_1_1_7 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_2_6 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_3_5 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_1_4_4 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_0_6 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_2_0_7 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_1_6 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_2_5 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_2_3_4 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_3_0_5 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_3_0_6 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_1_5 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_3_2_4 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_0_4 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_4_0_5 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_1_4 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_5_0_4 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+400] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+416] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+432] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_1_6 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+448] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_1_1_6 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_1_7 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_1_2_6 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_3_5 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_4_4 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_1_5_3 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_2_1_6 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_2_5 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_3_4 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_2_4_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_3_1_5 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_2_4 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_3_3_3 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_4_1_4 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_2_3 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_5_1_3 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+464] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_1_6_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+480] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_1_6_1 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+496] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_2_6 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_1_3_5 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_4_4 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_5_3 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_1_6_2 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_2_2_5 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_3_4 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_4_3 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_2_5_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_3_2_4 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_3_3 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_3_4_2 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_4_2_3 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_3_2 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_5_2_2 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+512] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_1_6_0 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_6_1 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_1_7_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_2_6_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_3_5_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_4_0 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_5_3_0 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+528] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_3_5 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_1_4_4 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_5_3 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_1_6_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_6_2 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_1_7_1 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_2_3_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_4_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_5_2 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_2_6_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_3_3_3 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_4_2 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_3_5_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_4_3_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_4_1 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_5_3_1 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+544] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_4_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_1_5_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_1_6_0 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_1_6_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_1_6_2 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_1_7_0 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_7_1 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_1_8_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_2_4_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_2_5_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_6_0 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_2_6_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_2_7_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_3_4_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_5_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_3_5_1 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_3_6_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_4_4_0 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_4_4_1 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_4_5_0 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_5_4_0 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+560] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_5_0_0 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_6_0_0 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+576] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_6_0_1 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+592] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_2_0_6 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_3_0_5 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_4_0_4 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_5_0_3 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_6_0_2 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+608] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_2_0_6 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_2_0_7 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_2_1_6 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_2_2_5 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_3_4 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_2_4_3 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_3_0_5 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_3_0_6 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_3_1_5 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_3_2_4 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_3_3_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_4_0_4 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_4_0_5 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_1_4 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_4_2_3 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_5_0_3 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_5_0_4 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_5_1_3 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_6_0_3 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+624] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_6_1_0 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+640] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_6_1_1 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+656] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_2_1_6 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_2_2_5 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_2_3_4 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_4_3 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_2_5_2 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_3_1_5 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_3_2_4 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_3_3_3 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_3_4_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_4_1_4 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_2_3 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_4_3_2 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_5_1_3 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_5_2_2 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_6_1_2 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+672] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_2_6_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_3_5_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_4_4_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_5_3_0 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_6_2_0 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+688] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_2_2_5 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_2_3_4 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_2_4_3 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_5_2 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_2_6_1 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_3_2_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_3_3_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_3_4_2 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_3_5_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_4_2_3 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_3_2 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_4_4_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_5_2_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_5_3_1 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_6_2_1 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+704] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_2_3_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_2_4_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_2_5_2 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_2_6_0 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_6_1 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_2_7_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_3_3_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_3_4_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_3_5_0 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_3_5_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_3_6_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_4_3_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_4_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_4_4_1 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_4_5_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_5_3_0 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_5_3_1 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_5_4_0 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_6_3_0 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+720] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_6_0_0 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_6_0_1 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_6_1_0 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_7_0_0 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+736] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_3_0_5 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_4_0_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_5_0_3 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_6_0_1 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_6_0_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_6_1_1 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_7_0_1 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+752] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_3_0_5 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_3_0_6 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_3_1_5 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_3_2_4 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_3_3_3 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_3_4_2 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_4_0_4 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_4_0_5 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_4_1_4 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_4_2_3 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_4_3_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_5_0_3 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_5_0_4 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_5_1_3 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_5_2_2 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_6_0_2 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_6_0_3 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_6_1_2 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_7_0_2 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+768] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_3_5_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_4_4_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_5_3_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_6_1_0 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_6_1_1 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_6_2_0 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_7_1_0 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+784] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_3_1_5 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_3_2_4 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_3_3_3 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_3_4_2 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_3_5_1 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_4_1_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_4_2_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_4_3_2 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_4_4_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_5_1_3 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_5_2_2 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_5_3_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_6_1_1 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_6_1_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_6_2_1 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_7_1_1 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+800] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_3_2_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_3_3_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_3_4_2 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_3_5_0 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_3_5_1 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_3_6_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_4_2_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_4_3_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_4_4_0 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_4_4_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_4_5_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_5_2_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_5_3_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_5_3_1 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_5_4_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_6_2_0 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_6_2_1 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_6_3_0 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_7_2_0 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+816] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_4_0_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_4_4_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_5_0_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_5_0_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_5_3_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_6_0_0 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_6_0_1 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_6_0_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_6_1_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_6_1_1 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_6_2_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_7_0_0 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_7_0_1 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_7_1_0 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_8_0_0 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+832] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_4_0_4 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_4_0_5 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_4_1_4 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_4_2_3 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_4_3_2 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_4_4_1 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_5_0_3 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_5_0_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_5_1_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_5_2_2 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_5_3_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_6_0_1 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_6_0_2 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_6_0_3 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_6_1_1 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_6_1_2 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_6_2_1 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_7_0_1 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_7_0_2 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_7_1_1 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_8_0_1 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+848] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_4_1_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_4_2_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_4_3_2 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_4_4_0 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_4_4_1 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_4_5_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_5_1_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_5_2_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_5_3_0 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_5_3_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_5_4_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_6_1_0 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_6_1_1 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_6_1_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_6_2_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_6_2_1 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_6_3_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_7_1_0 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_7_1_1 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_7_2_0 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_8_1_0 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+864] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+96];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+192];
            vj_ij -= R_0_5_0_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_5_0_4 * dm_kl_cache[sq_kl+384];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+480];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+672];
            vj_ij += R_0_5_1_3 * dm_kl_cache[sq_kl+768];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+864];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+960];
            vj_ij += R_0_5_2_2 * dm_kl_cache[sq_kl+1056];
            vj_ij -= R_0_5_3_0 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_5_3_1 * dm_kl_cache[sq_kl+1248];
            vj_ij += R_0_5_4_0 * dm_kl_cache[sq_kl+1344];
            vj_ij -= R_0_6_0_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_6_0_1 * dm_kl_cache[sq_kl+1536];
            vj_ij -= R_0_6_0_2 * dm_kl_cache[sq_kl+1632];
            vj_ij += R_0_6_0_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_6_1_0 * dm_kl_cache[sq_kl+1824];
            vj_ij -= R_0_6_1_1 * dm_kl_cache[sq_kl+1920];
            vj_ij += R_0_6_1_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_6_2_0 * dm_kl_cache[sq_kl+2112];
            vj_ij += R_0_6_2_1 * dm_kl_cache[sq_kl+2208];
            vj_ij += R_0_6_3_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_7_0_0 * dm_kl_cache[sq_kl+2400];
            vj_ij -= R_0_7_0_1 * dm_kl_cache[sq_kl+2496];
            vj_ij += R_0_7_0_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_7_1_0 * dm_kl_cache[sq_kl+2688];
            vj_ij += R_0_7_1_1 * dm_kl_cache[sq_kl+2784];
            vj_ij += R_0_7_2_0 * dm_kl_cache[sq_kl+2880];
            vj_ij -= R_0_8_0_0 * dm_kl_cache[sq_kl+2976];
            vj_ij += R_0_8_0_1 * dm_kl_cache[sq_kl+3072];
            vj_ij += R_0_8_1_0 * dm_kl_cache[sq_kl+3168];
            vj_ij += R_0_9_0_0 * dm_kl_cache[sq_kl+3264];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+880] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 56; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 210; n += 16) {
        int i = n / 6;
        int tile = n % 6;
        int task_kl = blockIdx.y * 96 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*96]);
        }
    }
}

// TILEX=18, TILEY=32,
__global__
void md_j_6_0(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 288;
    int task_kl0 = blockIdx.y * 512;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 1792;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 2048;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 1344;
    double *dm_ij_cache = vj_kl_cache + 512;
    double *dm_kl_cache = dm_ij_cache + 1344;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 2112; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 512; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 512; n += 256) {
        int task_kl = blockIdx.y * 512 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+512] = ykl;
            Rq_cache[n+1024] = zkl;
            Rq_cache[n+1536] = akl;
        }
    }

    for (int n = tx; n < 32; n += 16) {
        int i = n / 32;
        int tile = n % 32;
        int task_kl = blockIdx.y * 512 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*512] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 18; ++batch_ij) {
        int task_ij0 = blockIdx.x * 288 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 84; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 32; ++batch_kl) {
            int task_kl0 = blockIdx.y * 512 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+512];
            double zkl = Rq_cache[sq_kl+1024];
            double akl = Rq_cache[sq_kl+1536];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 6);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 6; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+32];
            double R_2_0_0_1 = zpq * gamma_inc[sq_id+3*256];
            double R_1_0_0_2 = zpq * R_2_0_0_1 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_0_3 = zpq * R_1_0_0_2 + 2 * R_1_0_0_1;
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+48];
            double R_3_0_0_1 = zpq * gamma_inc[sq_id+4*256];
            double R_2_0_0_2 = zpq * R_3_0_0_1 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_0_3 = zpq * R_2_0_0_2 + 2 * R_2_0_0_1;
            double R_0_0_0_4 = zpq * R_1_0_0_3 + 3 * R_1_0_0_2;
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+64];
            double R_4_0_0_1 = zpq * gamma_inc[sq_id+5*256];
            double R_3_0_0_2 = zpq * R_4_0_0_1 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_0_3 = zpq * R_3_0_0_2 + 2 * R_3_0_0_1;
            double R_1_0_0_4 = zpq * R_2_0_0_3 + 3 * R_2_0_0_2;
            double R_0_0_0_5 = zpq * R_1_0_0_4 + 4 * R_1_0_0_3;
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+80];
            double R_5_0_0_1 = zpq * gamma_inc[sq_id+6*256];
            double R_4_0_0_2 = zpq * R_5_0_0_1 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_0_3 = zpq * R_4_0_0_2 + 2 * R_4_0_0_1;
            double R_2_0_0_4 = zpq * R_3_0_0_3 + 3 * R_3_0_0_2;
            double R_1_0_0_5 = zpq * R_2_0_0_4 + 4 * R_2_0_0_3;
            double R_0_0_0_6 = zpq * R_1_0_0_5 + 5 * R_1_0_0_4;
            vj_kl += R_0_0_0_6 * dm_ij_cache[tx+96];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+112];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+128];
            double R_0_0_1_2 = ypq * R_1_0_0_2;
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+144];
            double R_0_0_1_3 = ypq * R_1_0_0_3;
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+160];
            double R_0_0_1_4 = ypq * R_1_0_0_4;
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+176];
            double R_0_0_1_5 = ypq * R_1_0_0_5;
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+192];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+208];
            double R_1_0_1_1 = ypq * R_2_0_0_1;
            double R_0_0_2_1 = ypq * R_1_0_1_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+224];
            double R_1_0_1_2 = ypq * R_2_0_0_2;
            double R_0_0_2_2 = ypq * R_1_0_1_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+240];
            double R_1_0_1_3 = ypq * R_2_0_0_3;
            double R_0_0_2_3 = ypq * R_1_0_1_3 + 1 * R_1_0_0_3;
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+256];
            double R_1_0_1_4 = ypq * R_2_0_0_4;
            double R_0_0_2_4 = ypq * R_1_0_1_4 + 1 * R_1_0_0_4;
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+272];
            double R_2_0_1_0 = ypq * gamma_inc[sq_id+3*256];
            double R_1_0_2_0 = ypq * R_2_0_1_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_3_0 = ypq * R_1_0_2_0 + 2 * R_1_0_1_0;
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+288];
            double R_2_0_1_1 = ypq * R_3_0_0_1;
            double R_1_0_2_1 = ypq * R_2_0_1_1 + 1 * R_2_0_0_1;
            double R_0_0_3_1 = ypq * R_1_0_2_1 + 2 * R_1_0_1_1;
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+304];
            double R_2_0_1_2 = ypq * R_3_0_0_2;
            double R_1_0_2_2 = ypq * R_2_0_1_2 + 1 * R_2_0_0_2;
            double R_0_0_3_2 = ypq * R_1_0_2_2 + 2 * R_1_0_1_2;
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+320];
            double R_2_0_1_3 = ypq * R_3_0_0_3;
            double R_1_0_2_3 = ypq * R_2_0_1_3 + 1 * R_2_0_0_3;
            double R_0_0_3_3 = ypq * R_1_0_2_3 + 2 * R_1_0_1_3;
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+336];
            double R_3_0_1_0 = ypq * gamma_inc[sq_id+4*256];
            double R_2_0_2_0 = ypq * R_3_0_1_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_3_0 = ypq * R_2_0_2_0 + 2 * R_2_0_1_0;
            double R_0_0_4_0 = ypq * R_1_0_3_0 + 3 * R_1_0_2_0;
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+352];
            double R_3_0_1_1 = ypq * R_4_0_0_1;
            double R_2_0_2_1 = ypq * R_3_0_1_1 + 1 * R_3_0_0_1;
            double R_1_0_3_1 = ypq * R_2_0_2_1 + 2 * R_2_0_1_1;
            double R_0_0_4_1 = ypq * R_1_0_3_1 + 3 * R_1_0_2_1;
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+368];
            double R_3_0_1_2 = ypq * R_4_0_0_2;
            double R_2_0_2_2 = ypq * R_3_0_1_2 + 1 * R_3_0_0_2;
            double R_1_0_3_2 = ypq * R_2_0_2_2 + 2 * R_2_0_1_2;
            double R_0_0_4_2 = ypq * R_1_0_3_2 + 3 * R_1_0_2_2;
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+384];
            double R_4_0_1_0 = ypq * gamma_inc[sq_id+5*256];
            double R_3_0_2_0 = ypq * R_4_0_1_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_3_0 = ypq * R_3_0_2_0 + 2 * R_3_0_1_0;
            double R_1_0_4_0 = ypq * R_2_0_3_0 + 3 * R_2_0_2_0;
            double R_0_0_5_0 = ypq * R_1_0_4_0 + 4 * R_1_0_3_0;
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+400];
            double R_4_0_1_1 = ypq * R_5_0_0_1;
            double R_3_0_2_1 = ypq * R_4_0_1_1 + 1 * R_4_0_0_1;
            double R_2_0_3_1 = ypq * R_3_0_2_1 + 2 * R_3_0_1_1;
            double R_1_0_4_1 = ypq * R_2_0_3_1 + 3 * R_2_0_2_1;
            double R_0_0_5_1 = ypq * R_1_0_4_1 + 4 * R_1_0_3_1;
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+416];
            double R_5_0_1_0 = ypq * gamma_inc[sq_id+6*256];
            double R_4_0_2_0 = ypq * R_5_0_1_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_3_0 = ypq * R_4_0_2_0 + 2 * R_4_0_1_0;
            double R_2_0_4_0 = ypq * R_3_0_3_0 + 3 * R_3_0_2_0;
            double R_1_0_5_0 = ypq * R_2_0_4_0 + 4 * R_2_0_3_0;
            double R_0_0_6_0 = ypq * R_1_0_5_0 + 5 * R_1_0_4_0;
            vj_kl += R_0_0_6_0 * dm_ij_cache[tx+432];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+448];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+464];
            double R_0_1_0_2 = xpq * R_1_0_0_2;
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+480];
            double R_0_1_0_3 = xpq * R_1_0_0_3;
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+496];
            double R_0_1_0_4 = xpq * R_1_0_0_4;
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+512];
            double R_0_1_0_5 = xpq * R_1_0_0_5;
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+528];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+544];
            double R_0_1_1_1 = xpq * R_1_0_1_1;
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+560];
            double R_0_1_1_2 = xpq * R_1_0_1_2;
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+576];
            double R_0_1_1_3 = xpq * R_1_0_1_3;
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+592];
            double R_0_1_1_4 = xpq * R_1_0_1_4;
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+608];
            double R_0_1_2_0 = xpq * R_1_0_2_0;
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+624];
            double R_0_1_2_1 = xpq * R_1_0_2_1;
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+640];
            double R_0_1_2_2 = xpq * R_1_0_2_2;
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+656];
            double R_0_1_2_3 = xpq * R_1_0_2_3;
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+672];
            double R_0_1_3_0 = xpq * R_1_0_3_0;
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+688];
            double R_0_1_3_1 = xpq * R_1_0_3_1;
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+704];
            double R_0_1_3_2 = xpq * R_1_0_3_2;
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+720];
            double R_0_1_4_0 = xpq * R_1_0_4_0;
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+736];
            double R_0_1_4_1 = xpq * R_1_0_4_1;
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+752];
            double R_0_1_5_0 = xpq * R_1_0_5_0;
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+768];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+784];
            double R_1_1_0_1 = xpq * R_2_0_0_1;
            double R_0_2_0_1 = xpq * R_1_1_0_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+800];
            double R_1_1_0_2 = xpq * R_2_0_0_2;
            double R_0_2_0_2 = xpq * R_1_1_0_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+816];
            double R_1_1_0_3 = xpq * R_2_0_0_3;
            double R_0_2_0_3 = xpq * R_1_1_0_3 + 1 * R_1_0_0_3;
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+832];
            double R_1_1_0_4 = xpq * R_2_0_0_4;
            double R_0_2_0_4 = xpq * R_1_1_0_4 + 1 * R_1_0_0_4;
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+848];
            double R_1_1_1_0 = xpq * R_2_0_1_0;
            double R_0_2_1_0 = xpq * R_1_1_1_0 + 1 * R_1_0_1_0;
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+864];
            double R_1_1_1_1 = xpq * R_2_0_1_1;
            double R_0_2_1_1 = xpq * R_1_1_1_1 + 1 * R_1_0_1_1;
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+880];
            double R_1_1_1_2 = xpq * R_2_0_1_2;
            double R_0_2_1_2 = xpq * R_1_1_1_2 + 1 * R_1_0_1_2;
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+896];
            double R_1_1_1_3 = xpq * R_2_0_1_3;
            double R_0_2_1_3 = xpq * R_1_1_1_3 + 1 * R_1_0_1_3;
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+912];
            double R_1_1_2_0 = xpq * R_2_0_2_0;
            double R_0_2_2_0 = xpq * R_1_1_2_0 + 1 * R_1_0_2_0;
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+928];
            double R_1_1_2_1 = xpq * R_2_0_2_1;
            double R_0_2_2_1 = xpq * R_1_1_2_1 + 1 * R_1_0_2_1;
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+944];
            double R_1_1_2_2 = xpq * R_2_0_2_2;
            double R_0_2_2_2 = xpq * R_1_1_2_2 + 1 * R_1_0_2_2;
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+960];
            double R_1_1_3_0 = xpq * R_2_0_3_0;
            double R_0_2_3_0 = xpq * R_1_1_3_0 + 1 * R_1_0_3_0;
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+976];
            double R_1_1_3_1 = xpq * R_2_0_3_1;
            double R_0_2_3_1 = xpq * R_1_1_3_1 + 1 * R_1_0_3_1;
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+992];
            double R_1_1_4_0 = xpq * R_2_0_4_0;
            double R_0_2_4_0 = xpq * R_1_1_4_0 + 1 * R_1_0_4_0;
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+1008];
            double R_2_1_0_0 = xpq * gamma_inc[sq_id+3*256];
            double R_1_2_0_0 = xpq * R_2_1_0_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_3_0_0 = xpq * R_1_2_0_0 + 2 * R_1_1_0_0;
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+1024];
            double R_2_1_0_1 = xpq * R_3_0_0_1;
            double R_1_2_0_1 = xpq * R_2_1_0_1 + 1 * R_2_0_0_1;
            double R_0_3_0_1 = xpq * R_1_2_0_1 + 2 * R_1_1_0_1;
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+1040];
            double R_2_1_0_2 = xpq * R_3_0_0_2;
            double R_1_2_0_2 = xpq * R_2_1_0_2 + 1 * R_2_0_0_2;
            double R_0_3_0_2 = xpq * R_1_2_0_2 + 2 * R_1_1_0_2;
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+1056];
            double R_2_1_0_3 = xpq * R_3_0_0_3;
            double R_1_2_0_3 = xpq * R_2_1_0_3 + 1 * R_2_0_0_3;
            double R_0_3_0_3 = xpq * R_1_2_0_3 + 2 * R_1_1_0_3;
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+1072];
            double R_2_1_1_0 = xpq * R_3_0_1_0;
            double R_1_2_1_0 = xpq * R_2_1_1_0 + 1 * R_2_0_1_0;
            double R_0_3_1_0 = xpq * R_1_2_1_0 + 2 * R_1_1_1_0;
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+1088];
            double R_2_1_1_1 = xpq * R_3_0_1_1;
            double R_1_2_1_1 = xpq * R_2_1_1_1 + 1 * R_2_0_1_1;
            double R_0_3_1_1 = xpq * R_1_2_1_1 + 2 * R_1_1_1_1;
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+1104];
            double R_2_1_1_2 = xpq * R_3_0_1_2;
            double R_1_2_1_2 = xpq * R_2_1_1_2 + 1 * R_2_0_1_2;
            double R_0_3_1_2 = xpq * R_1_2_1_2 + 2 * R_1_1_1_2;
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+1120];
            double R_2_1_2_0 = xpq * R_3_0_2_0;
            double R_1_2_2_0 = xpq * R_2_1_2_0 + 1 * R_2_0_2_0;
            double R_0_3_2_0 = xpq * R_1_2_2_0 + 2 * R_1_1_2_0;
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+1136];
            double R_2_1_2_1 = xpq * R_3_0_2_1;
            double R_1_2_2_1 = xpq * R_2_1_2_1 + 1 * R_2_0_2_1;
            double R_0_3_2_1 = xpq * R_1_2_2_1 + 2 * R_1_1_2_1;
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+1152];
            double R_2_1_3_0 = xpq * R_3_0_3_0;
            double R_1_2_3_0 = xpq * R_2_1_3_0 + 1 * R_2_0_3_0;
            double R_0_3_3_0 = xpq * R_1_2_3_0 + 2 * R_1_1_3_0;
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+1168];
            double R_3_1_0_0 = xpq * gamma_inc[sq_id+4*256];
            double R_2_2_0_0 = xpq * R_3_1_0_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_3_0_0 = xpq * R_2_2_0_0 + 2 * R_2_1_0_0;
            double R_0_4_0_0 = xpq * R_1_3_0_0 + 3 * R_1_2_0_0;
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+1184];
            double R_3_1_0_1 = xpq * R_4_0_0_1;
            double R_2_2_0_1 = xpq * R_3_1_0_1 + 1 * R_3_0_0_1;
            double R_1_3_0_1 = xpq * R_2_2_0_1 + 2 * R_2_1_0_1;
            double R_0_4_0_1 = xpq * R_1_3_0_1 + 3 * R_1_2_0_1;
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+1200];
            double R_3_1_0_2 = xpq * R_4_0_0_2;
            double R_2_2_0_2 = xpq * R_3_1_0_2 + 1 * R_3_0_0_2;
            double R_1_3_0_2 = xpq * R_2_2_0_2 + 2 * R_2_1_0_2;
            double R_0_4_0_2 = xpq * R_1_3_0_2 + 3 * R_1_2_0_2;
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+1216];
            double R_3_1_1_0 = xpq * R_4_0_1_0;
            double R_2_2_1_0 = xpq * R_3_1_1_0 + 1 * R_3_0_1_0;
            double R_1_3_1_0 = xpq * R_2_2_1_0 + 2 * R_2_1_1_0;
            double R_0_4_1_0 = xpq * R_1_3_1_0 + 3 * R_1_2_1_0;
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+1232];
            double R_3_1_1_1 = xpq * R_4_0_1_1;
            double R_2_2_1_1 = xpq * R_3_1_1_1 + 1 * R_3_0_1_1;
            double R_1_3_1_1 = xpq * R_2_2_1_1 + 2 * R_2_1_1_1;
            double R_0_4_1_1 = xpq * R_1_3_1_1 + 3 * R_1_2_1_1;
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+1248];
            double R_3_1_2_0 = xpq * R_4_0_2_0;
            double R_2_2_2_0 = xpq * R_3_1_2_0 + 1 * R_3_0_2_0;
            double R_1_3_2_0 = xpq * R_2_2_2_0 + 2 * R_2_1_2_0;
            double R_0_4_2_0 = xpq * R_1_3_2_0 + 3 * R_1_2_2_0;
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+1264];
            double R_4_1_0_0 = xpq * gamma_inc[sq_id+5*256];
            double R_3_2_0_0 = xpq * R_4_1_0_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_3_0_0 = xpq * R_3_2_0_0 + 2 * R_3_1_0_0;
            double R_1_4_0_0 = xpq * R_2_3_0_0 + 3 * R_2_2_0_0;
            double R_0_5_0_0 = xpq * R_1_4_0_0 + 4 * R_1_3_0_0;
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+1280];
            double R_4_1_0_1 = xpq * R_5_0_0_1;
            double R_3_2_0_1 = xpq * R_4_1_0_1 + 1 * R_4_0_0_1;
            double R_2_3_0_1 = xpq * R_3_2_0_1 + 2 * R_3_1_0_1;
            double R_1_4_0_1 = xpq * R_2_3_0_1 + 3 * R_2_2_0_1;
            double R_0_5_0_1 = xpq * R_1_4_0_1 + 4 * R_1_3_0_1;
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+1296];
            double R_4_1_1_0 = xpq * R_5_0_1_0;
            double R_3_2_1_0 = xpq * R_4_1_1_0 + 1 * R_4_0_1_0;
            double R_2_3_1_0 = xpq * R_3_2_1_0 + 2 * R_3_1_1_0;
            double R_1_4_1_0 = xpq * R_2_3_1_0 + 3 * R_2_2_1_0;
            double R_0_5_1_0 = xpq * R_1_4_1_0 + 4 * R_1_3_1_0;
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+1312];
            double R_5_1_0_0 = xpq * gamma_inc[sq_id+6*256];
            double R_4_2_0_0 = xpq * R_5_1_0_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_3_0_0 = xpq * R_4_2_0_0 + 2 * R_4_1_0_0;
            double R_2_4_0_0 = xpq * R_3_3_0_0 + 3 * R_3_2_0_0;
            double R_1_5_0_0 = xpq * R_2_4_0_0 + 4 * R_2_3_0_0;
            double R_0_6_0_0 = xpq * R_1_5_0_0 + 5 * R_1_4_0_0;
            vj_kl += R_0_6_0_0 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+64] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+80] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_6 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+96] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+112] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+128] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+144] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+160] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+176] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+192] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+208] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+224] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+240] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+256] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+272] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+288] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+304] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+320] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+336] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+352] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+368] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+384] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+400] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+416] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_6_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+432] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+448] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+464] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+480] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+496] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+512] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+528] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+544] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+560] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+576] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+592] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+608] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+624] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+640] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+656] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+672] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+688] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+704] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+720] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+736] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+752] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+768] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+784] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+800] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+816] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+832] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+848] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+864] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+880] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+896] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+912] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+928] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+944] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+960] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+976] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+992] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1008] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1024] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1040] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1056] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1072] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1088] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1104] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1120] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1136] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1152] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1168] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1184] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1200] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1216] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1232] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1248] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1264] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1280] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1296] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1312] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_6_0_0 * dm_kl_cache[sq_kl+0];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1328] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 84; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 32; n += 16) {
        int i = n / 32;
        int tile = n % 32;
        int task_kl = blockIdx.y * 512 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*512]);
        }
    }
}

// TILEX=18, TILEY=32,
__global__
void md_j_6_1(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 288;
    int task_kl0 = blockIdx.y * 512;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 2048;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 2048;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 1344;
    double *dm_ij_cache = vj_kl_cache + 2048;
    double *dm_kl_cache = dm_ij_cache + 1344;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 2112; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 2048; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 512; n += 256) {
        int task_kl = blockIdx.y * 512 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+512] = ykl;
            Rq_cache[n+1024] = zkl;
            Rq_cache[n+1536] = akl;
        }
    }

    for (int n = tx; n < 128; n += 16) {
        int i = n / 32;
        int tile = n % 32;
        int task_kl = blockIdx.y * 512 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*512] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 18; ++batch_ij) {
        int task_ij0 = blockIdx.x * 288 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 84; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 32; ++batch_kl) {
            int task_kl0 = blockIdx.y * 512 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+512];
            double zkl = Rq_cache[sq_kl+1024];
            double akl = Rq_cache[sq_kl+1536];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 7);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 7; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+32];
            double R_2_0_0_1 = zpq * gamma_inc[sq_id+3*256];
            double R_1_0_0_2 = zpq * R_2_0_0_1 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_0_3 = zpq * R_1_0_0_2 + 2 * R_1_0_0_1;
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+48];
            double R_3_0_0_1 = zpq * gamma_inc[sq_id+4*256];
            double R_2_0_0_2 = zpq * R_3_0_0_1 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_0_3 = zpq * R_2_0_0_2 + 2 * R_2_0_0_1;
            double R_0_0_0_4 = zpq * R_1_0_0_3 + 3 * R_1_0_0_2;
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+64];
            double R_4_0_0_1 = zpq * gamma_inc[sq_id+5*256];
            double R_3_0_0_2 = zpq * R_4_0_0_1 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_0_3 = zpq * R_3_0_0_2 + 2 * R_3_0_0_1;
            double R_1_0_0_4 = zpq * R_2_0_0_3 + 3 * R_2_0_0_2;
            double R_0_0_0_5 = zpq * R_1_0_0_4 + 4 * R_1_0_0_3;
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+80];
            double R_5_0_0_1 = zpq * gamma_inc[sq_id+6*256];
            double R_4_0_0_2 = zpq * R_5_0_0_1 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_0_3 = zpq * R_4_0_0_2 + 2 * R_4_0_0_1;
            double R_2_0_0_4 = zpq * R_3_0_0_3 + 3 * R_3_0_0_2;
            double R_1_0_0_5 = zpq * R_2_0_0_4 + 4 * R_2_0_0_3;
            double R_0_0_0_6 = zpq * R_1_0_0_5 + 5 * R_1_0_0_4;
            vj_kl += R_0_0_0_6 * dm_ij_cache[tx+96];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+112];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+128];
            double R_0_0_1_2 = ypq * R_1_0_0_2;
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+144];
            double R_0_0_1_3 = ypq * R_1_0_0_3;
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+160];
            double R_0_0_1_4 = ypq * R_1_0_0_4;
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+176];
            double R_0_0_1_5 = ypq * R_1_0_0_5;
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+192];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+208];
            double R_1_0_1_1 = ypq * R_2_0_0_1;
            double R_0_0_2_1 = ypq * R_1_0_1_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+224];
            double R_1_0_1_2 = ypq * R_2_0_0_2;
            double R_0_0_2_2 = ypq * R_1_0_1_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+240];
            double R_1_0_1_3 = ypq * R_2_0_0_3;
            double R_0_0_2_3 = ypq * R_1_0_1_3 + 1 * R_1_0_0_3;
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+256];
            double R_1_0_1_4 = ypq * R_2_0_0_4;
            double R_0_0_2_4 = ypq * R_1_0_1_4 + 1 * R_1_0_0_4;
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+272];
            double R_2_0_1_0 = ypq * gamma_inc[sq_id+3*256];
            double R_1_0_2_0 = ypq * R_2_0_1_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_3_0 = ypq * R_1_0_2_0 + 2 * R_1_0_1_0;
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+288];
            double R_2_0_1_1 = ypq * R_3_0_0_1;
            double R_1_0_2_1 = ypq * R_2_0_1_1 + 1 * R_2_0_0_1;
            double R_0_0_3_1 = ypq * R_1_0_2_1 + 2 * R_1_0_1_1;
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+304];
            double R_2_0_1_2 = ypq * R_3_0_0_2;
            double R_1_0_2_2 = ypq * R_2_0_1_2 + 1 * R_2_0_0_2;
            double R_0_0_3_2 = ypq * R_1_0_2_2 + 2 * R_1_0_1_2;
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+320];
            double R_2_0_1_3 = ypq * R_3_0_0_3;
            double R_1_0_2_3 = ypq * R_2_0_1_3 + 1 * R_2_0_0_3;
            double R_0_0_3_3 = ypq * R_1_0_2_3 + 2 * R_1_0_1_3;
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+336];
            double R_3_0_1_0 = ypq * gamma_inc[sq_id+4*256];
            double R_2_0_2_0 = ypq * R_3_0_1_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_3_0 = ypq * R_2_0_2_0 + 2 * R_2_0_1_0;
            double R_0_0_4_0 = ypq * R_1_0_3_0 + 3 * R_1_0_2_0;
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+352];
            double R_3_0_1_1 = ypq * R_4_0_0_1;
            double R_2_0_2_1 = ypq * R_3_0_1_1 + 1 * R_3_0_0_1;
            double R_1_0_3_1 = ypq * R_2_0_2_1 + 2 * R_2_0_1_1;
            double R_0_0_4_1 = ypq * R_1_0_3_1 + 3 * R_1_0_2_1;
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+368];
            double R_3_0_1_2 = ypq * R_4_0_0_2;
            double R_2_0_2_2 = ypq * R_3_0_1_2 + 1 * R_3_0_0_2;
            double R_1_0_3_2 = ypq * R_2_0_2_2 + 2 * R_2_0_1_2;
            double R_0_0_4_2 = ypq * R_1_0_3_2 + 3 * R_1_0_2_2;
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+384];
            double R_4_0_1_0 = ypq * gamma_inc[sq_id+5*256];
            double R_3_0_2_0 = ypq * R_4_0_1_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_3_0 = ypq * R_3_0_2_0 + 2 * R_3_0_1_0;
            double R_1_0_4_0 = ypq * R_2_0_3_0 + 3 * R_2_0_2_0;
            double R_0_0_5_0 = ypq * R_1_0_4_0 + 4 * R_1_0_3_0;
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+400];
            double R_4_0_1_1 = ypq * R_5_0_0_1;
            double R_3_0_2_1 = ypq * R_4_0_1_1 + 1 * R_4_0_0_1;
            double R_2_0_3_1 = ypq * R_3_0_2_1 + 2 * R_3_0_1_1;
            double R_1_0_4_1 = ypq * R_2_0_3_1 + 3 * R_2_0_2_1;
            double R_0_0_5_1 = ypq * R_1_0_4_1 + 4 * R_1_0_3_1;
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+416];
            double R_5_0_1_0 = ypq * gamma_inc[sq_id+6*256];
            double R_4_0_2_0 = ypq * R_5_0_1_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_3_0 = ypq * R_4_0_2_0 + 2 * R_4_0_1_0;
            double R_2_0_4_0 = ypq * R_3_0_3_0 + 3 * R_3_0_2_0;
            double R_1_0_5_0 = ypq * R_2_0_4_0 + 4 * R_2_0_3_0;
            double R_0_0_6_0 = ypq * R_1_0_5_0 + 5 * R_1_0_4_0;
            vj_kl += R_0_0_6_0 * dm_ij_cache[tx+432];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+448];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+464];
            double R_0_1_0_2 = xpq * R_1_0_0_2;
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+480];
            double R_0_1_0_3 = xpq * R_1_0_0_3;
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+496];
            double R_0_1_0_4 = xpq * R_1_0_0_4;
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+512];
            double R_0_1_0_5 = xpq * R_1_0_0_5;
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+528];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+544];
            double R_0_1_1_1 = xpq * R_1_0_1_1;
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+560];
            double R_0_1_1_2 = xpq * R_1_0_1_2;
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+576];
            double R_0_1_1_3 = xpq * R_1_0_1_3;
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+592];
            double R_0_1_1_4 = xpq * R_1_0_1_4;
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+608];
            double R_0_1_2_0 = xpq * R_1_0_2_0;
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+624];
            double R_0_1_2_1 = xpq * R_1_0_2_1;
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+640];
            double R_0_1_2_2 = xpq * R_1_0_2_2;
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+656];
            double R_0_1_2_3 = xpq * R_1_0_2_3;
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+672];
            double R_0_1_3_0 = xpq * R_1_0_3_0;
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+688];
            double R_0_1_3_1 = xpq * R_1_0_3_1;
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+704];
            double R_0_1_3_2 = xpq * R_1_0_3_2;
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+720];
            double R_0_1_4_0 = xpq * R_1_0_4_0;
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+736];
            double R_0_1_4_1 = xpq * R_1_0_4_1;
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+752];
            double R_0_1_5_0 = xpq * R_1_0_5_0;
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+768];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+784];
            double R_1_1_0_1 = xpq * R_2_0_0_1;
            double R_0_2_0_1 = xpq * R_1_1_0_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+800];
            double R_1_1_0_2 = xpq * R_2_0_0_2;
            double R_0_2_0_2 = xpq * R_1_1_0_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+816];
            double R_1_1_0_3 = xpq * R_2_0_0_3;
            double R_0_2_0_3 = xpq * R_1_1_0_3 + 1 * R_1_0_0_3;
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+832];
            double R_1_1_0_4 = xpq * R_2_0_0_4;
            double R_0_2_0_4 = xpq * R_1_1_0_4 + 1 * R_1_0_0_4;
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+848];
            double R_1_1_1_0 = xpq * R_2_0_1_0;
            double R_0_2_1_0 = xpq * R_1_1_1_0 + 1 * R_1_0_1_0;
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+864];
            double R_1_1_1_1 = xpq * R_2_0_1_1;
            double R_0_2_1_1 = xpq * R_1_1_1_1 + 1 * R_1_0_1_1;
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+880];
            double R_1_1_1_2 = xpq * R_2_0_1_2;
            double R_0_2_1_2 = xpq * R_1_1_1_2 + 1 * R_1_0_1_2;
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+896];
            double R_1_1_1_3 = xpq * R_2_0_1_3;
            double R_0_2_1_3 = xpq * R_1_1_1_3 + 1 * R_1_0_1_3;
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+912];
            double R_1_1_2_0 = xpq * R_2_0_2_0;
            double R_0_2_2_0 = xpq * R_1_1_2_0 + 1 * R_1_0_2_0;
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+928];
            double R_1_1_2_1 = xpq * R_2_0_2_1;
            double R_0_2_2_1 = xpq * R_1_1_2_1 + 1 * R_1_0_2_1;
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+944];
            double R_1_1_2_2 = xpq * R_2_0_2_2;
            double R_0_2_2_2 = xpq * R_1_1_2_2 + 1 * R_1_0_2_2;
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+960];
            double R_1_1_3_0 = xpq * R_2_0_3_0;
            double R_0_2_3_0 = xpq * R_1_1_3_0 + 1 * R_1_0_3_0;
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+976];
            double R_1_1_3_1 = xpq * R_2_0_3_1;
            double R_0_2_3_1 = xpq * R_1_1_3_1 + 1 * R_1_0_3_1;
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+992];
            double R_1_1_4_0 = xpq * R_2_0_4_0;
            double R_0_2_4_0 = xpq * R_1_1_4_0 + 1 * R_1_0_4_0;
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+1008];
            double R_2_1_0_0 = xpq * gamma_inc[sq_id+3*256];
            double R_1_2_0_0 = xpq * R_2_1_0_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_3_0_0 = xpq * R_1_2_0_0 + 2 * R_1_1_0_0;
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+1024];
            double R_2_1_0_1 = xpq * R_3_0_0_1;
            double R_1_2_0_1 = xpq * R_2_1_0_1 + 1 * R_2_0_0_1;
            double R_0_3_0_1 = xpq * R_1_2_0_1 + 2 * R_1_1_0_1;
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+1040];
            double R_2_1_0_2 = xpq * R_3_0_0_2;
            double R_1_2_0_2 = xpq * R_2_1_0_2 + 1 * R_2_0_0_2;
            double R_0_3_0_2 = xpq * R_1_2_0_2 + 2 * R_1_1_0_2;
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+1056];
            double R_2_1_0_3 = xpq * R_3_0_0_3;
            double R_1_2_0_3 = xpq * R_2_1_0_3 + 1 * R_2_0_0_3;
            double R_0_3_0_3 = xpq * R_1_2_0_3 + 2 * R_1_1_0_3;
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+1072];
            double R_2_1_1_0 = xpq * R_3_0_1_0;
            double R_1_2_1_0 = xpq * R_2_1_1_0 + 1 * R_2_0_1_0;
            double R_0_3_1_0 = xpq * R_1_2_1_0 + 2 * R_1_1_1_0;
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+1088];
            double R_2_1_1_1 = xpq * R_3_0_1_1;
            double R_1_2_1_1 = xpq * R_2_1_1_1 + 1 * R_2_0_1_1;
            double R_0_3_1_1 = xpq * R_1_2_1_1 + 2 * R_1_1_1_1;
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+1104];
            double R_2_1_1_2 = xpq * R_3_0_1_2;
            double R_1_2_1_2 = xpq * R_2_1_1_2 + 1 * R_2_0_1_2;
            double R_0_3_1_2 = xpq * R_1_2_1_2 + 2 * R_1_1_1_2;
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+1120];
            double R_2_1_2_0 = xpq * R_3_0_2_0;
            double R_1_2_2_0 = xpq * R_2_1_2_0 + 1 * R_2_0_2_0;
            double R_0_3_2_0 = xpq * R_1_2_2_0 + 2 * R_1_1_2_0;
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+1136];
            double R_2_1_2_1 = xpq * R_3_0_2_1;
            double R_1_2_2_1 = xpq * R_2_1_2_1 + 1 * R_2_0_2_1;
            double R_0_3_2_1 = xpq * R_1_2_2_1 + 2 * R_1_1_2_1;
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+1152];
            double R_2_1_3_0 = xpq * R_3_0_3_0;
            double R_1_2_3_0 = xpq * R_2_1_3_0 + 1 * R_2_0_3_0;
            double R_0_3_3_0 = xpq * R_1_2_3_0 + 2 * R_1_1_3_0;
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+1168];
            double R_3_1_0_0 = xpq * gamma_inc[sq_id+4*256];
            double R_2_2_0_0 = xpq * R_3_1_0_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_3_0_0 = xpq * R_2_2_0_0 + 2 * R_2_1_0_0;
            double R_0_4_0_0 = xpq * R_1_3_0_0 + 3 * R_1_2_0_0;
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+1184];
            double R_3_1_0_1 = xpq * R_4_0_0_1;
            double R_2_2_0_1 = xpq * R_3_1_0_1 + 1 * R_3_0_0_1;
            double R_1_3_0_1 = xpq * R_2_2_0_1 + 2 * R_2_1_0_1;
            double R_0_4_0_1 = xpq * R_1_3_0_1 + 3 * R_1_2_0_1;
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+1200];
            double R_3_1_0_2 = xpq * R_4_0_0_2;
            double R_2_2_0_2 = xpq * R_3_1_0_2 + 1 * R_3_0_0_2;
            double R_1_3_0_2 = xpq * R_2_2_0_2 + 2 * R_2_1_0_2;
            double R_0_4_0_2 = xpq * R_1_3_0_2 + 3 * R_1_2_0_2;
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+1216];
            double R_3_1_1_0 = xpq * R_4_0_1_0;
            double R_2_2_1_0 = xpq * R_3_1_1_0 + 1 * R_3_0_1_0;
            double R_1_3_1_0 = xpq * R_2_2_1_0 + 2 * R_2_1_1_0;
            double R_0_4_1_0 = xpq * R_1_3_1_0 + 3 * R_1_2_1_0;
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+1232];
            double R_3_1_1_1 = xpq * R_4_0_1_1;
            double R_2_2_1_1 = xpq * R_3_1_1_1 + 1 * R_3_0_1_1;
            double R_1_3_1_1 = xpq * R_2_2_1_1 + 2 * R_2_1_1_1;
            double R_0_4_1_1 = xpq * R_1_3_1_1 + 3 * R_1_2_1_1;
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+1248];
            double R_3_1_2_0 = xpq * R_4_0_2_0;
            double R_2_2_2_0 = xpq * R_3_1_2_0 + 1 * R_3_0_2_0;
            double R_1_3_2_0 = xpq * R_2_2_2_0 + 2 * R_2_1_2_0;
            double R_0_4_2_0 = xpq * R_1_3_2_0 + 3 * R_1_2_2_0;
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+1264];
            double R_4_1_0_0 = xpq * gamma_inc[sq_id+5*256];
            double R_3_2_0_0 = xpq * R_4_1_0_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_3_0_0 = xpq * R_3_2_0_0 + 2 * R_3_1_0_0;
            double R_1_4_0_0 = xpq * R_2_3_0_0 + 3 * R_2_2_0_0;
            double R_0_5_0_0 = xpq * R_1_4_0_0 + 4 * R_1_3_0_0;
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+1280];
            double R_4_1_0_1 = xpq * R_5_0_0_1;
            double R_3_2_0_1 = xpq * R_4_1_0_1 + 1 * R_4_0_0_1;
            double R_2_3_0_1 = xpq * R_3_2_0_1 + 2 * R_3_1_0_1;
            double R_1_4_0_1 = xpq * R_2_3_0_1 + 3 * R_2_2_0_1;
            double R_0_5_0_1 = xpq * R_1_4_0_1 + 4 * R_1_3_0_1;
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+1296];
            double R_4_1_1_0 = xpq * R_5_0_1_0;
            double R_3_2_1_0 = xpq * R_4_1_1_0 + 1 * R_4_0_1_0;
            double R_2_3_1_0 = xpq * R_3_2_1_0 + 2 * R_3_1_1_0;
            double R_1_4_1_0 = xpq * R_2_3_1_0 + 3 * R_2_2_1_0;
            double R_0_5_1_0 = xpq * R_1_4_1_0 + 4 * R_1_3_1_0;
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+1312];
            double R_5_1_0_0 = xpq * gamma_inc[sq_id+6*256];
            double R_4_2_0_0 = xpq * R_5_1_0_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_3_0_0 = xpq * R_4_2_0_0 + 2 * R_4_1_0_0;
            double R_2_4_0_0 = xpq * R_3_3_0_0 + 3 * R_3_2_0_0;
            double R_1_5_0_0 = xpq * R_2_4_0_0 + 4 * R_2_3_0_0;
            double R_0_6_0_0 = xpq * R_1_5_0_0 + 5 * R_1_4_0_0;
            vj_kl += R_0_6_0_0 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_0_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_0_6 * dm_ij_cache[tx+80];
            double R_6_0_0_1 = zpq * gamma_inc[sq_id+7*256];
            double R_5_0_0_2 = zpq * R_6_0_0_1 + 1 * gamma_inc[sq_id+6*256];
            double R_4_0_0_3 = zpq * R_5_0_0_2 + 2 * R_5_0_0_1;
            double R_3_0_0_4 = zpq * R_4_0_0_3 + 3 * R_4_0_0_2;
            double R_2_0_0_5 = zpq * R_3_0_0_4 + 4 * R_3_0_0_3;
            double R_1_0_0_6 = zpq * R_2_0_0_5 + 5 * R_2_0_0_4;
            double R_0_0_0_7 = zpq * R_1_0_0_6 + 6 * R_1_0_0_5;
            vj_kl -= R_0_0_0_7 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+176];
            double R_0_0_1_6 = ypq * R_1_0_0_6;
            vj_kl -= R_0_0_1_6 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+224];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+240];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+256];
            double R_1_0_1_5 = ypq * R_2_0_0_5;
            double R_0_0_2_5 = ypq * R_1_0_1_5 + 1 * R_1_0_0_5;
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+272];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+288];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+304];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+320];
            double R_2_0_1_4 = ypq * R_3_0_0_4;
            double R_1_0_2_4 = ypq * R_2_0_1_4 + 1 * R_2_0_0_4;
            double R_0_0_3_4 = ypq * R_1_0_2_4 + 2 * R_1_0_1_4;
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+336];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+368];
            double R_3_0_1_3 = ypq * R_4_0_0_3;
            double R_2_0_2_3 = ypq * R_3_0_1_3 + 1 * R_3_0_0_3;
            double R_1_0_3_3 = ypq * R_2_0_2_3 + 2 * R_2_0_1_3;
            double R_0_0_4_3 = ypq * R_1_0_3_3 + 3 * R_1_0_2_3;
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+400];
            double R_4_0_1_2 = ypq * R_5_0_0_2;
            double R_3_0_2_2 = ypq * R_4_0_1_2 + 1 * R_4_0_0_2;
            double R_2_0_3_2 = ypq * R_3_0_2_2 + 2 * R_3_0_1_2;
            double R_1_0_4_2 = ypq * R_2_0_3_2 + 3 * R_2_0_2_2;
            double R_0_0_5_2 = ypq * R_1_0_4_2 + 4 * R_1_0_3_2;
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+416];
            double R_5_0_1_1 = ypq * R_6_0_0_1;
            double R_4_0_2_1 = ypq * R_5_0_1_1 + 1 * R_5_0_0_1;
            double R_3_0_3_1 = ypq * R_4_0_2_1 + 2 * R_4_0_1_1;
            double R_2_0_4_1 = ypq * R_3_0_3_1 + 3 * R_3_0_2_1;
            double R_1_0_5_1 = ypq * R_2_0_4_1 + 4 * R_2_0_3_1;
            double R_0_0_6_1 = ypq * R_1_0_5_1 + 5 * R_1_0_4_1;
            vj_kl -= R_0_0_6_1 * dm_ij_cache[tx+432];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+448];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+464];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+480];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+496];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+512];
            double R_0_1_0_6 = xpq * R_1_0_0_6;
            vj_kl -= R_0_1_0_6 * dm_ij_cache[tx+528];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+544];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+560];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+576];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+592];
            double R_0_1_1_5 = xpq * R_1_0_1_5;
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+608];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+624];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+640];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+656];
            double R_0_1_2_4 = xpq * R_1_0_2_4;
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+672];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+688];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+704];
            double R_0_1_3_3 = xpq * R_1_0_3_3;
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+720];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+736];
            double R_0_1_4_2 = xpq * R_1_0_4_2;
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+752];
            double R_0_1_5_1 = xpq * R_1_0_5_1;
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+768];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+784];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+800];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+816];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+832];
            double R_1_1_0_5 = xpq * R_2_0_0_5;
            double R_0_2_0_5 = xpq * R_1_1_0_5 + 1 * R_1_0_0_5;
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+848];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+864];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+880];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+896];
            double R_1_1_1_4 = xpq * R_2_0_1_4;
            double R_0_2_1_4 = xpq * R_1_1_1_4 + 1 * R_1_0_1_4;
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+912];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+928];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+944];
            double R_1_1_2_3 = xpq * R_2_0_2_3;
            double R_0_2_2_3 = xpq * R_1_1_2_3 + 1 * R_1_0_2_3;
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+960];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+976];
            double R_1_1_3_2 = xpq * R_2_0_3_2;
            double R_0_2_3_2 = xpq * R_1_1_3_2 + 1 * R_1_0_3_2;
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+992];
            double R_1_1_4_1 = xpq * R_2_0_4_1;
            double R_0_2_4_1 = xpq * R_1_1_4_1 + 1 * R_1_0_4_1;
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+1008];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+1024];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+1040];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+1056];
            double R_2_1_0_4 = xpq * R_3_0_0_4;
            double R_1_2_0_4 = xpq * R_2_1_0_4 + 1 * R_2_0_0_4;
            double R_0_3_0_4 = xpq * R_1_2_0_4 + 2 * R_1_1_0_4;
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+1072];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+1088];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+1104];
            double R_2_1_1_3 = xpq * R_3_0_1_3;
            double R_1_2_1_3 = xpq * R_2_1_1_3 + 1 * R_2_0_1_3;
            double R_0_3_1_3 = xpq * R_1_2_1_3 + 2 * R_1_1_1_3;
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+1120];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+1136];
            double R_2_1_2_2 = xpq * R_3_0_2_2;
            double R_1_2_2_2 = xpq * R_2_1_2_2 + 1 * R_2_0_2_2;
            double R_0_3_2_2 = xpq * R_1_2_2_2 + 2 * R_1_1_2_2;
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+1152];
            double R_2_1_3_1 = xpq * R_3_0_3_1;
            double R_1_2_3_1 = xpq * R_2_1_3_1 + 1 * R_2_0_3_1;
            double R_0_3_3_1 = xpq * R_1_2_3_1 + 2 * R_1_1_3_1;
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+1168];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+1184];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+1200];
            double R_3_1_0_3 = xpq * R_4_0_0_3;
            double R_2_2_0_3 = xpq * R_3_1_0_3 + 1 * R_3_0_0_3;
            double R_1_3_0_3 = xpq * R_2_2_0_3 + 2 * R_2_1_0_3;
            double R_0_4_0_3 = xpq * R_1_3_0_3 + 3 * R_1_2_0_3;
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+1216];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+1232];
            double R_3_1_1_2 = xpq * R_4_0_1_2;
            double R_2_2_1_2 = xpq * R_3_1_1_2 + 1 * R_3_0_1_2;
            double R_1_3_1_2 = xpq * R_2_2_1_2 + 2 * R_2_1_1_2;
            double R_0_4_1_2 = xpq * R_1_3_1_2 + 3 * R_1_2_1_2;
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+1248];
            double R_3_1_2_1 = xpq * R_4_0_2_1;
            double R_2_2_2_1 = xpq * R_3_1_2_1 + 1 * R_3_0_2_1;
            double R_1_3_2_1 = xpq * R_2_2_2_1 + 2 * R_2_1_2_1;
            double R_0_4_2_1 = xpq * R_1_3_2_1 + 3 * R_1_2_2_1;
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+1264];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+1280];
            double R_4_1_0_2 = xpq * R_5_0_0_2;
            double R_3_2_0_2 = xpq * R_4_1_0_2 + 1 * R_4_0_0_2;
            double R_2_3_0_2 = xpq * R_3_2_0_2 + 2 * R_3_1_0_2;
            double R_1_4_0_2 = xpq * R_2_3_0_2 + 3 * R_2_2_0_2;
            double R_0_5_0_2 = xpq * R_1_4_0_2 + 4 * R_1_3_0_2;
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+1296];
            double R_4_1_1_1 = xpq * R_5_0_1_1;
            double R_3_2_1_1 = xpq * R_4_1_1_1 + 1 * R_4_0_1_1;
            double R_2_3_1_1 = xpq * R_3_2_1_1 + 2 * R_3_1_1_1;
            double R_1_4_1_1 = xpq * R_2_3_1_1 + 3 * R_2_2_1_1;
            double R_0_5_1_1 = xpq * R_1_4_1_1 + 4 * R_1_3_1_1;
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+1312];
            double R_5_1_0_1 = xpq * R_6_0_0_1;
            double R_4_2_0_1 = xpq * R_5_1_0_1 + 1 * R_5_0_0_1;
            double R_3_3_0_1 = xpq * R_4_2_0_1 + 2 * R_4_1_0_1;
            double R_2_4_0_1 = xpq * R_3_3_0_1 + 3 * R_3_2_0_1;
            double R_1_5_0_1 = xpq * R_2_4_0_1 + 4 * R_2_3_0_1;
            double R_0_6_0_1 = xpq * R_1_5_0_1 + 5 * R_1_4_0_1;
            vj_kl -= R_0_6_0_1 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+512] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_1_6 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+272];
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+288];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_0_5_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+384];
            vj_kl -= R_0_0_6_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_0_6_1 * dm_ij_cache[tx+416];
            double R_6_0_1_0 = ypq * gamma_inc[sq_id+7*256];
            double R_5_0_2_0 = ypq * R_6_0_1_0 + 1 * gamma_inc[sq_id+6*256];
            double R_4_0_3_0 = ypq * R_5_0_2_0 + 2 * R_5_0_1_0;
            double R_3_0_4_0 = ypq * R_4_0_3_0 + 3 * R_4_0_2_0;
            double R_2_0_5_0 = ypq * R_3_0_4_0 + 4 * R_3_0_3_0;
            double R_1_0_6_0 = ypq * R_2_0_5_0 + 5 * R_2_0_4_0;
            double R_0_0_7_0 = ypq * R_1_0_6_0 + 6 * R_1_0_5_0;
            vj_kl -= R_0_0_7_0 * dm_ij_cache[tx+432];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+480];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+496];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+512];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+528];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+544];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+560];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+576];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+592];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+608];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+624];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+640];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+656];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+672];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+688];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+704];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+720];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+736];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+752];
            double R_0_1_6_0 = xpq * R_1_0_6_0;
            vj_kl -= R_0_1_6_0 * dm_ij_cache[tx+768];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+784];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+800];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+816];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+832];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+848];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+864];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+880];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+896];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+912];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+928];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+944];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+960];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+976];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+992];
            double R_1_1_5_0 = xpq * R_2_0_5_0;
            double R_0_2_5_0 = xpq * R_1_1_5_0 + 1 * R_1_0_5_0;
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+1008];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+1024];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+1040];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+1056];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+1072];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+1088];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+1104];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+1120];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+1136];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+1152];
            double R_2_1_4_0 = xpq * R_3_0_4_0;
            double R_1_2_4_0 = xpq * R_2_1_4_0 + 1 * R_2_0_4_0;
            double R_0_3_4_0 = xpq * R_1_2_4_0 + 2 * R_1_1_4_0;
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+1168];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+1184];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+1200];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+1216];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+1232];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+1248];
            double R_3_1_3_0 = xpq * R_4_0_3_0;
            double R_2_2_3_0 = xpq * R_3_1_3_0 + 1 * R_3_0_3_0;
            double R_1_3_3_0 = xpq * R_2_2_3_0 + 2 * R_2_1_3_0;
            double R_0_4_3_0 = xpq * R_1_3_3_0 + 3 * R_1_2_3_0;
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+1264];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+1280];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+1296];
            double R_4_1_2_0 = xpq * R_5_0_2_0;
            double R_3_2_2_0 = xpq * R_4_1_2_0 + 1 * R_4_0_2_0;
            double R_2_3_2_0 = xpq * R_3_2_2_0 + 2 * R_3_1_2_0;
            double R_1_4_2_0 = xpq * R_2_3_2_0 + 3 * R_2_2_2_0;
            double R_0_5_2_0 = xpq * R_1_4_2_0 + 4 * R_1_3_2_0;
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+1312];
            double R_5_1_1_0 = xpq * R_6_0_1_0;
            double R_4_2_1_0 = xpq * R_5_1_1_0 + 1 * R_5_0_1_0;
            double R_3_3_1_0 = xpq * R_4_2_1_0 + 2 * R_4_1_1_0;
            double R_2_4_1_0 = xpq * R_3_3_1_0 + 3 * R_3_2_1_0;
            double R_1_5_1_0 = xpq * R_2_4_1_0 + 4 * R_2_3_1_0;
            double R_0_6_1_0 = xpq * R_1_5_1_0 + 5 * R_1_4_1_0;
            vj_kl -= R_0_6_1_0 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1024] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_0_6 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+384];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_1_6_0 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_0_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+480];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+496];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+512];
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+528];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+544];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+560];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+576];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+592];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+608];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+624];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+640];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+656];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+672];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+688];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+704];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+720];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+736];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+752];
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+768];
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+784];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+800];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+816];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+832];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+848];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+864];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+880];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+896];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+912];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+928];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+944];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+960];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+976];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+992];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+1008];
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+1024];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+1040];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+1056];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+1072];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+1088];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+1104];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+1120];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+1136];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+1152];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+1168];
            vj_kl -= R_0_5_0_0 * dm_ij_cache[tx+1184];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+1200];
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+1216];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+1232];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+1248];
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+1264];
            vj_kl -= R_0_6_0_0 * dm_ij_cache[tx+1280];
            vj_kl -= R_0_6_0_1 * dm_ij_cache[tx+1296];
            vj_kl -= R_0_6_1_0 * dm_ij_cache[tx+1312];
            double R_6_1_0_0 = xpq * gamma_inc[sq_id+7*256];
            double R_5_2_0_0 = xpq * R_6_1_0_0 + 1 * gamma_inc[sq_id+6*256];
            double R_4_3_0_0 = xpq * R_5_2_0_0 + 2 * R_5_1_0_0;
            double R_3_4_0_0 = xpq * R_4_3_0_0 + 3 * R_4_2_0_0;
            double R_2_5_0_0 = xpq * R_3_4_0_0 + 4 * R_3_3_0_0;
            double R_1_6_0_0 = xpq * R_2_5_0_0 + 5 * R_2_4_0_0;
            double R_0_7_0_0 = xpq * R_1_6_0_0 + 6 * R_1_5_0_0;
            vj_kl -= R_0_7_0_0 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1536] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_1_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_0_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_5 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+64] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_6 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+80] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_6 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_7 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_1_6 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_0_6 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+96] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_2_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+112] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+128] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+144] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+160] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+176] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_6 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+192] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+208] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+224] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+240] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+256] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+272] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+288] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+304] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+320] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+336] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_5_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+352] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+368] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+384] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_6_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+400] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_6_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+416] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_6_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_6_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_0_7_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_1_6_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+432] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_0_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+448] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+464] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+480] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+496] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+512] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_6 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+528] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+544] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+560] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+576] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+592] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+608] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+624] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+640] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+656] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+672] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+688] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+704] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+720] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+736] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+752] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_1_6_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+768] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+784] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+800] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+816] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+832] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+848] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+864] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+880] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+896] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+912] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+928] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+944] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+960] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+976] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+992] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1008] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1024] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1040] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1056] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1072] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1088] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1104] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1120] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1136] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1152] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1168] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_5_0_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1184] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1200] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1216] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1232] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1248] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1264] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_6_0_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1280] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_6_0_1 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1296] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_6_1_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1312] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_6_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_6_0_1 * dm_kl_cache[sq_kl+512];
            vj_ij -= R_0_6_1_0 * dm_kl_cache[sq_kl+1024];
            vj_ij -= R_0_7_0_0 * dm_kl_cache[sq_kl+1536];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1328] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 84; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 128; n += 16) {
        int i = n / 32;
        int tile = n % 32;
        int task_kl = blockIdx.y * 512 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*512]);
        }
    }
}

// TILEX=18, TILEY=18,
__global__
void md_j_6_2(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 288;
    int task_kl0 = blockIdx.y * 288;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 2304;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 1152;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 1344;
    double *dm_ij_cache = vj_kl_cache + 2880;
    double *dm_kl_cache = dm_ij_cache + 1344;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 1216; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 2880; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 288; n += 256) {
        int task_kl = blockIdx.y * 288 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+288] = ykl;
            Rq_cache[n+576] = zkl;
            Rq_cache[n+864] = akl;
        }
    }

    for (int n = tx; n < 180; n += 16) {
        int i = n / 18;
        int tile = n % 18;
        int task_kl = blockIdx.y * 288 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*288] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 18; ++batch_ij) {
        int task_ij0 = blockIdx.x * 288 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 84; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 18; ++batch_kl) {
            int task_kl0 = blockIdx.y * 288 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+288];
            double zkl = Rq_cache[sq_kl+576];
            double akl = Rq_cache[sq_kl+864];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 8);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 8; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+32];
            double R_2_0_0_1 = zpq * gamma_inc[sq_id+3*256];
            double R_1_0_0_2 = zpq * R_2_0_0_1 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_0_3 = zpq * R_1_0_0_2 + 2 * R_1_0_0_1;
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+48];
            double R_3_0_0_1 = zpq * gamma_inc[sq_id+4*256];
            double R_2_0_0_2 = zpq * R_3_0_0_1 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_0_3 = zpq * R_2_0_0_2 + 2 * R_2_0_0_1;
            double R_0_0_0_4 = zpq * R_1_0_0_3 + 3 * R_1_0_0_2;
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+64];
            double R_4_0_0_1 = zpq * gamma_inc[sq_id+5*256];
            double R_3_0_0_2 = zpq * R_4_0_0_1 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_0_3 = zpq * R_3_0_0_2 + 2 * R_3_0_0_1;
            double R_1_0_0_4 = zpq * R_2_0_0_3 + 3 * R_2_0_0_2;
            double R_0_0_0_5 = zpq * R_1_0_0_4 + 4 * R_1_0_0_3;
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+80];
            double R_5_0_0_1 = zpq * gamma_inc[sq_id+6*256];
            double R_4_0_0_2 = zpq * R_5_0_0_1 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_0_3 = zpq * R_4_0_0_2 + 2 * R_4_0_0_1;
            double R_2_0_0_4 = zpq * R_3_0_0_3 + 3 * R_3_0_0_2;
            double R_1_0_0_5 = zpq * R_2_0_0_4 + 4 * R_2_0_0_3;
            double R_0_0_0_6 = zpq * R_1_0_0_5 + 5 * R_1_0_0_4;
            vj_kl += R_0_0_0_6 * dm_ij_cache[tx+96];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+112];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+128];
            double R_0_0_1_2 = ypq * R_1_0_0_2;
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+144];
            double R_0_0_1_3 = ypq * R_1_0_0_3;
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+160];
            double R_0_0_1_4 = ypq * R_1_0_0_4;
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+176];
            double R_0_0_1_5 = ypq * R_1_0_0_5;
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+192];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+208];
            double R_1_0_1_1 = ypq * R_2_0_0_1;
            double R_0_0_2_1 = ypq * R_1_0_1_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+224];
            double R_1_0_1_2 = ypq * R_2_0_0_2;
            double R_0_0_2_2 = ypq * R_1_0_1_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+240];
            double R_1_0_1_3 = ypq * R_2_0_0_3;
            double R_0_0_2_3 = ypq * R_1_0_1_3 + 1 * R_1_0_0_3;
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+256];
            double R_1_0_1_4 = ypq * R_2_0_0_4;
            double R_0_0_2_4 = ypq * R_1_0_1_4 + 1 * R_1_0_0_4;
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+272];
            double R_2_0_1_0 = ypq * gamma_inc[sq_id+3*256];
            double R_1_0_2_0 = ypq * R_2_0_1_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_3_0 = ypq * R_1_0_2_0 + 2 * R_1_0_1_0;
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+288];
            double R_2_0_1_1 = ypq * R_3_0_0_1;
            double R_1_0_2_1 = ypq * R_2_0_1_1 + 1 * R_2_0_0_1;
            double R_0_0_3_1 = ypq * R_1_0_2_1 + 2 * R_1_0_1_1;
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+304];
            double R_2_0_1_2 = ypq * R_3_0_0_2;
            double R_1_0_2_2 = ypq * R_2_0_1_2 + 1 * R_2_0_0_2;
            double R_0_0_3_2 = ypq * R_1_0_2_2 + 2 * R_1_0_1_2;
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+320];
            double R_2_0_1_3 = ypq * R_3_0_0_3;
            double R_1_0_2_3 = ypq * R_2_0_1_3 + 1 * R_2_0_0_3;
            double R_0_0_3_3 = ypq * R_1_0_2_3 + 2 * R_1_0_1_3;
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+336];
            double R_3_0_1_0 = ypq * gamma_inc[sq_id+4*256];
            double R_2_0_2_0 = ypq * R_3_0_1_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_3_0 = ypq * R_2_0_2_0 + 2 * R_2_0_1_0;
            double R_0_0_4_0 = ypq * R_1_0_3_0 + 3 * R_1_0_2_0;
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+352];
            double R_3_0_1_1 = ypq * R_4_0_0_1;
            double R_2_0_2_1 = ypq * R_3_0_1_1 + 1 * R_3_0_0_1;
            double R_1_0_3_1 = ypq * R_2_0_2_1 + 2 * R_2_0_1_1;
            double R_0_0_4_1 = ypq * R_1_0_3_1 + 3 * R_1_0_2_1;
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+368];
            double R_3_0_1_2 = ypq * R_4_0_0_2;
            double R_2_0_2_2 = ypq * R_3_0_1_2 + 1 * R_3_0_0_2;
            double R_1_0_3_2 = ypq * R_2_0_2_2 + 2 * R_2_0_1_2;
            double R_0_0_4_2 = ypq * R_1_0_3_2 + 3 * R_1_0_2_2;
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+384];
            double R_4_0_1_0 = ypq * gamma_inc[sq_id+5*256];
            double R_3_0_2_0 = ypq * R_4_0_1_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_3_0 = ypq * R_3_0_2_0 + 2 * R_3_0_1_0;
            double R_1_0_4_0 = ypq * R_2_0_3_0 + 3 * R_2_0_2_0;
            double R_0_0_5_0 = ypq * R_1_0_4_0 + 4 * R_1_0_3_0;
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+400];
            double R_4_0_1_1 = ypq * R_5_0_0_1;
            double R_3_0_2_1 = ypq * R_4_0_1_1 + 1 * R_4_0_0_1;
            double R_2_0_3_1 = ypq * R_3_0_2_1 + 2 * R_3_0_1_1;
            double R_1_0_4_1 = ypq * R_2_0_3_1 + 3 * R_2_0_2_1;
            double R_0_0_5_1 = ypq * R_1_0_4_1 + 4 * R_1_0_3_1;
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+416];
            double R_5_0_1_0 = ypq * gamma_inc[sq_id+6*256];
            double R_4_0_2_0 = ypq * R_5_0_1_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_3_0 = ypq * R_4_0_2_0 + 2 * R_4_0_1_0;
            double R_2_0_4_0 = ypq * R_3_0_3_0 + 3 * R_3_0_2_0;
            double R_1_0_5_0 = ypq * R_2_0_4_0 + 4 * R_2_0_3_0;
            double R_0_0_6_0 = ypq * R_1_0_5_0 + 5 * R_1_0_4_0;
            vj_kl += R_0_0_6_0 * dm_ij_cache[tx+432];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+448];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+464];
            double R_0_1_0_2 = xpq * R_1_0_0_2;
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+480];
            double R_0_1_0_3 = xpq * R_1_0_0_3;
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+496];
            double R_0_1_0_4 = xpq * R_1_0_0_4;
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+512];
            double R_0_1_0_5 = xpq * R_1_0_0_5;
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+528];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+544];
            double R_0_1_1_1 = xpq * R_1_0_1_1;
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+560];
            double R_0_1_1_2 = xpq * R_1_0_1_2;
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+576];
            double R_0_1_1_3 = xpq * R_1_0_1_3;
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+592];
            double R_0_1_1_4 = xpq * R_1_0_1_4;
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+608];
            double R_0_1_2_0 = xpq * R_1_0_2_0;
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+624];
            double R_0_1_2_1 = xpq * R_1_0_2_1;
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+640];
            double R_0_1_2_2 = xpq * R_1_0_2_2;
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+656];
            double R_0_1_2_3 = xpq * R_1_0_2_3;
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+672];
            double R_0_1_3_0 = xpq * R_1_0_3_0;
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+688];
            double R_0_1_3_1 = xpq * R_1_0_3_1;
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+704];
            double R_0_1_3_2 = xpq * R_1_0_3_2;
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+720];
            double R_0_1_4_0 = xpq * R_1_0_4_0;
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+736];
            double R_0_1_4_1 = xpq * R_1_0_4_1;
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+752];
            double R_0_1_5_0 = xpq * R_1_0_5_0;
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+768];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+784];
            double R_1_1_0_1 = xpq * R_2_0_0_1;
            double R_0_2_0_1 = xpq * R_1_1_0_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+800];
            double R_1_1_0_2 = xpq * R_2_0_0_2;
            double R_0_2_0_2 = xpq * R_1_1_0_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+816];
            double R_1_1_0_3 = xpq * R_2_0_0_3;
            double R_0_2_0_3 = xpq * R_1_1_0_3 + 1 * R_1_0_0_3;
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+832];
            double R_1_1_0_4 = xpq * R_2_0_0_4;
            double R_0_2_0_4 = xpq * R_1_1_0_4 + 1 * R_1_0_0_4;
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+848];
            double R_1_1_1_0 = xpq * R_2_0_1_0;
            double R_0_2_1_0 = xpq * R_1_1_1_0 + 1 * R_1_0_1_0;
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+864];
            double R_1_1_1_1 = xpq * R_2_0_1_1;
            double R_0_2_1_1 = xpq * R_1_1_1_1 + 1 * R_1_0_1_1;
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+880];
            double R_1_1_1_2 = xpq * R_2_0_1_2;
            double R_0_2_1_2 = xpq * R_1_1_1_2 + 1 * R_1_0_1_2;
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+896];
            double R_1_1_1_3 = xpq * R_2_0_1_3;
            double R_0_2_1_3 = xpq * R_1_1_1_3 + 1 * R_1_0_1_3;
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+912];
            double R_1_1_2_0 = xpq * R_2_0_2_0;
            double R_0_2_2_0 = xpq * R_1_1_2_0 + 1 * R_1_0_2_0;
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+928];
            double R_1_1_2_1 = xpq * R_2_0_2_1;
            double R_0_2_2_1 = xpq * R_1_1_2_1 + 1 * R_1_0_2_1;
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+944];
            double R_1_1_2_2 = xpq * R_2_0_2_2;
            double R_0_2_2_2 = xpq * R_1_1_2_2 + 1 * R_1_0_2_2;
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+960];
            double R_1_1_3_0 = xpq * R_2_0_3_0;
            double R_0_2_3_0 = xpq * R_1_1_3_0 + 1 * R_1_0_3_0;
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+976];
            double R_1_1_3_1 = xpq * R_2_0_3_1;
            double R_0_2_3_1 = xpq * R_1_1_3_1 + 1 * R_1_0_3_1;
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+992];
            double R_1_1_4_0 = xpq * R_2_0_4_0;
            double R_0_2_4_0 = xpq * R_1_1_4_0 + 1 * R_1_0_4_0;
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+1008];
            double R_2_1_0_0 = xpq * gamma_inc[sq_id+3*256];
            double R_1_2_0_0 = xpq * R_2_1_0_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_3_0_0 = xpq * R_1_2_0_0 + 2 * R_1_1_0_0;
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+1024];
            double R_2_1_0_1 = xpq * R_3_0_0_1;
            double R_1_2_0_1 = xpq * R_2_1_0_1 + 1 * R_2_0_0_1;
            double R_0_3_0_1 = xpq * R_1_2_0_1 + 2 * R_1_1_0_1;
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+1040];
            double R_2_1_0_2 = xpq * R_3_0_0_2;
            double R_1_2_0_2 = xpq * R_2_1_0_2 + 1 * R_2_0_0_2;
            double R_0_3_0_2 = xpq * R_1_2_0_2 + 2 * R_1_1_0_2;
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+1056];
            double R_2_1_0_3 = xpq * R_3_0_0_3;
            double R_1_2_0_3 = xpq * R_2_1_0_3 + 1 * R_2_0_0_3;
            double R_0_3_0_3 = xpq * R_1_2_0_3 + 2 * R_1_1_0_3;
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+1072];
            double R_2_1_1_0 = xpq * R_3_0_1_0;
            double R_1_2_1_0 = xpq * R_2_1_1_0 + 1 * R_2_0_1_0;
            double R_0_3_1_0 = xpq * R_1_2_1_0 + 2 * R_1_1_1_0;
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+1088];
            double R_2_1_1_1 = xpq * R_3_0_1_1;
            double R_1_2_1_1 = xpq * R_2_1_1_1 + 1 * R_2_0_1_1;
            double R_0_3_1_1 = xpq * R_1_2_1_1 + 2 * R_1_1_1_1;
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+1104];
            double R_2_1_1_2 = xpq * R_3_0_1_2;
            double R_1_2_1_2 = xpq * R_2_1_1_2 + 1 * R_2_0_1_2;
            double R_0_3_1_2 = xpq * R_1_2_1_2 + 2 * R_1_1_1_2;
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+1120];
            double R_2_1_2_0 = xpq * R_3_0_2_0;
            double R_1_2_2_0 = xpq * R_2_1_2_0 + 1 * R_2_0_2_0;
            double R_0_3_2_0 = xpq * R_1_2_2_0 + 2 * R_1_1_2_0;
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+1136];
            double R_2_1_2_1 = xpq * R_3_0_2_1;
            double R_1_2_2_1 = xpq * R_2_1_2_1 + 1 * R_2_0_2_1;
            double R_0_3_2_1 = xpq * R_1_2_2_1 + 2 * R_1_1_2_1;
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+1152];
            double R_2_1_3_0 = xpq * R_3_0_3_0;
            double R_1_2_3_0 = xpq * R_2_1_3_0 + 1 * R_2_0_3_0;
            double R_0_3_3_0 = xpq * R_1_2_3_0 + 2 * R_1_1_3_0;
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+1168];
            double R_3_1_0_0 = xpq * gamma_inc[sq_id+4*256];
            double R_2_2_0_0 = xpq * R_3_1_0_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_3_0_0 = xpq * R_2_2_0_0 + 2 * R_2_1_0_0;
            double R_0_4_0_0 = xpq * R_1_3_0_0 + 3 * R_1_2_0_0;
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+1184];
            double R_3_1_0_1 = xpq * R_4_0_0_1;
            double R_2_2_0_1 = xpq * R_3_1_0_1 + 1 * R_3_0_0_1;
            double R_1_3_0_1 = xpq * R_2_2_0_1 + 2 * R_2_1_0_1;
            double R_0_4_0_1 = xpq * R_1_3_0_1 + 3 * R_1_2_0_1;
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+1200];
            double R_3_1_0_2 = xpq * R_4_0_0_2;
            double R_2_2_0_2 = xpq * R_3_1_0_2 + 1 * R_3_0_0_2;
            double R_1_3_0_2 = xpq * R_2_2_0_2 + 2 * R_2_1_0_2;
            double R_0_4_0_2 = xpq * R_1_3_0_2 + 3 * R_1_2_0_2;
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+1216];
            double R_3_1_1_0 = xpq * R_4_0_1_0;
            double R_2_2_1_0 = xpq * R_3_1_1_0 + 1 * R_3_0_1_0;
            double R_1_3_1_0 = xpq * R_2_2_1_0 + 2 * R_2_1_1_0;
            double R_0_4_1_0 = xpq * R_1_3_1_0 + 3 * R_1_2_1_0;
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+1232];
            double R_3_1_1_1 = xpq * R_4_0_1_1;
            double R_2_2_1_1 = xpq * R_3_1_1_1 + 1 * R_3_0_1_1;
            double R_1_3_1_1 = xpq * R_2_2_1_1 + 2 * R_2_1_1_1;
            double R_0_4_1_1 = xpq * R_1_3_1_1 + 3 * R_1_2_1_1;
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+1248];
            double R_3_1_2_0 = xpq * R_4_0_2_0;
            double R_2_2_2_0 = xpq * R_3_1_2_0 + 1 * R_3_0_2_0;
            double R_1_3_2_0 = xpq * R_2_2_2_0 + 2 * R_2_1_2_0;
            double R_0_4_2_0 = xpq * R_1_3_2_0 + 3 * R_1_2_2_0;
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+1264];
            double R_4_1_0_0 = xpq * gamma_inc[sq_id+5*256];
            double R_3_2_0_0 = xpq * R_4_1_0_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_3_0_0 = xpq * R_3_2_0_0 + 2 * R_3_1_0_0;
            double R_1_4_0_0 = xpq * R_2_3_0_0 + 3 * R_2_2_0_0;
            double R_0_5_0_0 = xpq * R_1_4_0_0 + 4 * R_1_3_0_0;
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+1280];
            double R_4_1_0_1 = xpq * R_5_0_0_1;
            double R_3_2_0_1 = xpq * R_4_1_0_1 + 1 * R_4_0_0_1;
            double R_2_3_0_1 = xpq * R_3_2_0_1 + 2 * R_3_1_0_1;
            double R_1_4_0_1 = xpq * R_2_3_0_1 + 3 * R_2_2_0_1;
            double R_0_5_0_1 = xpq * R_1_4_0_1 + 4 * R_1_3_0_1;
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+1296];
            double R_4_1_1_0 = xpq * R_5_0_1_0;
            double R_3_2_1_0 = xpq * R_4_1_1_0 + 1 * R_4_0_1_0;
            double R_2_3_1_0 = xpq * R_3_2_1_0 + 2 * R_3_1_1_0;
            double R_1_4_1_0 = xpq * R_2_3_1_0 + 3 * R_2_2_1_0;
            double R_0_5_1_0 = xpq * R_1_4_1_0 + 4 * R_1_3_1_0;
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+1312];
            double R_5_1_0_0 = xpq * gamma_inc[sq_id+6*256];
            double R_4_2_0_0 = xpq * R_5_1_0_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_3_0_0 = xpq * R_4_2_0_0 + 2 * R_4_1_0_0;
            double R_2_4_0_0 = xpq * R_3_3_0_0 + 3 * R_3_2_0_0;
            double R_1_5_0_0 = xpq * R_2_4_0_0 + 4 * R_2_3_0_0;
            double R_0_6_0_0 = xpq * R_1_5_0_0 + 5 * R_1_4_0_0;
            vj_kl += R_0_6_0_0 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_0_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_0_6 * dm_ij_cache[tx+80];
            double R_6_0_0_1 = zpq * gamma_inc[sq_id+7*256];
            double R_5_0_0_2 = zpq * R_6_0_0_1 + 1 * gamma_inc[sq_id+6*256];
            double R_4_0_0_3 = zpq * R_5_0_0_2 + 2 * R_5_0_0_1;
            double R_3_0_0_4 = zpq * R_4_0_0_3 + 3 * R_4_0_0_2;
            double R_2_0_0_5 = zpq * R_3_0_0_4 + 4 * R_3_0_0_3;
            double R_1_0_0_6 = zpq * R_2_0_0_5 + 5 * R_2_0_0_4;
            double R_0_0_0_7 = zpq * R_1_0_0_6 + 6 * R_1_0_0_5;
            vj_kl -= R_0_0_0_7 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+176];
            double R_0_0_1_6 = ypq * R_1_0_0_6;
            vj_kl -= R_0_0_1_6 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+224];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+240];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+256];
            double R_1_0_1_5 = ypq * R_2_0_0_5;
            double R_0_0_2_5 = ypq * R_1_0_1_5 + 1 * R_1_0_0_5;
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+272];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+288];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+304];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+320];
            double R_2_0_1_4 = ypq * R_3_0_0_4;
            double R_1_0_2_4 = ypq * R_2_0_1_4 + 1 * R_2_0_0_4;
            double R_0_0_3_4 = ypq * R_1_0_2_4 + 2 * R_1_0_1_4;
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+336];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+368];
            double R_3_0_1_3 = ypq * R_4_0_0_3;
            double R_2_0_2_3 = ypq * R_3_0_1_3 + 1 * R_3_0_0_3;
            double R_1_0_3_3 = ypq * R_2_0_2_3 + 2 * R_2_0_1_3;
            double R_0_0_4_3 = ypq * R_1_0_3_3 + 3 * R_1_0_2_3;
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+400];
            double R_4_0_1_2 = ypq * R_5_0_0_2;
            double R_3_0_2_2 = ypq * R_4_0_1_2 + 1 * R_4_0_0_2;
            double R_2_0_3_2 = ypq * R_3_0_2_2 + 2 * R_3_0_1_2;
            double R_1_0_4_2 = ypq * R_2_0_3_2 + 3 * R_2_0_2_2;
            double R_0_0_5_2 = ypq * R_1_0_4_2 + 4 * R_1_0_3_2;
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+416];
            double R_5_0_1_1 = ypq * R_6_0_0_1;
            double R_4_0_2_1 = ypq * R_5_0_1_1 + 1 * R_5_0_0_1;
            double R_3_0_3_1 = ypq * R_4_0_2_1 + 2 * R_4_0_1_1;
            double R_2_0_4_1 = ypq * R_3_0_3_1 + 3 * R_3_0_2_1;
            double R_1_0_5_1 = ypq * R_2_0_4_1 + 4 * R_2_0_3_1;
            double R_0_0_6_1 = ypq * R_1_0_5_1 + 5 * R_1_0_4_1;
            vj_kl -= R_0_0_6_1 * dm_ij_cache[tx+432];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+448];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+464];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+480];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+496];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+512];
            double R_0_1_0_6 = xpq * R_1_0_0_6;
            vj_kl -= R_0_1_0_6 * dm_ij_cache[tx+528];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+544];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+560];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+576];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+592];
            double R_0_1_1_5 = xpq * R_1_0_1_5;
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+608];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+624];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+640];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+656];
            double R_0_1_2_4 = xpq * R_1_0_2_4;
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+672];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+688];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+704];
            double R_0_1_3_3 = xpq * R_1_0_3_3;
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+720];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+736];
            double R_0_1_4_2 = xpq * R_1_0_4_2;
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+752];
            double R_0_1_5_1 = xpq * R_1_0_5_1;
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+768];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+784];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+800];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+816];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+832];
            double R_1_1_0_5 = xpq * R_2_0_0_5;
            double R_0_2_0_5 = xpq * R_1_1_0_5 + 1 * R_1_0_0_5;
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+848];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+864];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+880];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+896];
            double R_1_1_1_4 = xpq * R_2_0_1_4;
            double R_0_2_1_4 = xpq * R_1_1_1_4 + 1 * R_1_0_1_4;
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+912];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+928];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+944];
            double R_1_1_2_3 = xpq * R_2_0_2_3;
            double R_0_2_2_3 = xpq * R_1_1_2_3 + 1 * R_1_0_2_3;
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+960];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+976];
            double R_1_1_3_2 = xpq * R_2_0_3_2;
            double R_0_2_3_2 = xpq * R_1_1_3_2 + 1 * R_1_0_3_2;
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+992];
            double R_1_1_4_1 = xpq * R_2_0_4_1;
            double R_0_2_4_1 = xpq * R_1_1_4_1 + 1 * R_1_0_4_1;
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+1008];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+1024];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+1040];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+1056];
            double R_2_1_0_4 = xpq * R_3_0_0_4;
            double R_1_2_0_4 = xpq * R_2_1_0_4 + 1 * R_2_0_0_4;
            double R_0_3_0_4 = xpq * R_1_2_0_4 + 2 * R_1_1_0_4;
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+1072];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+1088];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+1104];
            double R_2_1_1_3 = xpq * R_3_0_1_3;
            double R_1_2_1_3 = xpq * R_2_1_1_3 + 1 * R_2_0_1_3;
            double R_0_3_1_3 = xpq * R_1_2_1_3 + 2 * R_1_1_1_3;
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+1120];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+1136];
            double R_2_1_2_2 = xpq * R_3_0_2_2;
            double R_1_2_2_2 = xpq * R_2_1_2_2 + 1 * R_2_0_2_2;
            double R_0_3_2_2 = xpq * R_1_2_2_2 + 2 * R_1_1_2_2;
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+1152];
            double R_2_1_3_1 = xpq * R_3_0_3_1;
            double R_1_2_3_1 = xpq * R_2_1_3_1 + 1 * R_2_0_3_1;
            double R_0_3_3_1 = xpq * R_1_2_3_1 + 2 * R_1_1_3_1;
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+1168];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+1184];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+1200];
            double R_3_1_0_3 = xpq * R_4_0_0_3;
            double R_2_2_0_3 = xpq * R_3_1_0_3 + 1 * R_3_0_0_3;
            double R_1_3_0_3 = xpq * R_2_2_0_3 + 2 * R_2_1_0_3;
            double R_0_4_0_3 = xpq * R_1_3_0_3 + 3 * R_1_2_0_3;
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+1216];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+1232];
            double R_3_1_1_2 = xpq * R_4_0_1_2;
            double R_2_2_1_2 = xpq * R_3_1_1_2 + 1 * R_3_0_1_2;
            double R_1_3_1_2 = xpq * R_2_2_1_2 + 2 * R_2_1_1_2;
            double R_0_4_1_2 = xpq * R_1_3_1_2 + 3 * R_1_2_1_2;
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+1248];
            double R_3_1_2_1 = xpq * R_4_0_2_1;
            double R_2_2_2_1 = xpq * R_3_1_2_1 + 1 * R_3_0_2_1;
            double R_1_3_2_1 = xpq * R_2_2_2_1 + 2 * R_2_1_2_1;
            double R_0_4_2_1 = xpq * R_1_3_2_1 + 3 * R_1_2_2_1;
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+1264];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+1280];
            double R_4_1_0_2 = xpq * R_5_0_0_2;
            double R_3_2_0_2 = xpq * R_4_1_0_2 + 1 * R_4_0_0_2;
            double R_2_3_0_2 = xpq * R_3_2_0_2 + 2 * R_3_1_0_2;
            double R_1_4_0_2 = xpq * R_2_3_0_2 + 3 * R_2_2_0_2;
            double R_0_5_0_2 = xpq * R_1_4_0_2 + 4 * R_1_3_0_2;
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+1296];
            double R_4_1_1_1 = xpq * R_5_0_1_1;
            double R_3_2_1_1 = xpq * R_4_1_1_1 + 1 * R_4_0_1_1;
            double R_2_3_1_1 = xpq * R_3_2_1_1 + 2 * R_3_1_1_1;
            double R_1_4_1_1 = xpq * R_2_3_1_1 + 3 * R_2_2_1_1;
            double R_0_5_1_1 = xpq * R_1_4_1_1 + 4 * R_1_3_1_1;
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+1312];
            double R_5_1_0_1 = xpq * R_6_0_0_1;
            double R_4_2_0_1 = xpq * R_5_1_0_1 + 1 * R_5_0_0_1;
            double R_3_3_0_1 = xpq * R_4_2_0_1 + 2 * R_4_1_0_1;
            double R_2_4_0_1 = xpq * R_3_3_0_1 + 3 * R_3_2_0_1;
            double R_1_5_0_1 = xpq * R_2_4_0_1 + 4 * R_2_3_0_1;
            double R_0_6_0_1 = xpq * R_1_5_0_1 + 5 * R_1_4_0_1;
            vj_kl -= R_0_6_0_1 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+288] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_0_6 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_0_7 * dm_ij_cache[tx+80];
            double R_7_0_0_1 = zpq * gamma_inc[sq_id+8*256];
            double R_6_0_0_2 = zpq * R_7_0_0_1 + 1 * gamma_inc[sq_id+7*256];
            double R_5_0_0_3 = zpq * R_6_0_0_2 + 2 * R_6_0_0_1;
            double R_4_0_0_4 = zpq * R_5_0_0_3 + 3 * R_5_0_0_2;
            double R_3_0_0_5 = zpq * R_4_0_0_4 + 4 * R_4_0_0_3;
            double R_2_0_0_6 = zpq * R_3_0_0_5 + 5 * R_3_0_0_4;
            double R_1_0_0_7 = zpq * R_2_0_0_6 + 6 * R_2_0_0_5;
            double R_0_0_0_8 = zpq * R_1_0_0_7 + 7 * R_1_0_0_6;
            vj_kl += R_0_0_0_8 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_1_6 * dm_ij_cache[tx+176];
            double R_0_0_1_7 = ypq * R_1_0_0_7;
            vj_kl += R_0_0_1_7 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+224];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+240];
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+256];
            double R_1_0_1_6 = ypq * R_2_0_0_6;
            double R_0_0_2_6 = ypq * R_1_0_1_6 + 1 * R_1_0_0_6;
            vj_kl += R_0_0_2_6 * dm_ij_cache[tx+272];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+288];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+304];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+320];
            double R_2_0_1_5 = ypq * R_3_0_0_5;
            double R_1_0_2_5 = ypq * R_2_0_1_5 + 1 * R_2_0_0_5;
            double R_0_0_3_5 = ypq * R_1_0_2_5 + 2 * R_1_0_1_5;
            vj_kl += R_0_0_3_5 * dm_ij_cache[tx+336];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+352];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+368];
            double R_3_0_1_4 = ypq * R_4_0_0_4;
            double R_2_0_2_4 = ypq * R_3_0_1_4 + 1 * R_3_0_0_4;
            double R_1_0_3_4 = ypq * R_2_0_2_4 + 2 * R_2_0_1_4;
            double R_0_0_4_4 = ypq * R_1_0_3_4 + 3 * R_1_0_2_4;
            vj_kl += R_0_0_4_4 * dm_ij_cache[tx+384];
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+400];
            double R_4_0_1_3 = ypq * R_5_0_0_3;
            double R_3_0_2_3 = ypq * R_4_0_1_3 + 1 * R_4_0_0_3;
            double R_2_0_3_3 = ypq * R_3_0_2_3 + 2 * R_3_0_1_3;
            double R_1_0_4_3 = ypq * R_2_0_3_3 + 3 * R_2_0_2_3;
            double R_0_0_5_3 = ypq * R_1_0_4_3 + 4 * R_1_0_3_3;
            vj_kl += R_0_0_5_3 * dm_ij_cache[tx+416];
            double R_5_0_1_2 = ypq * R_6_0_0_2;
            double R_4_0_2_2 = ypq * R_5_0_1_2 + 1 * R_5_0_0_2;
            double R_3_0_3_2 = ypq * R_4_0_2_2 + 2 * R_4_0_1_2;
            double R_2_0_4_2 = ypq * R_3_0_3_2 + 3 * R_3_0_2_2;
            double R_1_0_5_2 = ypq * R_2_0_4_2 + 4 * R_2_0_3_2;
            double R_0_0_6_2 = ypq * R_1_0_5_2 + 5 * R_1_0_4_2;
            vj_kl += R_0_0_6_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+448];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+464];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+480];
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+496];
            vj_kl += R_0_1_0_6 * dm_ij_cache[tx+512];
            double R_0_1_0_7 = xpq * R_1_0_0_7;
            vj_kl += R_0_1_0_7 * dm_ij_cache[tx+528];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+544];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+560];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+576];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+592];
            double R_0_1_1_6 = xpq * R_1_0_1_6;
            vj_kl += R_0_1_1_6 * dm_ij_cache[tx+608];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+624];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+640];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+656];
            double R_0_1_2_5 = xpq * R_1_0_2_5;
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+672];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+688];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+704];
            double R_0_1_3_4 = xpq * R_1_0_3_4;
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+720];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+736];
            double R_0_1_4_3 = xpq * R_1_0_4_3;
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+752];
            double R_0_1_5_2 = xpq * R_1_0_5_2;
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+768];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+784];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+800];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+816];
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+832];
            double R_1_1_0_6 = xpq * R_2_0_0_6;
            double R_0_2_0_6 = xpq * R_1_1_0_6 + 1 * R_1_0_0_6;
            vj_kl += R_0_2_0_6 * dm_ij_cache[tx+848];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+864];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+880];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+896];
            double R_1_1_1_5 = xpq * R_2_0_1_5;
            double R_0_2_1_5 = xpq * R_1_1_1_5 + 1 * R_1_0_1_5;
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+912];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+928];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+944];
            double R_1_1_2_4 = xpq * R_2_0_2_4;
            double R_0_2_2_4 = xpq * R_1_1_2_4 + 1 * R_1_0_2_4;
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+960];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+976];
            double R_1_1_3_3 = xpq * R_2_0_3_3;
            double R_0_2_3_3 = xpq * R_1_1_3_3 + 1 * R_1_0_3_3;
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+992];
            double R_1_1_4_2 = xpq * R_2_0_4_2;
            double R_0_2_4_2 = xpq * R_1_1_4_2 + 1 * R_1_0_4_2;
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+1008];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+1024];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+1040];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+1056];
            double R_2_1_0_5 = xpq * R_3_0_0_5;
            double R_1_2_0_5 = xpq * R_2_1_0_5 + 1 * R_2_0_0_5;
            double R_0_3_0_5 = xpq * R_1_2_0_5 + 2 * R_1_1_0_5;
            vj_kl += R_0_3_0_5 * dm_ij_cache[tx+1072];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+1088];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+1104];
            double R_2_1_1_4 = xpq * R_3_0_1_4;
            double R_1_2_1_4 = xpq * R_2_1_1_4 + 1 * R_2_0_1_4;
            double R_0_3_1_4 = xpq * R_1_2_1_4 + 2 * R_1_1_1_4;
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+1120];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+1136];
            double R_2_1_2_3 = xpq * R_3_0_2_3;
            double R_1_2_2_3 = xpq * R_2_1_2_3 + 1 * R_2_0_2_3;
            double R_0_3_2_3 = xpq * R_1_2_2_3 + 2 * R_1_1_2_3;
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+1152];
            double R_2_1_3_2 = xpq * R_3_0_3_2;
            double R_1_2_3_2 = xpq * R_2_1_3_2 + 1 * R_2_0_3_2;
            double R_0_3_3_2 = xpq * R_1_2_3_2 + 2 * R_1_1_3_2;
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+1168];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+1184];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+1200];
            double R_3_1_0_4 = xpq * R_4_0_0_4;
            double R_2_2_0_4 = xpq * R_3_1_0_4 + 1 * R_3_0_0_4;
            double R_1_3_0_4 = xpq * R_2_2_0_4 + 2 * R_2_1_0_4;
            double R_0_4_0_4 = xpq * R_1_3_0_4 + 3 * R_1_2_0_4;
            vj_kl += R_0_4_0_4 * dm_ij_cache[tx+1216];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+1232];
            double R_3_1_1_3 = xpq * R_4_0_1_3;
            double R_2_2_1_3 = xpq * R_3_1_1_3 + 1 * R_3_0_1_3;
            double R_1_3_1_3 = xpq * R_2_2_1_3 + 2 * R_2_1_1_3;
            double R_0_4_1_3 = xpq * R_1_3_1_3 + 3 * R_1_2_1_3;
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+1248];
            double R_3_1_2_2 = xpq * R_4_0_2_2;
            double R_2_2_2_2 = xpq * R_3_1_2_2 + 1 * R_3_0_2_2;
            double R_1_3_2_2 = xpq * R_2_2_2_2 + 2 * R_2_1_2_2;
            double R_0_4_2_2 = xpq * R_1_3_2_2 + 3 * R_1_2_2_2;
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+1264];
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+1280];
            double R_4_1_0_3 = xpq * R_5_0_0_3;
            double R_3_2_0_3 = xpq * R_4_1_0_3 + 1 * R_4_0_0_3;
            double R_2_3_0_3 = xpq * R_3_2_0_3 + 2 * R_3_1_0_3;
            double R_1_4_0_3 = xpq * R_2_3_0_3 + 3 * R_2_2_0_3;
            double R_0_5_0_3 = xpq * R_1_4_0_3 + 4 * R_1_3_0_3;
            vj_kl += R_0_5_0_3 * dm_ij_cache[tx+1296];
            double R_4_1_1_2 = xpq * R_5_0_1_2;
            double R_3_2_1_2 = xpq * R_4_1_1_2 + 1 * R_4_0_1_2;
            double R_2_3_1_2 = xpq * R_3_2_1_2 + 2 * R_3_1_1_2;
            double R_1_4_1_2 = xpq * R_2_3_1_2 + 3 * R_2_2_1_2;
            double R_0_5_1_2 = xpq * R_1_4_1_2 + 4 * R_1_3_1_2;
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+1312];
            double R_5_1_0_2 = xpq * R_6_0_0_2;
            double R_4_2_0_2 = xpq * R_5_1_0_2 + 1 * R_5_0_0_2;
            double R_3_3_0_2 = xpq * R_4_2_0_2 + 2 * R_4_1_0_2;
            double R_2_4_0_2 = xpq * R_3_3_0_2 + 3 * R_3_2_0_2;
            double R_1_5_0_2 = xpq * R_2_4_0_2 + 4 * R_2_3_0_2;
            double R_0_6_0_2 = xpq * R_1_5_0_2 + 5 * R_1_4_0_2;
            vj_kl += R_0_6_0_2 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+576] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_1_6 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+272];
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+288];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_0_5_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+384];
            vj_kl -= R_0_0_6_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_0_6_1 * dm_ij_cache[tx+416];
            double R_6_0_1_0 = ypq * gamma_inc[sq_id+7*256];
            double R_5_0_2_0 = ypq * R_6_0_1_0 + 1 * gamma_inc[sq_id+6*256];
            double R_4_0_3_0 = ypq * R_5_0_2_0 + 2 * R_5_0_1_0;
            double R_3_0_4_0 = ypq * R_4_0_3_0 + 3 * R_4_0_2_0;
            double R_2_0_5_0 = ypq * R_3_0_4_0 + 4 * R_3_0_3_0;
            double R_1_0_6_0 = ypq * R_2_0_5_0 + 5 * R_2_0_4_0;
            double R_0_0_7_0 = ypq * R_1_0_6_0 + 6 * R_1_0_5_0;
            vj_kl -= R_0_0_7_0 * dm_ij_cache[tx+432];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+480];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+496];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+512];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+528];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+544];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+560];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+576];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+592];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+608];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+624];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+640];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+656];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+672];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+688];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+704];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+720];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+736];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+752];
            double R_0_1_6_0 = xpq * R_1_0_6_0;
            vj_kl -= R_0_1_6_0 * dm_ij_cache[tx+768];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+784];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+800];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+816];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+832];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+848];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+864];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+880];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+896];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+912];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+928];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+944];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+960];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+976];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+992];
            double R_1_1_5_0 = xpq * R_2_0_5_0;
            double R_0_2_5_0 = xpq * R_1_1_5_0 + 1 * R_1_0_5_0;
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+1008];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+1024];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+1040];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+1056];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+1072];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+1088];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+1104];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+1120];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+1136];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+1152];
            double R_2_1_4_0 = xpq * R_3_0_4_0;
            double R_1_2_4_0 = xpq * R_2_1_4_0 + 1 * R_2_0_4_0;
            double R_0_3_4_0 = xpq * R_1_2_4_0 + 2 * R_1_1_4_0;
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+1168];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+1184];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+1200];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+1216];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+1232];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+1248];
            double R_3_1_3_0 = xpq * R_4_0_3_0;
            double R_2_2_3_0 = xpq * R_3_1_3_0 + 1 * R_3_0_3_0;
            double R_1_3_3_0 = xpq * R_2_2_3_0 + 2 * R_2_1_3_0;
            double R_0_4_3_0 = xpq * R_1_3_3_0 + 3 * R_1_2_3_0;
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+1264];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+1280];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+1296];
            double R_4_1_2_0 = xpq * R_5_0_2_0;
            double R_3_2_2_0 = xpq * R_4_1_2_0 + 1 * R_4_0_2_0;
            double R_2_3_2_0 = xpq * R_3_2_2_0 + 2 * R_3_1_2_0;
            double R_1_4_2_0 = xpq * R_2_3_2_0 + 3 * R_2_2_2_0;
            double R_0_5_2_0 = xpq * R_1_4_2_0 + 4 * R_1_3_2_0;
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+1312];
            double R_5_1_1_0 = xpq * R_6_0_1_0;
            double R_4_2_1_0 = xpq * R_5_1_1_0 + 1 * R_5_0_1_0;
            double R_3_3_1_0 = xpq * R_4_2_1_0 + 2 * R_4_1_1_0;
            double R_2_4_1_0 = xpq * R_3_3_1_0 + 3 * R_3_2_1_0;
            double R_1_5_1_0 = xpq * R_2_4_1_0 + 4 * R_2_3_1_0;
            double R_0_6_1_0 = xpq * R_1_5_1_0 + 5 * R_1_4_1_0;
            vj_kl -= R_0_6_1_0 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+864] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_1_6 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_1_7 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_2_6 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+224];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+240];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+256];
            vj_kl += R_0_0_3_5 * dm_ij_cache[tx+272];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+288];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+304];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+320];
            vj_kl += R_0_0_4_4 * dm_ij_cache[tx+336];
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_0_5_3 * dm_ij_cache[tx+384];
            vj_kl += R_0_0_6_1 * dm_ij_cache[tx+400];
            vj_kl += R_0_0_6_2 * dm_ij_cache[tx+416];
            double R_6_0_1_1 = ypq * R_7_0_0_1;
            double R_5_0_2_1 = ypq * R_6_0_1_1 + 1 * R_6_0_0_1;
            double R_4_0_3_1 = ypq * R_5_0_2_1 + 2 * R_5_0_1_1;
            double R_3_0_4_1 = ypq * R_4_0_3_1 + 3 * R_4_0_2_1;
            double R_2_0_5_1 = ypq * R_3_0_4_1 + 4 * R_3_0_3_1;
            double R_1_0_6_1 = ypq * R_2_0_5_1 + 5 * R_2_0_4_1;
            double R_0_0_7_1 = ypq * R_1_0_6_1 + 6 * R_1_0_5_1;
            vj_kl += R_0_0_7_1 * dm_ij_cache[tx+432];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+448];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+464];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+480];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+496];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+512];
            vj_kl += R_0_1_1_6 * dm_ij_cache[tx+528];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+544];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+560];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+576];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+592];
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+608];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+624];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+640];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+656];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+672];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+688];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+704];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+720];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+736];
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+752];
            double R_0_1_6_1 = xpq * R_1_0_6_1;
            vj_kl += R_0_1_6_1 * dm_ij_cache[tx+768];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+784];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+800];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+816];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+832];
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+848];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+864];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+880];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+896];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+912];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+928];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+944];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+960];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+976];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+992];
            double R_1_1_5_1 = xpq * R_2_0_5_1;
            double R_0_2_5_1 = xpq * R_1_1_5_1 + 1 * R_1_0_5_1;
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+1008];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+1024];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+1040];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+1056];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+1072];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+1088];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+1104];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+1120];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+1136];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+1152];
            double R_2_1_4_1 = xpq * R_3_0_4_1;
            double R_1_2_4_1 = xpq * R_2_1_4_1 + 1 * R_2_0_4_1;
            double R_0_3_4_1 = xpq * R_1_2_4_1 + 2 * R_1_1_4_1;
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+1168];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+1184];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+1200];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+1216];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+1232];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+1248];
            double R_3_1_3_1 = xpq * R_4_0_3_1;
            double R_2_2_3_1 = xpq * R_3_1_3_1 + 1 * R_3_0_3_1;
            double R_1_3_3_1 = xpq * R_2_2_3_1 + 2 * R_2_1_3_1;
            double R_0_4_3_1 = xpq * R_1_3_3_1 + 3 * R_1_2_3_1;
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+1264];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+1280];
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+1296];
            double R_4_1_2_1 = xpq * R_5_0_2_1;
            double R_3_2_2_1 = xpq * R_4_1_2_1 + 1 * R_4_0_2_1;
            double R_2_3_2_1 = xpq * R_3_2_2_1 + 2 * R_3_1_2_1;
            double R_1_4_2_1 = xpq * R_2_3_2_1 + 3 * R_2_2_2_1;
            double R_0_5_2_1 = xpq * R_1_4_2_1 + 4 * R_1_3_2_1;
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+1312];
            double R_5_1_1_1 = xpq * R_6_0_1_1;
            double R_4_2_1_1 = xpq * R_5_1_1_1 + 1 * R_5_0_1_1;
            double R_3_3_1_1 = xpq * R_4_2_1_1 + 2 * R_4_1_1_1;
            double R_2_4_1_1 = xpq * R_3_3_1_1 + 3 * R_3_2_1_1;
            double R_1_5_1_1 = xpq * R_2_4_1_1 + 4 * R_2_3_1_1;
            double R_0_6_1_1 = xpq * R_1_5_1_1 + 5 * R_1_4_1_1;
            vj_kl += R_0_6_1_1 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1152] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_2_6 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_3_5 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+256];
            vj_kl += R_0_0_4_4 * dm_ij_cache[tx+272];
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+288];
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_0_5_3 * dm_ij_cache[tx+336];
            vj_kl += R_0_0_6_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_0_6_1 * dm_ij_cache[tx+368];
            vj_kl += R_0_0_6_2 * dm_ij_cache[tx+384];
            vj_kl += R_0_0_7_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_0_7_1 * dm_ij_cache[tx+416];
            double R_7_0_1_0 = ypq * gamma_inc[sq_id+8*256];
            double R_6_0_2_0 = ypq * R_7_0_1_0 + 1 * gamma_inc[sq_id+7*256];
            double R_5_0_3_0 = ypq * R_6_0_2_0 + 2 * R_6_0_1_0;
            double R_4_0_4_0 = ypq * R_5_0_3_0 + 3 * R_5_0_2_0;
            double R_3_0_5_0 = ypq * R_4_0_4_0 + 4 * R_4_0_3_0;
            double R_2_0_6_0 = ypq * R_3_0_5_0 + 5 * R_3_0_4_0;
            double R_1_0_7_0 = ypq * R_2_0_6_0 + 6 * R_2_0_5_0;
            double R_0_0_8_0 = ypq * R_1_0_7_0 + 7 * R_1_0_6_0;
            vj_kl += R_0_0_8_0 * dm_ij_cache[tx+432];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+464];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+480];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+496];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+512];
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+528];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+544];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+560];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+576];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+592];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+608];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+624];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+640];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+656];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+672];
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+688];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+704];
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+720];
            vj_kl += R_0_1_6_0 * dm_ij_cache[tx+736];
            vj_kl += R_0_1_6_1 * dm_ij_cache[tx+752];
            double R_0_1_7_0 = xpq * R_1_0_7_0;
            vj_kl += R_0_1_7_0 * dm_ij_cache[tx+768];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+784];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+800];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+816];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+832];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+848];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+864];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+880];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+896];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+912];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+928];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+944];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+960];
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+976];
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+992];
            double R_1_1_6_0 = xpq * R_2_0_6_0;
            double R_0_2_6_0 = xpq * R_1_1_6_0 + 1 * R_1_0_6_0;
            vj_kl += R_0_2_6_0 * dm_ij_cache[tx+1008];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+1024];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+1040];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+1056];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+1072];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+1088];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+1104];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+1120];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+1136];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+1152];
            double R_2_1_5_0 = xpq * R_3_0_5_0;
            double R_1_2_5_0 = xpq * R_2_1_5_0 + 1 * R_2_0_5_0;
            double R_0_3_5_0 = xpq * R_1_2_5_0 + 2 * R_1_1_5_0;
            vj_kl += R_0_3_5_0 * dm_ij_cache[tx+1168];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+1184];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+1200];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+1216];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+1232];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+1248];
            double R_3_1_4_0 = xpq * R_4_0_4_0;
            double R_2_2_4_0 = xpq * R_3_1_4_0 + 1 * R_3_0_4_0;
            double R_1_3_4_0 = xpq * R_2_2_4_0 + 2 * R_2_1_4_0;
            double R_0_4_4_0 = xpq * R_1_3_4_0 + 3 * R_1_2_4_0;
            vj_kl += R_0_4_4_0 * dm_ij_cache[tx+1264];
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+1280];
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+1296];
            double R_4_1_3_0 = xpq * R_5_0_3_0;
            double R_3_2_3_0 = xpq * R_4_1_3_0 + 1 * R_4_0_3_0;
            double R_2_3_3_0 = xpq * R_3_2_3_0 + 2 * R_3_1_3_0;
            double R_1_4_3_0 = xpq * R_2_3_3_0 + 3 * R_2_2_3_0;
            double R_0_5_3_0 = xpq * R_1_4_3_0 + 4 * R_1_3_3_0;
            vj_kl += R_0_5_3_0 * dm_ij_cache[tx+1312];
            double R_5_1_2_0 = xpq * R_6_0_2_0;
            double R_4_2_2_0 = xpq * R_5_1_2_0 + 1 * R_5_0_2_0;
            double R_3_3_2_0 = xpq * R_4_2_2_0 + 2 * R_4_1_2_0;
            double R_2_4_2_0 = xpq * R_3_3_2_0 + 3 * R_3_2_2_0;
            double R_1_5_2_0 = xpq * R_2_4_2_0 + 4 * R_2_3_2_0;
            double R_0_6_2_0 = xpq * R_1_5_2_0 + 5 * R_1_4_2_0;
            vj_kl += R_0_6_2_0 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1440] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_0_6 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+384];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_1_6_0 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_0_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+480];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+496];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+512];
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+528];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+544];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+560];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+576];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+592];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+608];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+624];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+640];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+656];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+672];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+688];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+704];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+720];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+736];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+752];
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+768];
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+784];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+800];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+816];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+832];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+848];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+864];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+880];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+896];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+912];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+928];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+944];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+960];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+976];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+992];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+1008];
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+1024];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+1040];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+1056];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+1072];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+1088];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+1104];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+1120];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+1136];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+1152];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+1168];
            vj_kl -= R_0_5_0_0 * dm_ij_cache[tx+1184];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+1200];
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+1216];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+1232];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+1248];
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+1264];
            vj_kl -= R_0_6_0_0 * dm_ij_cache[tx+1280];
            vj_kl -= R_0_6_0_1 * dm_ij_cache[tx+1296];
            vj_kl -= R_0_6_1_0 * dm_ij_cache[tx+1312];
            double R_6_1_0_0 = xpq * gamma_inc[sq_id+7*256];
            double R_5_2_0_0 = xpq * R_6_1_0_0 + 1 * gamma_inc[sq_id+6*256];
            double R_4_3_0_0 = xpq * R_5_2_0_0 + 2 * R_5_1_0_0;
            double R_3_4_0_0 = xpq * R_4_3_0_0 + 3 * R_4_2_0_0;
            double R_2_5_0_0 = xpq * R_3_4_0_0 + 4 * R_3_3_0_0;
            double R_1_6_0_0 = xpq * R_2_5_0_0 + 5 * R_2_4_0_0;
            double R_0_7_0_0 = xpq * R_1_6_0_0 + 6 * R_1_5_0_0;
            vj_kl -= R_0_7_0_0 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1728] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_0_6 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_0_7 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_1_6 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+384];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+400];
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+416];
            vj_kl += R_0_1_6_1 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+464];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+480];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+496];
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+512];
            vj_kl += R_0_2_0_6 * dm_ij_cache[tx+528];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+544];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+560];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+576];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+592];
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+608];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+624];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+640];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+656];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+672];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+688];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+704];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+720];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+736];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+752];
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+768];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+784];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+800];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+816];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+832];
            vj_kl += R_0_3_0_5 * dm_ij_cache[tx+848];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+864];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+880];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+896];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+912];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+928];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+944];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+960];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+976];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+992];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+1008];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+1024];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+1040];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+1056];
            vj_kl += R_0_4_0_4 * dm_ij_cache[tx+1072];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+1088];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+1104];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+1120];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+1136];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+1152];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+1168];
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+1184];
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+1200];
            vj_kl += R_0_5_0_3 * dm_ij_cache[tx+1216];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+1232];
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+1248];
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+1264];
            vj_kl += R_0_6_0_1 * dm_ij_cache[tx+1280];
            vj_kl += R_0_6_0_2 * dm_ij_cache[tx+1296];
            vj_kl += R_0_6_1_1 * dm_ij_cache[tx+1312];
            double R_6_1_0_1 = xpq * R_7_0_0_1;
            double R_5_2_0_1 = xpq * R_6_1_0_1 + 1 * R_6_0_0_1;
            double R_4_3_0_1 = xpq * R_5_2_0_1 + 2 * R_5_1_0_1;
            double R_3_4_0_1 = xpq * R_4_3_0_1 + 3 * R_4_2_0_1;
            double R_2_5_0_1 = xpq * R_3_4_0_1 + 4 * R_3_3_0_1;
            double R_1_6_0_1 = xpq * R_2_5_0_1 + 5 * R_2_4_0_1;
            double R_0_7_0_1 = xpq * R_1_6_0_1 + 6 * R_1_5_0_1;
            vj_kl += R_0_7_0_1 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2016] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_1_6 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+368];
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+384];
            vj_kl += R_0_1_6_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_1_6_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_1_7_0 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+464];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+480];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+496];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+512];
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+528];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+544];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+560];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+576];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+592];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+608];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+624];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+640];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+656];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+672];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+688];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+704];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+720];
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+736];
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+752];
            vj_kl += R_0_2_6_0 * dm_ij_cache[tx+768];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+784];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+800];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+816];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+832];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+848];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+864];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+880];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+896];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+912];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+928];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+944];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+960];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+976];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+992];
            vj_kl += R_0_3_5_0 * dm_ij_cache[tx+1008];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+1024];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+1040];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+1056];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+1072];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+1088];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+1104];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+1120];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+1136];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+1152];
            vj_kl += R_0_4_4_0 * dm_ij_cache[tx+1168];
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+1184];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+1200];
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+1216];
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+1232];
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+1248];
            vj_kl += R_0_5_3_0 * dm_ij_cache[tx+1264];
            vj_kl += R_0_6_1_0 * dm_ij_cache[tx+1280];
            vj_kl += R_0_6_1_1 * dm_ij_cache[tx+1296];
            vj_kl += R_0_6_2_0 * dm_ij_cache[tx+1312];
            double R_6_1_1_0 = xpq * R_7_0_1_0;
            double R_5_2_1_0 = xpq * R_6_1_1_0 + 1 * R_6_0_1_0;
            double R_4_3_1_0 = xpq * R_5_2_1_0 + 2 * R_5_1_1_0;
            double R_3_4_1_0 = xpq * R_4_3_1_0 + 3 * R_4_2_1_0;
            double R_2_5_1_0 = xpq * R_3_4_1_0 + 4 * R_3_3_1_0;
            double R_1_6_1_0 = xpq * R_2_5_1_0 + 5 * R_2_4_1_0;
            double R_0_7_1_0 = xpq * R_1_6_1_0 + 6 * R_1_5_1_0;
            vj_kl += R_0_7_1_0 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2304] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_0_6 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+272];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+288];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_6_0 * dm_ij_cache[tx+432];
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+464];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+496];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+512];
            vj_kl += R_0_3_0_5 * dm_ij_cache[tx+528];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+544];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+560];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+576];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+592];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+608];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+624];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+640];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+656];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+672];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+688];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+704];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+720];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+736];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+752];
            vj_kl += R_0_3_5_0 * dm_ij_cache[tx+768];
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+784];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+800];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+816];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+832];
            vj_kl += R_0_4_0_4 * dm_ij_cache[tx+848];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+864];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+880];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+896];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+912];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+928];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+944];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+960];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+976];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+992];
            vj_kl += R_0_4_4_0 * dm_ij_cache[tx+1008];
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+1024];
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+1040];
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+1056];
            vj_kl += R_0_5_0_3 * dm_ij_cache[tx+1072];
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+1088];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+1104];
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+1120];
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+1136];
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+1152];
            vj_kl += R_0_5_3_0 * dm_ij_cache[tx+1168];
            vj_kl += R_0_6_0_0 * dm_ij_cache[tx+1184];
            vj_kl += R_0_6_0_1 * dm_ij_cache[tx+1200];
            vj_kl += R_0_6_0_2 * dm_ij_cache[tx+1216];
            vj_kl += R_0_6_1_0 * dm_ij_cache[tx+1232];
            vj_kl += R_0_6_1_1 * dm_ij_cache[tx+1248];
            vj_kl += R_0_6_2_0 * dm_ij_cache[tx+1264];
            vj_kl += R_0_7_0_0 * dm_ij_cache[tx+1280];
            vj_kl += R_0_7_0_1 * dm_ij_cache[tx+1296];
            vj_kl += R_0_7_1_0 * dm_ij_cache[tx+1312];
            double R_7_1_0_0 = xpq * gamma_inc[sq_id+8*256];
            double R_6_2_0_0 = xpq * R_7_1_0_0 + 1 * gamma_inc[sq_id+7*256];
            double R_5_3_0_0 = xpq * R_6_2_0_0 + 2 * R_6_1_0_0;
            double R_4_4_0_0 = xpq * R_5_3_0_0 + 3 * R_5_2_0_0;
            double R_3_5_0_0 = xpq * R_4_4_0_0 + 4 * R_4_3_0_0;
            double R_2_6_0_0 = xpq * R_3_5_0_0 + 5 * R_3_4_0_0;
            double R_1_7_0_0 = xpq * R_2_6_0_0 + 6 * R_2_5_0_0;
            double R_0_8_0_0 = xpq * R_1_7_0_0 + 7 * R_1_6_0_0;
            vj_kl += R_0_8_0_0 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2592] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_0_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_2 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_5 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_0_6 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+64] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_6 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_0_7 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_1_6 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_0_6 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+80] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_6 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_7 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_0_8 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_1_6 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_1_7 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_2_6 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_0_6 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_0_7 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_1_6 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_0_6 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+96] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_2_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+112] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+128] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+144] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+160] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_1_6 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+176] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_6 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_1_7 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_2_6 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_3_5 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_6 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+192] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+208] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+224] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+240] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+256] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_2_6 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_3_5 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_4_4 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+272] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+288] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+304] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+320] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_3_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_4_4 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_5_3 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+336] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_5_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_6_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+352] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_6_1 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+368] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_4_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_5_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_6_2 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+384] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_6_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_6_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_7_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_6_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+400] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_5_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_6_1 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_6_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_7_1 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_6_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+416] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_6_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_6_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_0_6_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_0_7_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_7_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_0_8_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_1_6_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_6_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_1_7_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_2_6_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+432] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_2_0_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+448] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+464] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+480] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+496] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_0_6 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+512] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_6 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_0_7 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_1_6 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_0_6 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_0_5 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+528] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+544] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+560] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+576] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+592] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_1_6 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+608] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+624] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+640] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+656] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+672] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+688] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+704] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+720] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_6_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+736] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_6_1 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+752] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_1_6_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_6_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_1_7_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_2_6_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_3_5_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+768] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+784] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+800] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+816] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+832] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_2_0_6 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_0_5 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_0_4 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+848] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+864] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+880] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+896] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+912] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+928] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+944] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+960] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+976] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+992] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_2_6_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_3_5_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_4_4_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1008] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1024] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1040] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1056] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_3_0_5 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_0_4 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_5_0_3 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1072] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1088] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1104] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1120] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1136] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1152] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_3_5_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_4_4_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_5_3_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1168] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_5_0_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_6_0_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1184] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_6_0_1 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1200] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_4_0_4 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_5_0_3 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_6_0_2 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1216] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_6_1_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1232] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_6_1_1 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1248] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_4_4_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_5_3_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_6_2_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1264] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_6_0_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_6_0_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_6_1_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_7_0_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1280] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_5_0_3 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_6_0_1 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_6_0_2 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_6_1_1 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_7_0_1 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1296] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_5_3_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_6_1_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_6_1_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_6_2_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_7_1_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1312] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_6_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_6_0_1 * dm_kl_cache[sq_kl+288];
            vj_ij += R_0_6_0_2 * dm_kl_cache[sq_kl+576];
            vj_ij -= R_0_6_1_0 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_6_1_1 * dm_kl_cache[sq_kl+1152];
            vj_ij += R_0_6_2_0 * dm_kl_cache[sq_kl+1440];
            vj_ij -= R_0_7_0_0 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_7_0_1 * dm_kl_cache[sq_kl+2016];
            vj_ij += R_0_7_1_0 * dm_kl_cache[sq_kl+2304];
            vj_ij += R_0_8_0_0 * dm_kl_cache[sq_kl+2592];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1328] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 84; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 180; n += 16) {
        int i = n / 18;
        int tile = n % 18;
        int task_kl = blockIdx.y * 288 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*288]);
        }
    }
}

// TILEX=18, TILEY=9,
__global__
void md_j_6_3(RysIntEnvVars envs, JKMatrix jk, BoundsInfo bounds)
{
    int *pair_ij_mapping = bounds.tile_ij_mapping;
    int *pair_kl_mapping = bounds.tile_kl_mapping;
    int task_ij0 = blockIdx.x * 288;
    int task_kl0 = blockIdx.y * 144;
    int pair_ij0 = pair_ij_mapping[task_ij0];
    int pair_kl0 = pair_kl_mapping[task_kl0];
    float *q_cond = bounds.q_cond;
    if (q_cond[pair_ij0] + q_cond[pair_kl0] < bounds.cutoff) {
        return;
    }

    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int sq_id = tx + 16 * ty;
    unsigned int lane_id = sq_id % 32;
    unsigned int group_id = lane_id / 16;
    unsigned int mask = 0xffff << (group_id * 16);
    int *bas = envs.bas;
    int *pair_loc = envs.ao_loc;
    int nbas = envs.nbas;
    double *env = envs.env;
    double *dm = jk.dm;
    double *vj = jk.vj;
    double vj_ij, vj_kl;

    int npairs_ij = bounds.npairs_ij;
    int npairs_kl = bounds.npairs_kl;
    extern __shared__ double gamma_inc[];
    double *Rp_cache = gamma_inc + 2560;
    double *Rq_cache = Rp_cache + 64;
    double *vj_cache = Rq_cache + 576;
    double *vj_ij_cache = vj_cache + 256;
    double *vj_kl_cache = vj_ij_cache + 1344;
    double *dm_ij_cache = vj_kl_cache + 2880;
    double *dm_kl_cache = dm_ij_cache + 1344;
    float *qd_ij_max = bounds.qd_ij_max;
    float *qd_kl_max = bounds.qd_kl_max;
    // zero out all cache;
    for (int n = sq_id; n < 640; n += 256) {
        Rp_cache[n] = 1.;
    }
    for (int n = sq_id; n < 2880; n += 256) {
        vj_kl_cache[n] = 0.;
    }
    __syncthreads();

    for (int n = sq_id; n < 144; n += 256) {
        int task_kl = blockIdx.y * 144 + n;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            double ak = env[bas[ksh*BAS_SLOTS+PTR_EXP]];
            double al = env[bas[lsh*BAS_SLOTS+PTR_EXP]];
            double *rk = env + bas[ksh*BAS_SLOTS+PTR_BAS_COORD];
            double *rl = env + bas[lsh*BAS_SLOTS+PTR_BAS_COORD];
            double akl = ak + al;
            double xkl = (ak * rk[0] + al * rl[0]) / akl;
            double ykl = (ak * rk[1] + al * rl[1]) / akl;
            double zkl = (ak * rk[2] + al * rl[2]) / akl;
            Rq_cache[n+0] = xkl;
            Rq_cache[n+144] = ykl;
            Rq_cache[n+288] = zkl;
            Rq_cache[n+432] = akl;
        }
    }

    for (int n = tx; n < 180; n += 16) {
        int i = n / 9;
        int tile = n % 9;
        int task_kl = blockIdx.y * 144 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            dm_kl_cache[sq_kl+i*144] = dm[kl_loc0+i];
        }
    }

    for (int batch_ij = 0; batch_ij < 18; ++batch_ij) {
        int task_ij0 = blockIdx.x * 288 + batch_ij * 16;
        if (task_ij0 >= npairs_ij) {
            continue;
        }
        __syncthreads();
        for (int n = sq_id; n < 16; n += 256) {
            int task_ij = task_ij0 + n;
            if (task_ij < npairs_ij) {
                int pair_ij = pair_ij_mapping[task_ij];
                int ish = pair_ij / nbas;
                int jsh = pair_ij % nbas;
                double ai = env[bas[ish*BAS_SLOTS+PTR_EXP]];
                double aj = env[bas[jsh*BAS_SLOTS+PTR_EXP]];
                double *ri = env + bas[ish*BAS_SLOTS+PTR_BAS_COORD];
                double *rj = env + bas[jsh*BAS_SLOTS+PTR_BAS_COORD];
                double aij = ai + aj;
                double xij = (ai * ri[0] + aj * rj[0]) / aij;
                double yij = (ai * ri[1] + aj * rj[1]) / aij;
                double zij = (ai * ri[2] + aj * rj[2]) / aij;
                Rp_cache[n+0] = xij;
                Rp_cache[n+16] = yij;
                Rp_cache[n+32] = zij;
                Rp_cache[n+48] = aij;
            }
        }
        double fac_sym = PI_FAC;
        int task_ij = task_ij0 + tx;
        if (task_ij >= npairs_ij) {
            task_ij = task_ij0;
            fac_sym = 0.;
        }
        int pair_ij = pair_ij_mapping[task_ij];
        int ish = pair_ij / nbas;
        int jsh = pair_ij % nbas;
        if (ish == jsh) fac_sym *= .5;
        int ij_loc0 = pair_loc[pair_ij];
        for (int n = ty; n < 84; n += 16) {
            dm_ij_cache[tx+n*16] = dm[ij_loc0+n];
            vj_ij_cache[tx+n*16] = 0;
        }
        for (int batch_kl = 0; batch_kl < 9; ++batch_kl) {
            int task_kl0 = blockIdx.y * 144 + batch_kl * 16;
            if (task_kl0 >= npairs_kl) {
                continue;
            }
            int pair_ij0 = pair_ij_mapping[task_ij0];
            int pair_kl0 = pair_kl_mapping[task_kl0];
            if (qd_ij_max[blockIdx.x*+batch_ij] + q_cond[pair_kl0] < bounds.cutoff &&
                qd_kl_max[blockIdx.y*+batch_kl] + q_cond[pair_ij0] < bounds.cutoff) {
                continue;
            }

            int sq_kl = ty + batch_kl * 16;
            int task_kl = task_kl0 + ty;
            double fac = fac_sym;
            if (task_kl >= npairs_kl) {
                task_kl = task_kl0;
                fac = 0.;
            }
            int pair_kl = pair_kl_mapping[task_kl];
            int ksh = pair_kl / nbas;
            int lsh = pair_kl % nbas;
            if (ksh == lsh) fac *= .5;
            if (pair_ij_mapping == pair_kl_mapping) {
                if (task_ij == task_kl) fac *= .5;
                if (task_ij < task_kl) fac = 0.;
            }
            __syncthreads();
            double xij = Rp_cache[tx+0];
            double yij = Rp_cache[tx+16];
            double zij = Rp_cache[tx+32];
            double aij = Rp_cache[tx+48];
            double xkl = Rq_cache[sq_kl+0];
            double ykl = Rq_cache[sq_kl+144];
            double zkl = Rq_cache[sq_kl+288];
            double akl = Rq_cache[sq_kl+432];
            fac = fac / (aij*akl*sqrt(aij+akl));
            double xpq = xij - xkl;
            double ypq = yij - ykl;
            double zpq = zij - zkl;
            double rr = xpq*xpq + ypq*ypq + zpq*zpq;
            double theta = aij * akl / (aij + akl);
            double theta_rr = theta * rr;
            eval_gamma_inc_fn(gamma_inc, theta_rr, 9);
            double a2 = -2. * theta;
            gamma_inc[sq_id] *= fac;
            for (int i = 1; i <= 9; i++) {
                fac *= a2;
                gamma_inc[sq_id+i*256] *= fac;
            }
            vj_kl = 0.;
            vj_kl += gamma_inc[sq_id+0*256] * dm_ij_cache[tx+0];
            double R_0_0_0_1 = zpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_1 * dm_ij_cache[tx+16];
            double R_1_0_0_1 = zpq * gamma_inc[sq_id+2*256];
            double R_0_0_0_2 = zpq * R_1_0_0_1 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+32];
            double R_2_0_0_1 = zpq * gamma_inc[sq_id+3*256];
            double R_1_0_0_2 = zpq * R_2_0_0_1 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_0_3 = zpq * R_1_0_0_2 + 2 * R_1_0_0_1;
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+48];
            double R_3_0_0_1 = zpq * gamma_inc[sq_id+4*256];
            double R_2_0_0_2 = zpq * R_3_0_0_1 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_0_3 = zpq * R_2_0_0_2 + 2 * R_2_0_0_1;
            double R_0_0_0_4 = zpq * R_1_0_0_3 + 3 * R_1_0_0_2;
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+64];
            double R_4_0_0_1 = zpq * gamma_inc[sq_id+5*256];
            double R_3_0_0_2 = zpq * R_4_0_0_1 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_0_3 = zpq * R_3_0_0_2 + 2 * R_3_0_0_1;
            double R_1_0_0_4 = zpq * R_2_0_0_3 + 3 * R_2_0_0_2;
            double R_0_0_0_5 = zpq * R_1_0_0_4 + 4 * R_1_0_0_3;
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+80];
            double R_5_0_0_1 = zpq * gamma_inc[sq_id+6*256];
            double R_4_0_0_2 = zpq * R_5_0_0_1 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_0_3 = zpq * R_4_0_0_2 + 2 * R_4_0_0_1;
            double R_2_0_0_4 = zpq * R_3_0_0_3 + 3 * R_3_0_0_2;
            double R_1_0_0_5 = zpq * R_2_0_0_4 + 4 * R_2_0_0_3;
            double R_0_0_0_6 = zpq * R_1_0_0_5 + 5 * R_1_0_0_4;
            vj_kl += R_0_0_0_6 * dm_ij_cache[tx+96];
            double R_0_0_1_0 = ypq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_1_0 * dm_ij_cache[tx+112];
            double R_0_0_1_1 = ypq * R_1_0_0_1;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+128];
            double R_0_0_1_2 = ypq * R_1_0_0_2;
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+144];
            double R_0_0_1_3 = ypq * R_1_0_0_3;
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+160];
            double R_0_0_1_4 = ypq * R_1_0_0_4;
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+176];
            double R_0_0_1_5 = ypq * R_1_0_0_5;
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+192];
            double R_1_0_1_0 = ypq * gamma_inc[sq_id+2*256];
            double R_0_0_2_0 = ypq * R_1_0_1_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+208];
            double R_1_0_1_1 = ypq * R_2_0_0_1;
            double R_0_0_2_1 = ypq * R_1_0_1_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+224];
            double R_1_0_1_2 = ypq * R_2_0_0_2;
            double R_0_0_2_2 = ypq * R_1_0_1_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+240];
            double R_1_0_1_3 = ypq * R_2_0_0_3;
            double R_0_0_2_3 = ypq * R_1_0_1_3 + 1 * R_1_0_0_3;
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+256];
            double R_1_0_1_4 = ypq * R_2_0_0_4;
            double R_0_0_2_4 = ypq * R_1_0_1_4 + 1 * R_1_0_0_4;
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+272];
            double R_2_0_1_0 = ypq * gamma_inc[sq_id+3*256];
            double R_1_0_2_0 = ypq * R_2_0_1_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_0_3_0 = ypq * R_1_0_2_0 + 2 * R_1_0_1_0;
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+288];
            double R_2_0_1_1 = ypq * R_3_0_0_1;
            double R_1_0_2_1 = ypq * R_2_0_1_1 + 1 * R_2_0_0_1;
            double R_0_0_3_1 = ypq * R_1_0_2_1 + 2 * R_1_0_1_1;
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+304];
            double R_2_0_1_2 = ypq * R_3_0_0_2;
            double R_1_0_2_2 = ypq * R_2_0_1_2 + 1 * R_2_0_0_2;
            double R_0_0_3_2 = ypq * R_1_0_2_2 + 2 * R_1_0_1_2;
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+320];
            double R_2_0_1_3 = ypq * R_3_0_0_3;
            double R_1_0_2_3 = ypq * R_2_0_1_3 + 1 * R_2_0_0_3;
            double R_0_0_3_3 = ypq * R_1_0_2_3 + 2 * R_1_0_1_3;
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+336];
            double R_3_0_1_0 = ypq * gamma_inc[sq_id+4*256];
            double R_2_0_2_0 = ypq * R_3_0_1_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_0_3_0 = ypq * R_2_0_2_0 + 2 * R_2_0_1_0;
            double R_0_0_4_0 = ypq * R_1_0_3_0 + 3 * R_1_0_2_0;
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+352];
            double R_3_0_1_1 = ypq * R_4_0_0_1;
            double R_2_0_2_1 = ypq * R_3_0_1_1 + 1 * R_3_0_0_1;
            double R_1_0_3_1 = ypq * R_2_0_2_1 + 2 * R_2_0_1_1;
            double R_0_0_4_1 = ypq * R_1_0_3_1 + 3 * R_1_0_2_1;
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+368];
            double R_3_0_1_2 = ypq * R_4_0_0_2;
            double R_2_0_2_2 = ypq * R_3_0_1_2 + 1 * R_3_0_0_2;
            double R_1_0_3_2 = ypq * R_2_0_2_2 + 2 * R_2_0_1_2;
            double R_0_0_4_2 = ypq * R_1_0_3_2 + 3 * R_1_0_2_2;
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+384];
            double R_4_0_1_0 = ypq * gamma_inc[sq_id+5*256];
            double R_3_0_2_0 = ypq * R_4_0_1_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_0_3_0 = ypq * R_3_0_2_0 + 2 * R_3_0_1_0;
            double R_1_0_4_0 = ypq * R_2_0_3_0 + 3 * R_2_0_2_0;
            double R_0_0_5_0 = ypq * R_1_0_4_0 + 4 * R_1_0_3_0;
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+400];
            double R_4_0_1_1 = ypq * R_5_0_0_1;
            double R_3_0_2_1 = ypq * R_4_0_1_1 + 1 * R_4_0_0_1;
            double R_2_0_3_1 = ypq * R_3_0_2_1 + 2 * R_3_0_1_1;
            double R_1_0_4_1 = ypq * R_2_0_3_1 + 3 * R_2_0_2_1;
            double R_0_0_5_1 = ypq * R_1_0_4_1 + 4 * R_1_0_3_1;
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+416];
            double R_5_0_1_0 = ypq * gamma_inc[sq_id+6*256];
            double R_4_0_2_0 = ypq * R_5_0_1_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_0_3_0 = ypq * R_4_0_2_0 + 2 * R_4_0_1_0;
            double R_2_0_4_0 = ypq * R_3_0_3_0 + 3 * R_3_0_2_0;
            double R_1_0_5_0 = ypq * R_2_0_4_0 + 4 * R_2_0_3_0;
            double R_0_0_6_0 = ypq * R_1_0_5_0 + 5 * R_1_0_4_0;
            vj_kl += R_0_0_6_0 * dm_ij_cache[tx+432];
            double R_0_1_0_0 = xpq * gamma_inc[sq_id+1*256];
            vj_kl += R_0_1_0_0 * dm_ij_cache[tx+448];
            double R_0_1_0_1 = xpq * R_1_0_0_1;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+464];
            double R_0_1_0_2 = xpq * R_1_0_0_2;
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+480];
            double R_0_1_0_3 = xpq * R_1_0_0_3;
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+496];
            double R_0_1_0_4 = xpq * R_1_0_0_4;
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+512];
            double R_0_1_0_5 = xpq * R_1_0_0_5;
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+528];
            double R_0_1_1_0 = xpq * R_1_0_1_0;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+544];
            double R_0_1_1_1 = xpq * R_1_0_1_1;
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+560];
            double R_0_1_1_2 = xpq * R_1_0_1_2;
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+576];
            double R_0_1_1_3 = xpq * R_1_0_1_3;
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+592];
            double R_0_1_1_4 = xpq * R_1_0_1_4;
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+608];
            double R_0_1_2_0 = xpq * R_1_0_2_0;
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+624];
            double R_0_1_2_1 = xpq * R_1_0_2_1;
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+640];
            double R_0_1_2_2 = xpq * R_1_0_2_2;
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+656];
            double R_0_1_2_3 = xpq * R_1_0_2_3;
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+672];
            double R_0_1_3_0 = xpq * R_1_0_3_0;
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+688];
            double R_0_1_3_1 = xpq * R_1_0_3_1;
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+704];
            double R_0_1_3_2 = xpq * R_1_0_3_2;
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+720];
            double R_0_1_4_0 = xpq * R_1_0_4_0;
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+736];
            double R_0_1_4_1 = xpq * R_1_0_4_1;
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+752];
            double R_0_1_5_0 = xpq * R_1_0_5_0;
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+768];
            double R_1_1_0_0 = xpq * gamma_inc[sq_id+2*256];
            double R_0_2_0_0 = xpq * R_1_1_0_0 + 1 * gamma_inc[sq_id+1*256];
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+784];
            double R_1_1_0_1 = xpq * R_2_0_0_1;
            double R_0_2_0_1 = xpq * R_1_1_0_1 + 1 * R_1_0_0_1;
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+800];
            double R_1_1_0_2 = xpq * R_2_0_0_2;
            double R_0_2_0_2 = xpq * R_1_1_0_2 + 1 * R_1_0_0_2;
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+816];
            double R_1_1_0_3 = xpq * R_2_0_0_3;
            double R_0_2_0_3 = xpq * R_1_1_0_3 + 1 * R_1_0_0_3;
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+832];
            double R_1_1_0_4 = xpq * R_2_0_0_4;
            double R_0_2_0_4 = xpq * R_1_1_0_4 + 1 * R_1_0_0_4;
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+848];
            double R_1_1_1_0 = xpq * R_2_0_1_0;
            double R_0_2_1_0 = xpq * R_1_1_1_0 + 1 * R_1_0_1_0;
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+864];
            double R_1_1_1_1 = xpq * R_2_0_1_1;
            double R_0_2_1_1 = xpq * R_1_1_1_1 + 1 * R_1_0_1_1;
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+880];
            double R_1_1_1_2 = xpq * R_2_0_1_2;
            double R_0_2_1_2 = xpq * R_1_1_1_2 + 1 * R_1_0_1_2;
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+896];
            double R_1_1_1_3 = xpq * R_2_0_1_3;
            double R_0_2_1_3 = xpq * R_1_1_1_3 + 1 * R_1_0_1_3;
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+912];
            double R_1_1_2_0 = xpq * R_2_0_2_0;
            double R_0_2_2_0 = xpq * R_1_1_2_0 + 1 * R_1_0_2_0;
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+928];
            double R_1_1_2_1 = xpq * R_2_0_2_1;
            double R_0_2_2_1 = xpq * R_1_1_2_1 + 1 * R_1_0_2_1;
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+944];
            double R_1_1_2_2 = xpq * R_2_0_2_2;
            double R_0_2_2_2 = xpq * R_1_1_2_2 + 1 * R_1_0_2_2;
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+960];
            double R_1_1_3_0 = xpq * R_2_0_3_0;
            double R_0_2_3_0 = xpq * R_1_1_3_0 + 1 * R_1_0_3_0;
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+976];
            double R_1_1_3_1 = xpq * R_2_0_3_1;
            double R_0_2_3_1 = xpq * R_1_1_3_1 + 1 * R_1_0_3_1;
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+992];
            double R_1_1_4_0 = xpq * R_2_0_4_0;
            double R_0_2_4_0 = xpq * R_1_1_4_0 + 1 * R_1_0_4_0;
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+1008];
            double R_2_1_0_0 = xpq * gamma_inc[sq_id+3*256];
            double R_1_2_0_0 = xpq * R_2_1_0_0 + 1 * gamma_inc[sq_id+2*256];
            double R_0_3_0_0 = xpq * R_1_2_0_0 + 2 * R_1_1_0_0;
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+1024];
            double R_2_1_0_1 = xpq * R_3_0_0_1;
            double R_1_2_0_1 = xpq * R_2_1_0_1 + 1 * R_2_0_0_1;
            double R_0_3_0_1 = xpq * R_1_2_0_1 + 2 * R_1_1_0_1;
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+1040];
            double R_2_1_0_2 = xpq * R_3_0_0_2;
            double R_1_2_0_2 = xpq * R_2_1_0_2 + 1 * R_2_0_0_2;
            double R_0_3_0_2 = xpq * R_1_2_0_2 + 2 * R_1_1_0_2;
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+1056];
            double R_2_1_0_3 = xpq * R_3_0_0_3;
            double R_1_2_0_3 = xpq * R_2_1_0_3 + 1 * R_2_0_0_3;
            double R_0_3_0_3 = xpq * R_1_2_0_3 + 2 * R_1_1_0_3;
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+1072];
            double R_2_1_1_0 = xpq * R_3_0_1_0;
            double R_1_2_1_0 = xpq * R_2_1_1_0 + 1 * R_2_0_1_0;
            double R_0_3_1_0 = xpq * R_1_2_1_0 + 2 * R_1_1_1_0;
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+1088];
            double R_2_1_1_1 = xpq * R_3_0_1_1;
            double R_1_2_1_1 = xpq * R_2_1_1_1 + 1 * R_2_0_1_1;
            double R_0_3_1_1 = xpq * R_1_2_1_1 + 2 * R_1_1_1_1;
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+1104];
            double R_2_1_1_2 = xpq * R_3_0_1_2;
            double R_1_2_1_2 = xpq * R_2_1_1_2 + 1 * R_2_0_1_2;
            double R_0_3_1_2 = xpq * R_1_2_1_2 + 2 * R_1_1_1_2;
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+1120];
            double R_2_1_2_0 = xpq * R_3_0_2_0;
            double R_1_2_2_0 = xpq * R_2_1_2_0 + 1 * R_2_0_2_0;
            double R_0_3_2_0 = xpq * R_1_2_2_0 + 2 * R_1_1_2_0;
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+1136];
            double R_2_1_2_1 = xpq * R_3_0_2_1;
            double R_1_2_2_1 = xpq * R_2_1_2_1 + 1 * R_2_0_2_1;
            double R_0_3_2_1 = xpq * R_1_2_2_1 + 2 * R_1_1_2_1;
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+1152];
            double R_2_1_3_0 = xpq * R_3_0_3_0;
            double R_1_2_3_0 = xpq * R_2_1_3_0 + 1 * R_2_0_3_0;
            double R_0_3_3_0 = xpq * R_1_2_3_0 + 2 * R_1_1_3_0;
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+1168];
            double R_3_1_0_0 = xpq * gamma_inc[sq_id+4*256];
            double R_2_2_0_0 = xpq * R_3_1_0_0 + 1 * gamma_inc[sq_id+3*256];
            double R_1_3_0_0 = xpq * R_2_2_0_0 + 2 * R_2_1_0_0;
            double R_0_4_0_0 = xpq * R_1_3_0_0 + 3 * R_1_2_0_0;
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+1184];
            double R_3_1_0_1 = xpq * R_4_0_0_1;
            double R_2_2_0_1 = xpq * R_3_1_0_1 + 1 * R_3_0_0_1;
            double R_1_3_0_1 = xpq * R_2_2_0_1 + 2 * R_2_1_0_1;
            double R_0_4_0_1 = xpq * R_1_3_0_1 + 3 * R_1_2_0_1;
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+1200];
            double R_3_1_0_2 = xpq * R_4_0_0_2;
            double R_2_2_0_2 = xpq * R_3_1_0_2 + 1 * R_3_0_0_2;
            double R_1_3_0_2 = xpq * R_2_2_0_2 + 2 * R_2_1_0_2;
            double R_0_4_0_2 = xpq * R_1_3_0_2 + 3 * R_1_2_0_2;
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+1216];
            double R_3_1_1_0 = xpq * R_4_0_1_0;
            double R_2_2_1_0 = xpq * R_3_1_1_0 + 1 * R_3_0_1_0;
            double R_1_3_1_0 = xpq * R_2_2_1_0 + 2 * R_2_1_1_0;
            double R_0_4_1_0 = xpq * R_1_3_1_0 + 3 * R_1_2_1_0;
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+1232];
            double R_3_1_1_1 = xpq * R_4_0_1_1;
            double R_2_2_1_1 = xpq * R_3_1_1_1 + 1 * R_3_0_1_1;
            double R_1_3_1_1 = xpq * R_2_2_1_1 + 2 * R_2_1_1_1;
            double R_0_4_1_1 = xpq * R_1_3_1_1 + 3 * R_1_2_1_1;
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+1248];
            double R_3_1_2_0 = xpq * R_4_0_2_0;
            double R_2_2_2_0 = xpq * R_3_1_2_0 + 1 * R_3_0_2_0;
            double R_1_3_2_0 = xpq * R_2_2_2_0 + 2 * R_2_1_2_0;
            double R_0_4_2_0 = xpq * R_1_3_2_0 + 3 * R_1_2_2_0;
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+1264];
            double R_4_1_0_0 = xpq * gamma_inc[sq_id+5*256];
            double R_3_2_0_0 = xpq * R_4_1_0_0 + 1 * gamma_inc[sq_id+4*256];
            double R_2_3_0_0 = xpq * R_3_2_0_0 + 2 * R_3_1_0_0;
            double R_1_4_0_0 = xpq * R_2_3_0_0 + 3 * R_2_2_0_0;
            double R_0_5_0_0 = xpq * R_1_4_0_0 + 4 * R_1_3_0_0;
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+1280];
            double R_4_1_0_1 = xpq * R_5_0_0_1;
            double R_3_2_0_1 = xpq * R_4_1_0_1 + 1 * R_4_0_0_1;
            double R_2_3_0_1 = xpq * R_3_2_0_1 + 2 * R_3_1_0_1;
            double R_1_4_0_1 = xpq * R_2_3_0_1 + 3 * R_2_2_0_1;
            double R_0_5_0_1 = xpq * R_1_4_0_1 + 4 * R_1_3_0_1;
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+1296];
            double R_4_1_1_0 = xpq * R_5_0_1_0;
            double R_3_2_1_0 = xpq * R_4_1_1_0 + 1 * R_4_0_1_0;
            double R_2_3_1_0 = xpq * R_3_2_1_0 + 2 * R_3_1_1_0;
            double R_1_4_1_0 = xpq * R_2_3_1_0 + 3 * R_2_2_1_0;
            double R_0_5_1_0 = xpq * R_1_4_1_0 + 4 * R_1_3_1_0;
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+1312];
            double R_5_1_0_0 = xpq * gamma_inc[sq_id+6*256];
            double R_4_2_0_0 = xpq * R_5_1_0_0 + 1 * gamma_inc[sq_id+5*256];
            double R_3_3_0_0 = xpq * R_4_2_0_0 + 2 * R_4_1_0_0;
            double R_2_4_0_0 = xpq * R_3_3_0_0 + 3 * R_3_2_0_0;
            double R_1_5_0_0 = xpq * R_2_4_0_0 + 4 * R_2_3_0_0;
            double R_0_6_0_0 = xpq * R_1_5_0_0 + 5 * R_1_4_0_0;
            vj_kl += R_0_6_0_0 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+0] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_0_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_0_6 * dm_ij_cache[tx+80];
            double R_6_0_0_1 = zpq * gamma_inc[sq_id+7*256];
            double R_5_0_0_2 = zpq * R_6_0_0_1 + 1 * gamma_inc[sq_id+6*256];
            double R_4_0_0_3 = zpq * R_5_0_0_2 + 2 * R_5_0_0_1;
            double R_3_0_0_4 = zpq * R_4_0_0_3 + 3 * R_4_0_0_2;
            double R_2_0_0_5 = zpq * R_3_0_0_4 + 4 * R_3_0_0_3;
            double R_1_0_0_6 = zpq * R_2_0_0_5 + 5 * R_2_0_0_4;
            double R_0_0_0_7 = zpq * R_1_0_0_6 + 6 * R_1_0_0_5;
            vj_kl -= R_0_0_0_7 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+176];
            double R_0_0_1_6 = ypq * R_1_0_0_6;
            vj_kl -= R_0_0_1_6 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+224];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+240];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+256];
            double R_1_0_1_5 = ypq * R_2_0_0_5;
            double R_0_0_2_5 = ypq * R_1_0_1_5 + 1 * R_1_0_0_5;
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+272];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+288];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+304];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+320];
            double R_2_0_1_4 = ypq * R_3_0_0_4;
            double R_1_0_2_4 = ypq * R_2_0_1_4 + 1 * R_2_0_0_4;
            double R_0_0_3_4 = ypq * R_1_0_2_4 + 2 * R_1_0_1_4;
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+336];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+368];
            double R_3_0_1_3 = ypq * R_4_0_0_3;
            double R_2_0_2_3 = ypq * R_3_0_1_3 + 1 * R_3_0_0_3;
            double R_1_0_3_3 = ypq * R_2_0_2_3 + 2 * R_2_0_1_3;
            double R_0_0_4_3 = ypq * R_1_0_3_3 + 3 * R_1_0_2_3;
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+400];
            double R_4_0_1_2 = ypq * R_5_0_0_2;
            double R_3_0_2_2 = ypq * R_4_0_1_2 + 1 * R_4_0_0_2;
            double R_2_0_3_2 = ypq * R_3_0_2_2 + 2 * R_3_0_1_2;
            double R_1_0_4_2 = ypq * R_2_0_3_2 + 3 * R_2_0_2_2;
            double R_0_0_5_2 = ypq * R_1_0_4_2 + 4 * R_1_0_3_2;
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+416];
            double R_5_0_1_1 = ypq * R_6_0_0_1;
            double R_4_0_2_1 = ypq * R_5_0_1_1 + 1 * R_5_0_0_1;
            double R_3_0_3_1 = ypq * R_4_0_2_1 + 2 * R_4_0_1_1;
            double R_2_0_4_1 = ypq * R_3_0_3_1 + 3 * R_3_0_2_1;
            double R_1_0_5_1 = ypq * R_2_0_4_1 + 4 * R_2_0_3_1;
            double R_0_0_6_1 = ypq * R_1_0_5_1 + 5 * R_1_0_4_1;
            vj_kl -= R_0_0_6_1 * dm_ij_cache[tx+432];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+448];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+464];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+480];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+496];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+512];
            double R_0_1_0_6 = xpq * R_1_0_0_6;
            vj_kl -= R_0_1_0_6 * dm_ij_cache[tx+528];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+544];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+560];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+576];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+592];
            double R_0_1_1_5 = xpq * R_1_0_1_5;
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+608];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+624];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+640];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+656];
            double R_0_1_2_4 = xpq * R_1_0_2_4;
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+672];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+688];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+704];
            double R_0_1_3_3 = xpq * R_1_0_3_3;
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+720];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+736];
            double R_0_1_4_2 = xpq * R_1_0_4_2;
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+752];
            double R_0_1_5_1 = xpq * R_1_0_5_1;
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+768];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+784];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+800];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+816];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+832];
            double R_1_1_0_5 = xpq * R_2_0_0_5;
            double R_0_2_0_5 = xpq * R_1_1_0_5 + 1 * R_1_0_0_5;
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+848];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+864];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+880];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+896];
            double R_1_1_1_4 = xpq * R_2_0_1_4;
            double R_0_2_1_4 = xpq * R_1_1_1_4 + 1 * R_1_0_1_4;
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+912];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+928];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+944];
            double R_1_1_2_3 = xpq * R_2_0_2_3;
            double R_0_2_2_3 = xpq * R_1_1_2_3 + 1 * R_1_0_2_3;
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+960];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+976];
            double R_1_1_3_2 = xpq * R_2_0_3_2;
            double R_0_2_3_2 = xpq * R_1_1_3_2 + 1 * R_1_0_3_2;
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+992];
            double R_1_1_4_1 = xpq * R_2_0_4_1;
            double R_0_2_4_1 = xpq * R_1_1_4_1 + 1 * R_1_0_4_1;
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+1008];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+1024];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+1040];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+1056];
            double R_2_1_0_4 = xpq * R_3_0_0_4;
            double R_1_2_0_4 = xpq * R_2_1_0_4 + 1 * R_2_0_0_4;
            double R_0_3_0_4 = xpq * R_1_2_0_4 + 2 * R_1_1_0_4;
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+1072];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+1088];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+1104];
            double R_2_1_1_3 = xpq * R_3_0_1_3;
            double R_1_2_1_3 = xpq * R_2_1_1_3 + 1 * R_2_0_1_3;
            double R_0_3_1_3 = xpq * R_1_2_1_3 + 2 * R_1_1_1_3;
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+1120];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+1136];
            double R_2_1_2_2 = xpq * R_3_0_2_2;
            double R_1_2_2_2 = xpq * R_2_1_2_2 + 1 * R_2_0_2_2;
            double R_0_3_2_2 = xpq * R_1_2_2_2 + 2 * R_1_1_2_2;
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+1152];
            double R_2_1_3_1 = xpq * R_3_0_3_1;
            double R_1_2_3_1 = xpq * R_2_1_3_1 + 1 * R_2_0_3_1;
            double R_0_3_3_1 = xpq * R_1_2_3_1 + 2 * R_1_1_3_1;
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+1168];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+1184];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+1200];
            double R_3_1_0_3 = xpq * R_4_0_0_3;
            double R_2_2_0_3 = xpq * R_3_1_0_3 + 1 * R_3_0_0_3;
            double R_1_3_0_3 = xpq * R_2_2_0_3 + 2 * R_2_1_0_3;
            double R_0_4_0_3 = xpq * R_1_3_0_3 + 3 * R_1_2_0_3;
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+1216];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+1232];
            double R_3_1_1_2 = xpq * R_4_0_1_2;
            double R_2_2_1_2 = xpq * R_3_1_1_2 + 1 * R_3_0_1_2;
            double R_1_3_1_2 = xpq * R_2_2_1_2 + 2 * R_2_1_1_2;
            double R_0_4_1_2 = xpq * R_1_3_1_2 + 3 * R_1_2_1_2;
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+1248];
            double R_3_1_2_1 = xpq * R_4_0_2_1;
            double R_2_2_2_1 = xpq * R_3_1_2_1 + 1 * R_3_0_2_1;
            double R_1_3_2_1 = xpq * R_2_2_2_1 + 2 * R_2_1_2_1;
            double R_0_4_2_1 = xpq * R_1_3_2_1 + 3 * R_1_2_2_1;
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+1264];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+1280];
            double R_4_1_0_2 = xpq * R_5_0_0_2;
            double R_3_2_0_2 = xpq * R_4_1_0_2 + 1 * R_4_0_0_2;
            double R_2_3_0_2 = xpq * R_3_2_0_2 + 2 * R_3_1_0_2;
            double R_1_4_0_2 = xpq * R_2_3_0_2 + 3 * R_2_2_0_2;
            double R_0_5_0_2 = xpq * R_1_4_0_2 + 4 * R_1_3_0_2;
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+1296];
            double R_4_1_1_1 = xpq * R_5_0_1_1;
            double R_3_2_1_1 = xpq * R_4_1_1_1 + 1 * R_4_0_1_1;
            double R_2_3_1_1 = xpq * R_3_2_1_1 + 2 * R_3_1_1_1;
            double R_1_4_1_1 = xpq * R_2_3_1_1 + 3 * R_2_2_1_1;
            double R_0_5_1_1 = xpq * R_1_4_1_1 + 4 * R_1_3_1_1;
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+1312];
            double R_5_1_0_1 = xpq * R_6_0_0_1;
            double R_4_2_0_1 = xpq * R_5_1_0_1 + 1 * R_5_0_0_1;
            double R_3_3_0_1 = xpq * R_4_2_0_1 + 2 * R_4_1_0_1;
            double R_2_4_0_1 = xpq * R_3_3_0_1 + 3 * R_3_2_0_1;
            double R_1_5_0_1 = xpq * R_2_4_0_1 + 4 * R_2_3_0_1;
            double R_0_6_0_1 = xpq * R_1_5_0_1 + 5 * R_1_4_0_1;
            vj_kl -= R_0_6_0_1 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+144] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_0_2 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_0_3 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_0_4 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_0_5 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_0_6 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_0_7 * dm_ij_cache[tx+80];
            double R_7_0_0_1 = zpq * gamma_inc[sq_id+8*256];
            double R_6_0_0_2 = zpq * R_7_0_0_1 + 1 * gamma_inc[sq_id+7*256];
            double R_5_0_0_3 = zpq * R_6_0_0_2 + 2 * R_6_0_0_1;
            double R_4_0_0_4 = zpq * R_5_0_0_3 + 3 * R_5_0_0_2;
            double R_3_0_0_5 = zpq * R_4_0_0_4 + 4 * R_4_0_0_3;
            double R_2_0_0_6 = zpq * R_3_0_0_5 + 5 * R_3_0_0_4;
            double R_1_0_0_7 = zpq * R_2_0_0_6 + 6 * R_2_0_0_5;
            double R_0_0_0_8 = zpq * R_1_0_0_7 + 7 * R_1_0_0_6;
            vj_kl += R_0_0_0_8 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_1_6 * dm_ij_cache[tx+176];
            double R_0_0_1_7 = ypq * R_1_0_0_7;
            vj_kl += R_0_0_1_7 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+208];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+224];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+240];
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+256];
            double R_1_0_1_6 = ypq * R_2_0_0_6;
            double R_0_0_2_6 = ypq * R_1_0_1_6 + 1 * R_1_0_0_6;
            vj_kl += R_0_0_2_6 * dm_ij_cache[tx+272];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+288];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+304];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+320];
            double R_2_0_1_5 = ypq * R_3_0_0_5;
            double R_1_0_2_5 = ypq * R_2_0_1_5 + 1 * R_2_0_0_5;
            double R_0_0_3_5 = ypq * R_1_0_2_5 + 2 * R_1_0_1_5;
            vj_kl += R_0_0_3_5 * dm_ij_cache[tx+336];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+352];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+368];
            double R_3_0_1_4 = ypq * R_4_0_0_4;
            double R_2_0_2_4 = ypq * R_3_0_1_4 + 1 * R_3_0_0_4;
            double R_1_0_3_4 = ypq * R_2_0_2_4 + 2 * R_2_0_1_4;
            double R_0_0_4_4 = ypq * R_1_0_3_4 + 3 * R_1_0_2_4;
            vj_kl += R_0_0_4_4 * dm_ij_cache[tx+384];
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+400];
            double R_4_0_1_3 = ypq * R_5_0_0_3;
            double R_3_0_2_3 = ypq * R_4_0_1_3 + 1 * R_4_0_0_3;
            double R_2_0_3_3 = ypq * R_3_0_2_3 + 2 * R_3_0_1_3;
            double R_1_0_4_3 = ypq * R_2_0_3_3 + 3 * R_2_0_2_3;
            double R_0_0_5_3 = ypq * R_1_0_4_3 + 4 * R_1_0_3_3;
            vj_kl += R_0_0_5_3 * dm_ij_cache[tx+416];
            double R_5_0_1_2 = ypq * R_6_0_0_2;
            double R_4_0_2_2 = ypq * R_5_0_1_2 + 1 * R_5_0_0_2;
            double R_3_0_3_2 = ypq * R_4_0_2_2 + 2 * R_4_0_1_2;
            double R_2_0_4_2 = ypq * R_3_0_3_2 + 3 * R_3_0_2_2;
            double R_1_0_5_2 = ypq * R_2_0_4_2 + 4 * R_2_0_3_2;
            double R_0_0_6_2 = ypq * R_1_0_5_2 + 5 * R_1_0_4_2;
            vj_kl += R_0_0_6_2 * dm_ij_cache[tx+432];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+448];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+464];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+480];
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+496];
            vj_kl += R_0_1_0_6 * dm_ij_cache[tx+512];
            double R_0_1_0_7 = xpq * R_1_0_0_7;
            vj_kl += R_0_1_0_7 * dm_ij_cache[tx+528];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+544];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+560];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+576];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+592];
            double R_0_1_1_6 = xpq * R_1_0_1_6;
            vj_kl += R_0_1_1_6 * dm_ij_cache[tx+608];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+624];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+640];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+656];
            double R_0_1_2_5 = xpq * R_1_0_2_5;
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+672];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+688];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+704];
            double R_0_1_3_4 = xpq * R_1_0_3_4;
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+720];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+736];
            double R_0_1_4_3 = xpq * R_1_0_4_3;
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+752];
            double R_0_1_5_2 = xpq * R_1_0_5_2;
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+768];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+784];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+800];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+816];
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+832];
            double R_1_1_0_6 = xpq * R_2_0_0_6;
            double R_0_2_0_6 = xpq * R_1_1_0_6 + 1 * R_1_0_0_6;
            vj_kl += R_0_2_0_6 * dm_ij_cache[tx+848];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+864];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+880];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+896];
            double R_1_1_1_5 = xpq * R_2_0_1_5;
            double R_0_2_1_5 = xpq * R_1_1_1_5 + 1 * R_1_0_1_5;
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+912];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+928];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+944];
            double R_1_1_2_4 = xpq * R_2_0_2_4;
            double R_0_2_2_4 = xpq * R_1_1_2_4 + 1 * R_1_0_2_4;
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+960];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+976];
            double R_1_1_3_3 = xpq * R_2_0_3_3;
            double R_0_2_3_3 = xpq * R_1_1_3_3 + 1 * R_1_0_3_3;
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+992];
            double R_1_1_4_2 = xpq * R_2_0_4_2;
            double R_0_2_4_2 = xpq * R_1_1_4_2 + 1 * R_1_0_4_2;
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+1008];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+1024];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+1040];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+1056];
            double R_2_1_0_5 = xpq * R_3_0_0_5;
            double R_1_2_0_5 = xpq * R_2_1_0_5 + 1 * R_2_0_0_5;
            double R_0_3_0_5 = xpq * R_1_2_0_5 + 2 * R_1_1_0_5;
            vj_kl += R_0_3_0_5 * dm_ij_cache[tx+1072];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+1088];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+1104];
            double R_2_1_1_4 = xpq * R_3_0_1_4;
            double R_1_2_1_4 = xpq * R_2_1_1_4 + 1 * R_2_0_1_4;
            double R_0_3_1_4 = xpq * R_1_2_1_4 + 2 * R_1_1_1_4;
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+1120];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+1136];
            double R_2_1_2_3 = xpq * R_3_0_2_3;
            double R_1_2_2_3 = xpq * R_2_1_2_3 + 1 * R_2_0_2_3;
            double R_0_3_2_3 = xpq * R_1_2_2_3 + 2 * R_1_1_2_3;
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+1152];
            double R_2_1_3_2 = xpq * R_3_0_3_2;
            double R_1_2_3_2 = xpq * R_2_1_3_2 + 1 * R_2_0_3_2;
            double R_0_3_3_2 = xpq * R_1_2_3_2 + 2 * R_1_1_3_2;
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+1168];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+1184];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+1200];
            double R_3_1_0_4 = xpq * R_4_0_0_4;
            double R_2_2_0_4 = xpq * R_3_1_0_4 + 1 * R_3_0_0_4;
            double R_1_3_0_4 = xpq * R_2_2_0_4 + 2 * R_2_1_0_4;
            double R_0_4_0_4 = xpq * R_1_3_0_4 + 3 * R_1_2_0_4;
            vj_kl += R_0_4_0_4 * dm_ij_cache[tx+1216];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+1232];
            double R_3_1_1_3 = xpq * R_4_0_1_3;
            double R_2_2_1_3 = xpq * R_3_1_1_3 + 1 * R_3_0_1_3;
            double R_1_3_1_3 = xpq * R_2_2_1_3 + 2 * R_2_1_1_3;
            double R_0_4_1_3 = xpq * R_1_3_1_3 + 3 * R_1_2_1_3;
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+1248];
            double R_3_1_2_2 = xpq * R_4_0_2_2;
            double R_2_2_2_2 = xpq * R_3_1_2_2 + 1 * R_3_0_2_2;
            double R_1_3_2_2 = xpq * R_2_2_2_2 + 2 * R_2_1_2_2;
            double R_0_4_2_2 = xpq * R_1_3_2_2 + 3 * R_1_2_2_2;
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+1264];
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+1280];
            double R_4_1_0_3 = xpq * R_5_0_0_3;
            double R_3_2_0_3 = xpq * R_4_1_0_3 + 1 * R_4_0_0_3;
            double R_2_3_0_3 = xpq * R_3_2_0_3 + 2 * R_3_1_0_3;
            double R_1_4_0_3 = xpq * R_2_3_0_3 + 3 * R_2_2_0_3;
            double R_0_5_0_3 = xpq * R_1_4_0_3 + 4 * R_1_3_0_3;
            vj_kl += R_0_5_0_3 * dm_ij_cache[tx+1296];
            double R_4_1_1_2 = xpq * R_5_0_1_2;
            double R_3_2_1_2 = xpq * R_4_1_1_2 + 1 * R_4_0_1_2;
            double R_2_3_1_2 = xpq * R_3_2_1_2 + 2 * R_3_1_1_2;
            double R_1_4_1_2 = xpq * R_2_3_1_2 + 3 * R_2_2_1_2;
            double R_0_5_1_2 = xpq * R_1_4_1_2 + 4 * R_1_3_1_2;
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+1312];
            double R_5_1_0_2 = xpq * R_6_0_0_2;
            double R_4_2_0_2 = xpq * R_5_1_0_2 + 1 * R_5_0_0_2;
            double R_3_3_0_2 = xpq * R_4_2_0_2 + 2 * R_4_1_0_2;
            double R_2_4_0_2 = xpq * R_3_3_0_2 + 3 * R_3_2_0_2;
            double R_1_5_0_2 = xpq * R_2_4_0_2 + 4 * R_2_3_0_2;
            double R_0_6_0_2 = xpq * R_1_5_0_2 + 5 * R_1_4_0_2;
            vj_kl += R_0_6_0_2 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+288] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_0_3 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_0_4 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_0_5 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_0_6 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_0_7 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_0_8 * dm_ij_cache[tx+80];
            double R_8_0_0_1 = zpq * gamma_inc[sq_id+9*256];
            double R_7_0_0_2 = zpq * R_8_0_0_1 + 1 * gamma_inc[sq_id+8*256];
            double R_6_0_0_3 = zpq * R_7_0_0_2 + 2 * R_7_0_0_1;
            double R_5_0_0_4 = zpq * R_6_0_0_3 + 3 * R_6_0_0_2;
            double R_4_0_0_5 = zpq * R_5_0_0_4 + 4 * R_5_0_0_3;
            double R_3_0_0_6 = zpq * R_4_0_0_5 + 5 * R_4_0_0_4;
            double R_2_0_0_7 = zpq * R_3_0_0_6 + 6 * R_3_0_0_5;
            double R_1_0_0_8 = zpq * R_2_0_0_7 + 7 * R_2_0_0_6;
            double R_0_0_0_9 = zpq * R_1_0_0_8 + 8 * R_1_0_0_7;
            vj_kl -= R_0_0_0_9 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_1_6 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_1_7 * dm_ij_cache[tx+176];
            double R_0_0_1_8 = ypq * R_1_0_0_8;
            vj_kl -= R_0_0_1_8 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+208];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+224];
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+240];
            vj_kl -= R_0_0_2_6 * dm_ij_cache[tx+256];
            double R_1_0_1_7 = ypq * R_2_0_0_7;
            double R_0_0_2_7 = ypq * R_1_0_1_7 + 1 * R_1_0_0_7;
            vj_kl -= R_0_0_2_7 * dm_ij_cache[tx+272];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+288];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+304];
            vj_kl -= R_0_0_3_5 * dm_ij_cache[tx+320];
            double R_2_0_1_6 = ypq * R_3_0_0_6;
            double R_1_0_2_6 = ypq * R_2_0_1_6 + 1 * R_2_0_0_6;
            double R_0_0_3_6 = ypq * R_1_0_2_6 + 2 * R_1_0_1_6;
            vj_kl -= R_0_0_3_6 * dm_ij_cache[tx+336];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+352];
            vj_kl -= R_0_0_4_4 * dm_ij_cache[tx+368];
            double R_3_0_1_5 = ypq * R_4_0_0_5;
            double R_2_0_2_5 = ypq * R_3_0_1_5 + 1 * R_3_0_0_5;
            double R_1_0_3_5 = ypq * R_2_0_2_5 + 2 * R_2_0_1_5;
            double R_0_0_4_5 = ypq * R_1_0_3_5 + 3 * R_1_0_2_5;
            vj_kl -= R_0_0_4_5 * dm_ij_cache[tx+384];
            vj_kl -= R_0_0_5_3 * dm_ij_cache[tx+400];
            double R_4_0_1_4 = ypq * R_5_0_0_4;
            double R_3_0_2_4 = ypq * R_4_0_1_4 + 1 * R_4_0_0_4;
            double R_2_0_3_4 = ypq * R_3_0_2_4 + 2 * R_3_0_1_4;
            double R_1_0_4_4 = ypq * R_2_0_3_4 + 3 * R_2_0_2_4;
            double R_0_0_5_4 = ypq * R_1_0_4_4 + 4 * R_1_0_3_4;
            vj_kl -= R_0_0_5_4 * dm_ij_cache[tx+416];
            double R_5_0_1_3 = ypq * R_6_0_0_3;
            double R_4_0_2_3 = ypq * R_5_0_1_3 + 1 * R_5_0_0_3;
            double R_3_0_3_3 = ypq * R_4_0_2_3 + 2 * R_4_0_1_3;
            double R_2_0_4_3 = ypq * R_3_0_3_3 + 3 * R_3_0_2_3;
            double R_1_0_5_3 = ypq * R_2_0_4_3 + 4 * R_2_0_3_3;
            double R_0_0_6_3 = ypq * R_1_0_5_3 + 5 * R_1_0_4_3;
            vj_kl -= R_0_0_6_3 * dm_ij_cache[tx+432];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+448];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+464];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+480];
            vj_kl -= R_0_1_0_6 * dm_ij_cache[tx+496];
            vj_kl -= R_0_1_0_7 * dm_ij_cache[tx+512];
            double R_0_1_0_8 = xpq * R_1_0_0_8;
            vj_kl -= R_0_1_0_8 * dm_ij_cache[tx+528];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+544];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+560];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+576];
            vj_kl -= R_0_1_1_6 * dm_ij_cache[tx+592];
            double R_0_1_1_7 = xpq * R_1_0_1_7;
            vj_kl -= R_0_1_1_7 * dm_ij_cache[tx+608];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+624];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+640];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+656];
            double R_0_1_2_6 = xpq * R_1_0_2_6;
            vj_kl -= R_0_1_2_6 * dm_ij_cache[tx+672];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+688];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+704];
            double R_0_1_3_5 = xpq * R_1_0_3_5;
            vj_kl -= R_0_1_3_5 * dm_ij_cache[tx+720];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+736];
            double R_0_1_4_4 = xpq * R_1_0_4_4;
            vj_kl -= R_0_1_4_4 * dm_ij_cache[tx+752];
            double R_0_1_5_3 = xpq * R_1_0_5_3;
            vj_kl -= R_0_1_5_3 * dm_ij_cache[tx+768];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+784];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+800];
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+816];
            vj_kl -= R_0_2_0_6 * dm_ij_cache[tx+832];
            double R_1_1_0_7 = xpq * R_2_0_0_7;
            double R_0_2_0_7 = xpq * R_1_1_0_7 + 1 * R_1_0_0_7;
            vj_kl -= R_0_2_0_7 * dm_ij_cache[tx+848];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+864];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+880];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+896];
            double R_1_1_1_6 = xpq * R_2_0_1_6;
            double R_0_2_1_6 = xpq * R_1_1_1_6 + 1 * R_1_0_1_6;
            vj_kl -= R_0_2_1_6 * dm_ij_cache[tx+912];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+928];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+944];
            double R_1_1_2_5 = xpq * R_2_0_2_5;
            double R_0_2_2_5 = xpq * R_1_1_2_5 + 1 * R_1_0_2_5;
            vj_kl -= R_0_2_2_5 * dm_ij_cache[tx+960];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+976];
            double R_1_1_3_4 = xpq * R_2_0_3_4;
            double R_0_2_3_4 = xpq * R_1_1_3_4 + 1 * R_1_0_3_4;
            vj_kl -= R_0_2_3_4 * dm_ij_cache[tx+992];
            double R_1_1_4_3 = xpq * R_2_0_4_3;
            double R_0_2_4_3 = xpq * R_1_1_4_3 + 1 * R_1_0_4_3;
            vj_kl -= R_0_2_4_3 * dm_ij_cache[tx+1008];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+1024];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+1040];
            vj_kl -= R_0_3_0_5 * dm_ij_cache[tx+1056];
            double R_2_1_0_6 = xpq * R_3_0_0_6;
            double R_1_2_0_6 = xpq * R_2_1_0_6 + 1 * R_2_0_0_6;
            double R_0_3_0_6 = xpq * R_1_2_0_6 + 2 * R_1_1_0_6;
            vj_kl -= R_0_3_0_6 * dm_ij_cache[tx+1072];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+1088];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+1104];
            double R_2_1_1_5 = xpq * R_3_0_1_5;
            double R_1_2_1_5 = xpq * R_2_1_1_5 + 1 * R_2_0_1_5;
            double R_0_3_1_5 = xpq * R_1_2_1_5 + 2 * R_1_1_1_5;
            vj_kl -= R_0_3_1_5 * dm_ij_cache[tx+1120];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+1136];
            double R_2_1_2_4 = xpq * R_3_0_2_4;
            double R_1_2_2_4 = xpq * R_2_1_2_4 + 1 * R_2_0_2_4;
            double R_0_3_2_4 = xpq * R_1_2_2_4 + 2 * R_1_1_2_4;
            vj_kl -= R_0_3_2_4 * dm_ij_cache[tx+1152];
            double R_2_1_3_3 = xpq * R_3_0_3_3;
            double R_1_2_3_3 = xpq * R_2_1_3_3 + 1 * R_2_0_3_3;
            double R_0_3_3_3 = xpq * R_1_2_3_3 + 2 * R_1_1_3_3;
            vj_kl -= R_0_3_3_3 * dm_ij_cache[tx+1168];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+1184];
            vj_kl -= R_0_4_0_4 * dm_ij_cache[tx+1200];
            double R_3_1_0_5 = xpq * R_4_0_0_5;
            double R_2_2_0_5 = xpq * R_3_1_0_5 + 1 * R_3_0_0_5;
            double R_1_3_0_5 = xpq * R_2_2_0_5 + 2 * R_2_1_0_5;
            double R_0_4_0_5 = xpq * R_1_3_0_5 + 3 * R_1_2_0_5;
            vj_kl -= R_0_4_0_5 * dm_ij_cache[tx+1216];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+1232];
            double R_3_1_1_4 = xpq * R_4_0_1_4;
            double R_2_2_1_4 = xpq * R_3_1_1_4 + 1 * R_3_0_1_4;
            double R_1_3_1_4 = xpq * R_2_2_1_4 + 2 * R_2_1_1_4;
            double R_0_4_1_4 = xpq * R_1_3_1_4 + 3 * R_1_2_1_4;
            vj_kl -= R_0_4_1_4 * dm_ij_cache[tx+1248];
            double R_3_1_2_3 = xpq * R_4_0_2_3;
            double R_2_2_2_3 = xpq * R_3_1_2_3 + 1 * R_3_0_2_3;
            double R_1_3_2_3 = xpq * R_2_2_2_3 + 2 * R_2_1_2_3;
            double R_0_4_2_3 = xpq * R_1_3_2_3 + 3 * R_1_2_2_3;
            vj_kl -= R_0_4_2_3 * dm_ij_cache[tx+1264];
            vj_kl -= R_0_5_0_3 * dm_ij_cache[tx+1280];
            double R_4_1_0_4 = xpq * R_5_0_0_4;
            double R_3_2_0_4 = xpq * R_4_1_0_4 + 1 * R_4_0_0_4;
            double R_2_3_0_4 = xpq * R_3_2_0_4 + 2 * R_3_1_0_4;
            double R_1_4_0_4 = xpq * R_2_3_0_4 + 3 * R_2_2_0_4;
            double R_0_5_0_4 = xpq * R_1_4_0_4 + 4 * R_1_3_0_4;
            vj_kl -= R_0_5_0_4 * dm_ij_cache[tx+1296];
            double R_4_1_1_3 = xpq * R_5_0_1_3;
            double R_3_2_1_3 = xpq * R_4_1_1_3 + 1 * R_4_0_1_3;
            double R_2_3_1_3 = xpq * R_3_2_1_3 + 2 * R_3_1_1_3;
            double R_1_4_1_3 = xpq * R_2_3_1_3 + 3 * R_2_2_1_3;
            double R_0_5_1_3 = xpq * R_1_4_1_3 + 4 * R_1_3_1_3;
            vj_kl -= R_0_5_1_3 * dm_ij_cache[tx+1312];
            double R_5_1_0_3 = xpq * R_6_0_0_3;
            double R_4_2_0_3 = xpq * R_5_1_0_3 + 1 * R_5_0_0_3;
            double R_3_3_0_3 = xpq * R_4_2_0_3 + 2 * R_4_1_0_3;
            double R_2_4_0_3 = xpq * R_3_3_0_3 + 3 * R_3_2_0_3;
            double R_1_5_0_3 = xpq * R_2_4_0_3 + 4 * R_2_3_0_3;
            double R_0_6_0_3 = xpq * R_1_5_0_3 + 5 * R_1_4_0_3;
            vj_kl -= R_0_6_0_3 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+432] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_1_6 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+272];
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+288];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_0_5_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+384];
            vj_kl -= R_0_0_6_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_0_6_1 * dm_ij_cache[tx+416];
            double R_6_0_1_0 = ypq * gamma_inc[sq_id+7*256];
            double R_5_0_2_0 = ypq * R_6_0_1_0 + 1 * gamma_inc[sq_id+6*256];
            double R_4_0_3_0 = ypq * R_5_0_2_0 + 2 * R_5_0_1_0;
            double R_3_0_4_0 = ypq * R_4_0_3_0 + 3 * R_4_0_2_0;
            double R_2_0_5_0 = ypq * R_3_0_4_0 + 4 * R_3_0_3_0;
            double R_1_0_6_0 = ypq * R_2_0_5_0 + 5 * R_2_0_4_0;
            double R_0_0_7_0 = ypq * R_1_0_6_0 + 6 * R_1_0_5_0;
            vj_kl -= R_0_0_7_0 * dm_ij_cache[tx+432];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+480];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+496];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+512];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+528];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+544];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+560];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+576];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+592];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+608];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+624];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+640];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+656];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+672];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+688];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+704];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+720];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+736];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+752];
            double R_0_1_6_0 = xpq * R_1_0_6_0;
            vj_kl -= R_0_1_6_0 * dm_ij_cache[tx+768];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+784];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+800];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+816];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+832];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+848];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+864];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+880];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+896];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+912];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+928];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+944];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+960];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+976];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+992];
            double R_1_1_5_0 = xpq * R_2_0_5_0;
            double R_0_2_5_0 = xpq * R_1_1_5_0 + 1 * R_1_0_5_0;
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+1008];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+1024];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+1040];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+1056];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+1072];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+1088];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+1104];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+1120];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+1136];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+1152];
            double R_2_1_4_0 = xpq * R_3_0_4_0;
            double R_1_2_4_0 = xpq * R_2_1_4_0 + 1 * R_2_0_4_0;
            double R_0_3_4_0 = xpq * R_1_2_4_0 + 2 * R_1_1_4_0;
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+1168];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+1184];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+1200];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+1216];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+1232];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+1248];
            double R_3_1_3_0 = xpq * R_4_0_3_0;
            double R_2_2_3_0 = xpq * R_3_1_3_0 + 1 * R_3_0_3_0;
            double R_1_3_3_0 = xpq * R_2_2_3_0 + 2 * R_2_1_3_0;
            double R_0_4_3_0 = xpq * R_1_3_3_0 + 3 * R_1_2_3_0;
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+1264];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+1280];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+1296];
            double R_4_1_2_0 = xpq * R_5_0_2_0;
            double R_3_2_2_0 = xpq * R_4_1_2_0 + 1 * R_4_0_2_0;
            double R_2_3_2_0 = xpq * R_3_2_2_0 + 2 * R_3_1_2_0;
            double R_1_4_2_0 = xpq * R_2_3_2_0 + 3 * R_2_2_2_0;
            double R_0_5_2_0 = xpq * R_1_4_2_0 + 4 * R_1_3_2_0;
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+1312];
            double R_5_1_1_0 = xpq * R_6_0_1_0;
            double R_4_2_1_0 = xpq * R_5_1_1_0 + 1 * R_5_0_1_0;
            double R_3_3_1_0 = xpq * R_4_2_1_0 + 2 * R_4_1_1_0;
            double R_2_4_1_0 = xpq * R_3_3_1_0 + 3 * R_3_2_1_0;
            double R_1_5_1_0 = xpq * R_2_4_1_0 + 4 * R_2_3_1_0;
            double R_0_6_1_0 = xpq * R_1_5_1_0 + 5 * R_1_4_1_0;
            vj_kl -= R_0_6_1_0 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+576] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_1_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_1_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_1_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_1_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_1_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_1_6 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_1_7 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_2_6 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+224];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+240];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+256];
            vj_kl += R_0_0_3_5 * dm_ij_cache[tx+272];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+288];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+304];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+320];
            vj_kl += R_0_0_4_4 * dm_ij_cache[tx+336];
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_0_5_3 * dm_ij_cache[tx+384];
            vj_kl += R_0_0_6_1 * dm_ij_cache[tx+400];
            vj_kl += R_0_0_6_2 * dm_ij_cache[tx+416];
            double R_6_0_1_1 = ypq * R_7_0_0_1;
            double R_5_0_2_1 = ypq * R_6_0_1_1 + 1 * R_6_0_0_1;
            double R_4_0_3_1 = ypq * R_5_0_2_1 + 2 * R_5_0_1_1;
            double R_3_0_4_1 = ypq * R_4_0_3_1 + 3 * R_4_0_2_1;
            double R_2_0_5_1 = ypq * R_3_0_4_1 + 4 * R_3_0_3_1;
            double R_1_0_6_1 = ypq * R_2_0_5_1 + 5 * R_2_0_4_1;
            double R_0_0_7_1 = ypq * R_1_0_6_1 + 6 * R_1_0_5_1;
            vj_kl += R_0_0_7_1 * dm_ij_cache[tx+432];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+448];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+464];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+480];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+496];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+512];
            vj_kl += R_0_1_1_6 * dm_ij_cache[tx+528];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+544];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+560];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+576];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+592];
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+608];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+624];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+640];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+656];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+672];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+688];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+704];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+720];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+736];
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+752];
            double R_0_1_6_1 = xpq * R_1_0_6_1;
            vj_kl += R_0_1_6_1 * dm_ij_cache[tx+768];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+784];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+800];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+816];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+832];
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+848];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+864];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+880];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+896];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+912];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+928];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+944];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+960];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+976];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+992];
            double R_1_1_5_1 = xpq * R_2_0_5_1;
            double R_0_2_5_1 = xpq * R_1_1_5_1 + 1 * R_1_0_5_1;
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+1008];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+1024];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+1040];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+1056];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+1072];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+1088];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+1104];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+1120];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+1136];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+1152];
            double R_2_1_4_1 = xpq * R_3_0_4_1;
            double R_1_2_4_1 = xpq * R_2_1_4_1 + 1 * R_2_0_4_1;
            double R_0_3_4_1 = xpq * R_1_2_4_1 + 2 * R_1_1_4_1;
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+1168];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+1184];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+1200];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+1216];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+1232];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+1248];
            double R_3_1_3_1 = xpq * R_4_0_3_1;
            double R_2_2_3_1 = xpq * R_3_1_3_1 + 1 * R_3_0_3_1;
            double R_1_3_3_1 = xpq * R_2_2_3_1 + 2 * R_2_1_3_1;
            double R_0_4_3_1 = xpq * R_1_3_3_1 + 3 * R_1_2_3_1;
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+1264];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+1280];
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+1296];
            double R_4_1_2_1 = xpq * R_5_0_2_1;
            double R_3_2_2_1 = xpq * R_4_1_2_1 + 1 * R_4_0_2_1;
            double R_2_3_2_1 = xpq * R_3_2_2_1 + 2 * R_3_1_2_1;
            double R_1_4_2_1 = xpq * R_2_3_2_1 + 3 * R_2_2_2_1;
            double R_0_5_2_1 = xpq * R_1_4_2_1 + 4 * R_1_3_2_1;
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+1312];
            double R_5_1_1_1 = xpq * R_6_0_1_1;
            double R_4_2_1_1 = xpq * R_5_1_1_1 + 1 * R_5_0_1_1;
            double R_3_3_1_1 = xpq * R_4_2_1_1 + 2 * R_4_1_1_1;
            double R_2_4_1_1 = xpq * R_3_3_1_1 + 3 * R_3_2_1_1;
            double R_1_5_1_1 = xpq * R_2_4_1_1 + 4 * R_2_3_1_1;
            double R_0_6_1_1 = xpq * R_1_5_1_1 + 5 * R_1_4_1_1;
            vj_kl += R_0_6_1_1 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+720] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_1_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_1_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_1_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_1_5 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_1_6 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_1_7 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_1_8 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_2_6 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_2_7 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+240];
            vj_kl -= R_0_0_3_5 * dm_ij_cache[tx+256];
            vj_kl -= R_0_0_3_6 * dm_ij_cache[tx+272];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+288];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+304];
            vj_kl -= R_0_0_4_4 * dm_ij_cache[tx+320];
            vj_kl -= R_0_0_4_5 * dm_ij_cache[tx+336];
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+352];
            vj_kl -= R_0_0_5_3 * dm_ij_cache[tx+368];
            vj_kl -= R_0_0_5_4 * dm_ij_cache[tx+384];
            vj_kl -= R_0_0_6_2 * dm_ij_cache[tx+400];
            vj_kl -= R_0_0_6_3 * dm_ij_cache[tx+416];
            double R_6_0_1_2 = ypq * R_7_0_0_2;
            double R_5_0_2_2 = ypq * R_6_0_1_2 + 1 * R_6_0_0_2;
            double R_4_0_3_2 = ypq * R_5_0_2_2 + 2 * R_5_0_1_2;
            double R_3_0_4_2 = ypq * R_4_0_3_2 + 3 * R_4_0_2_2;
            double R_2_0_5_2 = ypq * R_3_0_4_2 + 4 * R_3_0_3_2;
            double R_1_0_6_2 = ypq * R_2_0_5_2 + 5 * R_2_0_4_2;
            double R_0_0_7_2 = ypq * R_1_0_6_2 + 6 * R_1_0_5_2;
            vj_kl -= R_0_0_7_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+464];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+480];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+496];
            vj_kl -= R_0_1_1_6 * dm_ij_cache[tx+512];
            vj_kl -= R_0_1_1_7 * dm_ij_cache[tx+528];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+544];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+560];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+576];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+592];
            vj_kl -= R_0_1_2_6 * dm_ij_cache[tx+608];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+624];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+640];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+656];
            vj_kl -= R_0_1_3_5 * dm_ij_cache[tx+672];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+688];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+704];
            vj_kl -= R_0_1_4_4 * dm_ij_cache[tx+720];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+736];
            vj_kl -= R_0_1_5_3 * dm_ij_cache[tx+752];
            double R_0_1_6_2 = xpq * R_1_0_6_2;
            vj_kl -= R_0_1_6_2 * dm_ij_cache[tx+768];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+784];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+800];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+816];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+832];
            vj_kl -= R_0_2_1_6 * dm_ij_cache[tx+848];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+864];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+880];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+896];
            vj_kl -= R_0_2_2_5 * dm_ij_cache[tx+912];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+928];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+944];
            vj_kl -= R_0_2_3_4 * dm_ij_cache[tx+960];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+976];
            vj_kl -= R_0_2_4_3 * dm_ij_cache[tx+992];
            double R_1_1_5_2 = xpq * R_2_0_5_2;
            double R_0_2_5_2 = xpq * R_1_1_5_2 + 1 * R_1_0_5_2;
            vj_kl -= R_0_2_5_2 * dm_ij_cache[tx+1008];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+1024];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+1040];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+1056];
            vj_kl -= R_0_3_1_5 * dm_ij_cache[tx+1072];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+1088];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+1104];
            vj_kl -= R_0_3_2_4 * dm_ij_cache[tx+1120];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+1136];
            vj_kl -= R_0_3_3_3 * dm_ij_cache[tx+1152];
            double R_2_1_4_2 = xpq * R_3_0_4_2;
            double R_1_2_4_2 = xpq * R_2_1_4_2 + 1 * R_2_0_4_2;
            double R_0_3_4_2 = xpq * R_1_2_4_2 + 2 * R_1_1_4_2;
            vj_kl -= R_0_3_4_2 * dm_ij_cache[tx+1168];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+1184];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+1200];
            vj_kl -= R_0_4_1_4 * dm_ij_cache[tx+1216];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+1232];
            vj_kl -= R_0_4_2_3 * dm_ij_cache[tx+1248];
            double R_3_1_3_2 = xpq * R_4_0_3_2;
            double R_2_2_3_2 = xpq * R_3_1_3_2 + 1 * R_3_0_3_2;
            double R_1_3_3_2 = xpq * R_2_2_3_2 + 2 * R_2_1_3_2;
            double R_0_4_3_2 = xpq * R_1_3_3_2 + 3 * R_1_2_3_2;
            vj_kl -= R_0_4_3_2 * dm_ij_cache[tx+1264];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+1280];
            vj_kl -= R_0_5_1_3 * dm_ij_cache[tx+1296];
            double R_4_1_2_2 = xpq * R_5_0_2_2;
            double R_3_2_2_2 = xpq * R_4_1_2_2 + 1 * R_4_0_2_2;
            double R_2_3_2_2 = xpq * R_3_2_2_2 + 2 * R_3_1_2_2;
            double R_1_4_2_2 = xpq * R_2_3_2_2 + 3 * R_2_2_2_2;
            double R_0_5_2_2 = xpq * R_1_4_2_2 + 4 * R_1_3_2_2;
            vj_kl -= R_0_5_2_2 * dm_ij_cache[tx+1312];
            double R_5_1_1_2 = xpq * R_6_0_1_2;
            double R_4_2_1_2 = xpq * R_5_1_1_2 + 1 * R_5_0_1_2;
            double R_3_3_1_2 = xpq * R_4_2_1_2 + 2 * R_4_1_1_2;
            double R_2_4_1_2 = xpq * R_3_3_1_2 + 3 * R_3_2_1_2;
            double R_1_5_1_2 = xpq * R_2_4_1_2 + 4 * R_2_3_1_2;
            double R_0_6_1_2 = xpq * R_1_5_1_2 + 5 * R_1_4_1_2;
            vj_kl -= R_0_6_1_2 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+864] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_0_2_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_0_2_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_0_2_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_0_2_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_0_2_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_0_2_5 * dm_ij_cache[tx+80];
            vj_kl += R_0_0_2_6 * dm_ij_cache[tx+96];
            vj_kl += R_0_0_3_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_0_3_1 * dm_ij_cache[tx+128];
            vj_kl += R_0_0_3_2 * dm_ij_cache[tx+144];
            vj_kl += R_0_0_3_3 * dm_ij_cache[tx+160];
            vj_kl += R_0_0_3_4 * dm_ij_cache[tx+176];
            vj_kl += R_0_0_3_5 * dm_ij_cache[tx+192];
            vj_kl += R_0_0_4_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_0_4_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_0_4_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_0_4_3 * dm_ij_cache[tx+256];
            vj_kl += R_0_0_4_4 * dm_ij_cache[tx+272];
            vj_kl += R_0_0_5_0 * dm_ij_cache[tx+288];
            vj_kl += R_0_0_5_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_0_5_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_0_5_3 * dm_ij_cache[tx+336];
            vj_kl += R_0_0_6_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_0_6_1 * dm_ij_cache[tx+368];
            vj_kl += R_0_0_6_2 * dm_ij_cache[tx+384];
            vj_kl += R_0_0_7_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_0_7_1 * dm_ij_cache[tx+416];
            double R_7_0_1_0 = ypq * gamma_inc[sq_id+8*256];
            double R_6_0_2_0 = ypq * R_7_0_1_0 + 1 * gamma_inc[sq_id+7*256];
            double R_5_0_3_0 = ypq * R_6_0_2_0 + 2 * R_6_0_1_0;
            double R_4_0_4_0 = ypq * R_5_0_3_0 + 3 * R_5_0_2_0;
            double R_3_0_5_0 = ypq * R_4_0_4_0 + 4 * R_4_0_3_0;
            double R_2_0_6_0 = ypq * R_3_0_5_0 + 5 * R_3_0_4_0;
            double R_1_0_7_0 = ypq * R_2_0_6_0 + 6 * R_2_0_5_0;
            double R_0_0_8_0 = ypq * R_1_0_7_0 + 7 * R_1_0_6_0;
            vj_kl += R_0_0_8_0 * dm_ij_cache[tx+432];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+464];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+480];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+496];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+512];
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+528];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+544];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+560];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+576];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+592];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+608];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+624];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+640];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+656];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+672];
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+688];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+704];
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+720];
            vj_kl += R_0_1_6_0 * dm_ij_cache[tx+736];
            vj_kl += R_0_1_6_1 * dm_ij_cache[tx+752];
            double R_0_1_7_0 = xpq * R_1_0_7_0;
            vj_kl += R_0_1_7_0 * dm_ij_cache[tx+768];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+784];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+800];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+816];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+832];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+848];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+864];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+880];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+896];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+912];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+928];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+944];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+960];
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+976];
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+992];
            double R_1_1_6_0 = xpq * R_2_0_6_0;
            double R_0_2_6_0 = xpq * R_1_1_6_0 + 1 * R_1_0_6_0;
            vj_kl += R_0_2_6_0 * dm_ij_cache[tx+1008];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+1024];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+1040];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+1056];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+1072];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+1088];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+1104];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+1120];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+1136];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+1152];
            double R_2_1_5_0 = xpq * R_3_0_5_0;
            double R_1_2_5_0 = xpq * R_2_1_5_0 + 1 * R_2_0_5_0;
            double R_0_3_5_0 = xpq * R_1_2_5_0 + 2 * R_1_1_5_0;
            vj_kl += R_0_3_5_0 * dm_ij_cache[tx+1168];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+1184];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+1200];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+1216];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+1232];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+1248];
            double R_3_1_4_0 = xpq * R_4_0_4_0;
            double R_2_2_4_0 = xpq * R_3_1_4_0 + 1 * R_3_0_4_0;
            double R_1_3_4_0 = xpq * R_2_2_4_0 + 2 * R_2_1_4_0;
            double R_0_4_4_0 = xpq * R_1_3_4_0 + 3 * R_1_2_4_0;
            vj_kl += R_0_4_4_0 * dm_ij_cache[tx+1264];
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+1280];
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+1296];
            double R_4_1_3_0 = xpq * R_5_0_3_0;
            double R_3_2_3_0 = xpq * R_4_1_3_0 + 1 * R_4_0_3_0;
            double R_2_3_3_0 = xpq * R_3_2_3_0 + 2 * R_3_1_3_0;
            double R_1_4_3_0 = xpq * R_2_3_3_0 + 3 * R_2_2_3_0;
            double R_0_5_3_0 = xpq * R_1_4_3_0 + 4 * R_1_3_3_0;
            vj_kl += R_0_5_3_0 * dm_ij_cache[tx+1312];
            double R_5_1_2_0 = xpq * R_6_0_2_0;
            double R_4_2_2_0 = xpq * R_5_1_2_0 + 1 * R_5_0_2_0;
            double R_3_3_2_0 = xpq * R_4_2_2_0 + 2 * R_4_1_2_0;
            double R_2_4_2_0 = xpq * R_3_3_2_0 + 3 * R_3_2_2_0;
            double R_1_5_2_0 = xpq * R_2_4_2_0 + 4 * R_2_3_2_0;
            double R_0_6_2_0 = xpq * R_1_5_2_0 + 5 * R_1_4_2_0;
            vj_kl += R_0_6_2_0 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1008] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_2_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_2_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_2_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_2_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_2_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_2_6 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_2_7 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_3_5 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_3_6 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+224];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+240];
            vj_kl -= R_0_0_4_4 * dm_ij_cache[tx+256];
            vj_kl -= R_0_0_4_5 * dm_ij_cache[tx+272];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+288];
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+304];
            vj_kl -= R_0_0_5_3 * dm_ij_cache[tx+320];
            vj_kl -= R_0_0_5_4 * dm_ij_cache[tx+336];
            vj_kl -= R_0_0_6_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_0_6_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_0_6_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_0_7_1 * dm_ij_cache[tx+400];
            vj_kl -= R_0_0_7_2 * dm_ij_cache[tx+416];
            double R_7_0_1_1 = ypq * R_8_0_0_1;
            double R_6_0_2_1 = ypq * R_7_0_1_1 + 1 * R_7_0_0_1;
            double R_5_0_3_1 = ypq * R_6_0_2_1 + 2 * R_6_0_1_1;
            double R_4_0_4_1 = ypq * R_5_0_3_1 + 3 * R_5_0_2_1;
            double R_3_0_5_1 = ypq * R_4_0_4_1 + 4 * R_4_0_3_1;
            double R_2_0_6_1 = ypq * R_3_0_5_1 + 5 * R_3_0_4_1;
            double R_1_0_7_1 = ypq * R_2_0_6_1 + 6 * R_2_0_5_1;
            double R_0_0_8_1 = ypq * R_1_0_7_1 + 7 * R_1_0_6_1;
            vj_kl -= R_0_0_8_1 * dm_ij_cache[tx+432];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+448];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+464];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+480];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+496];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+512];
            vj_kl -= R_0_1_2_6 * dm_ij_cache[tx+528];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+544];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+560];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+576];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+592];
            vj_kl -= R_0_1_3_5 * dm_ij_cache[tx+608];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+624];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+640];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+656];
            vj_kl -= R_0_1_4_4 * dm_ij_cache[tx+672];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+688];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+704];
            vj_kl -= R_0_1_5_3 * dm_ij_cache[tx+720];
            vj_kl -= R_0_1_6_1 * dm_ij_cache[tx+736];
            vj_kl -= R_0_1_6_2 * dm_ij_cache[tx+752];
            double R_0_1_7_1 = xpq * R_1_0_7_1;
            vj_kl -= R_0_1_7_1 * dm_ij_cache[tx+768];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+784];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+800];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+816];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+832];
            vj_kl -= R_0_2_2_5 * dm_ij_cache[tx+848];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+864];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+880];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+896];
            vj_kl -= R_0_2_3_4 * dm_ij_cache[tx+912];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+928];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+944];
            vj_kl -= R_0_2_4_3 * dm_ij_cache[tx+960];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+976];
            vj_kl -= R_0_2_5_2 * dm_ij_cache[tx+992];
            double R_1_1_6_1 = xpq * R_2_0_6_1;
            double R_0_2_6_1 = xpq * R_1_1_6_1 + 1 * R_1_0_6_1;
            vj_kl -= R_0_2_6_1 * dm_ij_cache[tx+1008];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+1024];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+1040];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+1056];
            vj_kl -= R_0_3_2_4 * dm_ij_cache[tx+1072];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+1088];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+1104];
            vj_kl -= R_0_3_3_3 * dm_ij_cache[tx+1120];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+1136];
            vj_kl -= R_0_3_4_2 * dm_ij_cache[tx+1152];
            double R_2_1_5_1 = xpq * R_3_0_5_1;
            double R_1_2_5_1 = xpq * R_2_1_5_1 + 1 * R_2_0_5_1;
            double R_0_3_5_1 = xpq * R_1_2_5_1 + 2 * R_1_1_5_1;
            vj_kl -= R_0_3_5_1 * dm_ij_cache[tx+1168];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+1184];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+1200];
            vj_kl -= R_0_4_2_3 * dm_ij_cache[tx+1216];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+1232];
            vj_kl -= R_0_4_3_2 * dm_ij_cache[tx+1248];
            double R_3_1_4_1 = xpq * R_4_0_4_1;
            double R_2_2_4_1 = xpq * R_3_1_4_1 + 1 * R_3_0_4_1;
            double R_1_3_4_1 = xpq * R_2_2_4_1 + 2 * R_2_1_4_1;
            double R_0_4_4_1 = xpq * R_1_3_4_1 + 3 * R_1_2_4_1;
            vj_kl -= R_0_4_4_1 * dm_ij_cache[tx+1264];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+1280];
            vj_kl -= R_0_5_2_2 * dm_ij_cache[tx+1296];
            double R_4_1_3_1 = xpq * R_5_0_3_1;
            double R_3_2_3_1 = xpq * R_4_1_3_1 + 1 * R_4_0_3_1;
            double R_2_3_3_1 = xpq * R_3_2_3_1 + 2 * R_3_1_3_1;
            double R_1_4_3_1 = xpq * R_2_3_3_1 + 3 * R_2_2_3_1;
            double R_0_5_3_1 = xpq * R_1_4_3_1 + 4 * R_1_3_3_1;
            vj_kl -= R_0_5_3_1 * dm_ij_cache[tx+1312];
            double R_5_1_2_1 = xpq * R_6_0_2_1;
            double R_4_2_2_1 = xpq * R_5_1_2_1 + 1 * R_5_0_2_1;
            double R_3_3_2_1 = xpq * R_4_2_2_1 + 2 * R_4_1_2_1;
            double R_2_4_2_1 = xpq * R_3_3_2_1 + 3 * R_3_2_2_1;
            double R_1_5_2_1 = xpq * R_2_4_2_1 + 4 * R_2_3_2_1;
            double R_0_6_2_1 = xpq * R_1_5_2_1 + 5 * R_1_4_2_1;
            vj_kl -= R_0_6_2_1 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1152] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_0_3_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_0_3_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_0_3_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_0_3_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_0_3_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_0_3_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_0_3_6 * dm_ij_cache[tx+96];
            vj_kl -= R_0_0_4_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_0_4_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_0_4_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_0_4_3 * dm_ij_cache[tx+160];
            vj_kl -= R_0_0_4_4 * dm_ij_cache[tx+176];
            vj_kl -= R_0_0_4_5 * dm_ij_cache[tx+192];
            vj_kl -= R_0_0_5_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_0_5_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_0_5_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_0_5_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_0_5_4 * dm_ij_cache[tx+272];
            vj_kl -= R_0_0_6_0 * dm_ij_cache[tx+288];
            vj_kl -= R_0_0_6_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_0_6_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_0_6_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_0_7_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_0_7_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_0_7_2 * dm_ij_cache[tx+384];
            vj_kl -= R_0_0_8_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_0_8_1 * dm_ij_cache[tx+416];
            double R_8_0_1_0 = ypq * gamma_inc[sq_id+9*256];
            double R_7_0_2_0 = ypq * R_8_0_1_0 + 1 * gamma_inc[sq_id+8*256];
            double R_6_0_3_0 = ypq * R_7_0_2_0 + 2 * R_7_0_1_0;
            double R_5_0_4_0 = ypq * R_6_0_3_0 + 3 * R_6_0_2_0;
            double R_4_0_5_0 = ypq * R_5_0_4_0 + 4 * R_5_0_3_0;
            double R_3_0_6_0 = ypq * R_4_0_5_0 + 5 * R_4_0_4_0;
            double R_2_0_7_0 = ypq * R_3_0_6_0 + 6 * R_3_0_5_0;
            double R_1_0_8_0 = ypq * R_2_0_7_0 + 7 * R_2_0_6_0;
            double R_0_0_9_0 = ypq * R_1_0_8_0 + 8 * R_1_0_7_0;
            vj_kl -= R_0_0_9_0 * dm_ij_cache[tx+432];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+480];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+496];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+512];
            vj_kl -= R_0_1_3_5 * dm_ij_cache[tx+528];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+544];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+560];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+576];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+592];
            vj_kl -= R_0_1_4_4 * dm_ij_cache[tx+608];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+624];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+640];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+656];
            vj_kl -= R_0_1_5_3 * dm_ij_cache[tx+672];
            vj_kl -= R_0_1_6_0 * dm_ij_cache[tx+688];
            vj_kl -= R_0_1_6_1 * dm_ij_cache[tx+704];
            vj_kl -= R_0_1_6_2 * dm_ij_cache[tx+720];
            vj_kl -= R_0_1_7_0 * dm_ij_cache[tx+736];
            vj_kl -= R_0_1_7_1 * dm_ij_cache[tx+752];
            double R_0_1_8_0 = xpq * R_1_0_8_0;
            vj_kl -= R_0_1_8_0 * dm_ij_cache[tx+768];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+784];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+800];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+816];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+832];
            vj_kl -= R_0_2_3_4 * dm_ij_cache[tx+848];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+864];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+880];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+896];
            vj_kl -= R_0_2_4_3 * dm_ij_cache[tx+912];
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+928];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+944];
            vj_kl -= R_0_2_5_2 * dm_ij_cache[tx+960];
            vj_kl -= R_0_2_6_0 * dm_ij_cache[tx+976];
            vj_kl -= R_0_2_6_1 * dm_ij_cache[tx+992];
            double R_1_1_7_0 = xpq * R_2_0_7_0;
            double R_0_2_7_0 = xpq * R_1_1_7_0 + 1 * R_1_0_7_0;
            vj_kl -= R_0_2_7_0 * dm_ij_cache[tx+1008];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+1024];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+1040];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+1056];
            vj_kl -= R_0_3_3_3 * dm_ij_cache[tx+1072];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+1088];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+1104];
            vj_kl -= R_0_3_4_2 * dm_ij_cache[tx+1120];
            vj_kl -= R_0_3_5_0 * dm_ij_cache[tx+1136];
            vj_kl -= R_0_3_5_1 * dm_ij_cache[tx+1152];
            double R_2_1_6_0 = xpq * R_3_0_6_0;
            double R_1_2_6_0 = xpq * R_2_1_6_0 + 1 * R_2_0_6_0;
            double R_0_3_6_0 = xpq * R_1_2_6_0 + 2 * R_1_1_6_0;
            vj_kl -= R_0_3_6_0 * dm_ij_cache[tx+1168];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+1184];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+1200];
            vj_kl -= R_0_4_3_2 * dm_ij_cache[tx+1216];
            vj_kl -= R_0_4_4_0 * dm_ij_cache[tx+1232];
            vj_kl -= R_0_4_4_1 * dm_ij_cache[tx+1248];
            double R_3_1_5_0 = xpq * R_4_0_5_0;
            double R_2_2_5_0 = xpq * R_3_1_5_0 + 1 * R_3_0_5_0;
            double R_1_3_5_0 = xpq * R_2_2_5_0 + 2 * R_2_1_5_0;
            double R_0_4_5_0 = xpq * R_1_3_5_0 + 3 * R_1_2_5_0;
            vj_kl -= R_0_4_5_0 * dm_ij_cache[tx+1264];
            vj_kl -= R_0_5_3_0 * dm_ij_cache[tx+1280];
            vj_kl -= R_0_5_3_1 * dm_ij_cache[tx+1296];
            double R_4_1_4_0 = xpq * R_5_0_4_0;
            double R_3_2_4_0 = xpq * R_4_1_4_0 + 1 * R_4_0_4_0;
            double R_2_3_4_0 = xpq * R_3_2_4_0 + 2 * R_3_1_4_0;
            double R_1_4_4_0 = xpq * R_2_3_4_0 + 3 * R_2_2_4_0;
            double R_0_5_4_0 = xpq * R_1_4_4_0 + 4 * R_1_3_4_0;
            vj_kl -= R_0_5_4_0 * dm_ij_cache[tx+1312];
            double R_5_1_3_0 = xpq * R_6_0_3_0;
            double R_4_2_3_0 = xpq * R_5_1_3_0 + 1 * R_5_0_3_0;
            double R_3_3_3_0 = xpq * R_4_2_3_0 + 2 * R_4_1_3_0;
            double R_2_4_3_0 = xpq * R_3_3_3_0 + 3 * R_3_2_3_0;
            double R_1_5_3_0 = xpq * R_2_4_3_0 + 4 * R_2_3_3_0;
            double R_0_6_3_0 = xpq * R_1_5_3_0 + 5 * R_1_4_3_0;
            vj_kl -= R_0_6_3_0 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1296] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_0_6 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_1_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+384];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_1_6_0 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_0_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+480];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+496];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+512];
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+528];
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+544];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+560];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+576];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+592];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+608];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+624];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+640];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+656];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+672];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+688];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+704];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+720];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+736];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+752];
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+768];
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+784];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+800];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+816];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+832];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+848];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+864];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+880];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+896];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+912];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+928];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+944];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+960];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+976];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+992];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+1008];
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+1024];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+1040];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+1056];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+1072];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+1088];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+1104];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+1120];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+1136];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+1152];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+1168];
            vj_kl -= R_0_5_0_0 * dm_ij_cache[tx+1184];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+1200];
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+1216];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+1232];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+1248];
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+1264];
            vj_kl -= R_0_6_0_0 * dm_ij_cache[tx+1280];
            vj_kl -= R_0_6_0_1 * dm_ij_cache[tx+1296];
            vj_kl -= R_0_6_1_0 * dm_ij_cache[tx+1312];
            double R_6_1_0_0 = xpq * gamma_inc[sq_id+7*256];
            double R_5_2_0_0 = xpq * R_6_1_0_0 + 1 * gamma_inc[sq_id+6*256];
            double R_4_3_0_0 = xpq * R_5_2_0_0 + 2 * R_5_1_0_0;
            double R_3_4_0_0 = xpq * R_4_3_0_0 + 3 * R_4_2_0_0;
            double R_2_5_0_0 = xpq * R_3_4_0_0 + 4 * R_3_3_0_0;
            double R_1_6_0_0 = xpq * R_2_5_0_0 + 5 * R_2_4_0_0;
            double R_0_7_0_0 = xpq * R_1_6_0_0 + 6 * R_1_5_0_0;
            vj_kl -= R_0_7_0_0 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1440] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_0_1 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_0_2 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_0_3 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_0_4 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_0_5 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_0_6 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_0_7 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_1_6 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+368];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+384];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+400];
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+416];
            vj_kl += R_0_1_6_1 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+464];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+480];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+496];
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+512];
            vj_kl += R_0_2_0_6 * dm_ij_cache[tx+528];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+544];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+560];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+576];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+592];
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+608];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+624];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+640];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+656];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+672];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+688];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+704];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+720];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+736];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+752];
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+768];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+784];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+800];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+816];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+832];
            vj_kl += R_0_3_0_5 * dm_ij_cache[tx+848];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+864];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+880];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+896];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+912];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+928];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+944];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+960];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+976];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+992];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+1008];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+1024];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+1040];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+1056];
            vj_kl += R_0_4_0_4 * dm_ij_cache[tx+1072];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+1088];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+1104];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+1120];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+1136];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+1152];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+1168];
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+1184];
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+1200];
            vj_kl += R_0_5_0_3 * dm_ij_cache[tx+1216];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+1232];
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+1248];
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+1264];
            vj_kl += R_0_6_0_1 * dm_ij_cache[tx+1280];
            vj_kl += R_0_6_0_2 * dm_ij_cache[tx+1296];
            vj_kl += R_0_6_1_1 * dm_ij_cache[tx+1312];
            double R_6_1_0_1 = xpq * R_7_0_0_1;
            double R_5_2_0_1 = xpq * R_6_1_0_1 + 1 * R_6_0_0_1;
            double R_4_3_0_1 = xpq * R_5_2_0_1 + 2 * R_5_1_0_1;
            double R_3_4_0_1 = xpq * R_4_3_0_1 + 3 * R_4_2_0_1;
            double R_2_5_0_1 = xpq * R_3_4_0_1 + 4 * R_3_3_0_1;
            double R_1_6_0_1 = xpq * R_2_5_0_1 + 5 * R_2_4_0_1;
            double R_0_7_0_1 = xpq * R_1_6_0_1 + 6 * R_1_5_0_1;
            vj_kl += R_0_7_0_1 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1584] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_0_2 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_0_3 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_0_4 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_0_5 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_0_6 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_0_7 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_0_8 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_1_6 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_1_7 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_2_6 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_3_5 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+368];
            vj_kl -= R_0_1_4_4 * dm_ij_cache[tx+384];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+400];
            vj_kl -= R_0_1_5_3 * dm_ij_cache[tx+416];
            vj_kl -= R_0_1_6_2 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+464];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+480];
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+496];
            vj_kl -= R_0_2_0_6 * dm_ij_cache[tx+512];
            vj_kl -= R_0_2_0_7 * dm_ij_cache[tx+528];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+544];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+560];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+576];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+592];
            vj_kl -= R_0_2_1_6 * dm_ij_cache[tx+608];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+624];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+640];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+656];
            vj_kl -= R_0_2_2_5 * dm_ij_cache[tx+672];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+688];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+704];
            vj_kl -= R_0_2_3_4 * dm_ij_cache[tx+720];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+736];
            vj_kl -= R_0_2_4_3 * dm_ij_cache[tx+752];
            vj_kl -= R_0_2_5_2 * dm_ij_cache[tx+768];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+784];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+800];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+816];
            vj_kl -= R_0_3_0_5 * dm_ij_cache[tx+832];
            vj_kl -= R_0_3_0_6 * dm_ij_cache[tx+848];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+864];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+880];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+896];
            vj_kl -= R_0_3_1_5 * dm_ij_cache[tx+912];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+928];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+944];
            vj_kl -= R_0_3_2_4 * dm_ij_cache[tx+960];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+976];
            vj_kl -= R_0_3_3_3 * dm_ij_cache[tx+992];
            vj_kl -= R_0_3_4_2 * dm_ij_cache[tx+1008];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+1024];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+1040];
            vj_kl -= R_0_4_0_4 * dm_ij_cache[tx+1056];
            vj_kl -= R_0_4_0_5 * dm_ij_cache[tx+1072];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+1088];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+1104];
            vj_kl -= R_0_4_1_4 * dm_ij_cache[tx+1120];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+1136];
            vj_kl -= R_0_4_2_3 * dm_ij_cache[tx+1152];
            vj_kl -= R_0_4_3_2 * dm_ij_cache[tx+1168];
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+1184];
            vj_kl -= R_0_5_0_3 * dm_ij_cache[tx+1200];
            vj_kl -= R_0_5_0_4 * dm_ij_cache[tx+1216];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+1232];
            vj_kl -= R_0_5_1_3 * dm_ij_cache[tx+1248];
            vj_kl -= R_0_5_2_2 * dm_ij_cache[tx+1264];
            vj_kl -= R_0_6_0_2 * dm_ij_cache[tx+1280];
            vj_kl -= R_0_6_0_3 * dm_ij_cache[tx+1296];
            vj_kl -= R_0_6_1_2 * dm_ij_cache[tx+1312];
            double R_6_1_0_2 = xpq * R_7_0_0_2;
            double R_5_2_0_2 = xpq * R_6_1_0_2 + 1 * R_6_0_0_2;
            double R_4_3_0_2 = xpq * R_5_2_0_2 + 2 * R_5_1_0_2;
            double R_3_4_0_2 = xpq * R_4_3_0_2 + 3 * R_4_2_0_2;
            double R_2_5_0_2 = xpq * R_3_4_0_2 + 4 * R_3_3_0_2;
            double R_1_6_0_2 = xpq * R_2_5_0_2 + 5 * R_2_4_0_2;
            double R_0_7_0_2 = xpq * R_1_6_0_2 + 6 * R_1_5_0_2;
            vj_kl -= R_0_7_0_2 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1728] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_1_1_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_1_1_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_1_1_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_1_1_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_1_1_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_1_1_5 * dm_ij_cache[tx+80];
            vj_kl += R_0_1_1_6 * dm_ij_cache[tx+96];
            vj_kl += R_0_1_2_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_1_2_1 * dm_ij_cache[tx+128];
            vj_kl += R_0_1_2_2 * dm_ij_cache[tx+144];
            vj_kl += R_0_1_2_3 * dm_ij_cache[tx+160];
            vj_kl += R_0_1_2_4 * dm_ij_cache[tx+176];
            vj_kl += R_0_1_2_5 * dm_ij_cache[tx+192];
            vj_kl += R_0_1_3_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_1_3_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_1_3_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_1_3_3 * dm_ij_cache[tx+256];
            vj_kl += R_0_1_3_4 * dm_ij_cache[tx+272];
            vj_kl += R_0_1_4_0 * dm_ij_cache[tx+288];
            vj_kl += R_0_1_4_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_1_4_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_1_4_3 * dm_ij_cache[tx+336];
            vj_kl += R_0_1_5_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_1_5_1 * dm_ij_cache[tx+368];
            vj_kl += R_0_1_5_2 * dm_ij_cache[tx+384];
            vj_kl += R_0_1_6_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_1_6_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_1_7_0 * dm_ij_cache[tx+432];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+464];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+480];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+496];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+512];
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+528];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+544];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+560];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+576];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+592];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+608];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+624];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+640];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+656];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+672];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+688];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+704];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+720];
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+736];
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+752];
            vj_kl += R_0_2_6_0 * dm_ij_cache[tx+768];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+784];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+800];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+816];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+832];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+848];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+864];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+880];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+896];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+912];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+928];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+944];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+960];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+976];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+992];
            vj_kl += R_0_3_5_0 * dm_ij_cache[tx+1008];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+1024];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+1040];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+1056];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+1072];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+1088];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+1104];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+1120];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+1136];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+1152];
            vj_kl += R_0_4_4_0 * dm_ij_cache[tx+1168];
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+1184];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+1200];
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+1216];
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+1232];
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+1248];
            vj_kl += R_0_5_3_0 * dm_ij_cache[tx+1264];
            vj_kl += R_0_6_1_0 * dm_ij_cache[tx+1280];
            vj_kl += R_0_6_1_1 * dm_ij_cache[tx+1296];
            vj_kl += R_0_6_2_0 * dm_ij_cache[tx+1312];
            double R_6_1_1_0 = xpq * R_7_0_1_0;
            double R_5_2_1_0 = xpq * R_6_1_1_0 + 1 * R_6_0_1_0;
            double R_4_3_1_0 = xpq * R_5_2_1_0 + 2 * R_5_1_1_0;
            double R_3_4_1_0 = xpq * R_4_3_1_0 + 3 * R_4_2_1_0;
            double R_2_5_1_0 = xpq * R_3_4_1_0 + 4 * R_3_3_1_0;
            double R_1_6_1_0 = xpq * R_2_5_1_0 + 5 * R_2_4_1_0;
            double R_0_7_1_0 = xpq * R_1_6_1_0 + 6 * R_1_5_1_0;
            vj_kl += R_0_7_1_0 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+1872] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_1_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_1_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_1_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_1_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_1_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_1_6 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_1_7 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_2_6 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_3_5 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_4_4 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_1_5_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_1_6_1 * dm_ij_cache[tx+400];
            vj_kl -= R_0_1_6_2 * dm_ij_cache[tx+416];
            vj_kl -= R_0_1_7_1 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+464];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+480];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+496];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+512];
            vj_kl -= R_0_2_1_6 * dm_ij_cache[tx+528];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+544];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+560];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+576];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+592];
            vj_kl -= R_0_2_2_5 * dm_ij_cache[tx+608];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+624];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+640];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+656];
            vj_kl -= R_0_2_3_4 * dm_ij_cache[tx+672];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+688];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+704];
            vj_kl -= R_0_2_4_3 * dm_ij_cache[tx+720];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+736];
            vj_kl -= R_0_2_5_2 * dm_ij_cache[tx+752];
            vj_kl -= R_0_2_6_1 * dm_ij_cache[tx+768];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+784];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+800];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+816];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+832];
            vj_kl -= R_0_3_1_5 * dm_ij_cache[tx+848];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+864];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+880];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+896];
            vj_kl -= R_0_3_2_4 * dm_ij_cache[tx+912];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+928];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+944];
            vj_kl -= R_0_3_3_3 * dm_ij_cache[tx+960];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+976];
            vj_kl -= R_0_3_4_2 * dm_ij_cache[tx+992];
            vj_kl -= R_0_3_5_1 * dm_ij_cache[tx+1008];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+1024];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+1040];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+1056];
            vj_kl -= R_0_4_1_4 * dm_ij_cache[tx+1072];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+1088];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+1104];
            vj_kl -= R_0_4_2_3 * dm_ij_cache[tx+1120];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+1136];
            vj_kl -= R_0_4_3_2 * dm_ij_cache[tx+1152];
            vj_kl -= R_0_4_4_1 * dm_ij_cache[tx+1168];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+1184];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+1200];
            vj_kl -= R_0_5_1_3 * dm_ij_cache[tx+1216];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+1232];
            vj_kl -= R_0_5_2_2 * dm_ij_cache[tx+1248];
            vj_kl -= R_0_5_3_1 * dm_ij_cache[tx+1264];
            vj_kl -= R_0_6_1_1 * dm_ij_cache[tx+1280];
            vj_kl -= R_0_6_1_2 * dm_ij_cache[tx+1296];
            vj_kl -= R_0_6_2_1 * dm_ij_cache[tx+1312];
            double R_6_1_1_1 = xpq * R_7_0_1_1;
            double R_5_2_1_1 = xpq * R_6_1_1_1 + 1 * R_6_0_1_1;
            double R_4_3_1_1 = xpq * R_5_2_1_1 + 2 * R_5_1_1_1;
            double R_3_4_1_1 = xpq * R_4_3_1_1 + 3 * R_4_2_1_1;
            double R_2_5_1_1 = xpq * R_3_4_1_1 + 4 * R_3_3_1_1;
            double R_1_6_1_1 = xpq * R_2_5_1_1 + 5 * R_2_4_1_1;
            double R_0_7_1_1 = xpq * R_1_6_1_1 + 6 * R_1_5_1_1;
            vj_kl -= R_0_7_1_1 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2016] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_1_2_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_1_2_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_1_2_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_1_2_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_1_2_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_1_2_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_1_2_6 * dm_ij_cache[tx+96];
            vj_kl -= R_0_1_3_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_1_3_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_1_3_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_1_3_3 * dm_ij_cache[tx+160];
            vj_kl -= R_0_1_3_4 * dm_ij_cache[tx+176];
            vj_kl -= R_0_1_3_5 * dm_ij_cache[tx+192];
            vj_kl -= R_0_1_4_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_1_4_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_1_4_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_1_4_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_1_4_4 * dm_ij_cache[tx+272];
            vj_kl -= R_0_1_5_0 * dm_ij_cache[tx+288];
            vj_kl -= R_0_1_5_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_1_5_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_1_5_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_1_6_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_1_6_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_1_6_2 * dm_ij_cache[tx+384];
            vj_kl -= R_0_1_7_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_1_7_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_1_8_0 * dm_ij_cache[tx+432];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+480];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+496];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+512];
            vj_kl -= R_0_2_2_5 * dm_ij_cache[tx+528];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+544];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+560];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+576];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+592];
            vj_kl -= R_0_2_3_4 * dm_ij_cache[tx+608];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+624];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+640];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+656];
            vj_kl -= R_0_2_4_3 * dm_ij_cache[tx+672];
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+688];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+704];
            vj_kl -= R_0_2_5_2 * dm_ij_cache[tx+720];
            vj_kl -= R_0_2_6_0 * dm_ij_cache[tx+736];
            vj_kl -= R_0_2_6_1 * dm_ij_cache[tx+752];
            vj_kl -= R_0_2_7_0 * dm_ij_cache[tx+768];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+784];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+800];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+816];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+832];
            vj_kl -= R_0_3_2_4 * dm_ij_cache[tx+848];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+864];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+880];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+896];
            vj_kl -= R_0_3_3_3 * dm_ij_cache[tx+912];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+928];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+944];
            vj_kl -= R_0_3_4_2 * dm_ij_cache[tx+960];
            vj_kl -= R_0_3_5_0 * dm_ij_cache[tx+976];
            vj_kl -= R_0_3_5_1 * dm_ij_cache[tx+992];
            vj_kl -= R_0_3_6_0 * dm_ij_cache[tx+1008];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+1024];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+1040];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+1056];
            vj_kl -= R_0_4_2_3 * dm_ij_cache[tx+1072];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+1088];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+1104];
            vj_kl -= R_0_4_3_2 * dm_ij_cache[tx+1120];
            vj_kl -= R_0_4_4_0 * dm_ij_cache[tx+1136];
            vj_kl -= R_0_4_4_1 * dm_ij_cache[tx+1152];
            vj_kl -= R_0_4_5_0 * dm_ij_cache[tx+1168];
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+1184];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+1200];
            vj_kl -= R_0_5_2_2 * dm_ij_cache[tx+1216];
            vj_kl -= R_0_5_3_0 * dm_ij_cache[tx+1232];
            vj_kl -= R_0_5_3_1 * dm_ij_cache[tx+1248];
            vj_kl -= R_0_5_4_0 * dm_ij_cache[tx+1264];
            vj_kl -= R_0_6_2_0 * dm_ij_cache[tx+1280];
            vj_kl -= R_0_6_2_1 * dm_ij_cache[tx+1296];
            vj_kl -= R_0_6_3_0 * dm_ij_cache[tx+1312];
            double R_6_1_2_0 = xpq * R_7_0_2_0;
            double R_5_2_2_0 = xpq * R_6_1_2_0 + 1 * R_6_0_2_0;
            double R_4_3_2_0 = xpq * R_5_2_2_0 + 2 * R_5_1_2_0;
            double R_3_4_2_0 = xpq * R_4_3_2_0 + 3 * R_4_2_2_0;
            double R_2_5_2_0 = xpq * R_3_4_2_0 + 4 * R_3_3_2_0;
            double R_1_6_2_0 = xpq * R_2_5_2_0 + 5 * R_2_4_2_0;
            double R_0_7_2_0 = xpq * R_1_6_2_0 + 6 * R_1_5_2_0;
            vj_kl -= R_0_7_2_0 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2160] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl += R_0_2_0_0 * dm_ij_cache[tx+0];
            vj_kl += R_0_2_0_1 * dm_ij_cache[tx+16];
            vj_kl += R_0_2_0_2 * dm_ij_cache[tx+32];
            vj_kl += R_0_2_0_3 * dm_ij_cache[tx+48];
            vj_kl += R_0_2_0_4 * dm_ij_cache[tx+64];
            vj_kl += R_0_2_0_5 * dm_ij_cache[tx+80];
            vj_kl += R_0_2_0_6 * dm_ij_cache[tx+96];
            vj_kl += R_0_2_1_0 * dm_ij_cache[tx+112];
            vj_kl += R_0_2_1_1 * dm_ij_cache[tx+128];
            vj_kl += R_0_2_1_2 * dm_ij_cache[tx+144];
            vj_kl += R_0_2_1_3 * dm_ij_cache[tx+160];
            vj_kl += R_0_2_1_4 * dm_ij_cache[tx+176];
            vj_kl += R_0_2_1_5 * dm_ij_cache[tx+192];
            vj_kl += R_0_2_2_0 * dm_ij_cache[tx+208];
            vj_kl += R_0_2_2_1 * dm_ij_cache[tx+224];
            vj_kl += R_0_2_2_2 * dm_ij_cache[tx+240];
            vj_kl += R_0_2_2_3 * dm_ij_cache[tx+256];
            vj_kl += R_0_2_2_4 * dm_ij_cache[tx+272];
            vj_kl += R_0_2_3_0 * dm_ij_cache[tx+288];
            vj_kl += R_0_2_3_1 * dm_ij_cache[tx+304];
            vj_kl += R_0_2_3_2 * dm_ij_cache[tx+320];
            vj_kl += R_0_2_3_3 * dm_ij_cache[tx+336];
            vj_kl += R_0_2_4_0 * dm_ij_cache[tx+352];
            vj_kl += R_0_2_4_1 * dm_ij_cache[tx+368];
            vj_kl += R_0_2_4_2 * dm_ij_cache[tx+384];
            vj_kl += R_0_2_5_0 * dm_ij_cache[tx+400];
            vj_kl += R_0_2_5_1 * dm_ij_cache[tx+416];
            vj_kl += R_0_2_6_0 * dm_ij_cache[tx+432];
            vj_kl += R_0_3_0_0 * dm_ij_cache[tx+448];
            vj_kl += R_0_3_0_1 * dm_ij_cache[tx+464];
            vj_kl += R_0_3_0_2 * dm_ij_cache[tx+480];
            vj_kl += R_0_3_0_3 * dm_ij_cache[tx+496];
            vj_kl += R_0_3_0_4 * dm_ij_cache[tx+512];
            vj_kl += R_0_3_0_5 * dm_ij_cache[tx+528];
            vj_kl += R_0_3_1_0 * dm_ij_cache[tx+544];
            vj_kl += R_0_3_1_1 * dm_ij_cache[tx+560];
            vj_kl += R_0_3_1_2 * dm_ij_cache[tx+576];
            vj_kl += R_0_3_1_3 * dm_ij_cache[tx+592];
            vj_kl += R_0_3_1_4 * dm_ij_cache[tx+608];
            vj_kl += R_0_3_2_0 * dm_ij_cache[tx+624];
            vj_kl += R_0_3_2_1 * dm_ij_cache[tx+640];
            vj_kl += R_0_3_2_2 * dm_ij_cache[tx+656];
            vj_kl += R_0_3_2_3 * dm_ij_cache[tx+672];
            vj_kl += R_0_3_3_0 * dm_ij_cache[tx+688];
            vj_kl += R_0_3_3_1 * dm_ij_cache[tx+704];
            vj_kl += R_0_3_3_2 * dm_ij_cache[tx+720];
            vj_kl += R_0_3_4_0 * dm_ij_cache[tx+736];
            vj_kl += R_0_3_4_1 * dm_ij_cache[tx+752];
            vj_kl += R_0_3_5_0 * dm_ij_cache[tx+768];
            vj_kl += R_0_4_0_0 * dm_ij_cache[tx+784];
            vj_kl += R_0_4_0_1 * dm_ij_cache[tx+800];
            vj_kl += R_0_4_0_2 * dm_ij_cache[tx+816];
            vj_kl += R_0_4_0_3 * dm_ij_cache[tx+832];
            vj_kl += R_0_4_0_4 * dm_ij_cache[tx+848];
            vj_kl += R_0_4_1_0 * dm_ij_cache[tx+864];
            vj_kl += R_0_4_1_1 * dm_ij_cache[tx+880];
            vj_kl += R_0_4_1_2 * dm_ij_cache[tx+896];
            vj_kl += R_0_4_1_3 * dm_ij_cache[tx+912];
            vj_kl += R_0_4_2_0 * dm_ij_cache[tx+928];
            vj_kl += R_0_4_2_1 * dm_ij_cache[tx+944];
            vj_kl += R_0_4_2_2 * dm_ij_cache[tx+960];
            vj_kl += R_0_4_3_0 * dm_ij_cache[tx+976];
            vj_kl += R_0_4_3_1 * dm_ij_cache[tx+992];
            vj_kl += R_0_4_4_0 * dm_ij_cache[tx+1008];
            vj_kl += R_0_5_0_0 * dm_ij_cache[tx+1024];
            vj_kl += R_0_5_0_1 * dm_ij_cache[tx+1040];
            vj_kl += R_0_5_0_2 * dm_ij_cache[tx+1056];
            vj_kl += R_0_5_0_3 * dm_ij_cache[tx+1072];
            vj_kl += R_0_5_1_0 * dm_ij_cache[tx+1088];
            vj_kl += R_0_5_1_1 * dm_ij_cache[tx+1104];
            vj_kl += R_0_5_1_2 * dm_ij_cache[tx+1120];
            vj_kl += R_0_5_2_0 * dm_ij_cache[tx+1136];
            vj_kl += R_0_5_2_1 * dm_ij_cache[tx+1152];
            vj_kl += R_0_5_3_0 * dm_ij_cache[tx+1168];
            vj_kl += R_0_6_0_0 * dm_ij_cache[tx+1184];
            vj_kl += R_0_6_0_1 * dm_ij_cache[tx+1200];
            vj_kl += R_0_6_0_2 * dm_ij_cache[tx+1216];
            vj_kl += R_0_6_1_0 * dm_ij_cache[tx+1232];
            vj_kl += R_0_6_1_1 * dm_ij_cache[tx+1248];
            vj_kl += R_0_6_2_0 * dm_ij_cache[tx+1264];
            vj_kl += R_0_7_0_0 * dm_ij_cache[tx+1280];
            vj_kl += R_0_7_0_1 * dm_ij_cache[tx+1296];
            vj_kl += R_0_7_1_0 * dm_ij_cache[tx+1312];
            double R_7_1_0_0 = xpq * gamma_inc[sq_id+8*256];
            double R_6_2_0_0 = xpq * R_7_1_0_0 + 1 * gamma_inc[sq_id+7*256];
            double R_5_3_0_0 = xpq * R_6_2_0_0 + 2 * R_6_1_0_0;
            double R_4_4_0_0 = xpq * R_5_3_0_0 + 3 * R_5_2_0_0;
            double R_3_5_0_0 = xpq * R_4_4_0_0 + 4 * R_4_3_0_0;
            double R_2_6_0_0 = xpq * R_3_5_0_0 + 5 * R_3_4_0_0;
            double R_1_7_0_0 = xpq * R_2_6_0_0 + 6 * R_2_5_0_0;
            double R_0_8_0_0 = xpq * R_1_7_0_0 + 7 * R_1_6_0_0;
            vj_kl += R_0_8_0_0 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2304] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_0_1 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_0_2 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_0_3 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_0_4 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_0_5 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_0_6 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_0_7 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+128];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_1_6 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_2_5 * dm_ij_cache[tx+272];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+288];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+304];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_3_4 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_4_3 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_5_2 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_6_1 * dm_ij_cache[tx+432];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+448];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+464];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+496];
            vj_kl -= R_0_3_0_5 * dm_ij_cache[tx+512];
            vj_kl -= R_0_3_0_6 * dm_ij_cache[tx+528];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+544];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+560];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+576];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+592];
            vj_kl -= R_0_3_1_5 * dm_ij_cache[tx+608];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+624];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+640];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+656];
            vj_kl -= R_0_3_2_4 * dm_ij_cache[tx+672];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+688];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+704];
            vj_kl -= R_0_3_3_3 * dm_ij_cache[tx+720];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+736];
            vj_kl -= R_0_3_4_2 * dm_ij_cache[tx+752];
            vj_kl -= R_0_3_5_1 * dm_ij_cache[tx+768];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+784];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+800];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+816];
            vj_kl -= R_0_4_0_4 * dm_ij_cache[tx+832];
            vj_kl -= R_0_4_0_5 * dm_ij_cache[tx+848];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+864];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+880];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+896];
            vj_kl -= R_0_4_1_4 * dm_ij_cache[tx+912];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+928];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+944];
            vj_kl -= R_0_4_2_3 * dm_ij_cache[tx+960];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+976];
            vj_kl -= R_0_4_3_2 * dm_ij_cache[tx+992];
            vj_kl -= R_0_4_4_1 * dm_ij_cache[tx+1008];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+1024];
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+1040];
            vj_kl -= R_0_5_0_3 * dm_ij_cache[tx+1056];
            vj_kl -= R_0_5_0_4 * dm_ij_cache[tx+1072];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+1088];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+1104];
            vj_kl -= R_0_5_1_3 * dm_ij_cache[tx+1120];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+1136];
            vj_kl -= R_0_5_2_2 * dm_ij_cache[tx+1152];
            vj_kl -= R_0_5_3_1 * dm_ij_cache[tx+1168];
            vj_kl -= R_0_6_0_1 * dm_ij_cache[tx+1184];
            vj_kl -= R_0_6_0_2 * dm_ij_cache[tx+1200];
            vj_kl -= R_0_6_0_3 * dm_ij_cache[tx+1216];
            vj_kl -= R_0_6_1_1 * dm_ij_cache[tx+1232];
            vj_kl -= R_0_6_1_2 * dm_ij_cache[tx+1248];
            vj_kl -= R_0_6_2_1 * dm_ij_cache[tx+1264];
            vj_kl -= R_0_7_0_1 * dm_ij_cache[tx+1280];
            vj_kl -= R_0_7_0_2 * dm_ij_cache[tx+1296];
            vj_kl -= R_0_7_1_1 * dm_ij_cache[tx+1312];
            double R_7_1_0_1 = xpq * R_8_0_0_1;
            double R_6_2_0_1 = xpq * R_7_1_0_1 + 1 * R_7_0_0_1;
            double R_5_3_0_1 = xpq * R_6_2_0_1 + 2 * R_6_1_0_1;
            double R_4_4_0_1 = xpq * R_5_3_0_1 + 3 * R_5_2_0_1;
            double R_3_5_0_1 = xpq * R_4_4_0_1 + 4 * R_4_3_0_1;
            double R_2_6_0_1 = xpq * R_3_5_0_1 + 5 * R_3_4_0_1;
            double R_1_7_0_1 = xpq * R_2_6_0_1 + 6 * R_2_5_0_1;
            double R_0_8_0_1 = xpq * R_1_7_0_1 + 7 * R_1_6_0_1;
            vj_kl -= R_0_8_0_1 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2448] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_2_1_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_2_1_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_2_1_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_2_1_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_2_1_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_2_1_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_2_1_6 * dm_ij_cache[tx+96];
            vj_kl -= R_0_2_2_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_2_2_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_2_2_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_2_2_3 * dm_ij_cache[tx+160];
            vj_kl -= R_0_2_2_4 * dm_ij_cache[tx+176];
            vj_kl -= R_0_2_2_5 * dm_ij_cache[tx+192];
            vj_kl -= R_0_2_3_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_2_3_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_2_3_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_2_3_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_2_3_4 * dm_ij_cache[tx+272];
            vj_kl -= R_0_2_4_0 * dm_ij_cache[tx+288];
            vj_kl -= R_0_2_4_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_2_4_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_2_4_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_2_5_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_2_5_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_2_5_2 * dm_ij_cache[tx+384];
            vj_kl -= R_0_2_6_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_2_6_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_2_7_0 * dm_ij_cache[tx+432];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+480];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+496];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+512];
            vj_kl -= R_0_3_1_5 * dm_ij_cache[tx+528];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+544];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+560];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+576];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+592];
            vj_kl -= R_0_3_2_4 * dm_ij_cache[tx+608];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+624];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+640];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+656];
            vj_kl -= R_0_3_3_3 * dm_ij_cache[tx+672];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+688];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+704];
            vj_kl -= R_0_3_4_2 * dm_ij_cache[tx+720];
            vj_kl -= R_0_3_5_0 * dm_ij_cache[tx+736];
            vj_kl -= R_0_3_5_1 * dm_ij_cache[tx+752];
            vj_kl -= R_0_3_6_0 * dm_ij_cache[tx+768];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+784];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+800];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+816];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+832];
            vj_kl -= R_0_4_1_4 * dm_ij_cache[tx+848];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+864];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+880];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+896];
            vj_kl -= R_0_4_2_3 * dm_ij_cache[tx+912];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+928];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+944];
            vj_kl -= R_0_4_3_2 * dm_ij_cache[tx+960];
            vj_kl -= R_0_4_4_0 * dm_ij_cache[tx+976];
            vj_kl -= R_0_4_4_1 * dm_ij_cache[tx+992];
            vj_kl -= R_0_4_5_0 * dm_ij_cache[tx+1008];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+1024];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+1040];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+1056];
            vj_kl -= R_0_5_1_3 * dm_ij_cache[tx+1072];
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+1088];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+1104];
            vj_kl -= R_0_5_2_2 * dm_ij_cache[tx+1120];
            vj_kl -= R_0_5_3_0 * dm_ij_cache[tx+1136];
            vj_kl -= R_0_5_3_1 * dm_ij_cache[tx+1152];
            vj_kl -= R_0_5_4_0 * dm_ij_cache[tx+1168];
            vj_kl -= R_0_6_1_0 * dm_ij_cache[tx+1184];
            vj_kl -= R_0_6_1_1 * dm_ij_cache[tx+1200];
            vj_kl -= R_0_6_1_2 * dm_ij_cache[tx+1216];
            vj_kl -= R_0_6_2_0 * dm_ij_cache[tx+1232];
            vj_kl -= R_0_6_2_1 * dm_ij_cache[tx+1248];
            vj_kl -= R_0_6_3_0 * dm_ij_cache[tx+1264];
            vj_kl -= R_0_7_1_0 * dm_ij_cache[tx+1280];
            vj_kl -= R_0_7_1_1 * dm_ij_cache[tx+1296];
            vj_kl -= R_0_7_2_0 * dm_ij_cache[tx+1312];
            double R_7_1_1_0 = xpq * R_8_0_1_0;
            double R_6_2_1_0 = xpq * R_7_1_1_0 + 1 * R_7_0_1_0;
            double R_5_3_1_0 = xpq * R_6_2_1_0 + 2 * R_6_1_1_0;
            double R_4_4_1_0 = xpq * R_5_3_1_0 + 3 * R_5_2_1_0;
            double R_3_5_1_0 = xpq * R_4_4_1_0 + 4 * R_4_3_1_0;
            double R_2_6_1_0 = xpq * R_3_5_1_0 + 5 * R_3_4_1_0;
            double R_1_7_1_0 = xpq * R_2_6_1_0 + 6 * R_2_5_1_0;
            double R_0_8_1_0 = xpq * R_1_7_1_0 + 7 * R_1_6_1_0;
            vj_kl -= R_0_8_1_0 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2592] += vj_kl;
            }
            vj_kl = 0.;
            vj_kl -= R_0_3_0_0 * dm_ij_cache[tx+0];
            vj_kl -= R_0_3_0_1 * dm_ij_cache[tx+16];
            vj_kl -= R_0_3_0_2 * dm_ij_cache[tx+32];
            vj_kl -= R_0_3_0_3 * dm_ij_cache[tx+48];
            vj_kl -= R_0_3_0_4 * dm_ij_cache[tx+64];
            vj_kl -= R_0_3_0_5 * dm_ij_cache[tx+80];
            vj_kl -= R_0_3_0_6 * dm_ij_cache[tx+96];
            vj_kl -= R_0_3_1_0 * dm_ij_cache[tx+112];
            vj_kl -= R_0_3_1_1 * dm_ij_cache[tx+128];
            vj_kl -= R_0_3_1_2 * dm_ij_cache[tx+144];
            vj_kl -= R_0_3_1_3 * dm_ij_cache[tx+160];
            vj_kl -= R_0_3_1_4 * dm_ij_cache[tx+176];
            vj_kl -= R_0_3_1_5 * dm_ij_cache[tx+192];
            vj_kl -= R_0_3_2_0 * dm_ij_cache[tx+208];
            vj_kl -= R_0_3_2_1 * dm_ij_cache[tx+224];
            vj_kl -= R_0_3_2_2 * dm_ij_cache[tx+240];
            vj_kl -= R_0_3_2_3 * dm_ij_cache[tx+256];
            vj_kl -= R_0_3_2_4 * dm_ij_cache[tx+272];
            vj_kl -= R_0_3_3_0 * dm_ij_cache[tx+288];
            vj_kl -= R_0_3_3_1 * dm_ij_cache[tx+304];
            vj_kl -= R_0_3_3_2 * dm_ij_cache[tx+320];
            vj_kl -= R_0_3_3_3 * dm_ij_cache[tx+336];
            vj_kl -= R_0_3_4_0 * dm_ij_cache[tx+352];
            vj_kl -= R_0_3_4_1 * dm_ij_cache[tx+368];
            vj_kl -= R_0_3_4_2 * dm_ij_cache[tx+384];
            vj_kl -= R_0_3_5_0 * dm_ij_cache[tx+400];
            vj_kl -= R_0_3_5_1 * dm_ij_cache[tx+416];
            vj_kl -= R_0_3_6_0 * dm_ij_cache[tx+432];
            vj_kl -= R_0_4_0_0 * dm_ij_cache[tx+448];
            vj_kl -= R_0_4_0_1 * dm_ij_cache[tx+464];
            vj_kl -= R_0_4_0_2 * dm_ij_cache[tx+480];
            vj_kl -= R_0_4_0_3 * dm_ij_cache[tx+496];
            vj_kl -= R_0_4_0_4 * dm_ij_cache[tx+512];
            vj_kl -= R_0_4_0_5 * dm_ij_cache[tx+528];
            vj_kl -= R_0_4_1_0 * dm_ij_cache[tx+544];
            vj_kl -= R_0_4_1_1 * dm_ij_cache[tx+560];
            vj_kl -= R_0_4_1_2 * dm_ij_cache[tx+576];
            vj_kl -= R_0_4_1_3 * dm_ij_cache[tx+592];
            vj_kl -= R_0_4_1_4 * dm_ij_cache[tx+608];
            vj_kl -= R_0_4_2_0 * dm_ij_cache[tx+624];
            vj_kl -= R_0_4_2_1 * dm_ij_cache[tx+640];
            vj_kl -= R_0_4_2_2 * dm_ij_cache[tx+656];
            vj_kl -= R_0_4_2_3 * dm_ij_cache[tx+672];
            vj_kl -= R_0_4_3_0 * dm_ij_cache[tx+688];
            vj_kl -= R_0_4_3_1 * dm_ij_cache[tx+704];
            vj_kl -= R_0_4_3_2 * dm_ij_cache[tx+720];
            vj_kl -= R_0_4_4_0 * dm_ij_cache[tx+736];
            vj_kl -= R_0_4_4_1 * dm_ij_cache[tx+752];
            vj_kl -= R_0_4_5_0 * dm_ij_cache[tx+768];
            vj_kl -= R_0_5_0_0 * dm_ij_cache[tx+784];
            vj_kl -= R_0_5_0_1 * dm_ij_cache[tx+800];
            vj_kl -= R_0_5_0_2 * dm_ij_cache[tx+816];
            vj_kl -= R_0_5_0_3 * dm_ij_cache[tx+832];
            vj_kl -= R_0_5_0_4 * dm_ij_cache[tx+848];
            vj_kl -= R_0_5_1_0 * dm_ij_cache[tx+864];
            vj_kl -= R_0_5_1_1 * dm_ij_cache[tx+880];
            vj_kl -= R_0_5_1_2 * dm_ij_cache[tx+896];
            vj_kl -= R_0_5_1_3 * dm_ij_cache[tx+912];
            vj_kl -= R_0_5_2_0 * dm_ij_cache[tx+928];
            vj_kl -= R_0_5_2_1 * dm_ij_cache[tx+944];
            vj_kl -= R_0_5_2_2 * dm_ij_cache[tx+960];
            vj_kl -= R_0_5_3_0 * dm_ij_cache[tx+976];
            vj_kl -= R_0_5_3_1 * dm_ij_cache[tx+992];
            vj_kl -= R_0_5_4_0 * dm_ij_cache[tx+1008];
            vj_kl -= R_0_6_0_0 * dm_ij_cache[tx+1024];
            vj_kl -= R_0_6_0_1 * dm_ij_cache[tx+1040];
            vj_kl -= R_0_6_0_2 * dm_ij_cache[tx+1056];
            vj_kl -= R_0_6_0_3 * dm_ij_cache[tx+1072];
            vj_kl -= R_0_6_1_0 * dm_ij_cache[tx+1088];
            vj_kl -= R_0_6_1_1 * dm_ij_cache[tx+1104];
            vj_kl -= R_0_6_1_2 * dm_ij_cache[tx+1120];
            vj_kl -= R_0_6_2_0 * dm_ij_cache[tx+1136];
            vj_kl -= R_0_6_2_1 * dm_ij_cache[tx+1152];
            vj_kl -= R_0_6_3_0 * dm_ij_cache[tx+1168];
            vj_kl -= R_0_7_0_0 * dm_ij_cache[tx+1184];
            vj_kl -= R_0_7_0_1 * dm_ij_cache[tx+1200];
            vj_kl -= R_0_7_0_2 * dm_ij_cache[tx+1216];
            vj_kl -= R_0_7_1_0 * dm_ij_cache[tx+1232];
            vj_kl -= R_0_7_1_1 * dm_ij_cache[tx+1248];
            vj_kl -= R_0_7_2_0 * dm_ij_cache[tx+1264];
            vj_kl -= R_0_8_0_0 * dm_ij_cache[tx+1280];
            vj_kl -= R_0_8_0_1 * dm_ij_cache[tx+1296];
            vj_kl -= R_0_8_1_0 * dm_ij_cache[tx+1312];
            double R_8_1_0_0 = xpq * gamma_inc[sq_id+9*256];
            double R_7_2_0_0 = xpq * R_8_1_0_0 + 1 * gamma_inc[sq_id+8*256];
            double R_6_3_0_0 = xpq * R_7_2_0_0 + 2 * R_7_1_0_0;
            double R_5_4_0_0 = xpq * R_6_3_0_0 + 3 * R_6_2_0_0;
            double R_4_5_0_0 = xpq * R_5_4_0_0 + 4 * R_5_3_0_0;
            double R_3_6_0_0 = xpq * R_4_5_0_0 + 5 * R_4_4_0_0;
            double R_2_7_0_0 = xpq * R_3_6_0_0 + 6 * R_3_5_0_0;
            double R_1_8_0_0 = xpq * R_2_7_0_0 + 7 * R_2_6_0_0;
            double R_0_9_0_0 = xpq * R_1_8_0_0 + 8 * R_1_7_0_0;
            vj_kl -= R_0_9_0_0 * dm_ij_cache[tx+1328];

            for (int offset = 8.0; offset > 0; offset /= 2) {
                vj_kl += __shfl_down_sync(mask, vj_kl, offset);
            }
            if (tx == 0 && task_kl0+ty < npairs_kl) {
                vj_kl_cache[sq_kl+2736] += vj_kl;
            }
            vj_ij = 0.;
            vj_ij += gamma_inc[sq_id+0*256] * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_1_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_0_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+0] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_2 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+16] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_3 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_0_5 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+32] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_4 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_0_6 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+48] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_5 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_0_6 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_0_7 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_1_6 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_0_6 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+64] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_5 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_6 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_0_7 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_0_8 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_1_6 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_1_7 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_2_6 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_3_5 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_0_6 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_0_7 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_1_6 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_0_6 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_0_5 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+80] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_0_6 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_0_7 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_0_8 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_0_9 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_1_6 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_1_7 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_1_8 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_2_6 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_2_7 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_3_6 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_0_6 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_0_7 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_0_8 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_1_6 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_1_7 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_2_6 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_0_6 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_0_7 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_1_6 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_0_6 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+96] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_2_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+112] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_2 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+128] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_3 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+144] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_4 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_1_6 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+160] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_5 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_1_6 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_1_7 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_2_6 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_3_5 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_4_4 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_1_6 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+176] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_1_5 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_1_6 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_1_7 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_1_8 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_2_6 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_2_7 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_3_5 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_3_6 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_4_5 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_1_6 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_1_7 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_2_6 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_3_5 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_1_6 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_2_5 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_1_5 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+192] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_3_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_5_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+208] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_2 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+224] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_3 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+240] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_4 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_2_5 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_2_6 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_3_5 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_4_4 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_5_3 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+256] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_2_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_2_5 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_2_6 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_2_7 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_3_5 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_3_6 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_4_4 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_4_5 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_5_4 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_2_6 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_3_5 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_4_4 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_2_5 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_3_4 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_2_4 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+272] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_4_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_6_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+288] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_2 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_6_1 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+304] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_3 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_3_4 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_3_5 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_4_4 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_5_3 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_6_2 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+320] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_3_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_3_4 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_3_5 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_3_6 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_4_4 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_4_5 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_5_3 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_5_4 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_6_3 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_3_5 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_4_4 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_5_3 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_3_4 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_4_3 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_3_3 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+336] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_4_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_5_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_6_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_6_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_7_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_6_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+352] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_4_2 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_4_3 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_4_4 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_5_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_6_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_6_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_7_1 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_6_1 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+368] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_4_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_4_3 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_4_4 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_4_5 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_5_3 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_5_4 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_6_2 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_6_3 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_7_2 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_4_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_5_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_6_2 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_4_3 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_5_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_4_2 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+384] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_5_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_5_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_5_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_5_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_6_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_6_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_6_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_7_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_7_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_8_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_6_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_6_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_7_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_6_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_5_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+400] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_5_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_5_2 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_5_3 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_5_4 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_6_1 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_6_2 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_6_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_7_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_7_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_8_1 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_5_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_6_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_6_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_7_1 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_5_2 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_6_1 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_5_1 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+416] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_0_6_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_0_6_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_0_6_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_0_6_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_0_7_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_0_7_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_0_7_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_0_8_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_0_8_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_0_9_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_1_6_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_1_6_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_1_6_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_1_7_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_1_7_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_1_8_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_2_6_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_2_6_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_2_7_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_3_6_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+432] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_1_1_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_2_0_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+448] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_2 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+464] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_3 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+480] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_4 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_1_0_6 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+496] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_5 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_1_0_6 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_1_0_7 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_1_1_6 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_0_6 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_0_5 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_0_4 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+512] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_0_5 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_0_6 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_1_0_7 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_1_0_8 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_1_1_6 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_1_1_7 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_2_6 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_3_5 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_0_6 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_0_7 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_1_6 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_2_5 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_3_0_5 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_0_6 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_3_1_5 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_0_5 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+528] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_1_2_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+544] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_2 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+560] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_3 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+576] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_4 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_1_1_5 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_1_1_6 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+592] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_1_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_1_5 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_1_1_6 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_1_1_7 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_1_2_6 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_3_5 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_4_4 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_1_6 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_2_5 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_3_4 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_1_5 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_3_2_4 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_1_4 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+608] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_1_3_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+624] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_2 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+640] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_3 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_1_2_4 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_1_2_5 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+656] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_2_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_2_4 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_1_2_5 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_1_2_6 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_1_3_5 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_4_4 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_5_3 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_2_5 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_3_4 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_4_3 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_2_4 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_3_3_3 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_2_3 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+672] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_3_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_1_4_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_6_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+688] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_3_2 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_1_3_3 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_1_3_4 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_6_1 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+704] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_3_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_3_3 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_1_3_4 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_1_3_5 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_1_4_4 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_5_3 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_6_2 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_3_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_4_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_5_2 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_3_3 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_3_4_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_3_2 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+720] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_4_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_4_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_1_4_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_1_4_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_1_5_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_1_5_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_1_5_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_6_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_6_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_7_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_6_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_3_5_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_4_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+736] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_4_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_4_2 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_1_4_3 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_1_4_4 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_1_5_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_6_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_6_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_7_1 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_4_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_5_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_6_1 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_4_2 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_3_5_1 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_4_1 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+752] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_1_5_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_1_5_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_1_5_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_1_5_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_1_6_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_1_6_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_1_6_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_1_7_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_1_7_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_1_8_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_2_5_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_2_6_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_2_6_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_2_7_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_3_5_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_3_5_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_3_6_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_4_5_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+768] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_2_1_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_3_0_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_5_0_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+784] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_2 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+800] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_3 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+816] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_4 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_2_0_5 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_2_0_6 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_3_0_5 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_4_0_4 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_5_0_3 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+832] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_0_4 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_0_5 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_2_0_6 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_2_0_7 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_2_1_6 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_2_2_5 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_2_3_4 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_3_0_5 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_3_0_6 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_3_1_5 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_3_2_4 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_4_0_4 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_4_0_5 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_4_1_4 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_5_0_4 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+848] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_2_2_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+864] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_2 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+880] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_3 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_2_1_4 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_2_1_5 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+896] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_1_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_1_4 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_2_1_5 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_2_1_6 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_2_2_5 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_2_3_4 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_2_4_3 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_3_1_5 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_3_2_4 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_3_3_3 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_4_1_4 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_4_2_3 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_5_1_3 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+912] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_2_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_2_3_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+928] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_2_2 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_2_2_3 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_2_2_4 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+944] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_2_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_2_3 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_2_2_4 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_2_2_5 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_2_3_4 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_2_4_3 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_2_5_2 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_3_2_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_3_3_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_3_4_2 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_4_2_3 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_4_3_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_5_2_2 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+960] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_3_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_2_3_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_2_3_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_2_4_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_2_4_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_2_4_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_5_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_2_5_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_2_6_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_3_5_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_4_4_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_5_3_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+976] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_3_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_3_2 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_2_3_3 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_2_3_4 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_2_4_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_2_5_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_2_6_1 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_3_3_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_3_4_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_3_5_1 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_4_3_2 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_4_4_1 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_5_3_1 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+992] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_2_4_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_2_4_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_2_4_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_2_4_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_2_5_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_2_5_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_2_5_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_2_6_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_2_6_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_2_7_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_3_4_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_3_5_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_3_5_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_3_6_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_4_4_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_4_4_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_4_5_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_5_4_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1008] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_3_1_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_4_0_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_6_0_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1024] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_2 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_6_0_1 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1040] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_3 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_3_0_4 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_3_0_5 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_4_0_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_5_0_3 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_6_0_2 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1056] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_0_3 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_0_4 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_3_0_5 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_3_0_6 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_3_1_5 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_3_2_4 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_3_3_3 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_4_0_4 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_4_0_5 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_4_1_4 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_4_2_3 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_5_0_3 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_5_0_4 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_5_1_3 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_6_0_3 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1072] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_1_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_3_2_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_6_1_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1088] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_1_2 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_3_1_3 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_3_1_4 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_6_1_1 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1104] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_1_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_1_3 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_3_1_4 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_3_1_5 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_3_2_4 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_3_3_3 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_3_4_2 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_4_1_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_4_2_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_4_3_2 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_5_1_3 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_5_2_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_6_1_2 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1120] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_2_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_3_2_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_3_2_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_3_3_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_3_3_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_3_3_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_3_4_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_3_4_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_3_5_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_4_4_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_5_3_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_6_2_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1136] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_2_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_2_2 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_3_2_3 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_3_2_4 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_3_3_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_3_4_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_3_5_1 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_4_2_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_4_3_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_4_4_1 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_5_2_2 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_5_3_1 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_6_2_1 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1152] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_3_3_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_3_3_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_3_3_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_3_3_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_3_4_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_3_4_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_3_4_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_3_5_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_3_5_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_3_6_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_4_3_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_4_4_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_4_4_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_4_5_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_5_3_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_5_3_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_5_4_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_6_3_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1168] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_0_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_4_1_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_5_0_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_6_0_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_6_0_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_6_1_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_7_0_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1184] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_0_2 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_4_0_3 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_4_0_4 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_5_0_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_6_0_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_6_0_2 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_6_1_1 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_7_0_1 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1200] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_0_2 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_0_3 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_4_0_4 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_4_0_5 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_4_1_4 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_4_2_3 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_4_3_2 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_5_0_3 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_5_0_4 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_5_1_3 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_5_2_2 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_6_0_2 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_6_0_3 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_6_1_2 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_7_0_2 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1216] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_1_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_4_1_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_4_1_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_4_2_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_4_2_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_4_2_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_4_3_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_4_3_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_4_4_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_5_3_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_6_1_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_6_1_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_6_2_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_7_1_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1232] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_1_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_1_2 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_4_1_3 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_4_1_4 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_4_2_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_4_3_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_4_4_1 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_5_1_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_5_2_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_5_3_1 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_6_1_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_6_1_2 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_6_2_1 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_7_1_1 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1248] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_4_2_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_4_2_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_4_2_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_4_2_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_4_3_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_4_3_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_4_3_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_4_4_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_4_4_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_4_5_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_5_2_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_5_3_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_5_3_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_5_4_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_6_2_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_6_2_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_6_3_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_7_2_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1264] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_5_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_5_0_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_5_0_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_5_0_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_5_1_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_5_1_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_5_1_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_5_2_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_5_2_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_5_3_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_6_0_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_6_0_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_6_0_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_6_1_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_6_1_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_6_2_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_7_0_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_7_0_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_7_1_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_8_0_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1280] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_5_0_1 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_5_0_2 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_5_0_3 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_5_0_4 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_5_1_3 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_5_2_2 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_5_3_1 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_6_0_1 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_6_0_2 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_6_0_3 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_6_1_1 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_6_1_2 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_6_2_1 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_7_0_1 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_7_0_2 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_7_1_1 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_8_0_1 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1296] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_5_1_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_5_1_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_5_1_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_5_1_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_5_2_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_5_2_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_5_2_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_5_3_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_5_3_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_5_4_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_6_1_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_6_1_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_6_1_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_6_2_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_6_2_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_6_3_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_7_1_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_7_1_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_7_2_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_8_1_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1312] += vj_cache[sq_id];
            }
            vj_ij = 0.;
            vj_ij += R_0_6_0_0 * dm_kl_cache[sq_kl+0];
            vj_ij -= R_0_6_0_1 * dm_kl_cache[sq_kl+144];
            vj_ij += R_0_6_0_2 * dm_kl_cache[sq_kl+288];
            vj_ij -= R_0_6_0_3 * dm_kl_cache[sq_kl+432];
            vj_ij -= R_0_6_1_0 * dm_kl_cache[sq_kl+576];
            vj_ij += R_0_6_1_1 * dm_kl_cache[sq_kl+720];
            vj_ij -= R_0_6_1_2 * dm_kl_cache[sq_kl+864];
            vj_ij += R_0_6_2_0 * dm_kl_cache[sq_kl+1008];
            vj_ij -= R_0_6_2_1 * dm_kl_cache[sq_kl+1152];
            vj_ij -= R_0_6_3_0 * dm_kl_cache[sq_kl+1296];
            vj_ij -= R_0_7_0_0 * dm_kl_cache[sq_kl+1440];
            vj_ij += R_0_7_0_1 * dm_kl_cache[sq_kl+1584];
            vj_ij -= R_0_7_0_2 * dm_kl_cache[sq_kl+1728];
            vj_ij += R_0_7_1_0 * dm_kl_cache[sq_kl+1872];
            vj_ij -= R_0_7_1_1 * dm_kl_cache[sq_kl+2016];
            vj_ij -= R_0_7_2_0 * dm_kl_cache[sq_kl+2160];
            vj_ij += R_0_8_0_0 * dm_kl_cache[sq_kl+2304];
            vj_ij -= R_0_8_0_1 * dm_kl_cache[sq_kl+2448];
            vj_ij -= R_0_8_1_0 * dm_kl_cache[sq_kl+2592];
            vj_ij -= R_0_9_0_0 * dm_kl_cache[sq_kl+2736];
            __syncthreads();
            vj_cache[sq_id] = vj_ij;
            for (int stride = 8; stride > 0; stride /= 2) {
                __syncthreads();
                if (ty < stride) {
                    vj_cache[sq_id] += vj_cache[sq_id + stride*16];
                }
            }
            __syncthreads();
            if (ty == 0 && task_ij0+tx < npairs_ij) {
                vj_ij_cache[tx+1328] += vj_cache[sq_id];
            }
            __syncthreads();
        }
        // The last tile for ij
        if (task_ij0+tx < npairs_ij) {
            int ij_loc0 = pair_loc[pair_ij];
            for (int n = ty; n < 84; n += 16) {
                atomicAdd(vj+ij_loc0+n, vj_ij_cache[tx+n*16]);
            }
        }
    }
    for (int n = tx; n < 180; n += 16) {
        int i = n / 9;
        int tile = n % 9;
        int task_kl = blockIdx.y * 144 + tile * 16 + ty;
        if (task_kl < npairs_kl) {
            int pair_kl = pair_kl_mapping[task_kl];
            int kl_loc0 = pair_loc[pair_kl];
            int sq_kl = ty + tile * 16;
            atomicAdd(vj+kl_loc0+i, vj_kl_cache[sq_kl+i*144]);
        }
    }
}

int md_j_unrolled(RysIntEnvVars *envs, JKMatrix *jk, BoundsInfo *bounds)
{
    int li = bounds->li;
    int lj = bounds->lj;
    int lk = bounds->lk;
    int ll = bounds->ll;
    int lij = li + lj;
    int lkl = lk + ll;
    int ijkl = lij*9 + lkl;
    int npairs_ij = bounds->npairs_ij;
    int npairs_kl = bounds->npairs_kl;
    switch (ijkl) {
    case 0: { // lij=0, lkl=0, tilex=64, tiley=32
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 1023) / 1024, (npairs_kl + 511) / 512);
        md_j_0_0<<<blocks, threads, 3680*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 9: { // lij=1, lkl=0, tilex=64, tiley=32
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 1023) / 1024, (npairs_kl + 511) / 512);
        md_j_1_0<<<blocks, threads, 4032*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 10: { // lij=1, lkl=1, tilex=64, tiley=25
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 1023) / 1024, (npairs_kl + 399) / 400);
        md_j_1_1<<<blocks, threads, 6016*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 11: { // lij=1, lkl=2, tilex=64, tiley=28
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 1023) / 1024, (npairs_kl + 447) / 448);
        cudaFuncSetAttribute(md_j_1_2, cudaFuncAttributeMaxDynamicSharedMemorySize, 12224*sizeof(double));
        md_j_1_2<<<blocks, threads, 12224*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 18: { // lij=2, lkl=0, tilex=42, tiley=32
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 671) / 672, (npairs_kl + 511) / 512);
        md_j_2_0<<<blocks, threads, 4480*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 19: { // lij=2, lkl=1, tilex=42, tiley=23
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 671) / 672, (npairs_kl + 367) / 368);
        md_j_2_1<<<blocks, threads, 6080*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 20: { // lij=2, lkl=2, tilex=42, tiley=11
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 671) / 672, (npairs_kl + 175) / 176);
        md_j_2_2<<<blocks, threads, 6144*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 21: { // lij=2, lkl=3, tilex=42, tiley=14
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 671) / 672, (npairs_kl + 223) / 224);
        cudaFuncSetAttribute(md_j_2_3, cudaFuncAttributeMaxDynamicSharedMemorySize, 12032*sizeof(double));
        md_j_2_3<<<blocks, threads, 12032*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 22: { // lij=2, lkl=4, tilex=42, tiley=8
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 671) / 672, (npairs_kl + 127) / 128);
        cudaFuncSetAttribute(md_j_2_4, cudaFuncAttributeMaxDynamicSharedMemorySize, 11904*sizeof(double));
        md_j_2_4<<<blocks, threads, 11904*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 27: { // lij=3, lkl=0, tilex=32, tiley=32
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 511) / 512, (npairs_kl + 511) / 512);
        md_j_3_0<<<blocks, threads, 5056*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 28: { // lij=3, lkl=1, tilex=32, tiley=32
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 511) / 512, (npairs_kl + 511) / 512);
        cudaFuncSetAttribute(md_j_3_1, cudaFuncAttributeMaxDynamicSharedMemorySize, 8384*sizeof(double));
        md_j_3_1<<<blocks, threads, 8384*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 29: { // lij=3, lkl=2, tilex=32, tiley=25
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 511) / 512, (npairs_kl + 399) / 400);
        cudaFuncSetAttribute(md_j_3_2, cudaFuncAttributeMaxDynamicSharedMemorySize, 12096*sizeof(double));
        md_j_3_2<<<blocks, threads, 12096*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 30: { // lij=3, lkl=3, tilex=32, tiley=13
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 511) / 512, (npairs_kl + 207) / 208);
        cudaFuncSetAttribute(md_j_3_3, cudaFuncAttributeMaxDynamicSharedMemorySize, 11904*sizeof(double));
        md_j_3_3<<<blocks, threads, 11904*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 31: { // lij=3, lkl=4, tilex=32, tiley=7
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 511) / 512, (npairs_kl + 111) / 112);
        cudaFuncSetAttribute(md_j_3_4, cudaFuncAttributeMaxDynamicSharedMemorySize, 11296*sizeof(double));
        md_j_3_4<<<blocks, threads, 11296*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 32: { // lij=3, lkl=5, tilex=32, tiley=4
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 511) / 512, (npairs_kl + 63) / 64);
        cudaFuncSetAttribute(md_j_3_5, cudaFuncAttributeMaxDynamicSharedMemorySize, 10688*sizeof(double));
        md_j_3_5<<<blocks, threads, 10688*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 36: { // lij=4, lkl=0, tilex=25, tiley=32
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 399) / 400, (npairs_kl + 511) / 512);
        md_j_4_0<<<blocks, threads, 5792*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 37: { // lij=4, lkl=1, tilex=25, tiley=32
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 399) / 400, (npairs_kl + 511) / 512);
        cudaFuncSetAttribute(md_j_4_1, cudaFuncAttributeMaxDynamicSharedMemorySize, 9120*sizeof(double));
        md_j_4_1<<<blocks, threads, 9120*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 38: { // lij=4, lkl=2, tilex=25, tiley=23
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 399) / 400, (npairs_kl + 367) / 368);
        cudaFuncSetAttribute(md_j_4_2, cudaFuncAttributeMaxDynamicSharedMemorySize, 12064*sizeof(double));
        md_j_4_2<<<blocks, threads, 12064*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 39: { // lij=4, lkl=3, tilex=25, tiley=12
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 399) / 400, (npairs_kl + 191) / 192);
        cudaFuncSetAttribute(md_j_4_3, cudaFuncAttributeMaxDynamicSharedMemorySize, 11936*sizeof(double));
        md_j_4_3<<<blocks, threads, 11936*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 40: { // lij=4, lkl=4, tilex=25, tiley=7
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 399) / 400, (npairs_kl + 111) / 112);
        cudaFuncSetAttribute(md_j_4_4, cudaFuncAttributeMaxDynamicSharedMemorySize, 12032*sizeof(double));
        md_j_4_4<<<blocks, threads, 12032*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 41: { // lij=4, lkl=5, tilex=25, tiley=4
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 399) / 400, (npairs_kl + 63) / 64);
        cudaFuncSetAttribute(md_j_4_5, cudaFuncAttributeMaxDynamicSharedMemorySize, 11424*sizeof(double));
        md_j_4_5<<<blocks, threads, 11424*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 45: { // lij=5, lkl=0, tilex=21, tiley=32
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 335) / 336, (npairs_kl + 511) / 512);
        cudaFuncSetAttribute(md_j_5_0, cudaFuncAttributeMaxDynamicSharedMemorySize, 6720*sizeof(double));
        md_j_5_0<<<blocks, threads, 6720*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 46: { // lij=5, lkl=1, tilex=21, tiley=32
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 335) / 336, (npairs_kl + 511) / 512);
        cudaFuncSetAttribute(md_j_5_1, cudaFuncAttributeMaxDynamicSharedMemorySize, 10048*sizeof(double));
        md_j_5_1<<<blocks, threads, 10048*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 47: { // lij=5, lkl=2, tilex=21, tiley=21
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 335) / 336, (npairs_kl + 335) / 336);
        cudaFuncSetAttribute(md_j_5_2, cudaFuncAttributeMaxDynamicSharedMemorySize, 12224*sizeof(double));
        md_j_5_2<<<blocks, threads, 12224*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 48: { // lij=5, lkl=3, tilex=21, tiley=11
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 335) / 336, (npairs_kl + 175) / 176);
        cudaFuncSetAttribute(md_j_5_3, cudaFuncAttributeMaxDynamicSharedMemorySize, 12160*sizeof(double));
        md_j_5_3<<<blocks, threads, 12160*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 49: { // lij=5, lkl=4, tilex=21, tiley=6
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 335) / 336, (npairs_kl + 95) / 96);
        cudaFuncSetAttribute(md_j_5_4, cudaFuncAttributeMaxDynamicSharedMemorySize, 11776*sizeof(double));
        md_j_5_4<<<blocks, threads, 11776*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 54: { // lij=6, lkl=0, tilex=18, tiley=32
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 287) / 288, (npairs_kl + 511) / 512);
        cudaFuncSetAttribute(md_j_6_0, cudaFuncAttributeMaxDynamicSharedMemorySize, 7872*sizeof(double));
        md_j_6_0<<<blocks, threads, 7872*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 55: { // lij=6, lkl=1, tilex=18, tiley=32
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 287) / 288, (npairs_kl + 511) / 512);
        cudaFuncSetAttribute(md_j_6_1, cudaFuncAttributeMaxDynamicSharedMemorySize, 11200*sizeof(double));
        md_j_6_1<<<blocks, threads, 11200*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 56: { // lij=6, lkl=2, tilex=18, tiley=18
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 287) / 288, (npairs_kl + 287) / 288);
        cudaFuncSetAttribute(md_j_6_2, cudaFuncAttributeMaxDynamicSharedMemorySize, 12224*sizeof(double));
        md_j_6_2<<<blocks, threads, 12224*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    case 57: { // lij=6, lkl=3, tilex=18, tiley=9
        dim3 threads(16, 16);
        dim3 blocks((npairs_ij + 287) / 288, (npairs_kl + 143) / 144);
        cudaFuncSetAttribute(md_j_6_3, cudaFuncAttributeMaxDynamicSharedMemorySize, 11904*sizeof(double));
        md_j_6_3<<<blocks, threads, 11904*sizeof(double)>>>(*envs, *jk, *bounds);
    } break;
    default: return 0;
    }
    return 1;
}
