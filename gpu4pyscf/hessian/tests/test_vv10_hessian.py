# Copyright 2021-2024 The PySCF Developers. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import unittest
import numpy as np
import pyscf
from gpu4pyscf.dft import rks

def setUpModule():
    global mol, nlc_atom_grid_loose, nlc_atom_grid_dense

    atom = '''
    O  0.0000  0.7375 -0.0528
    O  0.0000 -0.7375 -0.1528
    H  0.8190  0.8170  0.4220
    H -0.8190 -0.8170  1.4220
    '''
    basis = 'def2-svp'

    nlc_atom_grid_loose = (10,14)
    nlc_atom_grid_dense = (50,194)

    mol = pyscf.M(atom=atom, basis=basis, max_memory=32000,
                  output='/dev/null', verbose=1)

def tearDownModule():
    global mol
    mol.stdout.close()
    del mol

def make_mf(mol, nlc_atom_grid, vv10_only = False):
    if not vv10_only:
        mf = rks.RKS(mol, xc = "wb97x-v")
        mf.grids.level = 5
    else:
        mf = rks.RKS(mol, xc = "0*PBE,0*PBE")
        mf.nlc = "vv10"
        mf.grids.atom_grid = (3,6)
    mf.conv_tol = 1e-16
    mf.direct_scf_tol = 1e-16
    mf.nlcgrids.atom_grid = nlc_atom_grid
    mf.kernel()
    return mf

def numerical_d2enlc(mf):
    mol = mf.mol

    numerical_hessian = np.zeros([mol.natm, mol.natm, 3, 3])

    dx = 1e-3
    mol_copy = mol.copy()
    mf_copy = mf.copy()
    for i_atom in range(mol.natm):
        for i_xyz in range(3):
            xyz_p = mol.atom_coords()
            xyz_p[i_atom, i_xyz] += dx
            mol_copy.set_geom_(xyz_p, unit='Bohr')
            mol_copy.build()
            mf_copy.reset(mol_copy)
            mf_copy.kernel()
            assert mf_copy.converged
            grad_obj = mf_copy.Gradients()
            grad_obj.grid_response = True
            gradient_p = grad_obj.kernel()

            xyz_m = mol.atom_coords()
            xyz_m[i_atom, i_xyz] -= dx
            mol_copy.set_geom_(xyz_m, unit='Bohr')
            mol_copy.build()
            mf_copy.reset(mol_copy)
            mf_copy.kernel()
            assert mf_copy.converged
            grad_obj = mf_copy.Gradients()
            grad_obj.grid_response = True
            gradient_m = grad_obj.kernel()

            numerical_hessian[i_atom, :, i_xyz, :] = (gradient_p - gradient_m) / (2 * dx)

    np.set_printoptions(linewidth = np.iinfo(np.int32).max, threshold = np.iinfo(np.int32).max, precision = 16, suppress = True)
    print(repr(numerical_hessian))
    return numerical_hessian

def analytical_d2enlc(mf):
    hess_obj = mf.Hessian()
    hess_obj.auxbasis_response = 2
    analytical_hessian = hess_obj.kernel()
    return analytical_hessian

class KnownValues(unittest.TestCase):
    def test_vv10_only_hessian_loose_grid(self):
        mf = make_mf(mol, nlc_atom_grid_loose, vv10_only = True)

        # reference_hessian = numerical_d2enlc(mf)
        reference_hessian = np.array([[[[ 0.5413749308604832,  0.0605698317981407,  0.40559275408103  ],
         [ 0.0605695286465258,  0.2408850113981842,  0.016911767528327 ],
         [ 0.4055920653028844,  0.0169124716666857,  0.0724893546804606]],

        [[ 0.0131707852795253, -0.0307237099184121, -0.0114345820900752],
         [-0.0047649943765368, -0.3668376984968802, -0.0324727652448731],
         [-0.0077338152550087, -0.0414722118975419,  0.0207466108557153]],

        [[-0.562295256025358 , -0.0125739252867518, -0.4028179542061583],
         [-0.0417710592672815,  0.1458342443204086, -0.0168439755451333],
         [-0.4024495794585636, -0.0045993242231979, -0.0914994143628167]],

        [[ 0.0077495398714267, -0.0172721965744915,  0.0086597822091528],
         [-0.014033475038755 , -0.0198815568815958,  0.0324049732521314],
         [ 0.004591329410053 ,  0.0291590644879158, -0.0017365511174594]]],


       [[[ 0.0131708464857772, -0.0047651280219441, -0.0077335148979674],
         [-0.0307236350601814, -0.3668379269505806, -0.0414720463982055],
         [-0.0114343753296886, -0.0324733040377723,  0.0207468545335154]],

        [[-0.0258453546868043,  0.0281587415109641,  0.0027220547091922],
         [ 0.0281590092847672,  0.4306815756232041,  0.0706533186699554],
         [ 0.0027222669501323,  0.0706536993879681, -0.0182731599106534]],

        [[ 0.0215368066085464, -0.0310659347118603,  0.0033907241797637],
         [-0.0043794634614347, -0.0575045668571028, -0.0112822998570294],
         [ 0.0060732057773905, -0.0237796248731548,  0.0092135532514526]],

        [[-0.0088622983920872,  0.0076723213039143,  0.0016207360147291],
         [ 0.0069440892630501, -0.0063390814265818, -0.0178989724222145],
         [ 0.0026389026107632, -0.0144007704619142, -0.0116872478978514]]],


       [[[-0.5622955870224766, -0.041771533740409 , -0.4024503379456701],
         [-0.0125737954287386,  0.1458344874798456, -0.0045993221637897],
         [-0.4028174697401354, -0.0168448078481376, -0.0914994693321236]],

        [[ 0.0215369951543261, -0.0043793029220751,  0.0060734039165622],
         [-0.0310659608719725, -0.0575047761701697, -0.0237795091053705],
         [ 0.0033909758578969, -0.0112819977839962,  0.0092137892477862]],

        [[ 0.5439213339091253,  0.0465278001948177,  0.3961122787689009],
         [ 0.046527657020734 , -0.0874571742451313,  0.0270891265247153],
         [ 0.396111704275004 ,  0.027089116664103 ,  0.0825494312696184]],

        [[-0.0031627420771785, -0.000376963565446 ,  0.00026465525238  ],
         [-0.0028879007161753, -0.0008725371353491,  0.0012897047358407],
         [ 0.0033147895935892,  0.0010376889905406, -0.0002637512021009]]],


       [[[ 0.0077496285963985, -0.0140336390854756,  0.0045908807760897],
         [-0.0172722945046555, -0.0198810930536197,  0.0291590448459611],
         [ 0.0086598222862611,  0.0324053842888361, -0.0017366048291612]],

        [[-0.0088620870212497,  0.0069446267429996,  0.0026388664590149],
         [ 0.0076721645484272, -0.0063395052087856, -0.0144005685913662],
         [ 0.0016206325941202, -0.0178992830175417, -0.0116874708054882]],

        [[-0.0031627165963943, -0.0028878636563756,  0.0033152008057646],
         [-0.0003769880960736, -0.0008726646132384,  0.0010377828307817],
         [ 0.0002646425472097,  0.001289861231879 , -0.0002637009349771]],

        [[ 0.0042751750857772,  0.0099768759450336, -0.0105449480403697],
         [ 0.0099771180562258,  0.027093262847222 , -0.0157962590908167],
         [-0.0105450974434984, -0.0157959625329829,  0.0136877765640198]]]])

        test_hessian = analytical_d2enlc(mf)

        assert np.linalg.norm(test_hessian - reference_hessian) < 1e-5

    def test_vv10_only_hessian_dense_grid(self):
        mf = make_mf(mol, nlc_atom_grid_dense, vv10_only = True)

        # reference_hessian = numerical_d2enlc(mf)
        reference_hessian = np.array([[[[ 0.5416404993725532,  0.0608578983847252,  0.405978894180703 ],
         [ 0.0608574834080056,  0.2400689461463656,  0.0171075463377135],
         [ 0.4059779348357662,  0.0171076235755407,  0.0714995686751374]],

        [[ 0.0138386340900361, -0.0307592355328623, -0.0114401176648515],
         [-0.0046671378179132, -0.3662175052383532, -0.0328071936290808],
         [-0.0077328516862631, -0.0418507816970504,  0.0212321544802441]],

        [[-0.563274998530483 , -0.0127517718414571, -0.4031507369153253],
         [-0.0421628741809066,  0.146091574420748 , -0.0167173380686281],
         [-0.4027403216952941, -0.0044779496141123, -0.0910389792206923]],

        [[ 0.0077958650368526, -0.0173468909650532,  0.0086119603964763],
         [-0.0140274714006128, -0.019943015002577 ,  0.0324169853417322],
         [ 0.0044952385327979,  0.0292211077311255, -0.0016927438716285]]],


       [[[ 0.0138387560039144, -0.0046673089384441, -0.0077323419120368],
         [-0.0307588367517431, -0.3662175226617492, -0.0418502137962129],
         [-0.0114400630125688, -0.0328069214985405,  0.021232637057611 ]],

        [[-0.0265659543449773,  0.0280395002674183,  0.0028054639573671],
         [ 0.0280392021385217,  0.429965529303189 ,  0.0711121057905828],
         [ 0.0028056348522765,  0.0711121195342557, -0.0189050531800294]],

        [[ 0.0215127542229077, -0.0311011440436992,  0.003443014223059 ],
         [-0.0042378292679501, -0.0574411312149747, -0.0113075605269186],
         [ 0.0060660551914893, -0.0238229217823793,  0.0092254366639288]],

        [[-0.0087855558744132,  0.0077289526516922,  0.0014838637458769],
         [ 0.0069574638860703, -0.0063068751022244, -0.0179543314748343],
         [ 0.0025683729638626, -0.0144822762792041, -0.0115530205787584]]],


       [[[-0.5632748819637268, -0.0421627048510231, -0.4027402202746999],
         [-0.0127516646123427,  0.146091701611617 , -0.0044775930250207],
         [-0.4031499106822434, -0.0167175452947532, -0.0910395656930629]],

        [[ 0.0215125060438366, -0.004237961558573 ,  0.0060659230934901],
         [-0.0311013177296468, -0.0574412322524864, -0.0238229131542811],
         [ 0.0034436822571662, -0.0113067072913253,  0.0092262312615388]],

        [[ 0.5449168976361385,  0.0467545932958391,  0.39637628559408  ],
         [ 0.0467544222333416, -0.0877766966325133,  0.0269892077531253],
         [ 0.3963764287284732,  0.0269895482595817,  0.0821100841089661]],

        [[-0.0031545216759299, -0.0003539268609576,  0.0002980115942353],
         [-0.0029014399064442, -0.000873772607296 ,  0.0013112984246777],
         [ 0.0033297997101278,  0.0010347043625236, -0.000296749674833 ]]],


       [[[ 0.0077957610022938, -0.0140283379232997,  0.0044947969496389],
         [-0.0173471159068406, -0.0199427879810088,  0.0292208944006611],
         [ 0.0086119199798063,  0.0324162459479638, -0.0016927109756648]],

        [[-0.0087851794747067,  0.0069578719728014,  0.0025676793730112],
         [ 0.007728964275866 , -0.0063071480100874, -0.0144821312318966],
         [ 0.0014834415600941, -0.0179537907998295, -0.0115533838876969]],

        [[-0.0031550341894615, -0.002901551706791 ,  0.00333047012957  ],
         [-0.0003538818964532, -0.0008738109251727,  0.0010350432497752],
         [ 0.000298025255141 ,  0.0013112611216282, -0.0002967774181961]],

        [[ 0.0041444526662771,  0.0099720176226226, -0.0103929464312369],
         [ 0.0099720335363651,  0.0271237469290087, -0.0157738064162083],
         [-0.0103933867661443, -0.0157737161772531,  0.0135428722736197]]]])

        test_hessian = analytical_d2enlc(mf)

        assert np.linalg.norm(test_hessian - reference_hessian) < 1e-5

    def test_vv10_only_hessian_loose_grid_density_fitting(self):
        mf = make_mf(mol, nlc_atom_grid_loose, vv10_only = True)
        mf = mf.density_fit(auxbasis = "def2-universal-jkfit")

        # reference_hessian = numerical_d2enlc(mf)
        reference_hessian = np.array([[[[ 0.5413053494345288,  0.0605686280552575,  0.4055275236959921],
         [ 0.0605682638872285,  0.2408931663584468,  0.0169173246811205],
         [ 0.4055267322692346,  0.0169176294742002,  0.0724490550988999]],

        [[ 0.0131531632653475, -0.0307306976363719, -0.0114375466762073],
         [-0.0047663120967718, -0.3668616426422133, -0.0324779015528076],
         [-0.0077385447580167, -0.0414937725610187,  0.0207363102350255]],

        [[-0.5622177980644238, -0.0125638360176095, -0.4027540724504952],
         [-0.0417612962486658,  0.1458541259191093, -0.0168480527479309],
         [-0.4023962848838103, -0.0046001928795669, -0.0914395903698351]],

        [[ 0.0077592853537367, -0.0172740944129612,  0.0086640954243267],
         [-0.0140406555458883, -0.0198856492766297,  0.0324086296203951],
         [ 0.0046080973694629,  0.0291763359676345, -0.001745774897588 ]]],


       [[[ 0.0131530271189062, -0.0047667508651372, -0.0077387940789486],
         [-0.0307306707223454, -0.3668613427096901, -0.0414938106422236],
         [-0.0114374061589428, -0.0324778990767882,  0.0207365581101349]],

        [[-0.0258303940148565,  0.0281560262322955,  0.0027163758561377],
         [ 0.0281555258540116,  0.4307213968646195,  0.0706579422473652],
         [ 0.0027163892884936,  0.0706575153435196, -0.0182525392777855]],

        [[ 0.0215437521704498, -0.031065250632456 ,  0.0033997270166841],
         [-0.0043718479607602, -0.0575119986320205, -0.0112687362232577],
         [ 0.0060786340931873, -0.0237770238489809,  0.0092134722686765]],

        [[-0.0088663852750859,  0.007675975261634 ,  0.0016226912075701],
         [ 0.0069469928330457, -0.0063480551754924, -0.017895395385048 ],
         [ 0.0026423827781952, -0.0144025924230795, -0.0116974911332224]]],


       [[[-0.5622179076735234, -0.0417617038381835, -0.4023965938688145],
         [-0.0125638692706209,  0.1458543520778122, -0.0045999875052938],
         [-0.4027532090444819, -0.016848712800055 , -0.09143912441123  ]],

        [[ 0.0215434248865623, -0.0043718751738808,  0.0060784583848505],
         [-0.0310655110413761, -0.057512148373462 , -0.0237769825798262],
         [ 0.0033995240770988, -0.0112685248669919,  0.0092131450581956]],

        [[ 0.5438473684373779,  0.0465173417288356,  0.3960512109569825],
         [ 0.0465173482910863, -0.0874671442658848,  0.0270847542950259],
         [ 0.396050649870805 ,  0.0270849293549924,  0.0824872761419071]],

        [[-0.0031728856414448, -0.0003837627161052,  0.000266924529424 ],
         [-0.0028879679814797, -0.0008750594440998,  0.0012922157903161],
         [ 0.0033030350968244,  0.0010323083116937, -0.000261296785431 ]]],


       [[[ 0.007759424597964 , -0.0140414951879109,  0.0046082296218941],
         [-0.0172744184254725, -0.0198845871617337,  0.0291762698055864],
         [ 0.0086640719340059,  0.0324090811663069, -0.0017458744177579]],

        [[-0.008865751819756 ,  0.006947634455301 ,  0.0026416151949205],
         [ 0.0076758170481674, -0.0063490771715635, -0.0144021384945736],
         [ 0.0016224402466201, -0.0178953669047743, -0.0116972587751452]],

        [[-0.003173264948142 , -0.002888141447499 ,  0.0033028289828652],
         [-0.0003837242705806, -0.000875297301639 ,  0.0010324928561012],
         [ 0.0002667066245632,  0.0012922911618585, -0.0002616989235316]],

        [[ 0.0042795921706973,  0.0099820021799701, -0.0105526738017891],
         [ 0.0099823256474729,  0.0271089616321329, -0.0158066241675581],
         [-0.0105532188046376, -0.0158060054234743,  0.013704832118544 ]]]])

        test_hessian = analytical_d2enlc(mf)

        assert np.linalg.norm(test_hessian - reference_hessian) < 2e-4

    # # TODO: Supress the diff between analytical and numerical hessian below 1e-3
    # def test_wb97xv_hessian_loose_grid(self):
    #     mf = make_mf(mol, nlc_atom_grid_loose, vv10_only = False)

    #     reference_hessian = numerical_d2enlc(mf)

    #     test_hessian = analytical_d2enlc(mf)

    #     assert np.linalg.norm(test_hessian - reference_hessian) < 1e-15

if __name__ == "__main__":
    print("Full Tests for RKS Hessian with VV10")
    unittest.main()
